language: sh
name: HumanEval_109_move_one_ball
results:
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local i\n    local j\n    local k\n    local -i n\n\
    \    local -i m\n    local -i p\n    local -i q\n    local -i r\n    local -i\
    \ s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local\
    \ -i x\n    local -i y\n    local -i z\n    local -i aa\n    local -i bb\n   \
    \ local -i cc\n    local -i dd\n    local -i ee\n    local -i ff\n    local -i\
    \ gg\n    local -i hh\n    local -i ii\n    local -i jj\n    local -i kk\n   \
    \ local -i ll\n    local -i mm\n    local -i nn\n    local -i oo\n    local -i\
    \ pp\n    local -i qq\n    local -i rr\n    local -i ss\n    local -i tt\n   \
    \ local -i uu\n    local -i vv\n    local -i ww\n    local -i xx\n    local -i\
    \ yy\n    local -i zz\n    local -i aaa\n    local -i bbb\n    local -i ccc\n\
    \    local -i ddd\n    local -i eee\n    local -i fff\n    local -i ggg\n    local\
    \ -i hhh\n    local -i iii\n    local -i jjj\n    local -i kkk\n    local -i lll\n\
    \    local -i mmm\n    local -i nnn\n    local -i ooo\n    local -i ppp\n    local\
    \ -i qqq\n    local -i rrr\n    local -i sss\n    local -i ttt\n    local -i uuu\n\
    \    local -i vvv\n    local -i www\n    local -i xxx\n    local -i yyy\n    local\
    \ -i zzz\n    local -i aaaa\n    local -i bbbb\n    local -i cccc\n    local -i\
    \ dddd\n    local -i eeee\n    local -i ffff\n    local -i gggg\n    local -i\
    \ hhhh\n   \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i k=0\n    local -i n=${#arr[@]}\n    local -i max=0\n    local -i max_i=0\n\
    \    local -i max_j=0\n    local -i max_k=0\n    local -i max_n=0\n    local -i\
    \ max_n_i=0\n    local -i max_n_j=0\n    local -i max_n_k=0\n    local -i max_n_n=0\n\
    \    local -i max_n_max=0\n    local -i max_n_max_i=0\n    local -i max_n_max_j=0\n\
    \    local -i max_n_max_k=0\n    local -i max_n_max_n=0\n    local -i max_n_max_n_i=0\n\
    \    local -i max_n_max_n_j=0\n    local -i max_n_max_n_k=0\n    local -i max_n_max_n_n=0\n\
    \    local -i max_n_max_n_max=0\n    local -i max_n_max_n_max_i=0\n    local -i\
    \ max_n_max_n_max_j=0\n    local -i max_n_max_n_max_k=0\n    local -i max_n_max_n_max_n=0\n\
    \    local -i max_n_max_n_max_n_i=0\n    local -i max_n_max_n_max_n_j=0\n    local\
    \ -i max_n_max_n_max_n_k=0\n    local -i max_n_max_n_max_n_n=0\n    local -i max_n_max_n_max_n_max=0\n\
    \    local -i max_n_max_n_max_n_max_i=0\n    local -i max_n_max_n_max_n_max_j=0\n\
    \    local -\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i k=0\n    local -i n=${#arr[@]}\n    local -i min=0\n    local -i min_i=0\n\
    \    local -i min_j=0\n    local -i min_k=0\n    local -i min_n=0\n    local -i\
    \ min_count=0\n    local -i count=0\n    local -i max_count=0\n    local -i max_i=0\n\
    \    local -i max_j=0\n    local -i max_k=0\n    local -i max_n=0\n    local -i\
    \ max_min=0\n    local -i max_min_i=0\n    local -i max_min_j=0\n    local -i\
    \ max_min_k=0\n    local -i max_min_n=0\n    local -i max_min_count=0\n    local\
    \ -i max_min_max_count=0\n    local -i max_min_max_i=0\n    local -i max_min_max_j=0\n\
    \    local -i max_min_max_k=0\n    local -i max_min_max_n=0\n    local -i max_min_max_min=0\n\
    \    local -i max_min_max_min_i=0\n    local -i max_min_max_min_j=0\n    local\
    \ -i max_min_max_min_k=0\n    local -i max_min_max_min_n=0\n    local -i max_min_max_min_count=0\n\
    \    local -i max_min_max_min_max_count=0\n    local -i max_min_max_min_max_i=0\n\
    \    local -i max_min_max_min_max_j=0\n    local -i max_min_max_min_max_k=0\n\
    \    local -i max_min_max_min_max_n=0\n    local -i max_min_max_min_max_min=0\n\
    \    local -i max\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i n\n    local -i t\n    local -i x\n    local -i y\n    local -i z\n    IFS='\
    \ ' read -r -a arr <<< \"$1\"\n    n=${#arr[@]}\n    if (( n == 0 )); then\n \
    \       echo true\n        return\n    fi\n    for (( i = 0; i < n; i++ )); do\n\
    \        for (( j = i + 1; j < n; j++ )); do\n            if (( arr[i] > arr[j]\
    \ )); then\n                t=${arr[i]}\n                arr[i]=${arr[j]}\n  \
    \              arr[j]=$t\n            fi\n        done\n    done\n    for (( i\
    \ = 0; i < n; i++ )); do\n        for (( j = i + 1; j < n; j++ )); do\n      \
    \      if (( arr[i] > arr[j] )); then\n                echo false\n          \
    \      return\n            fi\n        done\n    done\n    echo true\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000665
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i k=0\n    local -i n=${#arr[@]}\n    local -i m=0\n    local -i t=0\n    local\
    \ -i flag=0\n    local -i flag1=0\n    local -i flag2=0\n    local -i flag3=0\n\
    \    local -i flag4=0\n    local -i flag5=0\n    local -i flag6=0\n    local -i\
    \ flag7=0\n    local -i flag8=0\n    local -i flag9=0\n    local -i flag10=0\n\
    \    local -i flag11=0\n    local -i flag12=0\n    local -i flag13=0\n    local\
    \ -i flag14=0\n    local -i flag15=0\n    local -i flag16=0\n    local -i flag17=0\n\
    \    local -i flag18=0\n    local -i flag19=0\n    local -i flag20=0\n    local\
    \ -i flag21=0\n    local -i flag22=0\n    local -i flag23=0\n    local -i flag24=0\n\
    \    local -i flag25=0\n    local -i flag26=0\n    local -i flag27=0\n    local\
    \ -i flag28=0\n    local -i flag29=0\n    local -i flag30=0\n    local -i flag31=0\n\
    \    local -i flag32=0\n    local -i flag33=0\n    local -i flag34=0\n    local\
    \ -i flag35=0\n    local -i flag36=0\n    local -i flag37=0\n    local -i flag38=0\n\
    \    local -i flag39=0\n    local -i flag40=0\n    local -i flag41=0\n    local\
    \ -i flag42=0\n    local -i flag43=0\n    local -i flag44=0\n    local -i flag45=0\n\
    \    local -i flag46=0\n    local -i flag47=0\n    local -i flag48=0\n    local\
    \ -i flag49=\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i n\n    local\
    \ -i temp\n    local -i count\n    local -i flag\n    arr=($1)\n    n=${#arr[@]}\n\
    \    flag=0\n    for ((i=0; i<n; i++))\n    do\n        count=0\n        for ((j=0;\
    \ j<n-1; j++))\n        do\n            if [[ ${arr[j]} -gt ${arr[j+1]} ]]\n \
    \           then\n                temp=${arr[j]}\n                arr[j]=${arr[j+1]}\n\
    \                arr[j+1]=$temp\n                count=$((count+1))\n        \
    \    fi\n        done\n        if [[ $count -eq 0 ]]\n        then\n         \
    \   flag=1\n            break\n        fi\n    done\n    if [[ $flag -eq 1 ]]\n\
    \    then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\
    \ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000665
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i n=${#arr[@]}\n    local -i min=0\n    local -i min_idx=0\n    local -i max=0\n\
    \    local -i max_idx=0\n    local -i tmp=0\n    local -i tmp_idx=0\n    local\
    \ -i count=0\n    local -i flag=0\n    local -i flag_idx=0\n    local -i flag_idx_2=0\n\
    \    local -i flag_idx_3=0\n    local -i flag_idx_4=0\n    local -i flag_idx_5=0\n\
    \    local -i flag_idx_6=0\n    local -i flag_idx_7=0\n    local -i flag_idx_8=0\n\
    \    local -i flag_idx_9=0\n    local -i flag_idx_10=0\n    local -i flag_idx_11=0\n\
    \    local -i flag_idx_12=0\n    local -i flag_idx_13=0\n    local -i flag_idx_14=0\n\
    \    local -i flag_idx_15=0\n    local -i flag_idx_16=0\n    local -i flag_idx_17=0\n\
    \    local -i flag_idx_18=0\n    local -i flag_idx_19=0\n    local -i flag_idx_20=0\n\
    \    local -i flag_idx_21=0\n    local -i flag_idx_22=0\n    local -i flag_idx_23=0\n\
    \    local -i flag_idx_24=0\n    local -i flag_idx_25=0\n    local -i flag_idx_26=0\n\
    \    local -i flag_idx_27=0\n    local -i flag_idx_28=0\n    local -i flag_idx_29=0\n\
    \    local -i flag_idx_30=0\n    local -i flag_idx_31\n}\n\ncandidate() {\n  \
    \  move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000665
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i n=${#arr[@]}\n    local -i max=0\n    local -i max_index=0\n    local -i\
    \ min=0\n    local -i min_index=0\n    local -i temp=0\n    local -i flag=0\n\
    \    local -i flag1=0\n    local -i flag2=0\n    local -i flag3=0\n    local -i\
    \ flag4=0\n    local -i flag5=0\n    local -i flag6=0\n    local -i flag7=0\n\
    \    local -i flag8=0\n    local -i flag9=0\n    local -i flag10=0\n    local\
    \ -i flag11=0\n    local -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n\
    \    local -i flag15=0\n    local -i flag16=0\n    local -i flag17=0\n    local\
    \ -i flag18=0\n    local -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n\
    \    local -i flag22=0\n    local -i flag23=0\n    local -i flag24=0\n    local\
    \ -i flag25=0\n    local -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n\
    \    local -i flag29=0\n    local -i flag30=0\n    local -i flag31=0\n    local\
    \ -i flag32=0\n    local -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n\
    \    local -i flag36=0\n    local -i flag37=0\n    local -i flag38=0\n    local\
    \ -i flag39=0\n    local -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n\
    \    local -i flag43=0\n    local -i flag44=0\n    local -i flag45=0\n    local\
    \ -i flag46=0\n    local -i flag\n}\n\ncandidate() {\n    move_one_ball \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i max=0\n    local -i max_index=0\n    local -i min=0\n    local -i\
    \ min_index=0\n    local -i temp=0\n    local -i count=0\n    local -i flag=0\n\
    \    local -i flag1=0\n    local -i flag2=0\n    local -i flag3=0\n    local -i\
    \ flag4=0\n    local -i flag5=0\n    local -i flag6=0\n    local -i flag7=0\n\
    \    local -i flag8=0\n    local -i flag9=0\n    local -i flag10=0\n    local\
    \ -i flag11=0\n    local -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n\
    \    local -i flag15=0\n    local -i flag16=0\n    local -i flag17=0\n    local\
    \ -i flag18=0\n    local -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n\
    \    local -i flag22=0\n    local -i flag23=0\n    local -i flag24=0\n    local\
    \ -i flag25=0\n    local -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n\
    \    local -i flag29=0\n    local -i flag30=0\n    local -i flag31=0\n    local\
    \ -i flag32=0\n    local -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n\
    \    local -i flag36=0\n    local -i flag37=0\n    local -i flag38=0\n    local\
    \ -i flag39=0\n    local -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n\
    \    local -i flag43=0\n    local -i flag44=0\n    local -i flag45=0\n    local\
    \ -i flag46=0\n\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbl32ms8f.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local -i n=${#arr[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local\
    \ -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n\
    \    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local\
    \ -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\
    \    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n\
    \    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n\
    \    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n\
    \    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n\
    \    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n\
    \    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n\
    \    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n\
    \    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n\
    \    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n\
    \    local -i kkk=0\n    local -i lll=0\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    # $1 is a space-separated list\n    # $2 is the index of the ball to\
    \ move\n    # $3 is the index of the ball to move to\n    # $4 is the index of\
    \ the ball to move to\n    # $5 is the index of the ball to move to\n    # $6\
    \ is the index of the ball to move to\n    # $7 is the index of the ball to move\
    \ to\n    # $8 is the index of the ball to move to\n    # $9 is the index of the\
    \ ball to move to\n    # ${10} is the index of the ball to move to\n    # ${11}\
    \ is the index of the ball to move to\n    # ${12} is the index of the ball to\
    \ move to\n    # ${13} is the index of the ball to move to\n    # ${14} is the\
    \ index of the ball to move to\n    # ${15} is the index of the ball to move to\n\
    \    # ${16} is the index of the ball to move to\n    # ${17} is the index of\
    \ the ball to move to\n    # ${18} is the index of the ball to move to\n    #\
    \ ${19} is the index of the ball to move to\n    # ${20} is the index of the ball\
    \ to move to\n    # ${21} is the index of the ball to move to\n    # ${22} is\
    \ the index of the ball to move to\n    # ${23} is the index of the ball to move\
    \ to\n    # ${24} is the index of the ball to move to\n    # ${25} is the index\
    \ of the ball to move to\n    # ${26} is the index of the ball to move to\n  \
    \  # ${27} is the index of the ball to move to\n    # ${28} is the index of the\
    \ ball to move to\n    # ${29} is the index of the ball to move to\n    # ${30}\
    \ is the index of the ball to move to\n    # ${31} is the index of the ball to\
    \ move to\n    # ${32} is the index of the ball to move to\n    # ${33} is the\
    \ index of the ball to move to\n    # ${34} is the index of the ball to move to\n\
    \    # ${35} is the index of the ball to move\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0ciw6jr_.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmp0ciw6jr_.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i tmp=0\n    local -i flag=0\n    for ((i=0; i<n; i++))\n    do\n\
    \        for ((j=i+1; j<n; j++))\n        do\n            if [[ ${arr[i]} -gt\
    \ ${arr[j]} ]]\n            then\n                tmp=${arr[i]}\n            \
    \    arr[i]=${arr[j]}\n                arr[j]=$tmp\n                flag=1\n \
    \           fi\n        done\n    done\n    if [[ $flag -eq 0 ]]\n    then\n \
    \       echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplreb6s0s.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i\n    local -i len=${#arr[@]}\n    local\
    \ -i last_index=$((len-1))\n    local -i last_value=${arr[$last_index]}\n    for\
    \ ((i=last_index; i>0; i--)); do\n        arr[$i]=${arr[$((i-1))]}\n    done\n\
    \    arr[0]=$last_value\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp434evmnt.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    /tmp/tmp434evmnt.sh: line 26: arr: bad array subscript

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i n\n    local\
    \ -i tmp\n    arr=($1)\n    n=${#arr[@]}\n    for ((i=0; i<n-1; i++)); do\n  \
    \      for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]}\
    \ ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    echo\
    \ \"${arr[@]}\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i n=${#arr[@]}\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i min=0\n    local -i min_index=0\n   \
    \ local -i temp=0\n    local -i flag=0\n    local -i flag1=0\n    local -i flag2=0\n\
    \    local -i flag3=0\n    local -i flag4=0\n    local -i flag5=0\n    local -i\
    \ flag6=0\n    local -i flag7=0\n    local -i flag8=0\n    local -i flag9=0\n\
    \    local -i flag10=0\n    local -i flag11=0\n    local -i flag12=0\n    local\
    \ -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n    local -i flag16=0\n\
    \    local -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n    local\
    \ -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n    local -i flag23=0\n\
    \    local -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n    local\
    \ -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n    local -i flag30=0\n\
    \    local -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n    local\
    \ -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n    local -i flag37=0\n\
    \    local -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n    local\
    \ -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n    local -i flag44=0\n\
    \    local -i flag45=0\n    local -i flag46=0\n    local -i flag47=0\n    local\
    \ -i flag48=0\n\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppplkb3xr.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i n=${#arr[@]}\n    local -i max=0\n    local -i max_i=0\n    local -i max_j=0\n\
    \    local -i max_k=0\n    local -i max_l=0\n    local -i max_m=0\n    local -i\
    \ max_n=0\n    local -i max_o=0\n    local -i max_p=0\n    local -i max_q=0\n\
    \    local -i max_r=0\n    local -i max_s=0\n    local -i max_t=0\n    local -i\
    \ max_u=0\n    local -i max_v=0\n    local -i max_w=0\n    local -i max_x=0\n\
    \    local -i max_y=0\n    local -i max_z=0\n    local -i max_aa=0\n    local\
    \ -i max_bb=0\n    local -i max_cc=0\n    local -i max_dd=0\n    local -i max_ee=0\n\
    \    local -i max_ff=0\n    local -i max_gg=0\n    local -i max_hh=0\n    local\
    \ -i max_ii=0\n    local -i max_jj=0\n    local -i max_kk=0\n    local -i max_ll=0\n\
    \    local -i max_mm=0\n    local -i max_nn=0\n    local -i max_oo=0\n    local\
    \ -i max_pp=0\n    local -i max_qq=0\n    local -i max_rr=0\n    local -i max_ss=0\n\
    \    local -i max_tt=0\n    local -i max_uu=0\n    local -i max_vv=0\n    local\
    \ -i max_ww=0\n    local -i max_xx=0\n    local -i max_yy=0\n    local -i max_zz=0\n\
    \    local -i max_aaa=0\n    local -i max_bbb=0\n    local\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local last=${arr[$len-1]}\n\
    \    local i\n    for ((i=len-1; i>0; i--)); do\n        arr[$i]=${arr[$i-1]}\n\
    \    done\n    arr[0]=$last\n    echo ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    arr=($1)\n    local -i len=${#arr[@]}\n    local -i\
    \ i=0\n    local -i j=0\n    local -i min=0\n    local -i min_idx=0\n    local\
    \ -i tmp=0\n    local -i flag=0\n    for ((i=0; i<len; i++))\n    do\n       \
    \ min=${arr[i]}\n        min_idx=$i\n        for ((j=i+1; j<len; j++))\n     \
    \   do\n            if [ ${arr[j]} -lt $min ]\n            then\n            \
    \    min=${arr[j]}\n                min_idx=$j\n            fi\n        done\n\
    \        if [ $min_idx -ne $i ]\n        then\n            tmp=${arr[i]}\n   \
    \         arr[i]=${arr[min_idx]}\n            arr[min_idx]=$tmp\n            flag=1\n\
    \        fi\n    done\n    if [ $flag -eq 1 ]\n    then\n        echo ${arr[@]}\n\
    \    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i n=${#arr[@]}\n    local -i m=0\n    local -i max=0\n    local -i\
    \ min=0\n    local -i max_i=0\n    local -i min_i=0\n    local -i max_j=0\n  \
    \  local -i min_j=0\n    local -i max_k=0\n    local -i min_k=0\n    local -i\
    \ max_m=0\n    local -i min_m=0\n    local -i max_n=0\n    local -i min_n=0\n\
    \    local -i max_diff=0\n    local -i min_diff=0\n    local -i max_diff_i=0\n\
    \    local -i min_diff_i=0\n    local -i max_diff_j=0\n    local -i min_diff_j=0\n\
    \    local -i max_diff_k=0\n    local -i min_diff_k=0\n    local -i max_diff_m=0\n\
    \    local -i min_diff_m=0\n    local -i max_diff_n=0\n    local -i min_diff_n=0\n\
    \    local -i max_diff_diff=0\n    local -i min_diff_diff=0\n    local -i max_diff_diff_i=0\n\
    \    local -i min_diff_diff_i=0\n    local -i max_diff_diff_j=0\n    local -i\
    \ min_diff_diff_j=0\n    local -i max_diff_diff_k=0\n    local -i min_diff_diff_k=0\n\
    \    local -i max_diff_diff_m=0\n    local -i min_diff_diff_m=0\n    local -i\
    \ max_diff_diff_n=0\n    local -i min_diff_diff_n=0\n    local -i max_diff_diff_diff=0\n\
    \    local -i min_diff_diff_diff=0\n    local -i max_diff_\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i n=${#arr[@]}\n    local -i max=0\n    local -i max_index=0\n    local -i\
    \ min=0\n    local -i min_index=0\n    local -i temp=0\n    local -i flag=0\n\
    \    for ((i=0; i<n; i++))\n    do\n        if [ ${arr[$i]} -gt $max ]\n     \
    \   then\n            max=${arr[$i]}\n            max_index=$i\n        fi\n \
    \   done\n    for ((i=0; i<n; i++))\n    do\n        if [ ${arr[$i]} -lt $min\
    \ ]\n        then\n            min=${arr[$i]}\n            min_index=$i\n    \
    \    fi\n    done\n    if [ $max_index -eq $min_index ]\n    then\n        return\
    \ 0\n    fi\n    if [ $max_index -gt $min_index ]\n    then\n        for ((i=min_index;\
    \ i<max_index; i++))\n        do\n            if [ ${arr[$i]} -gt ${arr[$i+1]}\
    \ ]\n            then\n                flag=1\n                break\n       \
    \     fi\n        done\n        if [ $flag -eq 0 ]\n        then\n           \
    \ temp=${arr[$max_index]}\n            for ((i=max_index; i>min_index; i--))\n\
    \            do\n                arr[$i]=${arr[$i-1]}\n            done\n    \
    \        arr[$min_index]=$temp\n            echo \"${arr[@]}\"\n            return\
    \ 0\n        else\n            return 1\n        fi\n    else\n        for ((i=max_index;\
    \ i<min_index; i++))\n        do\n            if [ ${arr[$i]} -gt ${arr[$i+1]}\
    \ ]\n            then\n                flag=1\n                break\n       \
    \     fi\n        done\n        if [ $flag -eq 0 ]\n        then\n           \
    \ temp=${arr[$min_index]}\n            for ((i=min_index; i\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsusi4jqe.sh: line 87: unexpected EOF while looking for matching
    `)''

    /tmp/tmpsusi4jqe.sh: line 104: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i n=${#arr[@]}\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i max=0\n    local -i max_index=0\n   \
    \ local -i min=0\n    local -i min_index=0\n    local -i temp=0\n    local -i\
    \ temp_index=0\n    local -i count=0\n    local -i flag=0\n    local -i flag1=0\n\
    \    local -i flag2=0\n    local -i flag3=0\n    local -i flag4=0\n    local -i\
    \ flag5=0\n    local -i flag6=0\n    local -i flag7=0\n    local -i flag8=0\n\
    \    local -i flag9=0\n    local -i flag10=0\n    local -i flag11=0\n    local\
    \ -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n\
    \    local -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n    local\
    \ -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n\
    \    local -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n    local\
    \ -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n\
    \    local -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n    local\
    \ -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n\
    \    local -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n    local\
    \ -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n\
    \    local -i flag44=0\n\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxn7o7ncz.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -a arr_sorted=($(printf \"%s\\n\" \"\
    ${arr[@]}\" | sort -n))\n    local -a arr_sorted_rev=($(printf \"%s\\n\" \"${arr_sorted[@]}\"\
    \ | tac))\n    local -a arr_sorted_rev_shifted=(${arr_sorted_rev[@]:1} ${arr_sorted_rev[0]})\n\
    \    local -a arr_sorted_rev_shifted_rev=($(printf \"%s\\n\" \"${arr_sorted_rev_shifted[@]}\"\
    \ | tac))\n    local -a arr_sorted_rev_shifted_rev_shifted=(${arr_sorted_rev_shifted_rev[@]:1}\
    \ ${arr_sorted_rev_shifted_rev[0]})\n    local -a arr_sorted_rev_shifted_rev_shifted_rev=($(printf\
    \ \"%s\\n\" \"${arr_sorted_rev_shifted_rev_shifted[@]}\" | tac))\n    local -a\
    \ arr_sorted_rev_shifted_rev_shifted_rev_shifted=(${arr_sorted_rev_shifted_rev_shifted_rev[@]:1}\
    \ ${arr_sorted_rev_shifted_rev_shifted_rev[0]})\n    local -a arr_sorted_rev_shifted_rev_shifted_rev_shifted_rev=($(printf\
    \ \"%s\\n\" \"${arr_sorted_rev_shifted_rev_shifted_rev_shifted[@]}\" | tac))\n\
    \    local -a arr_sorted_rev_shifted_rev_shifted_rev_shifted_rev_shifted=(${arr_sorted_rev_shifted_rev_shifted_rev_shifted_rev[@]:1}\
    \ ${arr_sorted_rev_shifted_rev_shifted_rev_shifted_rev[0]})\n    local -a arr_sorted_rev_shifted_rev_shifted_rev_shifted_rev_shifted_rev=($(printf\
    \ \"%s\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo19kgcnl.sh: line 45: unexpected EOF while looking for matching
    `"''

    /tmp/tmpo19kgcnl.sh: line 49: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i k=0\n    local -i n=${#arr[@]}\n    local -i min=0\n    local -i min_index=0\n\
    \    local -i temp=0\n    local -i flag=0\n    for (( i=0; i<n; i++ ))\n    do\n\
    \        min=${arr[i]}\n        min_index=$i\n        for (( j=i+1; j<n; j++ ))\n\
    \        do\n            if [[ ${arr[j]} -lt $min ]]\n            then\n     \
    \           min=${arr[j]}\n                min_index=$j\n            fi\n    \
    \    done\n        if [[ $min_index -ne $i ]]\n        then\n            temp=${arr[i]}\n\
    \            arr[i]=${arr[min_index]}\n            arr[min_index]=$temp\n    \
    \        flag=1\n        fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n  \
    \      echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpt3yrnv5i.sh: line 33: 3 4 5 1 2: syntax error in expression (error
    token is "4 5 1 2")

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    arr=($1)\n    local -i i\n    local -i j\n    local\
    \ -i n\n    n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1;\
    \ j<n; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n       \
    \         local -i tmp\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    echo\
    \ ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i tmp=0\n    local -i max=0\n    local -i max_i=0\n    local -i max_j=0\n\
    \    local -i max_tmp=0\n    local -i max_n=0\n    local -i max_max=0\n    local\
    \ -i max_max_i=0\n    local -i max_max_j=0\n    local -i max_max_tmp=0\n    local\
    \ -i max_max_n=0\n    local -i max_max_max=0\n    local -i max_max_max_i=0\n \
    \   local -i max_max_max_j=0\n    local -i max_max_max_tmp=0\n    local -i max_max_max_n=0\n\
    \    local -i max_max_max_max=0\n    local -i max_max_max_max_i=0\n    local -i\
    \ max_max_max_max_j=0\n    local -i max_max_max_max_tmp=0\n    local -i max_max_max_max_n=0\n\
    \    local -i max_max_max_max_max=0\n    local -i max_max_max_max_max_i=0\n  \
    \  local -i max_max_max_max_max_j=0\n    local -i max_max_max_max_max_tmp=0\n\
    \    local -i max_max_max_max_max_n=0\n    local -i max_max_max_max_max_max=0\n\
    \    local -i max_max_max_max_max_max_i=0\n    local -i max_max_max_max_max_max_j=0\n\
    \    local -i max_max_max_max_max_max_tmp=0\n    local -i max_max_max_max_max_max_n=0\n\
    \    local -i max_max_max_max_max_max_max=0\n    local -i max_max_\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzceotnuq.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i n\n    local -i j\n    local\
    \ -i k\n    local -i l\n    local -i m\n    local -i p\n    local -i q\n    local\
    \ -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local\
    \ -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i aa\n    local\
    \ -i bb\n    local -i cc\n    local -i dd\n    local -i ee\n    local -i ff\n\
    \    local -i gg\n    local -i hh\n    local -i ii\n    local -i jj\n    local\
    \ -i kk\n    local -i ll\n    local -i mm\n    local -i nn\n    local -i oo\n\
    \    local -i pp\n    local -i qq\n    local -i rr\n    local -i ss\n    local\
    \ -i tt\n    local -i uu\n    local -i vv\n    local -i ww\n    local -i xx\n\
    \    local -i yy\n    local -i zz\n    local -i aaa\n    local -i bbb\n    local\
    \ -i ccc\n    local -i ddd\n    local -i eee\n    local -i fff\n    local -i ggg\n\
    \    local -i hhh\n    local -i iii\n    local -i jjj\n    local -i kkk\n    local\
    \ -i lll\n    local -i mmm\n    local -i nnn\n    local -i ooo\n    local -i ppp\n\
    \    local -i qqq\n    local -i rrr\n    local -i sss\n    local -i ttt\n    local\
    \ -i uuu\n    local -i vvv\n    local -i www\n    local -i xxx\n    local -i yyy\n\
    \    local -i zzz\n    local -i aaaa\n    local -i bbbb\n    local -i cccc\n \
    \   local -i dddd\n    local -i eeee\n    local -i ffff\n    local -i\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i N\n    local -i last_ball\n\
    \    local -i last_ball_position\n    local -i first_ball\n    local -i first_ball_position\n\
    \    local -i ball_to_move\n    local -i ball_to_move_position\n    local -i ball_to_move_position_new\n\
    \    local -i ball_to_move_new\n    local -i ball_to_move_position_old\n    local\
    \ -i ball_to_move_old\n    local -i ball_to_move_position_new_old\n    local -i\
    \ ball_to_move_new_old\n    local -i ball_to_move_position_old_new\n    local\
    \ -i ball_to_move_old_new\n    local -i ball_to_move_position_new_old_new\n  \
    \  local -i ball_to_move_new_old_new\n    local -i ball_to_move_position_old_new_old\n\
    \    local -i ball_to_move_old_new_old\n    local -i ball_to_move_position_new_old_new_old\n\
    \    local -i ball_to_move_new_old_new_old\n    local -i ball_to_move_position_old_new_old_new\n\
    \    local -i ball_to_move_old_new_old_new\n    local -i ball_to_move_position_new_old_new_old_new\n\
    \    local -i ball_to_move_new_old_new_old_new\n    local -i ball_to_move_position_old_new_old_new_old\n\
    \    local -i ball_to_move_old_new_old_new_old\n    local -i ball_to_move_position_new_old_new_old_new_old\n\
    \    local -i ball_to_move_new_old_new_old_new_old\n    local -i ball_to_move_position_old_new_old_new_old_new\n\
    \    local -i ball_to_move_old_new_old_new_old_new\n    local -\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i n=${#arr[@]}\n    local -i max_index=0\n    local -i max_value=0\n    local\
    \ -i min_index=0\n    local -i min_value=0\n    local -i temp=0\n    local -i\
    \ temp_index=0\n    local -i temp_value=0\n    local -i flag=0\n    local -i flag2=0\n\
    \    local -i flag3=0\n    local -i flag4=0\n    local -i flag5=0\n    local -i\
    \ flag6=0\n    local -i flag7=0\n    local -i flag8=0\n    local -i flag9=0\n\
    \    local -i flag10=0\n    local -i flag11=0\n    local -i flag12=0\n    local\
    \ -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n    local -i flag16=0\n\
    \    local -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n    local\
    \ -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n    local -i flag23=0\n\
    \    local -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n    local\
    \ -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n    local -i flag30=0\n\
    \    local -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n    local\
    \ -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n    local -i flag37=0\n\
    \    local -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n    local\
    \ -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n    local -i flag44=0\n\
    \    local -i flag45=0\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i k=0\n    local -i n=${#arr[@]}\n    local -i m=0\n    local -i max=0\n  \
    \  local -i min=0\n    local -i max_i=0\n    local -i min_i=0\n    local -i max_j=0\n\
    \    local -i min_j=0\n    local -i max_k=0\n    local -i min_k=0\n    local -i\
    \ max_m=0\n    local -i min_m=0\n    local -i max_n=0\n    local -i min_n=0\n\
    \    local -i max_p=0\n    local -i min_p=0\n    local -i max_q=0\n    local -i\
    \ min_q=0\n    local -i max_r=0\n    local -i min_r=0\n    local -i max_s=0\n\
    \    local -i min_s=0\n    local -i max_t=0\n    local -i min_t=0\n    local -i\
    \ max_u=0\n    local -i min_u=0\n    local -i max_v=0\n    local -i min_v=0\n\
    \    local -i max_w=0\n    local -i min_w=0\n    local -i max_x=0\n    local -i\
    \ min_x=0\n    local -i max_y=0\n    local -i min_y=0\n    local -i max_z=0\n\
    \    local -i min_z=0\n    local -i max_aa=0\n    local -i min_aa=0\n    local\
    \ -i max_bb=0\n    local -i min_bb=0\n    local -i max_cc=0\n    local -i min_cc=0\n\
    \    local -i max_dd=0\n    local -i min_dd=0\n    local -i max_ee=0\n    local\
    \ -i min_ee=0\n    local -i max_ff=0\n    local -i min_ff=0\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i n=${#arr[@]}\n    local -i max=0\n    local -i max_i=0\n    local\
    \ -i max_j=0\n    local -i max_k=0\n    local -i max_n=0\n    local -i max_n_i=0\n\
    \    local -i max_n_j=0\n    local -i max_n_k=0\n    local -i max_n_n=0\n    local\
    \ -i max_n_max=0\n    local -i max_n_max_i=0\n    local -i max_n_max_j=0\n   \
    \ local -i max_n_max_k=0\n    local -i max_n_max_n=0\n    local -i max_n_max_n_i=0\n\
    \    local -i max_n_max_n_j=0\n    local -i max_n_max_n_k=0\n    local -i max_n_max_n_n=0\n\
    \    local -i max_n_max_n_max=0\n    local -i max_n_max_n_max_i=0\n    local -i\
    \ max_n_max_n_max_j=0\n    local -i max_n_max_n_max_k=0\n    local -i max_n_max_n_max_n=0\n\
    \    local -i max_n_max_n_max_n_i=0\n    local -i max_n_max_n_max_n_j=0\n    local\
    \ -i max_n_max_n_max_n_k=0\n    local -i max_n_max_n_max_n_n=0\n    local -i max_n_max_n_max_n_max=0\n\
    \    local -i max_n_max_n_max_n_max_i=0\n    local -i max_n_max_n_max_n_max_j=0\n\
    \    local -i max_\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpo6egpkkz.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i tmp=0\n    local -i max=0\n    local -i min=0\n    local -i max_idx=0\n\
    \    local -i min_idx=0\n    local -i max_idx_prev=0\n    local -i min_idx_prev=0\n\
    \    local -i max_idx_next=0\n    local -i min_idx_next=0\n    local -i max_idx_prev_prev=0\n\
    \    local -i min_idx_prev_prev=0\n    local -i max_idx_next_next=0\n    local\
    \ -i min_idx_next_next=0\n    local -i max_idx_prev_prev_prev=0\n    local -i\
    \ min_idx_prev_prev_prev=0\n    local -i max_idx_next_next_next=0\n    local -i\
    \ min_idx_next_next_next=0\n    local -i max_idx_prev_prev_prev_prev=0\n    local\
    \ -i min_idx_prev_prev_prev_prev=0\n    local -i max_idx_next_next_next_next=0\n\
    \    local -i min_idx_next_next_next_next=0\n    local -i max_idx_prev_prev_prev_prev_prev=0\n\
    \    local -i min_idx_prev_prev_prev_prev_prev=0\n    local -i max_idx_next_next_next_next_next=0\n\
    \    local -i min_idx_next_next_next_next_next=0\n    local -i max_idx_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i min_idx_prev_prev_prev_prev_prev_prev=0\n    local -i max_idx_next_next_next_next_next_next=0\n\
    \    local -i min_idx_next_next_next_next_\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -a new_arr=()\n    local -i i=0\n    local\
    \ -i j=0\n    local -i n=${#arr[@]}\n    local -i last_ball=${arr[$((n-1))]}\n\
    \    for ((i=0; i<n-1; i++)); do\n        new_arr[$i]=${arr[$((i+1))]}\n    done\n\
    \    new_arr[$((n-1))]=$last_ball\n    echo ${new_arr[@]}\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i n=${#arr[@]}\n    local -i m=0\n    local -i tmp=0\n    local -i\
    \ flag=0\n    local -i flag1=0\n    local -i flag2=0\n    local -i flag3=0\n \
    \   local -i flag4=0\n    local -i flag5=0\n    local -i flag6=0\n    local -i\
    \ flag7=0\n    local -i flag8=0\n    local -i flag9=0\n    local -i flag10=0\n\
    \    local -i flag11=0\n    local -i flag12=0\n    local -i flag13=0\n    local\
    \ -i flag14=0\n    local -i flag15=0\n    local -i flag16=0\n    local -i flag17=0\n\
    \    local -i flag18=0\n    local -i flag19=0\n    local -i flag20=0\n    local\
    \ -i flag21=0\n    local -i flag22=0\n    local -i flag23=0\n    local -i flag24=0\n\
    \    local -i flag25=0\n    local -i flag26=0\n    local -i flag27=0\n    local\
    \ -i flag28=0\n    local -i flag29=0\n    local -i flag30=0\n    local -i flag31=0\n\
    \    local -i flag32=0\n    local -i flag33=0\n    local -i flag34=0\n    local\
    \ -i flag35=0\n    local -i flag36=0\n    local -i flag37=0\n    local -i flag38=0\n\
    \    local -i flag39=0\n    local -i flag40=0\n    local -i flag41=0\n    local\
    \ -i flag42=0\n    local -i flag43=0\n    local -i flag44=0\n    local -i flag45=0\n\
    \    local -i flag46=0\n    local -i flag47=0\n    local -i flag48=0\n    local\
    \ -i flag49=0\n   \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnbo_84xh.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i max=0\n    local -i max_idx=0\n    local -i min=0\n    local -i\
    \ min_idx=0\n    local -i tmp=0\n    local -i tmp_idx=0\n    local -i count=0\n\
    \    local -i flag=0\n    local -i flag_idx=0\n    local -i flag_idx_2=0\n   \
    \ local -i flag_idx_3=0\n    local -i flag_idx_4=0\n    local -i flag_idx_5=0\n\
    \    local -i flag_idx_6=0\n    local -i flag_idx_7=0\n    local -i flag_idx_8=0\n\
    \    local -i flag_idx_9=0\n    local -i flag_idx_10=0\n    local -i flag_idx_11=0\n\
    \    local -i flag_idx_12=0\n    local -i flag_idx_13=0\n    local -i flag_idx_14=0\n\
    \    local -i flag_idx_15=0\n    local -i flag_idx_16=0\n    local -i flag_idx_17=0\n\
    \    local -i flag_idx_18=0\n    local -i flag_idx_19=0\n    local -i flag_idx_20=0\n\
    \    local -i flag_idx_21=0\n    local -i flag_idx_22=0\n    local -i flag_idx_23=0\n\
    \    local -i flag_idx_24=0\n    local -i flag_idx_25=0\n    local -i flag_idx_26=0\n\
    \    local -i flag_idx_27=0\n    local -i flag_idx_28=0\n    local -i flag_idx_29=0\n\
    \    local -i flag_idx_30=0\n    local -i flag_idx_31=0\n\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7z6bxf5m.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n\
    \    local -i max_index=0\n    local -i max_value=0\n    local -i min_index=0\n\
    \    local -i min_value=0\n    local -i temp=0\n    local -i temp_index=0\n  \
    \  local -i temp_value=0\n    local -i temp_index_2=0\n    local -i temp_value_2=0\n\
    \    local -i temp_index_3=0\n    local -i temp_value_3=0\n    local -i temp_index_4=0\n\
    \    local -i temp_value_4=0\n    local -i temp_index_5=0\n    local -i temp_value_5=0\n\
    \    local -i temp_index_6=0\n    local -i temp_value_6=0\n    local -i temp_index_7=0\n\
    \    local -i temp_value_7=0\n    local -i temp_index_8=0\n    local -i temp_value_8=0\n\
    \    local -i temp_index_9=0\n    local -i temp_value_9=0\n    local -i temp_index_10=0\n\
    \    local -i temp_value_10=0\n    local -i temp_index_11=0\n    local -i temp_value_11=0\n\
    \    local -i temp_index_12=0\n    local -i temp_value_12=0\n    local -i temp_index_13=0\n\
    \    local -i temp_value_13=0\n    local -i temp_index_14=0\n    local -i temp_value_14=0\n\
    \    local -i temp_index_15=0\n    local -i temp_value_15=0\n    local -i temp_index_16=0\n\
    \    local -i temp_value_16=0\n    local -i temp_index_17=0\n    local -i temp_value_17=0\n\
    \    local -i temp_index_18=0\n    local -i temp_value_18=\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdapo45k5.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local i\n    local j\n    local temp\n    local -i\
    \ n\n    local -i flag=0\n    arr=($1)\n    n=${#arr[@]}\n    for ((i=0; i<n-1;\
    \ i++))\n    do\n        if [[ ${arr[i]} -gt ${arr[i+1]} ]]\n        then\n  \
    \          temp=${arr[i]}\n            arr[i]=${arr[i+1]}\n            arr[i+1]=$temp\n\
    \            flag=1\n        fi\n    done\n    if [[ $flag -eq 0 ]]\n    then\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i N\n    local -i temp\n   \
    \ arr=($1)\n    N=${#arr[@]}\n    for ((i=0; i<N-1; i++)); do\n        if [[ ${arr[i]}\
    \ -gt ${arr[i+1]} ]]; then\n            temp=${arr[i]}\n            arr[i]=${arr[i+1]}\n\
    \            arr[i+1]=$temp\n            break\n        fi\n    done\n    echo\
    \ ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n\
    \    local -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local\
    \ -i h=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i\
    \ ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i\
    \ pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i\
    \ tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i\
    \ xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aa=0\n    local -i\
    \ bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i\
    \ ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i iii=0\n    local -i\
    \ jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local\
    \ -i nnn=0\n    local -i ooo=0\n    local -i ppp=0\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local tmp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n    \
    \    for ((j=i+1; j<len; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]}\
    \ ]]\n            then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n                flag=1\n            fi\n       \
    \ done\n    done\n    if [[ $flag -eq 0 ]]\n    then\n        echo \"True\"\n\
    \    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local i=0\n    local j=0\n    local temp=0\n    local\
    \ len=${#arr[@]}\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len;\
    \ j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n          \
    \  then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n  \
    \              arr[j]=$temp\n            fi\n        done\n    done\n    echo\
    \ ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i j k\n    local -i N=0\n    local -i max=0\n\
    \    local -i min=0\n    local -i max_i=0\n    local -i min_i=0\n    local -i\
    \ max_j=0\n    local -i min_j=0\n    local -i max_k=0\n    local -i min_k=0\n\
    \    local -i max_l=0\n    local -i min_l=0\n    local -i max_m=0\n    local -i\
    \ min_m=0\n    local -i max_n=0\n    local -i min_n=0\n    local -i max_o=0\n\
    \    local -i min_o=0\n    local -i max_p=0\n    local -i min_p=0\n    local -i\
    \ max_q=0\n    local -i min_q=0\n    local -i max_r=0\n    local -i min_r=0\n\
    \    local -i max_s=0\n    local -i min_s=0\n    local -i max_t=0\n    local -i\
    \ min_t=0\n    local -i max_u=0\n    local -i min_u=0\n    local -i max_v=0\n\
    \    local -i min_v=0\n    local -i max_w=0\n    local -i min_w=0\n    local -i\
    \ max_x=0\n    local -i min_x=0\n    local -i max_y=0\n    local -i min_y=0\n\
    \    local -i max_z=0\n    local -i min_z=0\n    local -i max_aa=0\n    local\
    \ -i min_aa=0\n    local -i max_bb=0\n    local -i min_bb=0\n    local -i max_cc=0\n\
    \    local -i min_cc=0\n    local -i max_dd=0\n    local -i min_dd=0\n    local\
    \ -i max_ee=0\n    local -i min_ee=0\n    local -i max_ff=0\n    local -\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local i\n    local j\n    local tmp\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n    \
    \        if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcy406jrh.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n\
    \        if [[ ${arr[i]} -eq 0 ]]; then\n            if [[ $i -eq 0 ]]; then\n\
    \                arr[i]=1\n            else\n                arr[i]=0\n      \
    \          arr[i-1]=1\n            fi\n            break\n        fi\n    done\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpks00cv8q.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local i\n    local j\n    local -i n\n    local -i\
    \ min\n    local -i min_index\n    local -i tmp\n    local -i count\n    local\
    \ -i flag\n    arr=($1)\n    n=${#arr[@]}\n    count=0\n    flag=0\n    for ((i=0;\
    \ i<n; i++)); do\n        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1;\
    \ j<n; j++)); do\n            if [[ ${arr[j]} -lt $min ]]; then\n            \
    \    min=${arr[j]}\n                min_index=$j\n            fi\n        done\n\
    \        if [[ $min_index -ne $i ]]; then\n            tmp=${arr[i]}\n       \
    \     arr[i]=${arr[min_index]}\n            arr[min_index]=$tmp\n            count=$((count+1))\n\
    \        fi\n        if [[ $count -gt 1 ]]; then\n            flag=1\n       \
    \     break\n        fi\n    done\n    if [[ $flag -eq 1 ]]; then\n        echo\
    \ \"False\"\n    else\n        echo \"True\"\n    fi\n}\n\ncandidate() {\n   \
    \ move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i n\n    local\
    \ -i min_index\n    local -i min_value\n    local -i tmp\n    arr=($1)\n    n=${#arr[@]}\n\
    \    for ((i=0; i<n; i++)); do\n        min_index=$i\n        min_value=${arr[$i]}\n\
    \        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[$j]} -lt $min_value\
    \ ]]; then\n                min_index=$j\n                min_value=${arr[$j]}\n\
    \            fi\n        done\n        if [[ $min_index -ne $i ]]; then\n    \
    \        tmp=${arr[$i]}\n            arr[$i]=${arr[$min_index]}\n            arr[$min_index]=$tmp\n\
    \        fi\n    done\n    echo ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i n\n    local -i j\n    local\
    \ -i k\n    local -i m\n    local -i l\n    local -i r\n    local -i t\n    local\
    \ -i x\n    local -i y\n    local -i z\n    local -i p\n    local -i q\n    local\
    \ -i s\n    local -i u\n    local -i v\n    local -i w\n    local -i a\n    local\
    \ -i b\n    local -i c\n    local -i d\n    local -i e\n    local -i f\n    local\
    \ -i g\n    local -i h\n    local -i max\n    local -i min\n    local -i mid\n\
    \    local -i len\n    local -i flag\n    local -i flag1\n    local -i flag2\n\
    \    local -i flag3\n    local -i flag4\n    local -i flag5\n    local -i flag6\n\
    \    local -i flag7\n    local -i flag8\n    local -i flag9\n    local -i flag10\n\
    \    local -i flag11\n    local -i flag12\n    local -i flag13\n    local -i flag14\n\
    \    local -i flag15\n    local -i flag16\n    local -i flag17\n    local -i flag18\n\
    \    local -i flag19\n    local -i flag20\n    local -i flag21\n    local -i flag22\n\
    \    local -i flag23\n    local -i flag24\n    local -i flag25\n    local -i flag26\n\
    \    local -i flag27\n    local -i flag28\n    local -i flag29\n    local -i flag30\n\
    \    local -i flag31\n    local -i flag32\n    local -i flag33\n    local -i flag34\n\
    \    local -i flag35\n    local -i flag36\n    local -i flag37\n    local -i flag38\n\
    \    local -i flag39\n    local -i flag40\n    local -i flag41\n    local -i flag42\n\
    \    local -i flag43\n    local -i flag44\n    local -i flag45\n    local -i flag46\n\
    \    local -\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i n\n    local\
    \ -i tmp\n    local -i min_index\n    local -i min_value\n    arr=($1)\n    n=${#arr[@]}\n\
    \    for ((i=0; i<n; i++)); do\n        min_value=${arr[i]}\n        min_index=$i\n\
    \        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[j]} -lt $min_value\
    \ ]]; then\n                min_value=${arr[j]}\n                min_index=$j\n\
    \            fi\n        done\n        if [[ $min_index -ne $i ]]; then\n    \
    \        tmp=${arr[i]}\n            arr[i]=${arr[min_index]}\n            arr[min_index]=$tmp\n\
    \        fi\n    done\n    echo \"${arr[@]}\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i j\n    local -i n\n    local -i tmp\n  \
    \  local -i flag\n    arr=($1)\n    n=${#arr[@]}\n    flag=0\n    for ((i=0; i<n;\
    \ i++)); do\n        for ((j=0; j<n-1; j++)); do\n            if [[ ${arr[j]}\
    \ -gt ${arr[j+1]} ]]; then\n                tmp=${arr[j]}\n                arr[j]=${arr[j+1]}\n\
    \                arr[j+1]=$tmp\n                flag=1\n            fi\n     \
    \   done\n        if [[ $flag -eq 0 ]]; then\n            break\n        fi\n\
    \    done\n    echo ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i j\n    arr=($1)\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[$i]}\
    \ -gt ${arr[$j]} ]]; then\n                arr[$i]=${arr[$j]}\n              \
    \  arr[$j]=${arr[$i]}\n            fi\n        done\n    done\n    echo \"${arr[@]}\"\
    \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1\
    \ 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i n=${#arr[@]}\n    local -i m=0\n    local -i l=0\n    local -i r=0\n\
    \    local -i mid=0\n    local -i flag=0\n    local -i flag1=0\n    local -i flag2=0\n\
    \    local -i flag3=0\n    local -i flag4=0\n    local -i flag5=0\n    local -i\
    \ flag6=0\n    local -i flag7=0\n    local -i flag8=0\n    local -i flag9=0\n\
    \    local -i flag10=0\n    local -i flag11=0\n    local -i flag12=0\n    local\
    \ -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n    local -i flag16=0\n\
    \    local -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n    local\
    \ -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n    local -i flag23=0\n\
    \    local -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n    local\
    \ -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n    local -i flag30=0\n\
    \    local -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n    local\
    \ -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n    local -i flag37=0\n\
    \    local -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n    local\
    \ -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n    local -i flag44=0\n\
    \    local -i flag45=0\n    local -i flag46=0\n    local -i flag47=0\n   \n}\n\
    \ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i n\n    local -i tmp\n    arr=($1)\n    n=${#arr[@]}\n    for ((i=0; i<n;\
    \ i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]}\
    \ -gt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((k=0; k<n; k++)); do\n        echo -n \"${arr[k]} \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i n=${#arr[@]}\n    local -i min=0\n    local -i min_index=0\n    local -i\
    \ temp=0\n    local -i flag=0\n    for (( i=0; i<n; i++ ))\n    do\n        min=${arr[i]}\n\
    \        min_index=$i\n        for (( j=i+1; j<n; j++ ))\n        do\n       \
    \     if [[ ${arr[j]} -lt $min ]]\n            then\n                min=${arr[j]}\n\
    \                min_index=$j\n            fi\n        done\n        if [[ $min_index\
    \ -ne $i ]]\n        then\n            temp=${arr[i]}\n            arr[i]=${arr[min_index]}\n\
    \            arr[min_index]=$temp\n            flag=1\n        fi\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9mx1zjvn.sh: line 32: 3 4 5 1 2: syntax error in expression (error
    token is "4 5 1 2")

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -a new_arr=()\n    local -i i=0\n  \
    \  local -i j=0\n    local -i k=0\n    local -i n=${#arr[@]}\n    local -i m=0\n\
    \    local -i min=0\n    local -i max=0\n    local -i min_index=0\n    local -i\
    \ max_index=0\n    local -i min_index_new=0\n    local -i max_index_new=0\n  \
    \  local -i min_index_old=0\n    local -i max_index_old=0\n    local -i min_index_new_old=0\n\
    \    local -i max_index_new_old=0\n    local -i min_index_old_new=0\n    local\
    \ -i max_index_old_new=0\n    local -i min_index_old_new_old=0\n    local -i max_index_old_new_old=0\n\
    \    local -i min_index_new_old_new=0\n    local -i max_index_new_old_new=0\n\
    \    local -i min_index_old_new_old_new=0\n    local -i max_index_old_new_old_new=0\n\
    \    local -i min_index_new_old_new_old=0\n    local -i max_index_new_old_new_old=0\n\
    \    local -i min_index_old_new_old_new_old=0\n    local -i max_index_old_new_old_new_old=0\n\
    \    local -i min_index_new_old_new_old_new=0\n    local -i max_index_new_old_new_old_new=0\n\
    \    local -i min_index_old_new_old_new_old_new=0\n    local -i max_index_old_new_old_new_old_new=0\n\
    \    local -i min_index_new_old_new_old_new_old=0\n    local -i max_index_new_old_new_old_new_old=0\n\
    \   \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local i=0\n    local j=0\n    local tmp=0\n    local\
    \ len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        for ((j=0; j<len-1;\
    \ j++)); do\n            if [[ ${arr[j]} -gt ${arr[j+1]} ]]; then\n          \
    \      tmp=${arr[j]}\n                arr[j]=${arr[j+1]}\n                arr[j+1]=$tmp\n\
    \            fi\n        done\n    done\n    echo ${arr[@]}\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i n=${#arr[@]}\n    local -i max=0\n    local -i max_index=0\n    local -i\
    \ min=0\n    local -i min_index=0\n    local -i temp=0\n    local -i flag=0\n\
    \    local -i count=0\n    local -i flag1=0\n    local -i flag2=0\n    local -i\
    \ flag3=0\n    local -i flag4=0\n    local -i flag5=0\n    local -i flag6=0\n\
    \    local -i flag7=0\n    local -i flag8=0\n    local -i flag9=0\n    local -i\
    \ flag10=0\n    local -i flag11=0\n    local -i flag12=0\n    local -i flag13=0\n\
    \    local -i flag14=0\n    local -i flag15=0\n    local -i flag16=0\n    local\
    \ -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n    local -i flag20=0\n\
    \    local -i flag21=0\n    local -i flag22=0\n    local -i flag23=0\n    local\
    \ -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n    local -i flag27=0\n\
    \    local -i flag28=0\n    local -i flag29=0\n    local -i flag30=0\n    local\
    \ -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n    local -i flag34=0\n\
    \    local -i flag35=0\n    local -i flag36=0\n    local -i flag37=0\n    local\
    \ -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n    local -i flag41=0\n\
    \    local -i flag42=0\n    local -i flag43=0\n    local -i flag44=0\n    local\
    \ -i flag45=0\n    local -i flag46\n}\n\ncandidate() {\n    move_one_ball \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i n\n    local\
    \ -i m\n    local -i k\n    local -i l\n    local -i r\n    local -i s\n    local\
    \ -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local\
    \ -i y\n    local -i z\n    local -i a\n    local -i b\n    local -i c\n    local\
    \ -i d\n    local -i e\n    local -i f\n    local -i g\n    local -i h\n    local\
    \ -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local\
    \ -i n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local\
    \ -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local\
    \ -i x\n    local -i y\n    local -i z\n    local -i a\n    local -i b\n    local\
    \ -i c\n    local -i d\n    local -i e\n    local -i f\n    local -i g\n    local\
    \ -i h\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local\
    \ -i m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local\
    \ -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local\
    \ -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i a\n    local\
    \ -i b\n    local -i c\n    local -i d\n    local -i e\n    local -i f\n    local\
    \ -i g\n    local -i h\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i l\n    local -i m\n    local -i n\n    local -i o\n    local -i p\n    local\
    \ -i q\n   \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i k=0\n    local -i n=${#arr[@]}\n    local -i flag=0\n    for ((i=0; i<n;\
    \ i++))\n    do\n        for ((j=i+1; j<n; j++))\n        do\n            if [[\
    \ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                flag=1\n     \
    \           break\n            fi\n        done\n        if [[ $flag -eq 1 ]]\n\
    \        then\n            break\n        fi\n    done\n    if [[ $flag -eq 0\
    \ ]]\n    then\n        echo \"True\"\n        return\n    fi\n    for ((k=j;\
    \ k<n; k++))\n    do\n        if [[ ${arr[k]} -lt ${arr[i]} ]]\n        then\n\
    \            echo \"False\"\n            return\n        fi\n    done\n    echo\
    \ \"True\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i n\n    local\
    \ -i t\n    local -i x\n    local -i y\n    local -i z\n    local -i flag\n  \
    \  local -i flag2\n    local -i flag3\n    arr=($1)\n    n=${#arr[@]}\n    flag=0\n\
    \    flag2=0\n    flag3=0\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]}\
    \ -eq 0 ]]; then\n            flag=1\n            x=$i\n        fi\n        if\
    \ [[ ${arr[i]} -eq 1 ]]; then\n            flag2=1\n            y=$i\n       \
    \ fi\n        if [[ ${arr[i]} -eq 2 ]]; then\n            flag3=1\n          \
    \  z=$i\n        fi\n    done\n    if [[ $flag -eq 1 ]]; then\n        if [[ $flag2\
    \ -eq 1 ]]; then\n            t=${arr[x]}\n            arr[x]=${arr[y]}\n    \
    \        arr[y]=$t\n        elif [[ $flag3 -eq 1 ]]; then\n            t=${arr[x]}\n\
    \            arr[x]=${arr[z]}\n            arr[z]=$t\n        fi\n    elif [[\
    \ $flag2 -eq 1 ]]; then\n        if [[ $flag3 -eq 1 ]]; then\n            t=${arr[y]}\n\
    \            arr[y]=${arr[z]}\n            arr[z]=$t\n        fi\n    fi\n   \
    \ echo ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i n\n    local -i j\n    local\
    \ -i k\n    local -i m\n    local -i max\n    local -i max_i\n    local -i max_j\n\
    \    local -i max_k\n    local -i max_m\n    local -i max_n\n    local -i max_val\n\
    \    local -i val\n    local -i ret\n    local -i tmp\n    local -i tmp_i\n  \
    \  local -i tmp_j\n    local -i tmp_k\n    local -i tmp_m\n    local -i tmp_n\n\
    \    local -i tmp_val\n    local -i tmp_ret\n    local -i tmp_max\n    local -i\
    \ tmp_max_i\n    local -i tmp_max_j\n    local -i tmp_max_k\n    local -i tmp_max_m\n\
    \    local -i tmp_max_n\n    local -i tmp_max_val\n    local -i tmp_max_ret\n\
    \    local -i tmp_max_tmp\n    local -i tmp_max_tmp_i\n    local -i tmp_max_tmp_j\n\
    \    local -i tmp_max_tmp_k\n    local -i tmp_max_tmp_m\n    local -i tmp_max_tmp_n\n\
    \    local -i tmp_max_tmp_val\n    local -i tmp_max_tmp_ret\n    local -i tmp_max_tmp_max\n\
    \    local -i tmp_max_tmp_max_i\n    local -i tmp_max_tmp_max_j\n    local -i\
    \ tmp_max_tmp_max_k\n    local -i tmp_max_tmp_max_m\n    local -i tmp_max_tmp_max_n\n\
    \    local -i tmp_max_tmp_max_val\n    local -i tmp_max_tmp_max_ret\n    local\
    \ -i tmp_max_tmp_max_tmp\n    local -i tmp_max_tmp_max_tmp_i\n    local -i tmp_max_tmp_max_tmp_j\n\
    \    local -i tmp_max_tmp_max_tmp_k\n    local -\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i len=${#arr[@]}\n    local -i max=0\n    local -i max_index=0\n    local -i\
    \ min=0\n    local -i min_index=0\n    local -i temp=0\n    local -i temp_index=0\n\
    \    local -i temp_index_2=0\n    local -i temp_index_3=0\n    local -i temp_index_4=0\n\
    \    local -i temp_index_5=0\n    local -i temp_index_6=0\n    local -i temp_index_7=0\n\
    \    local -i temp_index_8=0\n    local -i temp_index_9=0\n    local -i temp_index_10=0\n\
    \    local -i temp_index_11=0\n    local -i temp_index_12=0\n    local -i temp_index_13=0\n\
    \    local -i temp_index_14=0\n    local -i temp_index_15=0\n    local -i temp_index_16=0\n\
    \    local -i temp_index_17=0\n    local -i temp_index_18=0\n    local -i temp_index_19=0\n\
    \    local -i temp_index_20=0\n    local -i temp_index_21=0\n    local -i temp_index_22=0\n\
    \    local -i temp_index_23=0\n    local -i temp_index_24=0\n    local -i temp_index_25=0\n\
    \    local -i temp_index_26=0\n    local -i temp_index_27=0\n    local -i temp_index_28=0\n\
    \    local -i temp_index_29=0\n    local -i temp_index_30=0\n    local -i temp_index_31=0\n\
    \    local -i temp_index_32=0\n    local -i temp_index_33=0\n    local -i temp_index_34=0\n\
    \    local -i temp_index_35=0\n    local -i temp_index_36\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i n=${#arr[@]}\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i max=0\n    local -i min=0\n    local\
    \ -i max_i=0\n    local -i min_i=0\n    local -i max_j=0\n    local -i min_j=0\n\
    \    local -i max_k=0\n    local -i min_k=0\n    local -i max_l=0\n    local -i\
    \ min_l=0\n    local -i max_m=0\n    local -i min_m=0\n    local -i max_n=0\n\
    \    local -i min_n=0\n    local -i max_o=0\n    local -i min_o=0\n    local -i\
    \ max_p=0\n    local -i min_p=0\n    local -i max_q=0\n    local -i min_q=0\n\
    \    local -i max_r=0\n    local -i min_r=0\n    local -i max_s=0\n    local -i\
    \ min_s=0\n    local -i max_t=0\n    local -i min_t=0\n    local -i max_u=0\n\
    \    local -i min_u=0\n    local -i max_v=0\n    local -i min_v=0\n    local -i\
    \ max_w=0\n    local -i min_w=0\n    local -i max_x=0\n    local -i min_x=0\n\
    \    local -i max_y=0\n    local -i min_y=0\n    local -i max_z=0\n    local -i\
    \ min_z=0\n    local -i max_aa=0\n    local -i min_aa=0\n    local -i max_bb=0\n\
    \    local -i min_bb=0\n    local -i max_cc=0\n    local -i min_cc=0\n    local\
    \ -i max_dd=0\n    local -i min_dd=0\n    local -i max_ee=0\n\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpofb0o1p6.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i n=${#arr[@]}\n    local -i max=0\n    local -i max_i=0\n    local -i max_j=0\n\
    \    local -i max_k=0\n    local -i k=0\n    local -i tmp=0\n    local -i flag=0\n\
    \    local -i flag2=0\n    local -i flag3=0\n    local -i flag4=0\n    local -i\
    \ flag5=0\n    local -i flag6=0\n    local -i flag7=0\n    local -i flag8=0\n\
    \    local -i flag9=0\n    local -i flag10=0\n    local -i flag11=0\n    local\
    \ -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n\
    \    local -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n    local\
    \ -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n\
    \    local -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n    local\
    \ -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n\
    \    local -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n    local\
    \ -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n\
    \    local -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n    local\
    \ -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n\
    \    local -i flag44=0\n    local -i flag45=0\n    local -i flag46=0\n    local\
    \ -i\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i n\n    local\
    \ -i tmp\n    arr=($1)\n    n=${#arr[@]}\n    for ((i=0; i<n-1; i++)); do\n  \
    \      for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]}\
    \ ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    echo\
    \ ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i n\n    local -i j\n    local\
    \ -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n    local\
    \ -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local\
    \ -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local\
    \ -i z\n    local -i aa\n    local -i bb\n    local -i cc\n    local -i dd\n \
    \   local -i ee\n    local -i ff\n    local -i gg\n    local -i hh\n    local\
    \ -i ii\n    local -i jj\n    local -i kk\n    local -i ll\n    local -i mm\n\
    \    local -i nn\n    local -i oo\n    local -i pp\n    local -i qq\n    local\
    \ -i rr\n    local -i ss\n    local -i tt\n    local -i uu\n    local -i vv\n\
    \    local -i ww\n    local -i xx\n    local -i yy\n    local -i zz\n    local\
    \ -i aaa\n    local -i bbb\n    local -i ccc\n    local -i ddd\n    local -i eee\n\
    \    local -i fff\n    local -i ggg\n    local -i hhh\n    local -i iii\n    local\
    \ -i jjj\n    local -i kkk\n    local -i lll\n    local -i mmm\n    local -i nnn\n\
    \    local -i ooo\n    local -i ppp\n    local -i qqq\n    local -i rrr\n    local\
    \ -i sss\n    local -i ttt\n    local -i uuu\n    local -i vvv\n    local -i www\n\
    \    local -i xxx\n    local -i yyy\n    local -i zzz\n    local -i aaaa\n   \
    \ local -i bbbb\n    local -i cccc\n    local -i dddd\n    local -i eeee\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local last=${arr[$len-1]}\n\
    \    local i=0\n    while [ $i -lt $len ]; do\n        arr[$i]=${arr[$((i+1))]}\n\
    \        i=$((i+1))\n    done\n    arr[$len-1]=$last\n    echo ${arr[@]}\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i j\n    local -i N\n    local -i flag\n \
    \   local -i count\n    local -i max\n    local -i max_index\n    local -i temp\n\
    \    arr=($1)\n    N=${#arr[@]}\n    flag=0\n    count=0\n    while [ $flag -eq\
    \ 0 ]\n    do\n        max=${arr[0]}\n        max_index=0\n        for ((i=1;\
    \ i<N; i++))\n        do\n            if [ ${arr[$i]} -gt $max ]\n           \
    \ then\n                max=${arr[$i]}\n                max_index=$i\n       \
    \     fi\n        done\n        if [ $max_index -eq 0 ]\n        then\n      \
    \      flag=1\n        else\n            temp=${arr[$max_index]}\n           \
    \ for ((j=$max_index; j>0; j--))\n            do\n                arr[$j]=${arr[$j-1]}\n\
    \            done\n            arr[0]=$temp\n            count=$((count+1))\n\
    \        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i j\n    local -i n\n    local -i shift_count\n\
    \    local -i sorted\n    local -i tmp\n\n    # Read the input\n    read -r -a\
    \ arr <<< \"$1\"\n    n=${#arr[@]}\n    shift_count=0\n    sorted=1\n    while\
    \ [ $sorted -eq 1 ]; do\n        sorted=0\n        for ((i=0; i<n-1; i++)); do\n\
    \            if [ ${arr[i]} -gt ${arr[i+1]} ]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[i+1]}\n                arr[i+1]=$tmp\n         \
    \       sorted=1\n                shift_count=$((shift_count+1))\n           \
    \ fi\n        done\n    done\n    echo $shift_count\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local i\n    local n\n    local -i n_shift\n    local\
    \ -i n_balls\n    local -i n_balls_sorted\n    local -i n_balls_unsorted\n   \
    \ local -i n_balls_unsorted_prev\n    local -i n_balls_unsorted_prev_prev\n  \
    \  local -i n_balls_unsorted_prev_prev_prev\n    local -i n_balls_unsorted_prev_prev_prev_prev\n\
    \    local -i n_balls_unsorted_prev_prev_prev_prev_prev\n    local -i n_balls_unsorted_prev_prev_prev_prev_prev_prev\n\
    \    local -i n_balls_unsorted_prev_prev_prev_prev_prev_prev_prev\n    local -i\
    \ n_balls_unsorted_prev_prev_prev_prev_prev_prev_prev_prev\n    local -i n_balls_unsorted_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local -i n_balls_unsorted_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local -i n_balls_unsorted_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local -i n_balls_unsorted_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local -i n_balls_unsorted_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local -i n_balls_unsorted_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local -i n_balls_unsorted_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local -i n_balls_unsorted_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local -i n_balls_unsorted_\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i max=0\n    local -i max_index=0\n    local -i min=0\n    local -i\
    \ min_index=0\n    local -i temp=0\n    local -i flag=0\n    local -i flag1=0\n\
    \    local -i flag2=0\n    local -i flag3=0\n    local -i flag4=0\n    local -i\
    \ flag5=0\n    local -i flag6=0\n    local -i flag7=0\n    local -i flag8=0\n\
    \    local -i flag9=0\n    local -i flag10=0\n    local -i flag11=0\n    local\
    \ -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n\
    \    local -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n    local\
    \ -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n\
    \    local -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n    local\
    \ -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n\
    \    local -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n    local\
    \ -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n\
    \    local -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n    local\
    \ -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n\
    \    local -i flag44=0\n    local -i flag45=0\n    local -i flag46=0\n    local\
    \ -i flag47\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -n arr_len=$2\n    local -n arr_max=$3\n \
    \   local -n arr_min=$4\n    local -n arr_max_pos=$5\n    local -n arr_min_pos=$6\n\
    \    local -n arr_max_pos_prev=$7\n    local -n arr_min_pos_prev=$8\n    local\
    \ -n arr_max_pos_prev_prev=$9\n    local -n arr_min_pos_prev_prev=${10}\n    local\
    \ -n arr_max_pos_prev_prev_prev=${11}\n    local -n arr_min_pos_prev_prev_prev=${12}\n\
    \    local -n arr_max_pos_prev_prev_prev_prev=${13}\n    local -n arr_min_pos_prev_prev_prev_prev=${14}\n\
    \    local -n arr_max_pos_prev_prev_prev_prev_prev=${15}\n    local -n arr_min_pos_prev_prev_prev_prev_prev=${16}\n\
    \    local -n arr_max_pos_prev_prev_prev_prev_prev_prev=${17}\n    local -n arr_min_pos_prev_prev_prev_prev_prev_prev=${18}\n\
    \    local -n arr_max_pos_prev_prev_prev_prev_prev_prev_prev=${19}\n    local\
    \ -n arr_min_pos_prev_prev_prev_prev_prev_prev_prev=${20}\n    local -n arr_max_pos_prev_prev_prev_prev_prev_prev_prev_prev=${21}\n\
    \    local -n arr_min_pos_prev_prev_prev_prev_prev_prev_prev_prev=${22}\n    local\
    \ -n arr_max_pos_prev_prev_prev_prev_prev_prev_prev_prev_prev=${23}\n    local\
    \ -n arr_min_pos_prev_prev_prev_prev_prev_prev_prev_prev_prev=${24}\n    local\
    \ -n arr_max_pos_prev_prev_prev_prev_prev_prev_prev\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpto8lvkdn.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    /tmp/tmpto8lvkdn.sh: line 23: local: `'': not a valid identifier

    /tmp/tmpto8lvkdn.sh: line 24: local: `'': not a valid identifier

    /tmp/tmpto8lvkdn.sh: line 25: local: `'': not a valid identifier

    /tmp/tmpto8lvkdn.sh: line 26: local: `'': not a valid identifier

    /tmp/tmpto8lvkdn.sh: line 27: local: `'': not a valid identifier

    /tmp/tmpto8lvkdn.sh: line 28: local: `'': not a valid identifier

    /tmp/tmpto8lvkdn.sh: line 29: local: `'': not a valid identifier

    /tmp/tmpto8lvkdn.sh: line 30: local: `'': not a valid identifier

    /tmp/tmpto8lvkdn.sh: line 31: local: `'': not a valid identifier

    /tmp/tmpto8lvkdn.sh: line 32: local: `'': not a valid identifier

    /tmp/tmpto8lvkdn.sh: line 33: local: `'': not a valid identifier

    /tmp/tmpto8lvkdn.sh: line 34: local: `'': not a valid identifier

    /tmp/tmpto8lvkdn.sh: line 35: local: `'': not a valid identifier

    /tmp/tmpto8lvkdn.sh: line 36: local: `'': not a valid identifier

    /tmp/tmpto8lvkdn.sh: line 37: local: `'': not a valid identifier

    /tmp/tmpto8lvkdn.sh: line 38: local: `'': not a valid identifier

    /tmp/tmpto8lvkdn.sh: line 39: local: `'': not a valid identifier

    /tmp/tmpto8lvkdn.sh: line 40: local: `'': not a valid identifier

    /tmp/tmpto8lvkdn.sh: line 41: local: `'': not a valid identifier

    /tmp/tmpto8lvkdn.sh: line 42: local: `'': not a valid identifier

    /tmp/tmpto8lvkdn.sh: line 43: local: `'': not a valid identifier

    /tmp/tmpto8lvkdn.sh: line 44: local: `'': not a valid identifier

    /tmp/tmpto8lvkdn.sh: line 45: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i n\n    local -i j\n    local\
    \ -i k\n    local -i m\n    local -i p\n    local -i q\n    local -i r\n    local\
    \ -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local\
    \ -i x\n    local -i y\n    local -i z\n    local -i aa\n    local -i bb\n   \
    \ local -i cc\n    local -i dd\n    local -i ee\n    local -i ff\n    local -i\
    \ gg\n    local -i hh\n    local -i ii\n    local -i jj\n    local -i kk\n   \
    \ local -i ll\n    local -i mm\n    local -i nn\n    local -i oo\n    local -i\
    \ pp\n    local -i qq\n    local -i rr\n    local -i ss\n    local -i tt\n   \
    \ local -i uu\n    local -i vv\n    local -i ww\n    local -i xx\n    local -i\
    \ yy\n    local -i zz\n    local -i aaa\n    local -i bbb\n    local -i ccc\n\
    \    local -i ddd\n    local -i eee\n    local -i fff\n    local -i ggg\n    local\
    \ -i hhh\n    local -i iii\n    local -i jjj\n    local -i kkk\n    local -i lll\n\
    \    local -i mmm\n    local -i nnn\n    local -i ooo\n    local -i ppp\n    local\
    \ -i qqq\n    local -i rrr\n    local -i sss\n    local -i ttt\n    local -i uuu\n\
    \    local -i vvv\n    local -i www\n    local -i xxx\n    local -i yyy\n    local\
    \ -i zzz\n    local -i aaaa\n    local -i bbbb\n    local -i cccc\n    local -i\
    \ dddd\n    local -i eeee\n    local -i ffff\n    local -i gggg\n    local\n}\n\
    \ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    arr=($1)\n    local i\n    local j\n    local tmp\n\
    \    local n\n    n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1;\
    \ j<n; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n       \
    \         tmp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$tmp\n\
    \            fi\n        done\n    done\n    echo ${arr[@]}\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i max=0\n    local -i max_idx=0\n    local -i min=0\n    local -i\
    \ min_idx=0\n    local -i tmp=0\n    local -i tmp_idx=0\n    local -i tmp_idx_2=0\n\
    \    local -i tmp_idx_3=0\n    local -i tmp_idx_4=0\n    local -i tmp_idx_5=0\n\
    \    local -i tmp_idx_6=0\n    local -i tmp_idx_7=0\n    local -i tmp_idx_8=0\n\
    \    local -i tmp_idx_9=0\n    local -i tmp_idx_10=0\n    local -i tmp_idx_11=0\n\
    \    local -i tmp_idx_12=0\n    local -i tmp_idx_13=0\n    local -i tmp_idx_14=0\n\
    \    local -i tmp_idx_15=0\n    local -i tmp_idx_16=0\n    local -i tmp_idx_17=0\n\
    \    local -i tmp_idx_18=0\n    local -i tmp_idx_19=0\n    local -i tmp_idx_20=0\n\
    \    local -i tmp_idx_21=0\n    local -i tmp_idx_22=0\n    local -i tmp_idx_23=0\n\
    \    local -i tmp_idx_24=0\n    local -i tmp_idx_25=0\n    local -i tmp_idx_26=0\n\
    \    local -i tmp_idx_27=0\n    local -i tmp_idx_28=0\n    local -i tmp_idx_29=0\n\
    \    local -i tmp_idx_30=0\n    local -i tmp_idx_31=0\n    local -i tmp_idx_32=0\n\
    \    local -i tmp_idx_33=0\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i max=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i\
    \ max_n=0\n    local -i max_i_n=0\n    local -i max_j_n=0\n    local -i max_n_n=0\n\
    \    local -i max_i_n_n=0\n    local -i max_j_n_n=0\n    local -i max_n_n_n=0\n\
    \    local -i max_i_n_n_n=0\n    local -i max_j_n_n_n=0\n    local -i max_n_n_n_n=0\n\
    \    local -i max_i_n_n_n_n=0\n    local -i max_j_n_n_n_n=0\n    local -i max_n_n_n_n_n=0\n\
    \    local -i max_i_n_n_n_n_n=0\n    local -i max_j_n_n_n_n_n=0\n    local -i\
    \ max_n_n_n_n_n_n=0\n    local -i max_i_n_n_n_n_n_n=0\n    local -i max_j_n_n_n_n_n_n=0\n\
    \    local -i max_n_n_n_n_n_n_n=0\n    local -i max_i_n_n_n_n_n_n_n=0\n    local\
    \ -i max_j_n_n_n_n_n_n_n=0\n    local -i max_n_n_n_n_n_n_n_n=0\n    local -i max_i_n_n_n_n_n_n_n_n=0\n\
    \    local -i max_j_n_n_n_n_n_n_n_n=0\n    local -i\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i j\n    local -i n=0\n    local -i max=0\n\
    \    local -i max_i=0\n    local -i max_j=0\n    local -i max_n=0\n    local -i\
    \ max_max=0\n    local -i max_max_i=0\n    local -i max_max_j=0\n    local -i\
    \ max_max_n=0\n    local -i max_max_max=0\n    local -i max_max_max_i=0\n    local\
    \ -i max_max_max_j=0\n    local -i max_max_max_n=0\n    local -i max_max_max_max=0\n\
    \    local -i max_max_max_max_i=0\n    local -i max_max_max_max_j=0\n    local\
    \ -i max_max_max_max_n=0\n    local -i max_max_max_max_max=0\n    local -i max_max_max_max_max_i=0\n\
    \    local -i max_max_max_max_max_j=0\n    local -i max_max_max_max_max_n=0\n\
    \    local -i max_max_max_max_max_max=0\n    local -i max_max_max_max_max_max_i=0\n\
    \    local -i max_max_max_max_max_max_j=0\n    local -i max_max_max_max_max_max_n=0\n\
    \    local -i max_max_max_max_max_max_max=0\n    local -i max_max_max_max_max_max_max_i=0\n\
    \    local -i max_max_max_max_max_max_max_j=0\n    local -i max_max_max_max_max_max_max_n=0\n\
    \    local -i max_max_max_max_max_max_max_max=0\n    local -i max_max_max_max_max_max_max_max_i=0\n\
    \    local -i max_max_max_\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=$2\n    local -i j=$3\n    local -i tmp=${arr[$i]}\n\
    \    arr[$i]=${arr[$j]}\n    arr[$j]=$tmp\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5l8not8s.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i max=0\n    local -i max_i=0\n\
    \    local -i max_j=0\n    local -i max_k=0\n    local -i max_n=0\n    local -i\
    \ max_n_i=0\n    local -i max_n_j=0\n    local -i max_n_k=0\n    local -i max_n_n=0\n\
    \    local -i max_n_n_i=0\n    local -i max_n_n_j=0\n    local -i max_n_n_k=0\n\
    \    local -i max_n_n_n=0\n    local -i max_n_n_n_i=0\n    local -i max_n_n_n_j=0\n\
    \    local -i max_n_n_n_k=0\n    local -i max_n_n_n_n=0\n    local -i max_n_n_n_n_i=0\n\
    \    local -i max_n_n_n_n_j=0\n    local -i max_n_n_n_n_k=0\n    local -i max_n_n_n_n_n=0\n\
    \    local -i max_n_n_n_n_n_i=0\n    local -i max_n_n_n_n_n_j=0\n    local -i\
    \ max_n_n_n_n_n_k=0\n    local -i max_n_n_n_n_n_n=0\n    local -i max_n_n_n_n_n_n_i=0\n\
    \    local -i max_n_n_n_n_n_n_j=0\n    local -i max_n_n_n_n_n_n_k=0\n    local\
    \ -i max_n_n_n_n_n_n_n=0\n    local -i max_n\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    local tmp=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len;\
    \ j++)); do\n            if [[ ${arr[$i]} -gt ${arr[$j]} ]]; then\n          \
    \      tmp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n                arr[$j]=$tmp\n\
    \            fi\n        done\n    done\n    echo ${arr[@]}\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i n=${#arr[@]}\n    local -i m=0\n    local -i k=0\n    local -i l=0\n    local\
    \ -i max=0\n    local -i max_index=0\n    local -i min=0\n    local -i min_index=0\n\
    \    local -i temp=0\n    local -i flag=0\n    local -i flag1=0\n    local -i\
    \ flag2=0\n    local -i flag3=0\n    local -i flag4=0\n    local -i flag5=0\n\
    \    local -i flag6=0\n    local -i flag7=0\n    local -i flag8=0\n    local -i\
    \ flag9=0\n    local -i flag10=0\n    local -i flag11=0\n    local -i flag12=0\n\
    \    local -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n    local\
    \ -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n\
    \    local -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n    local\
    \ -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n\
    \    local -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n    local\
    \ -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n\
    \    local -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n    local\
    \ -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n\
    \    local -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n    local\
    \ -i flag44=0\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i n\n    local -i j\n    local\
    \ -i k\n    local -i m\n    local -i p\n    local -i q\n    local -i r\n    local\
    \ -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local\
    \ -i x\n    local -i y\n    local -i z\n    local -i aa\n    local -i bb\n   \
    \ local -i cc\n    local -i dd\n    local -i ee\n    local -i ff\n    local -i\
    \ gg\n    local -i hh\n    local -i ii\n    local -i jj\n    local -i kk\n   \
    \ local -i ll\n    local -i mm\n    local -i nn\n    local -i oo\n    local -i\
    \ pp\n    local -i qq\n    local -i rr\n    local -i ss\n    local -i tt\n   \
    \ local -i uu\n    local -i vv\n    local -i ww\n    local -i xx\n    local -i\
    \ yy\n    local -i zz\n    local -i aaa\n    local -i bbb\n    local -i ccc\n\
    \    local -i ddd\n    local -i eee\n    local -i fff\n    local -i ggg\n    local\
    \ -i hhh\n    local -i iii\n    local -i jjj\n    local -i kkk\n    local -i lll\n\
    \    local -i mmm\n    local -i nnn\n    local -i ooo\n    local -i ppp\n    local\
    \ -i qqq\n    local -i rrr\n    local -i sss\n    local -i ttt\n    local -i uuu\n\
    \    local -i vvv\n    local -i www\n    local -i xxx\n    local -i yyy\n    local\
    \ -i zzz\n    local -i aaaa\n    local -i bbbb\n    local -i cccc\n    local -i\
    \ dddd\n    local -i eeee\n    local -i ffff\n    local -i gggg\n    local\n}\n\
    \ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i n=${#arr[@]}\n    local -i min=0\n    local -i max=0\n    local -i min_index=0\n\
    \    local -i max_index=0\n    local -i temp=0\n    local -i flag=0\n    local\
    \ -i flag1=0\n    local -i flag2=0\n    local -i flag3=0\n    local -i flag4=0\n\
    \    local -i flag5=0\n    local -i flag6=0\n    local -i flag7=0\n    local -i\
    \ flag8=0\n    local -i flag9=0\n    local -i flag10=0\n    local -i flag11=0\n\
    \    local -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n    local\
    \ -i flag15=0\n    local -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n\
    \    local -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n    local\
    \ -i flag22=0\n    local -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n\
    \    local -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n    local\
    \ -i flag29=0\n    local -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n\
    \    local -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n    local\
    \ -i flag36=0\n    local -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n\
    \    local -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n    local\
    \ -i flag43=0\n    local -i flag44=0\n    local -i flag45=0\n    local -i flag46=0\n\
    \    local -i flag\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local\
    \ -i max=0\n    local -i min=0\n    local -i max_index=0\n    local -i min_index=0\n\
    \    local -i max_index_prev=0\n    local -i min_index_prev=0\n    local -i max_index_next=0\n\
    \    local -i min_index_next=0\n    local -i max_index_prev_prev=0\n    local\
    \ -i min_index_prev_prev=0\n    local -i max_index_next_next=0\n    local -i min_index_next_next=0\n\
    \    local -i max_index_prev_prev_prev=0\n    local -i min_index_prev_prev_prev=0\n\
    \    local -i max_index_next_next_next=0\n    local -i min_index_next_next_next=0\n\
    \    local -i max_index_prev_prev_prev_prev=0\n    local -i min_index_prev_prev_prev_prev=0\n\
    \    local -i max_index_next_next_next_next=0\n    local -i min_index_next_next_next_next=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev=0\n    local -i min_index_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_next_next_next_next_next=0\n    local -i min_index_next_next_next_next_next=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev=0\n    local -i min_index_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_next_next_next_next_next_next=0\n    local -i min_index_next_next_next_next_next_next=0\n\
    \    local -\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a balls=($1)\n    local -i i=0\n    local -i j=0\n    local -i\
    \ n=${#balls[@]}\n    local -i temp=0\n    local -i flag=0\n    for ((i=0; i<n-1;\
    \ i++))\n    do\n        if [[ ${balls[i]} -gt ${balls[i+1]} ]]\n        then\n\
    \            temp=${balls[i]}\n            balls[i]=${balls[i+1]}\n          \
    \  balls[i+1]=$temp\n            flag=1\n        fi\n    done\n    if [[ $flag\
    \ -eq 0 ]]\n    then\n        echo \"True\"\n    else\n        echo \"False\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i n=${#arr[@]}\n    local -i tmp=0\n    local -i flag=0\n    for ((i=0; i<n;\
    \ i++))\n    do\n        for ((j=i+1; j<n; j++))\n        do\n            if [[\
    \ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n             \
    \   flag=1\n            fi\n        done\n    done\n    if [[ $flag -eq 1 ]]\n\
    \    then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\
    \ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local -i len=${#arr[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i min=0\n    local -i min_index=0\n\
    \    local -i temp=0\n    local -i flag=0\n    for ((i=0; i<len; i++))\n    do\n\
    \        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<len; j++))\n\
    \        do\n            if [[ ${arr[j]} -lt $min ]]\n            then\n     \
    \           min=${arr[j]}\n                min_index=$j\n            fi\n    \
    \    done\n        if [[ $min_index -ne $i ]]\n        then\n            temp=${arr[i]}\n\
    \            arr[i]=${arr[min_index]}\n            arr[min_index]=$temp\n    \
    \        flag=1\n        fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n  \
    \      echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i len=${#arr[@]}\n    local -i i=0\n\
    \    local -i j=0\n    local -i min=0\n    local -i min_idx=0\n    local -i tmp=0\n\
    \    local -i swap_idx=0\n    local -i swap_val=0\n    local -i sorted=0\n   \
    \ local -i shift_count=0\n    local -i shift_idx=0\n    local -i shift_val=0\n\
    \    local -i shift_done=0\n    local -i shift_possible=0\n    local -i shift_possible_idx=0\n\
    \    local -i shift_possible_val=0\n    local -i shift_possible_count=0\n    local\
    \ -i shift_possible_done=0\n    local -i shift_possible_done_idx=0\n    local\
    \ -i shift_possible_done_val=0\n    local -i shift_possible_done_count=0\n   \
    \ local -i shift_possible_done_done=0\n    local -i shift_possible_done_done_idx=0\n\
    \    local -i shift_possible_done_done_val=0\n    local -i shift_possible_done_done_count=0\n\
    \    local -i shift_possible_done_done_done=0\n    local -i shift_possible_done_done_done_idx=0\n\
    \    local -i shift_possible_done_done_done_val=0\n    local -i shift_possible_done_done_done_count=0\n\
    \    local -i shift_possible_done_done_done_done=0\n    local -i shift_possible_done_done_done_done_idx=0\n\
    \    local -i shift_possible_done_done_done_done_val=0\n    local -i shift_possible_done_done_done_done_count=0\n\
    \    local -i shift_possible_done_done_done_done_done=0\n    local -i shift_possible_done_done_done_done_done\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i n\n    local\
    \ -i max\n    local -i max_index\n    local -i temp\n    arr=($1)\n    n=${#arr[@]}\n\
    \    max=${arr[0]}\n    max_index=0\n    for ((i=1; i<n; i++)); do\n        if\
    \ [[ ${arr[i]} -gt $max ]]; then\n            max=${arr[i]}\n            max_index=$i\n\
    \        fi\n    done\n    if [[ $max_index -eq 0 ]]; then\n        echo \"True\"\
    \n        return\n    fi\n    temp=${arr[0]}\n    arr[0]=$max\n    for ((i=1;\
    \ i<n; i++)); do\n        j=$((i+max_index))\n        if [[ $j -ge $n ]]; then\n\
    \            j=$((j-n))\n        fi\n        if [[ $j -eq 0 ]]; then\n       \
    \     arr[$j]=$temp\n        else\n            arr[$j]=${arr[i]}\n        fi\n\
    \    done\n    echo \"False\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i n\n    local -i max\n    local\
    \ -i max_i\n    local -i tmp\n    arr=($1)\n    n=${#arr[@]}\n    max=${arr[0]}\n\
    \    max_i=0\n    for ((i=1; i<n; i++)); do\n        if ((max < arr[i])); then\n\
    \            max=${arr[i]}\n            max_i=$i\n        fi\n    done\n    if\
    \ ((max_i == 0)); then\n        return 0\n    fi\n    tmp=${arr[max_i]}\n    for\
    \ ((i=max_i; i>0; i--)); do\n        arr[i]=${arr[i-1]}\n    done\n    arr[0]=$tmp\n\
    \    echo ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i n\n    local -i j\n    local\
    \ -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n    local\
    \ -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local\
    \ -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local\
    \ -i z\n    local -i aa\n    local -i bb\n    local -i cc\n    local -i dd\n \
    \   local -i ee\n    local -i ff\n    local -i gg\n    local -i hh\n    local\
    \ -i ii\n    local -i jj\n    local -i kk\n    local -i ll\n    local -i mm\n\
    \    local -i nn\n    local -i oo\n    local -i pp\n    local -i qq\n    local\
    \ -i rr\n    local -i ss\n    local -i tt\n    local -i uu\n    local -i vv\n\
    \    local -i ww\n    local -i xx\n    local -i yy\n    local -i zz\n    local\
    \ -i aaa\n    local -i bbb\n    local -i ccc\n    local -i ddd\n    local -i eee\n\
    \    local -i fff\n    local -i ggg\n    local -i hhh\n    local -i iii\n    local\
    \ -i jjj\n    local -i kkk\n    local -i lll\n    local -i mmm\n    local -i nnn\n\
    \    local -i ooo\n    local -i ppp\n    local -i qqq\n    local -i rrr\n    local\
    \ -i sss\n    local -i ttt\n    local -i uuu\n    local -i vvv\n    local -i www\n\
    \    local -i xxx\n    local -i yyy\n    local -i zzz\n    local -i aaaa\n   \
    \ local -i bbbb\n    local -i cccc\n    local -i dddd\n    local -i eeee\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i k=0\n    local -i n=${#arr[@]}\n    local -i min=0\n    local -i min_idx=0\n\
    \    local -i max=0\n    local -i max_idx=0\n    local -i tmp=0\n    local -i\
    \ flag=0\n    local -i flag1=0\n    local -i flag2=0\n    local -i flag3=0\n \
    \   local -i flag4=0\n    local -i flag5=0\n    local -i flag6=0\n    local -i\
    \ flag7=0\n    local -i flag8=0\n    local -i flag9=0\n    local -i flag10=0\n\
    \    local -i flag11=0\n    local -i flag12=0\n    local -i flag13=0\n    local\
    \ -i flag14=0\n    local -i flag15=0\n    local -i flag16=0\n    local -i flag17=0\n\
    \    local -i flag18=0\n    local -i flag19=0\n    local -i flag20=0\n    local\
    \ -i flag21=0\n    local -i flag22=0\n    local -i flag23=0\n    local -i flag24=0\n\
    \    local -i flag25=0\n    local -i flag26=0\n    local -i flag27=0\n    local\
    \ -i flag28=0\n    local -i flag29=0\n    local -i flag30=0\n    local -i flag31=0\n\
    \    local -i flag32=0\n    local -i flag33=0\n    local -i flag34=0\n    local\
    \ -i flag35=0\n    local -i flag36=0\n    local -i flag37=0\n    local -i flag38=0\n\
    \    local -i flag39=0\n    local -i flag40=0\n    local -i flag41=0\n    local\
    \ -i flag42=0\n    local -i flag43=0\n    local -i flag44=0\n    local -i flag45=0\n\
    \    local -i\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i n=${#arr[@]}\n    local -i m=0\n    local -i max=0\n    local -i\
    \ max_i=0\n    local -i max_j=0\n    local -i max_k=0\n    local -i max_m=0\n\
    \    local -i max_n=0\n    local -i max_p=0\n    local -i p=0\n    local -i q=0\n\
    \    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local\
    \ -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\
    \    local -i max_q=0\n    local -i max_r=0\n    local -i max_s=0\n    local -i\
    \ max_t=0\n    local -i max_u=0\n    local -i max_v=0\n    local -i max_w=0\n\
    \    local -i max_x=0\n    local -i max_y=0\n    local -i max_z=0\n    local -i\
    \ max_a=0\n    local -i max_b=0\n    local -i max_c=0\n    local -i max_d=0\n\
    \    local -i max_e=0\n    local -i max_f=0\n    local -i max_g=0\n    local -i\
    \ max_h=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i max_k=0\n\
    \    local -i max_l=0\n    local -i max_m=0\n    local -i max_n=0\n    local -i\
    \ max_o=0\n    local -i max_p=0\n    local -i max_q=0\n    local -i max_r=0\n\
    \    local -i max_s=0\n    local -i max_t=0\n    local\n}\n\ncandidate() {\n \
    \   move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9uiy3qt7.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i n\n    local -i tmp\n    arr=($1)\n    n=${#arr[@]}\n    for ((i=0; i<n;\
    \ i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]}\
    \ -gt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((k=0; k<n; k++)); do\n        echo -n \"${arr[k]} \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i max=0\n    local -i min=0\n    local\
    \ -i max_index=0\n    local -i min_index=0\n    local -i temp=0\n    local -i\
    \ flag=0\n    local -i flag1=0\n    local -i flag2=0\n    local -i flag3=0\n \
    \   local -i flag4=0\n    local -i flag5=0\n    local -i flag6=0\n    local -i\
    \ flag7=0\n    local -i flag8=0\n    local -i flag9=0\n    local -i flag10=0\n\
    \    local -i flag11=0\n    local -i flag12=0\n    local -i flag13=0\n    local\
    \ -i flag14=0\n    local -i flag15=0\n    local -i flag16=0\n    local -i flag17=0\n\
    \    local -i flag18=0\n    local -i flag19=0\n    local -i flag20=0\n    local\
    \ -i flag21=0\n    local -i flag22=0\n    local -i flag23=0\n    local -i flag24=0\n\
    \    local -i flag25=0\n    local -i flag26=0\n    local -i flag27=0\n    local\
    \ -i flag28=0\n    local -i flag29=0\n    local -i flag30=0\n    local -i flag31=0\n\
    \    local -i flag32=0\n    local -i flag33=0\n    local -i flag34=0\n    local\
    \ -i flag35=0\n    local -i flag36=0\n    local -i flag37=0\n    local -i flag38=0\n\
    \    local -i flag39=0\n    local -i flag40=0\n    local -i flag41=0\n    local\
    \ -i flag42=0\n    local -i flag43=0\n    local -i flag44=0\n    local -i flag45=0\n\
    \    local -i flag46=\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i n\n    local -i tmp\n    arr=($1)\n    n=${#arr[@]}\n    for ((i=0; i<n;\
    \ i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]}\
    \ -gt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((k=0; k<n; k++)); do\n        echo -n \"${arr[k]} \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i n=${#arr[@]}\n    local -i tmp=0\n    local -i flag=0\n    local\
    \ -i flag1=0\n    local -i flag2=0\n    local -i flag3=0\n    local -i flag4=0\n\
    \    local -i flag5=0\n    local -i flag6=0\n    local -i flag7=0\n    local -i\
    \ flag8=0\n    local -i flag9=0\n    local -i flag10=0\n    local -i flag11=0\n\
    \    local -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n    local\
    \ -i flag15=0\n    local -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n\
    \    local -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n    local\
    \ -i flag22=0\n    local -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n\
    \    local -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n    local\
    \ -i flag29=0\n    local -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n\
    \    local -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n    local\
    \ -i flag36=0\n    local -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n\
    \    local -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n    local\
    \ -i flag43=0\n    local -i flag44=0\n    local -i flag45=0\n    local -i flag46=0\n\
    \    local -i flag47=0\n    local -i flag48=0\n    local -i flag49=0\n    local\
    \ -i flag50=\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    local tmp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n    \
    \    for ((j=i+1; j<len; j++))\n        do\n            if [[ ${arr[$i]} -gt ${arr[$j]}\
    \ ]]\n            then\n                tmp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n\
    \                arr[$j]=$tmp\n                flag=1\n            fi\n      \
    \  done\n    done\n    if [[ $flag -eq 0 ]]\n    then\n        echo \"True\"\n\
    \    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i n\n    local -i tmp\n    local -i flag\n    arr=($1)\n    n=${#arr[@]}\n\
    \    flag=0\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n\
    \            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n             \
    \   flag=1\n            fi\n        done\n    done\n    if [[ $flag -eq 0 ]];\
    \ then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local i=0\n    local j=0\n    local tmp=0\n    local\
    \ N=${#arr[@]}\n    for ((i=0; i<N; i++)); do\n        for ((j=i+1; j<N; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8kqaiyqq.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i n=${#arr[@]}\n    local -i max=0\n    local -i max_idx=0\n    local\
    \ -i min=0\n    local -i min_idx=0\n    local -i tmp=0\n    local -i tmp_idx=0\n\
    \    local -i tmp_idx2=0\n    local -i tmp_idx3=0\n    local -i tmp_idx4=0\n \
    \   local -i tmp_idx5=0\n    local -i tmp_idx6=0\n    local -i tmp_idx7=0\n  \
    \  local -i tmp_idx8=0\n    local -i tmp_idx9=0\n    local -i tmp_idx10=0\n  \
    \  local -i tmp_idx11=0\n    local -i tmp_idx12=0\n    local -i tmp_idx13=0\n\
    \    local -i tmp_idx14=0\n    local -i tmp_idx15=0\n    local -i tmp_idx16=0\n\
    \    local -i tmp_idx17=0\n    local -i tmp_idx18=0\n    local -i tmp_idx19=0\n\
    \    local -i tmp_idx20=0\n    local -i tmp_idx21=0\n    local -i tmp_idx22=0\n\
    \    local -i tmp_idx23=0\n    local -i tmp_idx24=0\n    local -i tmp_idx25=0\n\
    \    local -i tmp_idx26=0\n    local -i tmp_idx27=0\n    local -i tmp_idx28=0\n\
    \    local -i tmp_idx29=0\n    local -i tmp_idx30=0\n    local -i tmp_idx31=0\n\
    \    local -i tmp_idx32=0\n    local -i tmp_idx33=0\n    local -i tmp_idx34=0\n\
    \    local -i tmp_idx35=0\n   \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1uoesbts.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i n=${#arr[@]}\n    local -i max=0\n    local -i max_i=0\n    local\
    \ -i max_j=0\n    local -i max_k=0\n    local -i max_n=0\n    local -i max_count=0\n\
    \    local -i count=0\n    local -i max_count_i=0\n    local -i max_count_j=0\n\
    \    local -i max_count_k=0\n    local -i max_count_n=0\n    local -i max_count_count=0\n\
    \    local -i max_count_max=0\n    local -i max_count_max_i=0\n    local -i max_count_max_j=0\n\
    \    local -i max_count_max_k=0\n    local -i max_count_max_n=0\n    local -i\
    \ max_count_max_count=0\n    local -i max_count_max_count_i=0\n    local -i max_count_max_count_j=0\n\
    \    local -i max_count_max_count_k=0\n    local -i max_count_max_count_n=0\n\
    \    local -i max_count_max_count_count=0\n    local -i max_count_max_count_max=0\n\
    \    local -i max_count_max_count_max_i=0\n    local -i max_count_max_count_max_j=0\n\
    \    local -i max_count_max_count_max_k=0\n    local -i max_count_max_count_max_n=0\n\
    \    local -i max_count_max_count_max_count=0\n    local -i max_count_max_count_max_max=0\n\
    \    local -i max_count_max_count_max_max_i=0\n    local -i max_count_max_count_max_max_j=0\n\
    \    local -i max_count_max_count_\n}\n\ncandidate() {\n    move_one_ball \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local\
    \ -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n\
    \    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local\
    \ -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n\
    \    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n\
    \    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n\
    \    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n\
    \    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n\
    \    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n\
    \    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n\
    \    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n\
    \    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n\
    \    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n\
    \    local -i lll=0\n    local -i mmm=0\n    local\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i min=0\n\
    \    local -i max=0\n    local -i flag=0\n    local -i flag1=0\n    local -i flag2=0\n\
    \    local -i flag3=0\n    local -i flag4=0\n    local -i flag5=0\n    local -i\
    \ flag6=0\n    local -i flag7=0\n    local -i flag8=0\n    local -i flag9=0\n\
    \    local -i flag10=0\n    local -i flag11=0\n    local -i flag12=0\n    local\
    \ -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n    local -i flag16=0\n\
    \    local -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n    local\
    \ -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n    local -i flag23=0\n\
    \    local -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n    local\
    \ -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n    local -i flag30=0\n\
    \    local -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n    local\
    \ -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n    local -i flag37=0\n\
    \    local -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n    local\
    \ -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n    local -i flag44=0\n\
    \    local -i flag45=0\n    local -i flag46=0\n    local -i flag47=0\n   \n}\n\
    \ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i n\n    local -i tmp\n    local -i flag\n    local -i flag2\n    arr=($1)\n\
    \    n=${#arr[@]}\n    flag=0\n    flag2=0\n    for ((i=0; i<n; i++)); do\n  \
    \      for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]}\
    \ ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n                flag=1\n            fi\n       \
    \ done\n        if [[ $flag -eq 0 ]]; then\n            flag2=1\n        fi\n\
    \    done\n    if [[ $flag2 -eq 1 ]]; then\n        echo \"True\"\n    else\n\
    \        echo \"False\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -a new_arr\n    local i\n    local j\n\
    \    local len=${#arr[@]}\n    local min=${arr[0]}\n    local min_index=0\n  \
    \  for ((i=1; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n  \
    \          min=${arr[i]}\n            min_index=$i\n        fi\n    done\n   \
    \ for ((i=0; i<len; i++)); do\n        j=$(((i+min_index)%len))\n        new_arr[$i]=${arr[j]}\n\
    \    done\n    echo ${new_arr[@]}\n}\n\ncandidate() {\n    move_one_ball \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local tmp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n    \
    \    for ((j=i+1; j<len; j++))\n        do\n            if [ ${arr[$i]} -gt ${arr[$j]}\
    \ ]\n            then\n                tmp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n\
    \                arr[$j]=$tmp\n                flag=1\n            fi\n      \
    \  done\n    done\n    if [ $flag -eq 0 ]\n    then\n        echo \"True\"\n \
    \   else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i m=0\n    local -i k=0\n    local -i l=0\n    local -i max=0\n  \
    \  local -i min=0\n    local -i max_i=0\n    local -i min_i=0\n    local -i max_j=0\n\
    \    local -i min_j=0\n    local -i max_k=0\n    local -i min_k=0\n    local -i\
    \ max_l=0\n    local -i min_l=0\n    local -i max_m=0\n    local -i min_m=0\n\
    \    local -i max_n=0\n    local -i min_n=0\n    local -i max_o=0\n    local -i\
    \ min_o=0\n    local -i max_p=0\n    local -i min_p=0\n    local -i max_q=0\n\
    \    local -i min_q=0\n    local -i max_r=0\n    local -i min_r=0\n    local -i\
    \ max_s=0\n    local -i min_s=0\n    local -i max_t=0\n    local -i min_t=0\n\
    \    local -i max_u=0\n    local -i min_u=0\n    local -i max_v=0\n    local -i\
    \ min_v=0\n    local -i max_w=0\n    local -i min_w=0\n    local -i max_x=0\n\
    \    local -i min_x=0\n    local -i max_y=0\n    local -i min_y=0\n    local -i\
    \ max_z=0\n    local -i min_z=0\n    local -i max_aa=0\n    local -i min_aa=0\n\
    \    local -i max_bb=0\n    local -i min_bb=0\n    local -i max_cc=0\n    local\
    \ -i min_cc=0\n    local -i max_dd=0\n    local -i\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpw_7mixgf.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local i\n    local j\n    local -i n\n    local -i\
    \ min\n    local -i min_i\n    local -i min_j\n    local -i tmp\n    IFS=' ' read\
    \ -r -a arr <<< \"$1\"\n    n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n    \
    \    min=${arr[i]}\n        min_i=$i\n        min_j=$i\n        for ((j=i+1; j<n;\
    \ j++)); do\n            if [[ ${arr[j]} -lt $min ]]; then\n                min=${arr[j]}\n\
    \                min_i=$i\n                min_j=$j\n            fi\n        done\n\
    \        if [[ $min_i -ne $min_j ]]; then\n            tmp=${arr[min_i]}\n   \
    \         arr[min_i]=${arr[min_j]}\n            arr[min_j]=$tmp\n        fi\n\
    \    done\n    echo \"${arr[@]}\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local n=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local tmp=0\n    local flag=0\n    for ((i=0; i<n; i++)); do\n        for\
    \ ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n\
    \                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n           \
    \     arr[j]=$tmp\n                flag=1\n            fi\n        done\n    done\n\
    \    if [[ $flag -eq 0 ]]; then\n        echo \"True\"\n    else\n        echo\
    \ \"False\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgg1p9jwx.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i len=${#arr[@]}\n    local -i max=0\n    local -i max_index=0\n    local -i\
    \ min=0\n    local -i min_index=0\n    local -i tmp=0\n    local -i tmp_index=0\n\
    \    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -gt max ]]; then\n \
    \           max=${arr[i]}\n            max_index=i\n        fi\n    done\n   \
    \ for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -lt min ]]; then\n    \
    \        min=${arr[i]}\n            min_index=i\n        fi\n    done\n    if\
    \ [[ max_index -eq 0 ]]; then\n        tmp=${arr[0]}\n        arr[0]=${arr[min_index]}\n\
    \        arr[min_index]=$tmp\n    elif [[ min_index -eq 0 ]]; then\n        tmp=${arr[0]}\n\
    \        arr[0]=${arr[max_index]}\n        arr[max_index]=$tmp\n    else\n   \
    \     if [[ max -gt min ]]; then\n            tmp=${arr[0]}\n            arr[0]=${arr[max_index]}\n\
    \            arr[max_index]=$tmp\n        else\n            tmp=${arr[0]}\n  \
    \          arr[0]=${arr[min_index]}\n            arr[min_index]=$tmp\n       \
    \ fi\n    fi\n    echo \"${arr[@]}\"\n}\n\ncandidate() {\n    move_one_ball \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptc8k4h0l.sh: line 33: [[: 3 4 5 1 2: syntax error in expression
    (error token is "4 5 1 2")

    /tmp/tmptc8k4h0l.sh: line 39: [[: 3 4 5 1 2: syntax error in expression (error
    token is "4 5 1 2")

    /tmp/tmptc8k4h0l.sh: line 45: 3 4 5 1 2: syntax error in expression (error token
    is "4 5 1 2")

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -a new_arr\n    local i\n    local j\n\
    \    local k\n    local -i len=${#arr[@]}\n    local -i max_index\n    local -i\
    \ max_value\n    local -i max_value_index\n    local -i max_value_index_new\n\
    \    local -i max_value_index_old\n    local -i max_value_index_old_new\n    local\
    \ -i max_value_index_old_old\n    local -i max_value_index_old_old_new\n    local\
    \ -i max_value_index_old_old_old\n    local -i max_value_index_old_old_old_new\n\
    \    local -i max_value_index_old_old_old_old\n    local -i max_value_index_old_old_old_old_new\n\
    \    local -i max_value_index_old_old_old_old_old\n    local -i max_value_index_old_old_old_old_old_new\n\
    \    local -i max_value_index_old_old_old_old_old_old\n    local -i max_value_index_old_old_old_old_old_old_new\n\
    \    local -i max_value_index_old_old_old_old_old_old_old\n    local -i max_value_index_old_old_old_old_old_old_old_new\n\
    \    local -i max_value_index_old_old_old_old_old_old_old_old\n    local -i max_value_index_old_old_old_old_old_old_old_old_new\n\
    \    local -i max_value_index_old_old_old_old_old_old_old_old_old\n    local -i\
    \ max_value_index_old_old_old_old_old_old_old_old_old_new\n    local -i max_value_index_old_old_old_old_old_old_old_old_old_old\n\
    \    local -i max_value_index_old_old_old_old_old_old\n}\n\ncandidate() {\n  \
    \  move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i j\n    local -i len=${#1}\n    local -i\
    \ max_idx=0\n    local -i max_val=0\n    local -i max_idx_prev=0\n    local -i\
    \ max_val_prev=0\n    local -i max_idx_prev_prev=0\n    local -i max_val_prev_prev=0\n\
    \    local -i max_idx_prev_prev_prev=0\n    local -i max_val_prev_prev_prev=0\n\
    \    local -i max_idx_prev_prev_prev_prev=0\n    local -i max_val_prev_prev_prev_prev=0\n\
    \    local -i max_idx_prev_prev_prev_prev_prev=0\n    local -i max_val_prev_prev_prev_prev_prev=0\n\
    \    local -i max_idx_prev_prev_prev_prev_prev_prev=0\n    local -i max_val_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_idx_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_val_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_idx_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i\
    \ max_val_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_val_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local\
    \ -i max_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i\
    \ max_val_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -n sorted=$2\n    local -n n=$3\n    local\
    \ -n i=$4\n    local -n j=$5\n    local -n k=$6\n    local -n l=$7\n    local\
    \ -n m=$8\n    local -n n=$9\n    local -n o=${10}\n    local -n p=${11}\n   \
    \ local -n q=${12}\n    local -n r=${13}\n    local -n s=${14}\n    local -n t=${15}\n\
    \    local -n u=${16}\n    local -n v=${17}\n    local -n w=${18}\n    local -n\
    \ x=${19}\n    local -n y=${20}\n    local -n z=${21}\n    local -n aa=${22}\n\
    \    local -n bb=${23}\n    local -n cc=${24}\n    local -n dd=${25}\n    local\
    \ -n ee=${26}\n    local -n ff=${27}\n    local -n gg=${28}\n    local -n hh=${29}\n\
    \    local -n ii=${30}\n    local -n jj=${31}\n    local -n kk=${32}\n    local\
    \ -n ll=${33}\n    local -n mm=${34}\n    local -n nn=${35}\n    local -n oo=${36}\n\
    \    local -n pp=${37}\n    local -n qq=${38}\n    local -n rr=${39}\n    local\
    \ -n ss=${40}\n    local -n tt=${41}\n    local -n uu=${42}\n    local -n vv=${43}\n\
    \    local -n ww=${44}\n    local -n xx=${45}\n    local -n yy=${46}\n    local\
    \ -n zz=${47}\n    local -n aaa=${48}\n    local -n bbb=${49}\n    local -n ccc=${50}\n\
    \    local -n ddd=${51\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpit0y01sv.sh: line 89: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i len=${#arr[@]}\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local\
    \ -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n\
    \    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local\
    \ -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n\
    \    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n\
    \    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n\
    \    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n\
    \    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n\
    \    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n\
    \    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n\
    \    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n\
    \    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n\
    \    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n\
    \    local -i lll=0\n    local -i mmm=0\n    local\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i n=${#arr[@]}\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n\
    \    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local\
    \ -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n\
    \    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local\
    \ -i b=0\n    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n\
    \    local -i g=0\n    local -i h=0\n    local -i i=0\n    local -i j=0\n    local\
    \ -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n\
    \    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local\
    \ -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n\
    \    local -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n    local\
    \ -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n\
    \    local -i h=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local\
    \ -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n\
    \    local -i q=0\n    local\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpboimhdi3.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local\
    \ -i max=0\n    local -i min=0\n    local -i max_index=0\n    local -i min_index=0\n\
    \    local -i max_index_prev=0\n    local -i min_index_prev=0\n    local -i max_index_next=0\n\
    \    local -i min_index_next=0\n    local -i max_index_prev_prev=0\n    local\
    \ -i min_index_prev_prev=0\n    local -i max_index_next_next=0\n    local -i min_index_next_next=0\n\
    \    local -i max_index_prev_prev_prev=0\n    local -i min_index_prev_prev_prev=0\n\
    \    local -i max_index_next_next_next=0\n    local -i min_index_next_next_next=0\n\
    \    local -i max_index_prev_prev_prev_prev=0\n    local -i min_index_prev_prev_prev_prev=0\n\
    \    local -i max_index_next_next_next_next=0\n    local -i min_index_next_next_next_next=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev=0\n    local -i min_index_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_next_next_next_next_next=0\n    local -i min_index_next_next_next_next_next=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev=0\n    local -i min_index_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_next_next_next_next_next_next=0\n    local -i min_index_next_next_next_next_next_next=0\n\
    \    local -\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i temp=0\n    for ((i=0; i<n; i++))\n    do\n        for ((j=0; j<n-i-1;\
    \ j++))\n        do\n            if [[ ${arr[j]} -gt ${arr[j+1]} ]]\n        \
    \    then\n                temp=${arr[j]}\n                arr[j]=${arr[j+1]}\n\
    \                arr[j+1]=$temp\n            fi\n        done\n    done\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7ipj_uy8.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i k=0\n    local -i n=${#arr[@]}\n    local -i m=0\n    local -i max=0\n  \
    \  local -i max_index=0\n    local -i min=0\n    local -i min_index=0\n    local\
    \ -i temp=0\n    local -i flag=0\n    local -i flag2=0\n    local -i flag3=0\n\
    \    local -i flag4=0\n    local -i flag5=0\n    local -i flag6=0\n    local -i\
    \ flag7=0\n    local -i flag8=0\n    local -i flag9=0\n    local -i flag10=0\n\
    \    local -i flag11=0\n    local -i flag12=0\n    local -i flag13=0\n    local\
    \ -i flag14=0\n    local -i flag15=0\n    local -i flag16=0\n    local -i flag17=0\n\
    \    local -i flag18=0\n    local -i flag19=0\n    local -i flag20=0\n    local\
    \ -i flag21=0\n    local -i flag22=0\n    local -i flag23=0\n    local -i flag24=0\n\
    \    local -i flag25=0\n    local -i flag26=0\n    local -i flag27=0\n    local\
    \ -i flag28=0\n    local -i flag29=0\n    local -i flag30=0\n    local -i flag31=0\n\
    \    local -i flag32=0\n    local -i flag33=0\n    local -i flag34=0\n    local\
    \ -i flag35=0\n    local -i flag36=0\n    local -i flag37=0\n    local -i flag38=0\n\
    \    local -i flag39=0\n    local -i flag40=0\n    local -i flag41=0\n    local\
    \ -i flag42=0\n    local -i flag43=0\n    local -i flag44=0\n    local -i flag45=0\n\
    \    local -i flag46=\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ n=${#arr[@]}\n    local tmp=0\n    local flag=0\n    local flag1=0\n    local\
    \ flag2=0\n    local flag3=0\n    local flag4=0\n    local flag5=0\n    local\
    \ flag6=0\n    local flag7=0\n    local flag8=0\n    local flag9=0\n    local\
    \ flag10=0\n    local flag11=0\n    local flag12=0\n    local flag13=0\n    local\
    \ flag14=0\n    local flag15=0\n    local flag16=0\n    local flag17=0\n    local\
    \ flag18=0\n    local flag19=0\n    local flag20=0\n    local flag21=0\n    local\
    \ flag22=0\n    local flag23=0\n    local flag24=0\n    local flag25=0\n    local\
    \ flag26=0\n    local flag27=0\n    local flag28=0\n    local flag29=0\n    local\
    \ flag30=0\n    local flag31=0\n    local flag32=0\n    local flag33=0\n    local\
    \ flag34=0\n    local flag35=0\n    local flag36=0\n    local flag37=0\n    local\
    \ flag38=0\n    local flag39=0\n    local flag40=0\n    local flag41=0\n    local\
    \ flag42=0\n    local flag43=0\n    local flag44=0\n    local flag45=0\n    local\
    \ flag46=0\n    local flag47=0\n    local flag48=0\n    local flag49=0\n    local\
    \ flag50=0\n    local flag51=0\n    local flag52=0\n    local flag53=0\n    local\
    \ flag54=0\n    local flag55=0\n    local flag56=0\n    local flag57=0\n    local\
    \ flag58=0\n    local flag59=0\n    local flag60=0\n    local flag61=0\n    local\
    \ flag62=0\n    local flag63=0\n    local flag64=0\n    local flag65=0\n    local\
    \ flag66=0\n\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2uo547fx.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -a new_arr=()\n    local -i i=0\n    local\
    \ -i j=0\n    local -i len=${#arr[@]}\n    local -i last_index=$((len-1))\n  \
    \  local -i last_ball=${arr[$last_index]}\n    for ((i=0; i<len; i++)); do\n \
    \       if ((i == last_index)); then\n            new_arr[$j]=$last_ball\n   \
    \     else\n            new_arr[$j]=${arr[$i]}\n        fi\n        ((j++))\n\
    \    done\n    echo ${new_arr[@]}\n}\n\ncandidate() {\n    move_one_ball \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local last=${arr[$len-1]}\n\
    \    local i\n    for ((i=len-1; i>0; i--)); do\n        arr[$i]=${arr[$i-1]}\n\
    \    done\n    arr[0]=$last\n    echo ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local k=0\n    local temp=0\n    local flag=0\n    local flag1=0\n    local\
    \ flag2=0\n    local flag3=0\n    local flag4=0\n    local flag5=0\n    local\
    \ flag6=0\n    local flag7=0\n    local flag8=0\n    local flag9=0\n    local\
    \ flag10=0\n    local flag11=0\n    local flag12=0\n    local flag13=0\n    local\
    \ flag14=0\n    local flag15=0\n    local flag16=0\n    local flag17=0\n    local\
    \ flag18=0\n    local flag19=0\n    local flag20=0\n    local flag21=0\n    local\
    \ flag22=0\n    local flag23=0\n    local flag24=0\n    local flag25=0\n    local\
    \ flag26=0\n    local flag27=0\n    local flag28=0\n    local flag29=0\n    local\
    \ flag30=0\n    local flag31=0\n    local flag32=0\n    local flag33=0\n    local\
    \ flag34=0\n    local flag35=0\n    local flag36=0\n    local flag37=0\n    local\
    \ flag38=0\n    local flag39=0\n    local flag40=0\n    local flag41=0\n    local\
    \ flag42=0\n    local flag43=0\n    local flag44=0\n    local flag45=0\n    local\
    \ flag46=0\n    local flag47=0\n    local flag48=0\n    local flag49=0\n    local\
    \ flag50=0\n    local flag51=0\n    local flag52=0\n    local flag53=0\n    local\
    \ flag54=0\n    local flag55=0\n    local flag56=0\n    local flag57=0\n    local\
    \ flag58=0\n    local flag59=0\n    local flag60=0\n    local flag61=0\n    local\
    \ flag62=0\n    local flag63=0\n    local flag64=0\n    local flag65=0\n    local\
    \ flag66=0\n\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i j\n    local -i n\n    local -i x\n    local\
    \ -i y\n    local -i z\n    local -i count\n    local -i flag\n    local -i flag1\n\
    \    local -i flag2\n    local -i flag3\n    local -i flag4\n    local -i flag5\n\
    \    local -i flag6\n    local -i flag7\n    local -i flag8\n    local -i flag9\n\
    \    local -i flag10\n    local -i flag11\n    local -i flag12\n    local -i flag13\n\
    \    local -i flag14\n    local -i flag15\n    local -i flag16\n    local -i flag17\n\
    \    local -i flag18\n    local -i flag19\n    local -i flag20\n    local -i flag21\n\
    \    local -i flag22\n    local -i flag23\n    local -i flag24\n    local -i flag25\n\
    \    local -i flag26\n    local -i flag27\n    local -i flag28\n    local -i flag29\n\
    \    local -i flag30\n    local -i flag31\n    local -i flag32\n    local -i flag33\n\
    \    local -i flag34\n    local -i flag35\n    local -i flag36\n    local -i flag37\n\
    \    local -i flag38\n    local -i flag39\n    local -i flag40\n    local -i flag41\n\
    \    local -i flag42\n    local -i flag43\n    local -i flag44\n    local -i flag45\n\
    \    local -i flag46\n    local -i flag47\n    local -i flag48\n    local -i flag49\n\
    \    local -i flag50\n    local -i flag51\n    local -i flag52\n    local -i flag53\n\
    \    local -i flag54\n    local -i flag55\n    local -i flag56\n    local -i flag57\n\
    \    local -i flag58\n    local -i flag59\n    local -i flag60\n    local -i flag61\n\
    \    local -i flag62\n    local -i flag63\n    local -i flag64\n    local -i flag65\n\
    \    local -i flag66\n\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -a new_arr\n    local -i i\n    local -i\
    \ j\n    local -i len=${#arr[@]}\n    local -i last_ball=${arr[$len-1]}\n    for\
    \ ((i=0; i<len-1; i++)); do\n        new_arr[$i]=${arr[$i]}\n    done\n    new_arr[$len-1]=${arr[0]}\n\
    \    for ((i=0; i<len-1; i++)); do\n        if [[ ${new_arr[$i]} -gt ${new_arr[$i+1]}\
    \ ]]; then\n            return 1\n        fi\n    done\n    return 0\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i j\n    local -i N\n    local -i shift_count\n\
    \    local -i max_shift_count\n    local -i max_shift_count_index\n    local -i\
    \ max_shift_count_index_prev\n    local -i max_shift_count_index_prev_prev\n \
    \   local -i max_shift_count_index_prev_prev_prev\n    local -i max_shift_count_index_prev_prev_prev_prev\n\
    \    local -i max_shift_count_index_prev_prev_prev_prev_prev\n    local -i max_shift_count_index_prev_prev_prev_prev_prev_prev\n\
    \    local -i max_shift_count_index_prev_prev_prev_prev_prev_prev_prev\n    local\
    \ -i max_shift_count_index_prev_prev_prev_prev_prev_prev_prev_prev\n    local\
    \ -i max_shift_count_index_prev_prev_prev_prev_prev_prev_prev_prev_prev\n    local\
    \ -i max_shift_count_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local -i max_shift_count_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local -i max_shift_count_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local -i max_shift_count_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local -i max_shift_count_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local -i max_shift_count_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local -i max_shift_count_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -a new_arr\n    local i\n    local j\n\
    \    local k\n    local n\n    local -i flag=0\n    n=${#arr[@]}\n    for ((i=0;\
    \ i<n; i++)); do\n        if [[ ${arr[i]} -gt ${arr[i+1]} ]]; then\n         \
    \   flag=1\n            break\n        fi\n    done\n    if [[ $flag -eq 0 ]];\
    \ then\n        echo \"True\"\n        return\n    fi\n    for ((i=0; i<n; i++));\
    \ do\n        if [[ ${arr[i]} -gt ${arr[i+1]} ]]; then\n            for ((j=i+1;\
    \ j<n; j++)); do\n                if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n   \
    \                 break\n                fi\n            done\n            for\
    \ ((k=j; k>i; k--)); do\n                arr[k]=${arr[k-1]}\n            done\n\
    \            arr[i]=${arr[j]}\n            break\n        fi\n    done\n    move_one_ball\
    \ \"${arr[@]}\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxt_yl_ee.sh: line 31: [[: 3 4 5 1 2: syntax error in expression
    (error token is "4 5 1 2")

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i n\n    local -i tmp\n    arr=($1)\n    n=${#arr[@]}\n    for ((i=0; i<n;\
    \ i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]}\
    \ -gt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((k=0; k<n; k++)); do\n        echo -n \"${arr[k]} \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i n\n    local -i min\n    local -i min_index\n    local -i temp\n    local\
    \ -i flag\n    arr=($1)\n    n=${#arr[@]}\n    for ((i=0; i<n-1; i++)) {\n   \
    \     min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<n; j++)) {\n\
    \            if [[ ${arr[j]} -lt $min ]]; then\n                min=${arr[j]}\n\
    \                min_index=$j\n            fi\n        }\n        if [[ $min_index\
    \ -ne $i ]]; then\n            temp=${arr[i]}\n            arr[i]=${arr[min_index]}\n\
    \            arr[min_index]=$temp\n        fi\n    }\n    flag=1\n    for ((k=0;\
    \ k<n-1; k++)) {\n        if [[ ${arr[k]} -gt ${arr[k+1]} ]]; then\n         \
    \   flag=0\n            break\n        fi\n    }\n    if [[ $flag -eq 1 ]]; then\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i len=${#arr[@]}\n    local -i i\n\
    \    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i\
    \ n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local\
    \ -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local\
    \ -i x\n    local -i y\n    local -i z\n    local -i aa\n    local -i bb\n   \
    \ local -i cc\n    local -i dd\n    local -i ee\n    local -i ff\n    local -i\
    \ gg\n    local -i hh\n    local -i ii\n    local -i jj\n    local -i kk\n   \
    \ local -i ll\n    local -i mm\n    local -i nn\n    local -i oo\n    local -i\
    \ pp\n    local -i qq\n    local -i rr\n    local -i ss\n    local -i tt\n   \
    \ local -i uu\n    local -i vv\n    local -i ww\n    local -i xx\n    local -i\
    \ yy\n    local -i zz\n    local -i aaa\n    local -i bbb\n    local -i ccc\n\
    \    local -i ddd\n    local -i eee\n    local -i fff\n    local -i ggg\n    local\
    \ -i hhh\n    local -i iii\n    local -i jjj\n    local -i kkk\n    local -i lll\n\
    \    local -i mmm\n    local -i nnn\n    local -i ooo\n    local -i ppp\n    local\
    \ -i qqq\n    local -i rrr\n    local -i sss\n    local -i ttt\n    local -i uuu\n\
    \    local -i vvv\n    local -i www\n    local -i xxx\n    local -i yyy\n    local\
    \ -i zzz\n    local -i aaaa\n    local -i bbbb\n    local -i cccc\n    local -\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i n=${#arr[@]}\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i min=0\n    local -i min_index=0\n   \
    \ local -i max=0\n    local -i max_index=0\n    local -i temp=0\n    local -i\
    \ result=0\n    local -i flag=0\n    local -i flag1=0\n    local -i flag2=0\n\
    \    local -i flag3=0\n    local -i flag4=0\n    local -i flag5=0\n    local -i\
    \ flag6=0\n    local -i flag7=0\n    local -i flag8=0\n    local -i flag9=0\n\
    \    local -i flag10=0\n    local -i flag11=0\n    local -i flag12=0\n    local\
    \ -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n    local -i flag16=0\n\
    \    local -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n    local\
    \ -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n    local -i flag23=0\n\
    \    local -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n    local\
    \ -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n    local -i flag30=0\n\
    \    local -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n    local\
    \ -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n    local -i flag37=0\n\
    \    local -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n    local\
    \ -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n    local -i flag44=0\n\
    \    local -i flag45=0\n   \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpurokoaun.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i max=0\n    local -i max_index=0\n    local -i min=0\n    local -i\
    \ min_index=0\n    local -i temp=0\n    local -i flag=0\n    local -i flag2=0\n\
    \    local -i flag3=0\n    local -i flag4=0\n    local -i flag5=0\n    local -i\
    \ flag6=0\n    local -i flag7=0\n    local -i flag8=0\n    local -i flag9=0\n\
    \    local -i flag10=0\n    local -i flag11=0\n    local -i flag12=0\n    local\
    \ -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n    local -i flag16=0\n\
    \    local -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n    local\
    \ -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n    local -i flag23=0\n\
    \    local -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n    local\
    \ -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n    local -i flag30=0\n\
    \    local -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n    local\
    \ -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n    local -i flag37=0\n\
    \    local -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n    local\
    \ -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n    local -i flag44=0\n\
    \    local -i flag45=0\n    local -i flag46=0\n    local -i flag47=0\n    local\
    \ -i flag48=0\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvn3kkv9g.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    arr=($1)\n    local -i i=0\n    local -i j=0\n    local\
    \ -i k=0\n    local -i n=${#arr[@]}\n    local -i m=0\n    local -i max=0\n  \
    \  local -i min=0\n    local -i max_i=0\n    local -i min_i=0\n    local -i max_j=0\n\
    \    local -i min_j=0\n    local -i max_k=0\n    local -i min_k=0\n    local -i\
    \ max_m=0\n    local -i min_m=0\n    local -i max_n=0\n    local -i min_n=0\n\
    \    local -i max_max=0\n    local -i min_min=0\n    local -i max_min=0\n    local\
    \ -i min_max=0\n    local -i max_max_i=0\n    local -i min_min_i=0\n    local\
    \ -i max_min_i=0\n    local -i min_max_i=0\n    local -i max_max_j=0\n    local\
    \ -i min_min_j=0\n    local -i max_min_j=0\n    local -i min_max_j=0\n    local\
    \ -i max_max_k=0\n    local -i min_min_k=0\n    local -i max_min_k=0\n    local\
    \ -i min_max_k=0\n    local -i max_max_m=0\n    local -i min_min_m=0\n    local\
    \ -i max_min_m=0\n    local -i min_max_m=0\n    local -i max_max_n=0\n    local\
    \ -i min_min_n=0\n    local -i max_min_n=0\n    local -i min_max_n=0\n    local\
    \ -i max_max_max=0\n    local -i min_min_min=0\n    local -i max_min_min=0\n \
    \   local -i min_max_max=0\n    local -i max_max_min\n}\n\ncandidate() {\n   \
    \ move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a balls\n    local -i i\n    local -i j\n    local -i n\n    local\
    \ -i tmp\n    local -i retval\n    local -i sorted\n    local -i max_balls\n \
    \   local -i max_balls_index\n    local -i max_balls_index_tmp\n    local -i max_balls_tmp\n\
    \    local -i max_balls_index_tmp\n    local -i max_balls_tmp\n    local -i max_balls_index_tmp\n\
    \    local -i max_balls_tmp\n    local -i max_balls_index_tmp\n    local -i max_balls_tmp\n\
    \    local -i max_balls_index_tmp\n    local -i max_balls_tmp\n    local -i max_balls_index_tmp\n\
    \    local -i max_balls_tmp\n    local -i max_balls_index_tmp\n    local -i max_balls_tmp\n\
    \    local -i max_balls_index_tmp\n    local -i max_balls_tmp\n    local -i max_balls_index_tmp\n\
    \    local -i max_balls_tmp\n    local -i max_balls_index_tmp\n    local -i max_balls_tmp\n\
    \    local -i max_balls_index_tmp\n    local -i max_balls_tmp\n    local -i max_balls_index_tmp\n\
    \    local -i max_balls_tmp\n    local -i max_balls_index_tmp\n    local -i max_balls_tmp\n\
    \    local -i max_balls_index_tmp\n    local -i max_balls_tmp\n    local -i max_balls_index_tmp\n\
    \    local -i max_balls_tmp\n    local -i max_balls_index_tmp\n    local -i max_balls_tmp\n\
    \    local -i max_balls_index_tmp\n    local -i max_balls_tmp\n    local -i max_balls_index_tmp\n\
    \    local -i max_balls_tmp\n    local -i max_balls_index_tmp\n    local -i max_balls_tmp\n\
    \    local -i max_balls_index_tmp\n    local -i max_balls_tmp\n    local -i max_balls_index_\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i n=${#arr[@]}\n    local -i min=0\n    local -i min_index=0\n    local -i\
    \ temp=0\n    local -i flag=0\n    for ((i=0; i<n; i++))\n    do\n        min=${arr[i]}\n\
    \        min_index=$i\n        for ((j=i+1; j<n; j++))\n        do\n         \
    \   if [[ ${arr[j]} -lt $min ]]\n            then\n                min=${arr[j]}\n\
    \                min_index=$j\n            fi\n        done\n        if [[ $min_index\
    \ -ne $i ]]\n        then\n            temp=${arr[i]}\n            arr[i]=${arr[min_index]}\n\
    \            arr[min_index]=$temp\n            flag=1\n        fi\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"True\"\n    else\n       \
    \ echo \"False\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk9eos78v.sh: line 32: 3 4 5 1 2: syntax error in expression (error
    token is "4 5 1 2")

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i len\n    local\
    \ -i max\n    local -i max_index\n    local -i min\n    local -i min_index\n \
    \   local -i shift\n    local -i temp\n    local -i temp_index\n    local -i temp_index_2\n\
    \    local -i temp_index_3\n    local -i temp_index_4\n    local -i temp_index_5\n\
    \    local -i temp_index_6\n    local -i temp_index_7\n    local -i temp_index_8\n\
    \    local -i temp_index_9\n    local -i temp_index_10\n    local -i temp_index_11\n\
    \    local -i temp_index_12\n    local -i temp_index_13\n    local -i temp_index_14\n\
    \    local -i temp_index_15\n    local -i temp_index_16\n    local -i temp_index_17\n\
    \    local -i temp_index_18\n    local -i temp_index_19\n    local -i temp_index_20\n\
    \    local -i temp_index_21\n    local -i temp_index_22\n    local -i temp_index_23\n\
    \    local -i temp_index_24\n    local -i temp_index_25\n    local -i temp_index_26\n\
    \    local -i temp_index_27\n    local -i temp_index_28\n    local -i temp_index_29\n\
    \    local -i temp_index_30\n    local -i temp_index_31\n    local -i temp_index_32\n\
    \    local -i temp_index_33\n    local -i temp_index_34\n    local -i temp_index_35\n\
    \    local -i temp_index_36\n    local -i temp_index_37\n    local -i temp_index_38\n\
    \    local -i temp_index_39\n    local -i temp_index_40\n    local -i temp_index_41\n\
    \    local -i temp_index_42\n    local -i temp_index_43\n    local -i temp_index_44\n\
    \    local -i temp_index_45\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i n=${#arr[@]}\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n\
    \    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local\
    \ -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n\
    \    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n   \
    \ local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n   \
    \ local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n   \
    \ local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n   \
    \ local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n   \
    \ local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n   \
    \ local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n   \
    \ local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n\
    \    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n\
    \    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n\
    \    local -i lll=0\n    local -i mmm=0\n    local -i n\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbat8wxhf.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i n\n    local\
    \ -i tmp\n    arr=($1)\n    n=${#arr[@]}\n    for ((i=0; i<n-1; i++)); do\n  \
    \      for ((j=0; j<n-i-1; j++)); do\n            if [[ ${arr[j]} -gt ${arr[j+1]}\
    \ ]]; then\n                tmp=${arr[j]}\n                arr[j]=${arr[j+1]}\n\
    \                arr[j+1]=$tmp\n            fi\n        done\n    done\n    echo\
    \ ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i max=0\n    local -i max_index=0\n    local -i tmp=0\n    local -i\
    \ tmp_index=0\n    local -i tmp_index2=0\n    local -i tmp_index3=0\n    local\
    \ -i tmp_index4=0\n    local -i tmp_index5=0\n    local -i tmp_index6=0\n    local\
    \ -i tmp_index7=0\n    local -i tmp_index8=0\n    local -i tmp_index9=0\n    local\
    \ -i tmp_index10=0\n    local -i tmp_index11=0\n    local -i tmp_index12=0\n \
    \   local -i tmp_index13=0\n    local -i tmp_index14=0\n    local -i tmp_index15=0\n\
    \    local -i tmp_index16=0\n    local -i tmp_index17=0\n    local -i tmp_index18=0\n\
    \    local -i tmp_index19=0\n    local -i tmp_index20=0\n    local -i tmp_index21=0\n\
    \    local -i tmp_index22=0\n    local -i tmp_index23=0\n    local -i tmp_index24=0\n\
    \    local -i tmp_index25=0\n    local -i tmp_index26=0\n    local -i tmp_index27=0\n\
    \    local -i tmp_index28=0\n    local -i tmp_index29=0\n    local -i tmp_index30=0\n\
    \    local -i tmp_index31=0\n    local -i tmp_index32=0\n    local -i tmp_index33=0\n\
    \    local -i tmp_index34=0\n    local -i tmp_index35=0\n    local -i tmp_index36=0\n\
    \    local -i tmp_index37=0\n    local -i tmp_index38=0\n    local -i tmp_index39=0\n\
    \    local -i tmp_index40=0\n    local -i tmp_index41=\n}\n\ncandidate() {\n \
    \   move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqlodfgoh.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i=0 j=0\n    local -i len=0\n    local -i\
    \ max=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i max_len=0\n\
    \    local -i max_len_i=0\n    local -i max_len_j=0\n    local -i max_len_len=0\n\
    \    local -i max_len_max=0\n    local -i max_len_max_i=0\n    local -i max_len_max_j=0\n\
    \    local -i max_len_max_len=0\n    local -i max_len_max_max=0\n    local -i\
    \ max_len_max_max_i=0\n    local -i max_len_max_max_j=0\n    local -i max_len_max_max_len=0\n\
    \    local -i max_len_max_max_max=0\n    local -i max_len_max_max_max_i=0\n  \
    \  local -i max_len_max_max_max_j=0\n    local -i max_len_max_max_max_len=0\n\
    \    local -i max_len_max_max_max_max=0\n    local -i max_len_max_max_max_max_i=0\n\
    \    local -i max_len_max_max_max_max_j=0\n    local -i max_len_max_max_max_max_len=0\n\
    \    local -i max_len_max_max_max_max_max=0\n    local -i max_len_max_max_max_max_max_i=0\n\
    \    local -i max_len_max_max_max_max_max_j=0\n    local -i max_len_max_max_max_max_max_len=0\n\
    \    local -i max_len_max_max_max_max_max_max=0\n    local -i max_len_max_max_max_max_max_max_i=0\n\
    \    local -i max_len_max_max_max_max_\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i n=${#arr[@]}\n    local -i max=0\n    local -i max_index=0\n    local -i\
    \ tmp=0\n    local -i tmp_index=0\n    local -i tmp_max=0\n    local -i tmp_max_index=0\n\
    \    local -i tmp_max_index_2=0\n    local -i tmp_max_index_3=0\n    local -i\
    \ tmp_max_index_4=0\n    local -i tmp_max_index_5=0\n    local -i tmp_max_index_6=0\n\
    \    local -i tmp_max_index_7=0\n    local -i tmp_max_index_8=0\n    local -i\
    \ tmp_max_index_9=0\n    local -i tmp_max_index_10=0\n    local -i tmp_max_index_11=0\n\
    \    local -i tmp_max_index_12=0\n    local -i tmp_max_index_13=0\n    local -i\
    \ tmp_max_index_14=0\n    local -i tmp_max_index_15=0\n    local -i tmp_max_index_16=0\n\
    \    local -i tmp_max_index_17=0\n    local -i tmp_max_index_18=0\n    local -i\
    \ tmp_max_index_19=0\n    local -i tmp_max_index_20=0\n    local -i tmp_max_index_21=0\n\
    \    local -i tmp_max_index_22=0\n    local -i tmp_max_index_23=0\n    local -i\
    \ tmp_max_index_24=0\n    local -i tmp_max_index_25=0\n    local -i tmp_max_index_26=0\n\
    \    local -i tmp_max_index_27=0\n    local -i tmp_max_index_28=0\n    local -i\
    \ tmp_max_index_29=0\n    local -i tmp_max_index_30=0\n    local -i tmp_max\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i n\n    local -i tmp\n    local -i retval=0\n    local -i max_index\n    local\
    \ -i max_value\n    local -i max_value_index\n    arr=($1)\n    n=${#arr[@]}\n\
    \    if (( n == 0 )); then\n        retval=1\n    else\n        max_index=0\n\
    \        max_value=${arr[0]}\n        for (( i=1; i<n; i++ )); do\n          \
    \  if (( max_value < arr[i] )); then\n                max_value=${arr[i]}\n  \
    \              max_index=i\n            fi\n        done\n        if (( max_index\
    \ == n-1 )); then\n            retval=1\n        else\n            max_value_index=0\n\
    \            for (( i=0; i<n; i++ )); do\n                if (( max_value == arr[i]\
    \ )); then\n                    max_value_index=i\n                    break\n\
    \                fi\n            done\n            if (( max_value_index == 0\
    \ )); then\n                retval=0\n            else\n                for ((\
    \ i=0; i<max_value_index; i++ )); do\n                    if (( arr[i] > arr[i+1]\
    \ )); then\n                        retval=0\n                        break\n\
    \                    fi\n                done\n                if (( retval ==\
    \ 1 )); then\n                    for (( i=max_value_index; i<n-1; i++ )); do\n\
    \                        if (( arr[i] > arr[i+1] )); then\n                  \
    \          retval=0\n                            break\n                     \
    \   fi\n                    done\n                fi\n            fi\n       \
    \ fi\n    fi\n    echo $retval\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local tmp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n    \
    \    for ((j=0; j<len-1; j++))\n        do\n            if [ ${arr[j]} -gt ${arr[j+1]}\
    \ ]\n            then\n                tmp=${arr[j]}\n                arr[j]=${arr[j+1]}\n\
    \                arr[j+1]=$tmp\n                flag=1\n            fi\n     \
    \   done\n        if [ $flag -eq 0 ]\n        then\n            break\n      \
    \  fi\n    done\n    echo ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i tmp=0\n    local -i flag=0\n    local -i count=0\n    local -i max=0\n\
    \    local -i max_index=0\n    local -i min=0\n    local -i min_index=0\n    local\
    \ -i max_count=0\n    local -i min_count=0\n    local -i max_count_index=0\n \
    \   local -i min_count_index=0\n    local -i max_count_value=0\n    local -i min_count_value=0\n\
    \    local -i max_count_value_index=0\n    local -i min_count_value_index=0\n\
    \    local -i max_count_value_count=0\n    local -i min_count_value_count=0\n\
    \    local -i max_count_value_count_index=0\n    local -i min_count_value_count_index=0\n\
    \    local -i max_count_value_count_value=0\n    local -i min_count_value_count_value=0\n\
    \    local -i max_count_value_count_value_index=0\n    local -i min_count_value_count_value_index=0\n\
    \    local -i max_count_value_count_value_count=0\n    local -i min_count_value_count_value_count=0\n\
    \    local -i max_count_value_count_value_count_index=0\n    local -i min_count_value_count_value_count_index=0\n\
    \    local -i max_count_value_count_value_count_value=0\n    local -i min_count_value_count_value_count_value=0\n\
    \    local -i max_count_value_count_value_count_value_index=0\n    local -i min_count_value_count_value_count_value_index=0\n\
    \    local -i max_count_value_count_value_count_value_count=0\n    local -i min_count_\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmp2cmtvvp2.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i len=${#arr[@]}\n    local -i max=0\n    local -i max_i=0\n    local -i max_j=0\n\
    \    local -i max_len=0\n    local -i max_len_i=0\n    local -i max_len_j=0\n\
    \    local -i max_len_len=0\n    local -i max_len_max=0\n    local -i max_len_max_i=0\n\
    \    local -i max_len_max_j=0\n    local -i max_len_max_len=0\n    local -i max_len_max_max=0\n\
    \    local -i max_len_max_max_i=0\n    local -i max_len_max_max_j=0\n    local\
    \ -i max_len_max_max_len=0\n    local -i max_len_max_max_max=0\n    local -i max_len_max_max_max_i=0\n\
    \    local -i max_len_max_max_max_j=0\n    local -i max_len_max_max_max_len=0\n\
    \    local -i max_len_max_max_max_max=0\n    local -i max_len_max_max_max_max_i=0\n\
    \    local -i max_len_max_max_max_max_j=0\n    local -i max_len_max_max_max_max_len=0\n\
    \    local -i max_len_max_max_max_max_max=0\n    local -i max_len_max_max_max_max_max_i=0\n\
    \    local -i max_len_max_max_max_max_max_j=0\n    local -i max_len_max_max_max_max_max_len=0\n\
    \    local -i max_len_max_max_max_max_max_max=0\n    local -i max_len_max_max_max_max_max_max_i=0\n\
    \   \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local\
    \ -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n\
    \    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local\
    \ -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n\
    \    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n\
    \    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n\
    \    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n\
    \    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n\
    \    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n\
    \    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n\
    \    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n\
    \    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n\
    \    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n\
    \    local -i lll=0\n    local -i mmm=0\n    local\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i N\n    local -i temp\n   \
    \ local -i flag\n    local -i count\n    local -i j\n    local -i k\n    local\
    \ -i l\n    local -i m\n    local -i n\n    local -i o\n    local -i p\n    local\
    \ -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local\
    \ -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local\
    \ -i aa\n    local -i bb\n    local -i cc\n    local -i dd\n    local -i ee\n\
    \    local -i ff\n    local -i gg\n    local -i hh\n    local -i ii\n    local\
    \ -i jj\n    local -i kk\n    local -i ll\n    local -i mm\n    local -i nn\n\
    \    local -i oo\n    local -i pp\n    local -i qq\n    local -i rr\n    local\
    \ -i ss\n    local -i tt\n    local -i uu\n    local -i vv\n    local -i ww\n\
    \    local -i xx\n    local -i yy\n    local -i zz\n    local -i aaa\n    local\
    \ -i bbb\n    local -i ccc\n    local -i ddd\n    local -i eee\n    local -i fff\n\
    \    local -i ggg\n    local -i hhh\n    local -i iii\n    local -i jjj\n    local\
    \ -i kkk\n    local -i lll\n    local -i mmm\n    local -i nnn\n    local -i ooo\n\
    \    local -i ppp\n    local -i qqq\n    local -i rrr\n    local -i sss\n    local\
    \ -i ttt\n    local -i uuu\n    local -i vvv\n    local -i www\n    local -i xxx\n\
    \    local -i yyy\n    local -i zzz\n    local -i aaaa\n    local -i bbbb\n  \
    \  local -i c\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i k=0\n    local -i n=${#arr[@]}\n    local -i m=0\n    local -i p=0\n    local\
    \ -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n\
    \    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local\
    \ -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n\
    \    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n    local\
    \ -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local\
    \ -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local\
    \ -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local\
    \ -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local\
    \ -i yy=0\n    local -i zz=0\n    local -i aa=0\n    local -i bb=0\n    local\
    \ -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local\
    \ -i gg=0\n    local -i hh=0\n    local -i iii=0\n    local -i jjj=0\n    local\
    \ -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n    local\
    \ -i ooo=0\n    local -i ppp=0\n    local -i qqq=\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i N=${#arr[@]}\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i flag=0\n    local -i count=0\n    local\
    \ -i flag2=0\n    local -i flag3=0\n    local -i flag4=0\n    local -i flag5=0\n\
    \    local -i flag6=0\n    local -i flag7=0\n    local -i flag8=0\n    local -i\
    \ flag9=0\n    local -i flag10=0\n    local -i flag11=0\n    local -i flag12=0\n\
    \    local -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n    local\
    \ -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n\
    \    local -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n    local\
    \ -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n\
    \    local -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n    local\
    \ -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n\
    \    local -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n    local\
    \ -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n\
    \    local -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n    local\
    \ -i flag44=0\n    local -i flag45=0\n    local -i flag46=0\n    local -i flag47=0\n\
    \    local -i flag48=0\n    local -i flag49=0\n    local -i flag50=0\n    local\
    \ -i flag51=\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local\
    \ -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n\
    \    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local\
    \ -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n\
    \    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n\
    \    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n\
    \    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n\
    \    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n\
    \    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n\
    \    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n\
    \    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n\
    \    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n\
    \    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n\
    \    local -i lll=0\n    local -i mmm=0\n    local\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=0\n    for ((i=0; i<${#arr[@]}; i++));\
    \ do\n        if [[ ${arr[i]} -eq ${#arr[@]} ]]; then\n            arr[i]=0\n\
    \            return\n        fi\n    done\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphckx7a0e.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local i\n    local j\n    local tmp\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcrqu8b6l.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i len=${#arr[@]}\n    local -i min=0\n    local -i min_index=0\n    local -i\
    \ tmp=0\n    local -i tmp_index=0\n    local -i tmp_index_2=0\n    local -i tmp_index_3=0\n\
    \    local -i tmp_index_4=0\n    local -i tmp_index_5=0\n    local -i tmp_index_6=0\n\
    \    local -i tmp_index_7=0\n    local -i tmp_index_8=0\n    local -i tmp_index_9=0\n\
    \    local -i tmp_index_10=0\n    local -i tmp_index_11=0\n    local -i tmp_index_12=0\n\
    \    local -i tmp_index_13=0\n    local -i tmp_index_14=0\n    local -i tmp_index_15=0\n\
    \    local -i tmp_index_16=0\n    local -i tmp_index_17=0\n    local -i tmp_index_18=0\n\
    \    local -i tmp_index_19=0\n    local -i tmp_index_20=0\n    local -i tmp_index_21=0\n\
    \    local -i tmp_index_22=0\n    local -i tmp_index_23=0\n    local -i tmp_index_24=0\n\
    \    local -i tmp_index_25=0\n    local -i tmp_index_26=0\n    local -i tmp_index_27=0\n\
    \    local -i tmp_index_28=0\n    local -i tmp_index_29=0\n    local -i tmp_index_30=0\n\
    \    local -i tmp_index_31=0\n    local -i tmp_index_32=0\n    local -i tmp_index_33=0\n\
    \    local -i tmp_index_34=0\n    local -i tmp_index_35=0\n    local -i tmp_index_36=0\n\
    \    local -i tmp_index_37=0\n    local -\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i n\n    local -i temp\n    local -i flag\n    local -i count\n    local -i\
    \ max\n    local -i min\n    local -i max_index\n    local -i min_index\n    local\
    \ -i max_count\n    local -i min_count\n    arr=($1)\n    n=${#arr[@]}\n    flag=0\n\
    \    count=0\n    max=${arr[0]}\n    min=${arr[0]}\n    max_index=0\n    min_index=0\n\
    \    max_count=0\n    min_count=0\n    for ((i=0; i<n; i++)); do\n        if [[\
    \ ${arr[i]} -gt $max ]]; then\n            max=${arr[i]}\n            max_index=$i\n\
    \            max_count=1\n        elif [[ ${arr[i]} -eq $max ]]; then\n      \
    \      max_count=$((max_count+1))\n        fi\n        if [[ ${arr[i]} -lt $min\
    \ ]]; then\n            min=${arr[i]}\n            min_index=$i\n            min_count=1\n\
    \        elif [[ ${arr[i]} -eq $min ]]; then\n            min_count=$((min_count+1))\n\
    \        fi\n    done\n    if [[ $max_count -gt 1 ]]; then\n        if [[ $max_index\
    \ -eq 0 ]]; then\n            flag=1\n        else\n            temp=${arr[0]}\n\
    \            arr[0]=$max\n            arr[$max_index]=$temp\n            count=$((count+1))\n\
    \        fi\n    fi\n    if [[ $min_count -gt 1 ]]; then\n        if [[ $min_index\
    \ -eq 0 ]]; then\n            flag=1\n        else\n            temp=${arr[0]}\n\
    \            arr[0]=$min\n            arr[$min_index]=$temp\n            count=$((count+1))\n\
    \        fi\n    fi\n    if [[ $flag -eq 1 ]]; then\n        echo \"False\"\n\
    \    else\n        echo \"True\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp01g53tn_.sh: line 98: unexpected EOF while looking for matching
    `"''

    /tmp/tmp01g53tn_.sh: line 102: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -a arr_copy=(\"$@\")\n    local -i n=${#arr[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local\
    \ -i m=0\n    local -i n_copy=0\n    local -i i_copy=0\n    local -i j_copy=0\n\
    \    local -i k_copy=0\n    local -i l_copy=0\n    local -i m_copy=0\n    local\
    \ -i flag=0\n    local -i flag_copy=0\n    local -i flag_copy_copy=0\n    local\
    \ -i flag_copy_copy_copy=0\n    local -i flag_copy_copy_copy_copy=0\n    local\
    \ -i flag_copy_copy_copy_copy_copy=0\n    local -i flag_copy_copy_copy_copy_copy_copy=0\n\
    \    local -i flag_copy_copy_copy_copy_copy_copy_copy=0\n    local -i flag_copy_copy_copy_copy_copy_copy_copy_copy=0\n\
    \    local -i flag_copy_copy_copy_copy_copy_copy_copy_copy_copy=0\n    local -i\
    \ flag_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy=0\n    local -i flag_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy=0\n\
    \    local -i flag_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy=0\n\
    \    local -i flag_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy=0\n\
    \    local -i flag_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy=0\n\
    \    local -i flag_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy=0\n\
    \    local -i flag_\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n\
    \    local -i max=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i\
    \ max_len=0\n    local -i max_len_i=0\n    local -i max_len_j=0\n    local -i\
    \ max_len_len=0\n    local -i max_len_len_i=0\n    local -i max_len_len_j=0\n\
    \    local -i max_len_len_len=0\n    local -i max_len_len_len_i=0\n    local -i\
    \ max_len_len_len_j=0\n    local -i max_len_len_len_len=0\n    local -i max_len_len_len_len_i=0\n\
    \    local -i max_len_len_len_len_j=0\n    local -i max_len_len_len_len_len=0\n\
    \    local -i max_len_len_len_len_len_i=0\n    local -i max_len_len_len_len_len_j=0\n\
    \    local -i max_len_len_len_len_len_len=0\n    local -i max_len_len_len_len_len_len_i=0\n\
    \    local -i max_len_len_len_len_len_len_j=0\n    local -i max_len_len_len_len_len_len_len=0\n\
    \    local -i max_len_len_len_len_len_len_len_i=0\n    local -i max_len_len_len_len_len_len_len_j=0\n\
    \    local -i max_len_len_len_len_len_len_len_len=0\n    local -i max_len_len_len_len_len_len_len_len_i=0\n\
    \    local -i max_len_len_len_len_len_len_len_len_j=0\n    local -i\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i max=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i\
    \ max_k=0\n    local -i max_l=0\n    local -i max_m=0\n    local -i max_n=0\n\
    \    local -i max_o=0\n    local -i max_p=0\n    local -i max_q=0\n    local -i\
    \ max_r=0\n    local -i max_s=0\n    local -i max_t=0\n    local -i max_u=0\n\
    \    local -i max_v=0\n    local -i max_w=0\n    local -i max_x=0\n    local -i\
    \ max_y=0\n    local -i max_z=0\n    local -i max_aa=0\n    local -i max_bb=0\n\
    \    local -i max_cc=0\n    local -i max_dd=0\n    local -i max_ee=0\n    local\
    \ -i max_ff=0\n    local -i max_gg=0\n    local -i max_hh=0\n    local -i max_ii=0\n\
    \    local -i max_jj=0\n    local -i max_kk=0\n    local -i max_ll=0\n    local\
    \ -i max_mm=0\n    local -i max_nn=0\n    local -i max_oo=0\n    local -i max_pp=0\n\
    \    local -i max_qq=0\n    local -i max_rr=0\n    local -i max_ss=0\n    local\
    \ -i max_tt=0\n    local -i max_uu=0\n    local -i max_vv=0\n    local -i max_ww=0\n\
    \    local -i max_xx=0\n    local -i max_yy=0\n    local -i max_zz=0\n    local\
    \ -i max_aaa=0\n    local -i max_bbb=0\n    local -i max\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1briqc5r.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local\
    \ -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n\
    \    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local\
    \ -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n\
    \    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n\
    \    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n\
    \    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n\
    \    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n\
    \    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n\
    \    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n\
    \    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n\
    \    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n\
    \    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n\
    \    local -i lll=0\n    local -i mmm=0\n    local\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i n\n    local -i j\n    local\
    \ -i k\n    local -i m\n    local -i tmp\n    local -i flag\n    local -i flag1\n\
    \    local -i flag2\n    local -i flag3\n    local -i flag4\n    local -i flag5\n\
    \    local -i flag6\n    local -i flag7\n    local -i flag8\n    local -i flag9\n\
    \    local -i flag10\n    local -i flag11\n    local -i flag12\n    local -i flag13\n\
    \    local -i flag14\n    local -i flag15\n    local -i flag16\n    local -i flag17\n\
    \    local -i flag18\n    local -i flag19\n    local -i flag20\n    local -i flag21\n\
    \    local -i flag22\n    local -i flag23\n    local -i flag24\n    local -i flag25\n\
    \    local -i flag26\n    local -i flag27\n    local -i flag28\n    local -i flag29\n\
    \    local -i flag30\n    local -i flag31\n    local -i flag32\n    local -i flag33\n\
    \    local -i flag34\n    local -i flag35\n    local -i flag36\n    local -i flag37\n\
    \    local -i flag38\n    local -i flag39\n    local -i flag40\n    local -i flag41\n\
    \    local -i flag42\n    local -i flag43\n    local -i flag44\n    local -i flag45\n\
    \    local -i flag46\n    local -i flag47\n    local -i flag48\n    local -i flag49\n\
    \    local -i flag50\n    local -i flag51\n    local -i flag52\n    local -i flag53\n\
    \    local -i flag54\n    local -i flag55\n    local -i flag56\n    local -i flag57\n\
    \    local -i flag58\n    local -i flag59\n    local -i flag60\n    local -i flag61\n\
    \    local -i flag62\n    local -i flag63\n    local -i flag64\n    local -i flag65\n\
    \    local -i flag66\n   \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i n\n    local -i t\n    local -i x\n    local -i y\n    local -i z\n    local\
    \ -i N\n    local -i M\n    local -i L\n    local -i R\n    local -i S\n    local\
    \ -i T\n    local -i U\n    local -i V\n    local -i W\n    local -i X\n    local\
    \ -i Y\n    local -i Z\n    local -i a\n    local -i b\n    local -i c\n    local\
    \ -i d\n    local -i e\n    local -i f\n    local -i g\n    local -i h\n    local\
    \ -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local\
    \ -i n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local\
    \ -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local\
    \ -i x\n    local -i y\n    local -i z\n    local -i A\n    local -i B\n    local\
    \ -i C\n    local -i D\n    local -i E\n    local -i F\n    local -i G\n    local\
    \ -i H\n    local -i I\n    local -i J\n    local -i K\n    local -i L\n    local\
    \ -i M\n    local -i N\n    local -i O\n    local -i P\n    local -i Q\n    local\
    \ -i R\n    local -i S\n    local -i T\n    local -i U\n    local -i V\n    local\
    \ -i W\n    local -i X\n    local -i Y\n    local -i Z\n    local -i a\n    local\
    \ -i b\n    local -i c\n    local -i d\n    local -i e\n    local -i f\n    local\
    \ -i g\n    local -i h\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i l\n   \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i j\n    local -i n\n    local -i last_ball\n\
    \    local -i last_ball_pos\n    local -i last_ball_pos_new\n    local -i last_ball_pos_old\n\
    \    local -i last_ball_pos_old_old\n    local -i last_ball_pos_old_old_old\n\
    \    local -i last_ball_pos_old_old_old_old\n    local -i last_ball_pos_old_old_old_old_old\n\
    \    local -i last_ball_pos_old_old_old_old_old_old\n    local -i last_ball_pos_old_old_old_old_old_old_old\n\
    \    local -i last_ball_pos_old_old_old_old_old_old_old_old\n    local -i last_ball_pos_old_old_old_old_old_old_old_old_old\n\
    \    local -i last_ball_pos_old_old_old_old_old_old_old_old_old_old\n    local\
    \ -i last_ball_pos_old_old_old_old_old_old_old_old_old_old_old\n    local -i last_ball_pos_old_old_old_old_old_old_old_old_old_old_old_old\n\
    \    local -i last_ball_pos_old_old_old_old_old_old_old_old_old_old_old_old_old\n\
    \    local -i last_ball_pos_old_old_old_old_old_old_old_old_old_old_old_old_old_old\n\
    \    local -i last_ball_pos_old_old_old_old_old_old_old_old_old_old_old_old_old_old_old\n\
    \    local -i last_ball_pos_old_old_old_old_old_old_old_old_old_old_old_old_old_old_old_old\n\
    \    local -i last_ball_pos_old_old_old_old_old_old_old_old_old_old_\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i n\n    local -i t\n    local -i x\n    local -i y\n    local -i z\n    local\
    \ -i flag\n    local -i flag1\n    local -i flag2\n    local -i flag3\n    local\
    \ -i flag4\n    local -i flag5\n    local -i flag6\n    local -i flag7\n    local\
    \ -i flag8\n    local -i flag9\n    local -i flag10\n    local -i flag11\n   \
    \ local -i flag12\n    local -i flag13\n    local -i flag14\n    local -i flag15\n\
    \    local -i flag16\n    local -i flag17\n    local -i flag18\n    local -i flag19\n\
    \    local -i flag20\n    local -i flag21\n    local -i flag22\n    local -i flag23\n\
    \    local -i flag24\n    local -i flag25\n    local -i flag26\n    local -i flag27\n\
    \    local -i flag28\n    local -i flag29\n    local -i flag30\n    local -i flag31\n\
    \    local -i flag32\n    local -i flag33\n    local -i flag34\n    local -i flag35\n\
    \    local -i flag36\n    local -i flag37\n    local -i flag38\n    local -i flag39\n\
    \    local -i flag40\n    local -i flag41\n    local -i flag42\n    local -i flag43\n\
    \    local -i flag44\n    local -i flag45\n    local -i flag46\n    local -i flag47\n\
    \    local -i flag48\n    local -i flag49\n    local -i flag50\n    local -i flag51\n\
    \    local -i flag52\n    local -i flag53\n    local -i flag54\n    local -i flag55\n\
    \    local -i flag56\n    local -i flag57\n    local -i flag58\n    local -i flag59\n\
    \    local -i flag60\n    local -i flag61\n    local -i flag62\n    local -i flag63\n\
    \    local -i flag64\n    local -\n}\n\ncandidate() {\n    move_one_ball \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    # $1 is a space-separated list\n    # $2 is the index of the ball to\
    \ move\n    # $3 is the index of the ball to move to\n    # $4 is the index of\
    \ the ball to move to\n    # $5 is the index of the ball to move to\n    # $6\
    \ is the index of the ball to move to\n    # $7 is the index of the ball to move\
    \ to\n    # $8 is the index of the ball to move to\n    # $9 is the index of the\
    \ ball to move to\n    # ${10} is the index of the ball to move to\n    # ${11}\
    \ is the index of the ball to move to\n    # ${12} is the index of the ball to\
    \ move to\n    # ${13} is the index of the ball to move to\n    # ${14} is the\
    \ index of the ball to move to\n    # ${15} is the index of the ball to move to\n\
    \    # ${16} is the index of the ball to move to\n    # ${17} is the index of\
    \ the ball to move to\n    # ${18} is the index of the ball to move to\n    #\
    \ ${19} is the index of the ball to move to\n    # ${20} is the index of the ball\
    \ to move to\n    # ${21} is the index of the ball to move to\n    # ${22} is\
    \ the index of the ball to move to\n    # ${23} is the index of the ball to move\
    \ to\n    # ${24} is the index of the ball to move to\n    # ${25} is the index\
    \ of the ball to move to\n    # ${26} is the index of the ball to move to\n  \
    \  # ${27} is the index of the ball to move to\n    # ${28} is the index of the\
    \ ball to move to\n    # ${29} is the index of the ball to move to\n    # ${30}\
    \ is the index of the ball to move to\n    # ${31} is the index of the ball to\
    \ move to\n    # ${32} is the index of the ball to move to\n    # ${33} is the\
    \ index of the ball to move to\n    # ${34} is the index of the ball to move to\n\
    \    # ${35} is the index of the ball to move\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0ciw6jr_.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmp0ciw6jr_.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local n=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local tmp=0\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpz56h18wp.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local tmp=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len;\
    \ j++)); do\n            if [ ${arr[i]} -gt ${arr[j]} ]; then\n              \
    \  tmp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$tmp\n\
    \            fi\n        done\n    done\n    echo ${arr[@]}\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i n=${#arr[@]}\n    local -i min=0\n    local -i min_idx=0\n    local -i min_idx_prev=0\n\
    \    local -i min_idx_next=0\n    local -i min_idx_prev_prev=0\n    local -i min_idx_next_next=0\n\
    \    local -i min_idx_prev_prev_prev=0\n    local -i min_idx_next_next_next=0\n\
    \    local -i min_idx_prev_prev_prev_prev=0\n    local -i min_idx_next_next_next_next=0\n\
    \    local -i min_idx_prev_prev_prev_prev_prev=0\n    local -i min_idx_next_next_next_next_next=0\n\
    \    local -i min_idx_prev_prev_prev_prev_prev_prev=0\n    local -i min_idx_next_next_next_next_next_next=0\n\
    \    local -i min_idx_prev_prev_prev_prev_prev_prev_prev=0\n    local -i min_idx_next_next_next_next_next_next_next=0\n\
    \    local -i min_idx_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i\
    \ min_idx_next_next_next_next_next_next_next_next=0\n    local -i min_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i min_idx_next_next_next_next_next_next_next_next_next=0\n    local\
    \ -i min_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i\
    \ min_idx_next_next_next_next_next_next_next_next_next_next=0\n    local -i min_idx_prev_prev\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i j\n    local -i n\n    local -i max_i\n\
    \    local -i max_v\n    local -i tmp\n    arr=($1)\n    n=${#arr[@]}\n    max_i=0\n\
    \    max_v=${arr[0]}\n    for ((i=1; i<n; i++)); do\n        if [[ ${arr[i]} -gt\
    \ $max_v ]]; then\n            max_i=$i\n            max_v=${arr[i]}\n       \
    \ fi\n    done\n    if [[ $max_i -eq 0 ]]; then\n        return 0\n    fi\n  \
    \  tmp=${arr[0]}\n    for ((i=0; i<max_i; i++)); do\n        arr[i]=${arr[i+1]}\n\
    \    done\n    arr[max_i]=$tmp\n    echo ${arr[@]}\n    return 0\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i n\n    local\
    \ -i tmp\n    read -a arr <<< \"$1\"\n    n=${#arr[@]}\n    for ((i=0; i<n; i++));\
    \ do\n        for ((j=i+1; j<n; j++)); do\n            if ((arr[i] > arr[j]));\
    \ then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n    \
    \            arr[j]=$tmp\n            fi\n        done\n    done\n    echo ${arr[@]}\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i tmp=0\n    local -i max=0\n    local -i max_idx=0\n    local -i\
    \ min=0\n    local -i min_idx=0\n    local -i max_count=0\n    local -i min_count=0\n\
    \    local -i max_count_idx=0\n    local -i min_count_idx=0\n    local -i max_count_tmp=0\n\
    \    local -i min_count_tmp=0\n    local -i max_count_tmp_idx=0\n    local -i\
    \ min_count_tmp_idx=0\n    local -i max_count_tmp_idx_2=0\n    local -i min_count_tmp_idx_2=0\n\
    \    local -i max_count_tmp_idx_3=0\n    local -i min_count_tmp_idx_3=0\n    local\
    \ -i max_count_tmp_idx_4=0\n    local -i min_count_tmp_idx_4=0\n    local -i max_count_tmp_idx_5=0\n\
    \    local -i min_count_tmp_idx_5=0\n    local -i max_count_tmp_idx_6=0\n    local\
    \ -i min_count_tmp_idx_6=0\n    local -i max_count_tmp_idx_7=0\n    local -i min_count_tmp_idx_7=0\n\
    \    local -i max_count_tmp_idx_8=0\n    local -i min_count_tmp_idx_8=0\n    local\
    \ -i max_count_tmp_idx_9=0\n    local -i min_count_tmp_idx_9=0\n    local -i max_count_tmp_idx_10=0\n\
    \    local -i min_count_tmp_idx_10=0\n    local -i max_count_tmp_idx_11=0\n  \
    \  local -i min\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphhuvo_2b.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local\
    \ -i j=0\n    local -i temp=0\n    for ((i=0; i<n; i++))\n    do\n        for\
    \ ((j=0; j<n-i-1; j++))\n        do\n            if [[ ${arr[j]} -gt ${arr[j+1]}\
    \ ]]\n            then\n                temp=${arr[j]}\n                arr[j]=${arr[j+1]}\n\
    \                arr[j+1]=$temp\n            fi\n        done\n    done\n    echo\
    \ ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i\n  \
    \  for ((i=0; i<n-1; i++)); do\n        if [[ ${arr[i]} -gt ${arr[i+1]} ]]; then\n\
    \            local -i tmp=${arr[i]}\n            arr[i]=${arr[i+1]}\n        \
    \    arr[i+1]=$tmp\n            break\n        fi\n    done\n    echo \"${arr[@]}\"\
    \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1\
    \ 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i m=0\n    local -i min=0\n  \
    \  local -i max=0\n    local -i min_index=0\n    local -i max_index=0\n    local\
    \ -i min_index_2=0\n    local -i max_index_2=0\n    local -i min_2=0\n    local\
    \ -i max_2=0\n    local -i min_index_3=0\n    local -i max_index_3=0\n    local\
    \ -i min_3=0\n    local -i max_3=0\n    local -i min_index_4=0\n    local -i max_index_4=0\n\
    \    local -i min_4=0\n    local -i max_4=0\n    local -i min_index_5=0\n    local\
    \ -i max_index_5=0\n    local -i min_5=0\n    local -i max_5=0\n    local -i min_index_6=0\n\
    \    local -i max_index_6=0\n    local -i min_6=0\n    local -i max_6=0\n    local\
    \ -i min_index_7=0\n    local -i max_index_7=0\n    local -i min_7=0\n    local\
    \ -i max_7=0\n    local -i min_index_8=0\n    local -i max_index_8=0\n    local\
    \ -i min_8=0\n    local -i max_8=0\n    local -i min_index_9=0\n    local -i max_index_9=0\n\
    \    local -i min_9=0\n    local -i max_9=0\n    local -i min_index_10=0\n   \
    \ local -i max_index_10=0\n    local -i min_10=0\n    local -i max_10=0\n    local\
    \ -i min_index_11=0\n    local -i max_index_11=0\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n  local -a arr\n  IFS=' ' read -r -a arr <<< \"$1\"\n  local -i n=${#arr[@]}\n\
    \  local -i i\n  for ((i=0; i<n-1; i++)); do\n    if [[ ${arr[i]} -gt ${arr[i+1]}\
    \ ]]; then\n      local -i tmp=${arr[i]}\n      arr[i]=${arr[i+1]}\n      arr[i+1]=$tmp\n\
    \      break\n    fi\n  done\n  echo \"${arr[@]}\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i n\n    local -i t\n    local -i x\n    local -i y\n    local -i z\n    local\
    \ -i flag\n    arr=($1)\n    n=${#arr[@]}\n    flag=0\n    for ((i=0; i<n; i++));\
    \ do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]}\
    \ ]]; then\n                t=${arr[i]}\n                arr[i]=${arr[j]}\n  \
    \              arr[j]=$t\n                flag=1\n            fi\n        done\n\
    \    done\n    if [[ $flag -eq 0 ]]; then\n        echo \"True\"\n        return\n\
    \    fi\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n\
    \            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                echo \"False\"\
    \n                return\n            fi\n        done\n    done\n    echo \"\
    True\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i n\n    local -i j\n    local\
    \ -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n    local\
    \ -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local\
    \ -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local\
    \ -i z\n    local -i aa\n    local -i bb\n    local -i cc\n    local -i dd\n \
    \   local -i ee\n    local -i ff\n    local -i gg\n    local -i hh\n    local\
    \ -i ii\n    local -i jj\n    local -i kk\n    local -i ll\n    local -i mm\n\
    \    local -i nn\n    local -i oo\n    local -i pp\n    local -i qq\n    local\
    \ -i rr\n    local -i ss\n    local -i tt\n    local -i uu\n    local -i vv\n\
    \    local -i ww\n    local -i xx\n    local -i yy\n    local -i zz\n    local\
    \ -i aaa\n    local -i bbb\n    local -i ccc\n    local -i ddd\n    local -i eee\n\
    \    local -i fff\n    local -i ggg\n    local -i hhh\n    local -i iii\n    local\
    \ -i jjj\n    local -i kkk\n    local -i lll\n    local -i mmm\n    local -i nnn\n\
    \    local -i ooo\n    local -i ppp\n    local -i qqq\n    local -i rrr\n    local\
    \ -i sss\n    local -i ttt\n    local -i uuu\n    local -i vvv\n    local -i www\n\
    \    local -i xxx\n    local -i yyy\n    local -i zzz\n    local -i aaaa\n   \
    \ local -i bbbb\n    local -i cccc\n    local -i dddd\n    local -i eeee\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i n\n    local -i min\n    local -i min_index\n    local -i temp\n    local\
    \ -i flag\n    arr=($1)\n    n=${#arr[@]}\n    for ((i=0; i<n-1; i++))\n    do\n\
    \        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<n; j++))\n\
    \        do\n            if [ ${arr[j]} -lt $min ]\n            then\n       \
    \         min=${arr[j]}\n                min_index=$j\n            fi\n      \
    \  done\n        temp=${arr[i]}\n        arr[i]=${arr[min_index]}\n        arr[min_index]=$temp\n\
    \    done\n    flag=1\n    for ((k=0; k<n-1; k++))\n    do\n        if [ ${arr[k]}\
    \ -gt ${arr[k+1]} ]\n        then\n            flag=0\n            break\n   \
    \     fi\n    done\n    if [ $flag -eq 1 ]\n    then\n        echo \"True\"\n\
    \    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n\
    \    local -i max=0\n    local -i max_index=0\n    local -i min=0\n    local -i\
    \ min_index=0\n    local -i tmp=0\n    local -i tmp_index=0\n    local -i tmp_index2=0\n\
    \    local -i tmp_index3=0\n    local -i tmp_index4=0\n    local -i tmp_index5=0\n\
    \    local -i tmp_index6=0\n    local -i tmp_index7=0\n    local -i tmp_index8=0\n\
    \    local -i tmp_index9=0\n    local -i tmp_index10=0\n    local -i tmp_index11=0\n\
    \    local -i tmp_index12=0\n    local -i tmp_index13=0\n    local -i tmp_index14=0\n\
    \    local -i tmp_index15=0\n    local -i tmp_index16=0\n    local -i tmp_index17=0\n\
    \    local -i tmp_index18=0\n    local -i tmp_index19=0\n    local -i tmp_index20=0\n\
    \    local -i tmp_index21=0\n    local -i tmp_index22=0\n    local -i tmp_index23=0\n\
    \    local -i tmp_index24=0\n    local -i tmp_index25=0\n    local -i tmp_index26=0\n\
    \    local -i tmp_index27=0\n    local -i tmp_index28=0\n    local -i tmp_index29=0\n\
    \    local -i tmp_index30=0\n    local -i tmp_index31=0\n    local -i tmp_index32=0\n\
    \    local -i tmp_index33=0\n    local -i tmp_index34=0\n    local -i tmp_index35=0\n\
    \    local -i tmp_index36=0\n    local -i tmp_index37=0\n    local -i tmp_index38=0\n\
    \    local -i tmp_index39=0\n\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i tmp=0\n    local -i flag=0\n    local -i flag1=0\n    local -i flag2=0\n\
    \    local -i flag3=0\n    local -i flag4=0\n    local -i flag5=0\n    local -i\
    \ flag6=0\n    local -i flag7=0\n    local -i flag8=0\n    local -i flag9=0\n\
    \    local -i flag10=0\n    local -i flag11=0\n    local -i flag12=0\n    local\
    \ -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n    local -i flag16=0\n\
    \    local -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n    local\
    \ -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n    local -i flag23=0\n\
    \    local -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n    local\
    \ -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n    local -i flag30=0\n\
    \    local -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n    local\
    \ -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n    local -i flag37=0\n\
    \    local -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n    local\
    \ -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n    local -i flag44=0\n\
    \    local -i flag45=0\n    local -i flag46=0\n    local -i flag47=0\n    local\
    \ -i flag48=0\n    local -i flag49=0\n    local -i flag50=0\n    local -i flag51\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -a new_arr\n    new_arr[0]=${arr[-1]}\n\
    \    for ((i=0; i<${#arr[@]}-1; i++)); do\n        new_arr[$((i+1))]=${arr[$i]}\n\
    \    done\n    echo ${new_arr[@]}\n}\n\ncandidate() {\n    move_one_ball \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local arr=$1\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n\
    \    local tmp=0\n    local ball=0\n    local found=0\n    local ret=0\n    for\
    \ ((i=0; i<$len; i++)); do\n        ball=${arr[$i]}\n        found=0\n       \
    \ for ((j=i+1; j<$len; j++)); do\n            if [ $ball -gt ${arr[$j]} ]; then\n\
    \                found=1\n                break\n            fi\n        done\n\
    \        if [ $found -eq 1 ]; then\n            tmp=${arr[$i]}\n            arr[$i]=${arr[$j]}\n\
    \            arr[$j]=$tmp\n            ret=1\n            break\n        fi\n\
    \    done\n    echo ${arr[@]}\n    return $ret\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i n=${#arr[@]}\n    local -i min=0\n    local -i min_index=0\n    local -i\
    \ temp=0\n    # Find the minimum element in the array\n    min=${arr[0]}\n   \
    \ min_index=0\n    for ((i=1; i<n; i++)); do\n        if ((${arr[i]} < min));\
    \ then\n            min=${arr[i]}\n            min_index=i\n        fi\n    done\n\
    \    # Move the minimum element to the first position\n    temp=${arr[0]}\n  \
    \  arr[0]=${arr[min_index]}\n    arr[min_index]=$temp\n    # Move the first element\
    \ to the last position\n    temp=${arr[0]}\n    for ((i=0; i<n-1; i++)); do\n\
    \        arr[i]=${arr[i+1]}\n    done\n    arr[n-1]=$temp\n    echo ${arr[@]}\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpg1oe9o6l.sh: line 30: 3 4 5 1 2: syntax error in expression (error
    token is "4 5 1 2")

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=(\"$@\")\n    local -i i=0\n    local -i j=0\n    local\
    \ -i k=0\n    local -i n=${#arr[@]}\n    local -i m=0\n    local -i flag=0\n \
    \   local -i flag1=0\n    local -i flag2=0\n    local -i flag3=0\n    local -i\
    \ flag4=0\n    local -i flag5=0\n    local -i flag6=0\n    local -i flag7=0\n\
    \    local -i flag8=0\n    local -i flag9=0\n    local -i flag10=0\n    local\
    \ -i flag11=0\n    local -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n\
    \    local -i flag15=0\n    local -i flag16=0\n    local -i flag17=0\n    local\
    \ -i flag18=0\n    local -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n\
    \    local -i flag22=0\n    local -i flag23=0\n    local -i flag24=0\n    local\
    \ -i flag25=0\n    local -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n\
    \    local -i flag29=0\n    local -i flag30=0\n    local -i flag31=0\n    local\
    \ -i flag32=0\n    local -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n\
    \    local -i flag36=0\n    local -i flag37=0\n    local -i flag38=0\n    local\
    \ -i flag39=0\n    local -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n\
    \    local -i flag43=0\n    local -i flag44=0\n    local -i flag45=0\n    local\
    \ -i flag46=0\n    local -i flag47=0\n    local -i flag48=0\n    local -i flag49=0\n\
    \    local -i flag50\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i len\n    local -i last_ball\n\
    \    local -i last_ball_pos\n    local -i new_ball_pos\n    local -i new_ball\n\
    \    local -i tmp\n    arr=($1)\n    len=${#arr[@]}\n    last_ball=${arr[-1]}\n\
    \    last_ball_pos=$((len-1))\n    new_ball_pos=$((last_ball%len))\n    new_ball=${arr[new_ball_pos]}\n\
    \    arr[new_ball_pos]=$last_ball\n    arr[last_ball_pos]=$new_ball\n    echo\
    \ ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a balls=($1)\n    local -i n=${#balls[@]}\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i m=0\n    local -i min=0\n  \
    \  local -i max=0\n    local -i min_index=0\n    local -i max_index=0\n    local\
    \ -i count=0\n    local -i flag=0\n    local -i flag1=0\n    local -i flag2=0\n\
    \    local -i flag3=0\n    local -i flag4=0\n    local -i flag5=0\n    local -i\
    \ flag6=0\n    local -i flag7=0\n    local -i flag8=0\n    local -i flag9=0\n\
    \    local -i flag10=0\n    local -i flag11=0\n    local -i flag12=0\n    local\
    \ -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n    local -i flag16=0\n\
    \    local -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n    local\
    \ -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n    local -i flag23=0\n\
    \    local -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n    local\
    \ -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n    local -i flag30=0\n\
    \    local -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n    local\
    \ -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n    local -i flag37=0\n\
    \    local -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n    local\
    \ -i flag41=0\n    local -i flag42=0\n    local -i flag43=0\n    local -i flag44=0\n\
    \    local -i flag45=0\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n\
    \    local -i max=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i\
    \ max_len=0\n    local -i max_len_i=0\n    local -i max_len_j=0\n    local -i\
    \ max_len_len=0\n    local -i max_len_len_i=0\n    local -i max_len_len_j=0\n\
    \    local -i max_len_len_len=0\n    local -i max_len_len_len_i=0\n    local -i\
    \ max_len_len_len_j=0\n    local -i max_len_len_len_len=0\n    local -i max_len_len_len_len_i=0\n\
    \    local -i max_len_len_len_len_j=0\n    local -i max_len_len_len_len_len=0\n\
    \    local -i max_len_len_len_len_len_i=0\n    local -i max_len_len_len_len_len_j=0\n\
    \    local -i max_len_len_len_len_len_len=0\n    local -i max_len_len_len_len_len_len_i=0\n\
    \    local -i max_len_len_len_len_len_len_j=0\n    local -i max_len_len_len_len_len_len_len=0\n\
    \    local -i max_len_len_len_len_len_len_len_i=0\n    local -i max_len_len_len_len_len_len_len_j=0\n\
    \    local -i max_len_len_len_len_len_len_len_len=0\n    local -i max_len_len_len_len_len_len_len_len_i=0\n\
    \    local -i max_len_len_len_len_len_len_len_len_j=0\n    local -i\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i n\n    local -i m\n    local -i p\n    local -i q\n    local -i r\n    local\
    \ -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local\
    \ -i x\n    local -i y\n    local -i z\n    local -i a\n    local -i b\n    local\
    \ -i c\n    local -i d\n    local -i e\n    local -i f\n    local -i g\n    local\
    \ -i h\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local\
    \ -i m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local\
    \ -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local\
    \ -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i a\n    local\
    \ -i b\n    local -i c\n    local -i d\n    local -i e\n    local -i f\n    local\
    \ -i g\n    local -i h\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i l\n    local -i m\n    local -i n\n    local -i o\n    local -i p\n    local\
    \ -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local\
    \ -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local\
    \ -i a\n    local -i b\n    local -i c\n    local -i d\n    local -i e\n    local\
    \ -i f\n    local -i g\n    local -i h\n    local -i i\n    local -i j\n    local\
    \ -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n    local\
    \ -i p\n   \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local i=0\n    local j=0\n    local tmp=0\n    local\
    \ n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2swu96mx.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i=0 j=0\n    local -i len=0\n    local -i\
    \ max=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i max_len=0\n\
    \    local -i max_len_i=0\n    local -i max_len_j=0\n    local -i max_len_len=0\n\
    \    local -i max_len_max=0\n    local -i max_len_max_i=0\n    local -i max_len_max_j=0\n\
    \    local -i max_len_max_len=0\n    local -i max_len_max_max=0\n    local -i\
    \ max_len_max_max_i=0\n    local -i max_len_max_max_j=0\n    local -i max_len_max_max_len=0\n\
    \    local -i max_len_max_max_max=0\n    local -i max_len_max_max_max_i=0\n  \
    \  local -i max_len_max_max_max_j=0\n    local -i max_len_max_max_max_len=0\n\
    \    local -i max_len_max_max_max_max=0\n    local -i max_len_max_max_max_max_i=0\n\
    \    local -i max_len_max_max_max_max_j=0\n    local -i max_len_max_max_max_max_len=0\n\
    \    local -i max_len_max_max_max_max_max=0\n    local -i max_len_max_max_max_max_max_i=0\n\
    \    local -i max_len_max_max_max_max_max_j=0\n    local -i max_len_max_max_max_max_max_len=0\n\
    \    local -i max_len_max_max_max_max_max_max=0\n    local -i max_len_max_max_max_max_max_max_i=0\n\
    \    local -i max_len_max_max_max_max_\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i n\n    local\
    \ -i tmp\n    arr=($1)\n    n=${#arr[@]}\n    for ((i=0; i<n-1; i++)); do\n  \
    \      for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]}\
    \ ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    echo\
    \ ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i max\n    local\
    \ -i min\n    local -i n\n    local -i temp\n    local -i x\n    local -i y\n\
    \    arr=($1)\n    n=${#arr[@]}\n    if (( n == 0 )); then\n        echo \"True\"\
    \n        return\n    fi\n    for (( i = 0; i < n; i++ )); do\n        min=${arr[i]}\n\
    \        for (( j = i + 1; j < n; j++ )); do\n            if (( arr[j] < min ));\
    \ then\n                min=${arr[j]}\n                temp=${arr[i]}\n      \
    \          arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n  \
    \      done\n    done\n    max=${arr[0]}\n    for (( i = 1; i < n; i++ )); do\n\
    \        if (( arr[i] < max )); then\n            echo \"False\"\n           \
    \ return\n        fi\n        max=${arr[i]}\n    done\n    echo \"True\"\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local arr=($1)\n    local len=${#arr[@]}\n    local i\n    local j\n\
    \    local tmp\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    echo ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr=( $1 )\n    local -i i=0\n    local -i n=${#arr[@]}\n  \
    \  local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local\
    \ -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n\
    \    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local\
    \ -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n\
    \    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n\
    \    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n\
    \    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n\
    \    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n\
    \    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n\
    \    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n\
    \    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n\
    \    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n\
    \    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n\
    \    local -i lll=0\n    local -i mmm=0\n    local -\n}\n\ncandidate() {\n   \
    \ move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i n\n    local\
    \ -i min\n    local -i min_index\n    local -i tmp\n    local -i flag\n    arr=($1)\n\
    \    n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        min=${arr[i]}\n    \
    \    min_index=$i\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[j]}\
    \ -lt $min ]]; then\n                min=${arr[j]}\n                min_index=$j\n\
    \            fi\n        done\n        if [[ $min_index -ne $i ]]; then\n    \
    \        tmp=${arr[i]}\n            arr[i]=${arr[min_index]}\n            arr[min_index]=$tmp\n\
    \            flag=1\n        fi\n    done\n    if [[ $flag -eq 1 ]]; then\n  \
    \      echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local i=0\n    local j=0\n    local tmp=0\n    local\
    \ n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2swu96mx.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n\
    \        if [[ ${arr[i]} -eq 0 ]]; then\n            arr[i]=1\n            return\n\
    \        fi\n    done\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvrvodpv5.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n\
    \    local -i max=0\n    local -i max_idx=0\n    local -i min=0\n    local -i\
    \ min_idx=0\n    local -i count=0\n    local -i idx=0\n    local -i tmp=0\n  \
    \  local -i tmp_idx=0\n    local -i tmp_count=0\n    local -i tmp_max=0\n    local\
    \ -i tmp_max_idx=0\n    local -i tmp_min=0\n    local -i tmp_min_idx=0\n    local\
    \ -i tmp_idx=0\n    local -i tmp_count=0\n    local -i tmp_max=0\n    local -i\
    \ tmp_max_idx=0\n    local -i tmp_min=0\n    local -i tmp_min_idx=0\n    local\
    \ -i tmp_idx=0\n    local -i tmp_count=0\n    local -i tmp_max=0\n    local -i\
    \ tmp_max_idx=0\n    local -i tmp_min=0\n    local -i tmp_min_idx=0\n    local\
    \ -i tmp_idx=0\n    local -i tmp_count=0\n    local -i tmp_max=0\n    local -i\
    \ tmp_max_idx=0\n    local -i tmp_min=0\n    local -i tmp_min_idx=0\n    local\
    \ -i tmp_idx=0\n    local -i tmp_count=0\n    local -i tmp_max=0\n    local -i\
    \ tmp_max_idx=0\n    local -i tmp_min=0\n    local -i tmp_min_idx=0\n    local\
    \ -i tmp_idx=0\n    local -i tmp_count=0\n    local -i tmp_max=0\n    local -i\
    \ tmp_max_idx=0\n    local -i tmp_min=0\n    local -i tmp_min_idx=0\n    local\
    \ -i tmp_idx=\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpljri8zis.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i j\n    local -i n\n    local\
    \ -i min\n    local -i min_index\n    local -i temp\n    local -i flag\n    local\
    \ -i count\n    local -i max_count\n    local -i max_index\n    arr=($1)\n   \
    \ n=${#arr[@]}\n    min=${arr[0]}\n    min_index=0\n    max_count=0\n    max_index=0\n\
    \    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n  \
    \          min=${arr[i]}\n            min_index=$i\n        fi\n    done\n   \
    \ for ((i=0; i<n; i++)); do\n        count=0\n        flag=0\n        for ((j=i;\
    \ j<n; j++)); do\n            if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n       \
    \         flag=1\n                break\n            fi\n            count=$((count+1))\n\
    \        done\n        if [[ $flag -eq 0 ]]; then\n            if [[ $count -gt\
    \ $max_count ]]; then\n                max_count=$count\n                max_index=$i\n\
    \            fi\n        fi\n    done\n    if [[ $max_count -eq $n ]]; then\n\
    \        echo \"True\"\n    elif [[ $max_count -eq 1 ]]; then\n        echo \"\
    False\"\n    else\n        temp=${arr[0]}\n        arr[0]=${arr[max_index]}\n\
    \        arr[max_index]=$temp\n        echo \"True\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -n arr=$1\n    local -i N=${#arr[@]}\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n\
    \    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local\
    \ -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n\
    \    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local\
    \ -i b=0\n    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n\
    \    local -i g=0\n    local -i h=0\n    local -i ii=0\n    local -i jj=0\n  \
    \  local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n  \
    \  local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n  \
    \  local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n  \
    \  local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n  \
    \  local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n  \
    \  local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n  \
    \  local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n\
    \    local -i mmm=0\n    local -i nnn=0\n    local -i\n}\n\ncandidate() {\n  \
    \  move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpf0tm87xv.sh: line 22: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i N\n    local -i j\n    local\
    \ -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n    local\
    \ -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local\
    \ -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local\
    \ -i z\n    local -i aa\n    local -i bb\n    local -i cc\n    local -i dd\n \
    \   local -i ee\n    local -i ff\n    local -i gg\n    local -i hh\n    local\
    \ -i ii\n    local -i jj\n    local -i kk\n    local -i ll\n    local -i mm\n\
    \    local -i nn\n    local -i oo\n    local -i pp\n    local -i qq\n    local\
    \ -i rr\n    local -i ss\n    local -i tt\n    local -i uu\n    local -i vv\n\
    \    local -i ww\n    local -i xx\n    local -i yy\n    local -i zz\n    local\
    \ -i aaa\n    local -i bbb\n    local -i ccc\n    local -i ddd\n    local -i eee\n\
    \    local -i fff\n    local -i ggg\n    local -i hhh\n    local -i iii\n    local\
    \ -i jjj\n    local -i kkk\n    local -i lll\n    local -i mmm\n    local -i nnn\n\
    \    local -i ooo\n    local -i ppp\n    local -i qqq\n    local -i rrr\n    local\
    \ -i sss\n    local -i ttt\n    local -i uuu\n    local -i vvv\n    local -i www\n\
    \    local -i xxx\n    local -i yyy\n    local -i zzz\n    local -i aaaa\n   \
    \ local -i bbbb\n    local -i cccc\n    local -i dddd\n    local -i eeee\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i j\n    local -i N\n    local -i max\n  \
    \  local -i max_i\n    local -i tmp\n    arr=($1)\n    N=${#arr[@]}\n    if ((\
    \ N == 0 )); then\n        echo \"True\"\n        return\n    fi\n    for (( i\
    \ = 0; i < N; i++ )); do\n        max=${arr[i]}\n        max_i=$i\n        for\
    \ (( j = i + 1; j < N; j++ )); do\n            if (( arr[j] > max )); then\n \
    \               max=${arr[j]}\n                max_i=$j\n            fi\n    \
    \    done\n        if (( max_i != i )); then\n            tmp=${arr[i]}\n    \
    \        arr[i]=${arr[max_i]}\n            arr[max_i]=$tmp\n        fi\n    done\n\
    \    for (( i = 0; i < N - 1; i++ )); do\n        if (( arr[i] > arr[i + 1] ));\
    \ then\n            echo \"False\"\n            return\n        fi\n    done\n\
    \    echo \"True\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i N\n    local -i j\n    local\
    \ -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n    local\
    \ -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local\
    \ -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local\
    \ -i z\n    local -i aa\n    local -i bb\n    local -i cc\n    local -i dd\n \
    \   local -i ee\n    local -i ff\n    local -i gg\n    local -i hh\n    local\
    \ -i ii\n    local -i jj\n    local -i kk\n    local -i ll\n    local -i mm\n\
    \    local -i nn\n    local -i oo\n    local -i pp\n    local -i qq\n    local\
    \ -i rr\n    local -i ss\n    local -i tt\n    local -i uu\n    local -i vv\n\
    \    local -i ww\n    local -i xx\n    local -i yy\n    local -i zz\n    local\
    \ -i aaa\n    local -i bbb\n    local -i ccc\n    local -i ddd\n    local -i eee\n\
    \    local -i fff\n    local -i ggg\n    local -i hhh\n    local -i iii\n    local\
    \ -i jjj\n    local -i kkk\n    local -i lll\n    local -i mmm\n    local -i nnn\n\
    \    local -i ooo\n    local -i ppp\n    local -i qqq\n    local -i rrr\n    local\
    \ -i sss\n    local -i ttt\n    local -i uuu\n    local -i vvv\n    local -i www\n\
    \    local -i xxx\n    local -i yyy\n    local -i zzz\n    local -i aaaa\n   \
    \ local -i bbbb\n    local -i cccc\n    local -i dddd\n    local -i eeee\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return True else return False.\n# If the given array\
    \ is empty then return True.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n# be achieved for the given array.\n# Explanation:It\
    \ is not possible to get non-decreasing order for the given\n# array by performing\
    \ any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball()\
    \ {\n    local -a arr\n    local -i i\n    local -i n\n    local -i max\n    local\
    \ -i max_index\n    local -i tmp\n    arr=($1)\n    n=${#arr[@]}\n    max=${arr[0]}\n\
    \    max_index=0\n    for ((i=1; i<n; i++)); do\n        if [[ ${arr[i]} -gt $max\
    \ ]]; then\n            max=${arr[i]}\n            max_index=$i\n        fi\n\
    \    done\n    if [[ $max_index -eq $((n-1)) ]]; then\n        echo \"True\"\n\
    \        return\n    fi\n    tmp=${arr[max_index]}\n    for ((i=max_index; i>0;\
    \ i--)); do\n        arr[i]=${arr[i-1]}\n    done\n    arr[0]=$tmp\n    move_one_ball\
    \ \"${arr[@]}\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000666
