language: sh
name: HumanEval_56_correct_bracketing
results:
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \">\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    local top\n    local i\n\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\"\
    \ == \"<\" ]]; then\n            stack+=(\"$bracket\")\n        elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n            top=\"${stack[-1]}\"\n            if [[ \"$top\"\
    \ == \"<\" ]]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n\
    \            else\n                return 1\n            fi\n        else\n  \
    \          return 1\n        fi\n    done\n\n    if [[ \"${#stack[@]}\" == 0 ]];\
    \ then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \">\" ]]; then\n    \
    \        if [[ \"${#stack[@]}\" -eq 0 ]]; then\n                return 1\n   \
    \         fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n    \
    \    fi\n    done\n    if [[ \"${#stack[@]}\" -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    local top\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]];\
    \ then\n            stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \"\
    >\" ]]; then\n            top=\"${stack[-1]}\"\n            if [[ \"$top\" ==\
    \ \"<\" ]]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n \
    \           else\n                return 1\n            fi\n        else\n   \
    \         return 1\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local -i i=0\n    local -i len=${#brackets}\n    local -i top=0\n    local\
    \ -i count=0\n    local -i flag=0\n    local -i ret=0\n\n    while [ $i -lt $len\
    \ ]; do\n        if [ \"${brackets:$i:1}\" == \"<\" ]; then\n            stack[$top]=\"\
    <\"\n            top=$top+1\n        elif [ \"${brackets:$i:1}\" == \">\" ]; then\n\
    \            if [ $top -eq 0 ]; then\n                flag=1\n               \
    \ break\n            fi\n            top=$top-1\n        fi\n        i=$i+1\n\
    \    done\n\n    if [ $top -eq 0 ] && [ $flag -eq 0 ]; then\n        ret=1\n \
    \   fi\n\n    echo $ret\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local char\n    for (( i=0; i<${#brackets}; i++ )); do\n        char=\"\
    ${brackets:$i:1}\"\n        if [[ \"$char\" == \"<\" ]]; then\n            stack=\"\
    $stack<\"\n        elif [[ \"$char\" == \">\" ]]; then\n            if [[ -z \"\
    $stack\" ]]; then\n                return 1\n            fi\n            stack=\"\
    ${stack%?}\"\n        fi\n    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    local top\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]];\
    \ then\n            stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \"\
    >\" ]]; then\n            top=\"${stack[-1]}\"\n            if [[ \"$top\" ==\
    \ \"<\" ]]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n \
    \           else\n                return 1\n            fi\n        else\n   \
    \         return 1\n        fi\n    done\n    if [[ \"${#stack[@]}\" == 0 ]];\
    \ then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n            (( count++ ))\n        elif [[ \"${brackets:$i:1}\"\
    \ == \">\" ]]; then\n            (( count-- ))\n        fi\n        if (( count\
    \ < 0 )); then\n            return 1\n        fi\n    done\n    if (( count ==\
    \ 0 )); then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \">\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local c\n    for (( i=0; i<${#brackets}; i++ )); do\n        c=${brackets:$i:1}\n\
    \        if [[ $c == \"<\" ]]; then\n            stack+=(\"$c\")\n        elif\
    \ [[ $c == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n   \
    \             return 1\n            fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \">\" ]]; then\n    \
    \        if [[ \"${#stack[@]}\" -eq 0 ]]; then\n                return 1\n   \
    \         fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n    \
    \    fi\n    done\n    if [[ \"${#stack[@]}\" -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \">\" ]]; then\n    \
    \        if [[ \"${#stack[@]}\" -eq 0 ]]; then\n                return 1\n   \
    \         fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n\
    \    if [[ \"${#stack[@]}\" -eq 0 ]]; then\n        return 0\n    else\n     \
    \   return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local char=\"\"\n    for ((i=0; i<${#brackets}; i++)); do\n        char=\"\
    ${brackets:$i:1}\"\n        if [[ \"$char\" == \"<\" ]]; then\n            stack=\"\
    $stack$char\"\n        elif [[ \"$char\" == \">\" ]]; then\n            if [[\
    \ -z \"$stack\" ]]; then\n                return 1\n            fi\n         \
    \   stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\" ]];\
    \ then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=\"\
    ${brackets:$i:1}\"\n        if [[ \"$char\" == \"<\" ]]; then\n            stack=\"\
    $stack<\"\n        elif [[ \"$char\" == \">\" ]]; then\n            if [[ -z \"\
    $stack\" ]]; then\n                return 1\n            fi\n            stack=\"\
    ${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n    \
    \    return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n\
    \    local close_count=0\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n            ((open_count++))\n\
    \        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n            ((close_count++))\n\
    \        fi\n    done\n    [[ $open_count -eq $close_count ]]\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i=0\n    local len=${#brackets}\n    local c=\"\"\n    local top=\"\
    \"\n    while [ $i -lt $len ]; do\n        c=${brackets:$i:1}\n        if [ \"\
    $c\" == \"<\" ]; then\n            stack=\"$stack<\"\n        elif [ \"$c\" ==\
    \ \">\" ]; then\n            if [ -z \"$stack\" ]; then\n                return\
    \ 1\n            fi\n            top=${stack:0:1}\n            if [ \"$top\" !=\
    \ \"<\" ]; then\n                return 1\n            fi\n            stack=${stack:1}\n\
    \        else\n            return 1\n        fi\n        i=$((i+1))\n    done\n\
    \    if [ -z \"$stack\" ]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=\"\
    ${brackets:$i:1}\"\n        if [[ \"$char\" == \"<\" ]]; then\n            stack=\"\
    $stack<\"\n        elif [[ \"$char\" == \">\" ]]; then\n            if [[ -z \"\
    $stack\" ]]; then\n                return 1\n            fi\n            stack=\"\
    ${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n    \
    \    return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \">\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n\
    \    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    local top_of_stack\n\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\"\
    \ == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n              \
    \  return 1\n            fi\n            top_of_stack=\"${stack:${#stack}-1:1}\"\
    \n            if [[ \"$top_of_stack\" == \"<\" ]]; then\n                stack=\"\
    ${stack:0:${#stack}-1}\"\n            else\n                return 1\n       \
    \     fi\n        else\n            return 1\n        fi\n    done\n\n    if [[\
    \ -z \"$stack\" ]]; then\n        return 0\n    else\n        return 1\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local i=0\n    local len=${#brackets}\n    while [ $i -lt $len ]; do\n  \
    \      local char=${brackets:$i:1}\n        if [ \"$char\" == \"<\" ]; then\n\
    \            stack+=($char)\n        elif [ \"$char\" == \">\" ]; then\n     \
    \       if [ ${#stack[@]} -eq 0 ]; then\n                return 1\n          \
    \  fi\n            unset stack[${#stack[@]}-1]\n        fi\n        i=$((i+1))\n\
    \    done\n    if [ ${#stack[@]} -eq 0 ]; then\n        return 0\n    else\n \
    \       return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=\"\
    ${brackets:$i:1}\"\n        if [[ \"$c\" == \"<\" ]]; then\n            stack=\"\
    $stack<\"\n        elif [[ \"$c\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                return 1\n            fi\n            stack=\"${stack%<}\"\
    \n        fi\n    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    local top\n    local i\n\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\"\
    \ == \"<\" ]]; then\n            stack+=(\"$bracket\")\n        elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n            top=\"${stack[-1]}\"\n            if [[ \"$top\"\
    \ == \"<\" ]]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n\
    \            else\n                return 1\n            fi\n        else\n  \
    \          return 1\n        fi\n    done\n\n    if [[ \"${#stack[@]}\" -eq 0\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local char=\"\"\n    local top=\"\"\n    for (( i=0; i<${#brackets}; i++\
    \ )); do\n        char=\"${brackets:$i:1}\"\n        if [[ \"$char\" == \"<\"\
    \ ]]; then\n            stack=\"$stack$char\"\n        elif [[ \"$char\" == \"\
    >\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n                return\
    \ 1\n            fi\n            top=\"${stack: -1}\"\n            if [[ \"$top\"\
    \ == \"<\" ]]; then\n                stack=\"${stack:0:-1}\"\n            else\n\
    \                return 1\n            fi\n        else\n            return 1\n\
    \        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        return 0\n  \
    \  else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local c\n    for ((i=0; i<${#brackets}; i++)); do\n        c=${brackets:$i:1}\n\
    \        if [[ \"$c\" == \"<\" ]]; then\n            stack=\"$stack<\"\n     \
    \   elif [[ \"$c\" == \">\" ]]; then\n            if [[ \"$stack\" == \"\" ]];\
    \ then\n                return 1\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ \"$stack\" == \"\" ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i=0\n    local len=${#brackets}\n    local c=\"\"\n    local top=\"\
    \"\n    while [ $i -lt $len ]; do\n        c=${brackets:$i:1}\n        if [ \"\
    $c\" == \"<\" ]; then\n            stack=\"$stack$c\"\n        elif [ \"$c\" ==\
    \ \">\" ]; then\n            top=${stack: -1}\n            if [ \"$top\" == \"\
    <\" ]; then\n                stack=${stack:0:${#stack}-1}\n            else\n\
    \                return 1\n            fi\n        fi\n        i=$((i+1))\n  \
    \  done\n    if [ \"$stack\" == \"\" ]; then\n        return 0\n    else\n   \
    \     return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local stack=()\n\
    \  local bracket\n  for ((i=0; i<${#brackets}; i++)); do\n    bracket=\"${brackets:$i:1}\"\
    \n    if [[ \"$bracket\" == \"<\" ]]; then\n      stack+=(\"$bracket\")\n    elif\
    \ [[ \"$bracket\" == \">\" ]]; then\n      if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \        return 1\n      fi\n      unset stack[${#stack[@]}-1]\n    fi\n  done\n\
    \  if [[ ${#stack[@]} -eq 0 ]]; then\n    return 0\n  else\n    return 1\n  fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    local top\n\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        bracket=${brackets:$i:1}\n        if [[ $bracket == \"<\" ]]; then\n\
    \            stack+=($bracket)\n        elif [[ $bracket == \">\" ]]; then\n \
    \           top=${stack[${#stack[@]}-1]}\n            if [[ $top == \"<\" ]];\
    \ then\n                unset stack[${#stack[@]}-1]\n            else\n      \
    \          return 1\n            fi\n        fi\n    done\n\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open=0\n  \
    \  local close=0\n    for ((i=0; i<${#brackets}; i++)); do\n        if [[ ${brackets:$i:1}\
    \ == \"<\" ]]; then\n            open=$((open+1))\n        elif [[ ${brackets:$i:1}\
    \ == \">\" ]]; then\n            close=$((close+1))\n        fi\n        if [[\
    \ $close -gt $open ]]; then\n            return 1\n        fi\n    done\n    if\
    \ [[ $open -eq $close ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n\
    \  local bracket\n  for ((i=0; i<${#brackets}; i++)); do\n    bracket=\"${brackets:$i:1}\"\
    \n    if [[ \"$bracket\" == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif\
    \ [[ \"$bracket\" == \">\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n    \
    \    return 1\n      fi\n      stack=\"${stack%?}\"\n    fi\n  done\n  if [[ -z\
    \ \"$stack\" ]]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i=0\n    local len=${#brackets}\n    while [ $i -lt $len ]; do\n  \
    \      local char=${brackets:$i:1}\n        if [ \"$char\" == \"<\" ]; then\n\
    \            stack+=($char)\n        elif [ \"$char\" == \">\" ]; then\n     \
    \       if [ ${#stack[@]} -eq 0 ]; then\n                return 1\n          \
    \  fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n\
    \        i=$(($i+1))\n    done\n    if [ ${#stack[@]} -eq 0 ]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for (( i=0; i<${#brackets}; i++ )); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ \"$stack\" == \"\" ]]; then\n                return 1\n           \
    \ fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ \"$stack\"\
    \ == \"\" ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    local top\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]];\
    \ then\n            stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \"\
    >\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                return\
    \ 1\n            fi\n            top=\"${stack[-1]}\"\n            if [[ \"$top\"\
    \ == \"<\" ]]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n\
    \            else\n                return 1\n            fi\n        else\n  \
    \          return 1\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local c\n    for ((i=0; i<${#brackets}; i++)); do\n        c=${brackets:$i:1}\n\
    \        if [[ \"$c\" == \"<\" ]]; then\n            stack=\"$stack$c\"\n    \
    \    elif [[ \"$c\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n\
    \                return 1\n            fi\n            stack=${stack:0:-1}\n \
    \       fi\n    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i=0\n    local c=''\n    local top=''\n    while [ $i -lt ${#brackets}\
    \ ]; do\n        c=${brackets:$i:1}\n        if [ \"$c\" == \"<\" ]; then\n  \
    \          stack+=($c)\n        elif [ \"$c\" == \">\" ]; then\n            if\
    \ [ ${#stack[@]} -eq 0 ]; then\n                return 1\n            fi\n   \
    \         top=${stack[${#stack[@]}-1]}\n            if [ \"$top\" == \"<\" ];\
    \ then\n                unset stack[${#stack[@]}-1]\n            else\n      \
    \          return 1\n            fi\n        else\n            return 1\n    \
    \    fi\n        i=$((i+1))\n    done\n    if [ ${#stack[@]} -eq 0 ]; then\n \
    \       return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \">\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \">\" ]]; then\n    \
    \        if [[ \"${#stack[@]}\" -eq 0 ]]; then\n                return 1\n   \
    \         fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n\
    \    if [[ \"${#stack[@]}\" -eq 0 ]]; then\n        return 0\n    else\n     \
    \   return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local c\n    for ((i=0; i<${#brackets}; i++)); do\n        c=${brackets:$i:1}\n\
    \        if [[ \"$c\" == \"<\" ]]; then\n            stack=\"$stack$c\"\n    \
    \    elif [[ \"$c\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n\
    \                return 1\n            fi\n            stack=${stack%?}\n    \
    \    fi\n    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ \"$stack\" == \"\" ]]; then\n                echo \"False\"\n     \
    \           return 1\n            fi\n            stack=\"${stack%?}\"\n     \
    \   fi\n    done\n    if [[ \"$stack\" == \"\" ]]; then\n        echo \"True\"\
    \n        return 0\n    else\n        echo \"False\"\n        return 1\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=\"\
    ${brackets:$i:1}\"\n        if [[ \"$c\" == \"<\" ]]; then\n            stack=\"\
    $stack$c\"\n        elif [[ \"$c\" == \">\" ]]; then\n            if [[ \"$stack\"\
    \ == \"\" ]]; then\n                return 1\n            fi\n            stack=\"\
    ${stack%?}\"\n        fi\n    done\n    [[ \"$stack\" == \"\" ]]\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for (( i=0; i<${#brackets}; i++ )); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \">\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ \"$stack\" == \"\" ]]; then\n                return 1\n           \
    \ fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ \"$stack\"\
    \ == \"\" ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ \"$stack\" == \"\" ]]; then\n                return 1\n           \
    \ fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ \"$stack\"\
    \ == \"\" ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n\
    \  local bracket\n  for ((i=0; i<${#brackets}; i++)); do\n    bracket=\"${brackets:$i:1}\"\
    \n    if [[ \"$bracket\" == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif\
    \ [[ \"$bracket\" == \">\" ]]; then\n      if [[ \"$stack\" == \"\" ]]; then\n\
    \        return 1\n      fi\n      stack=\"${stack:0:-1}\"\n    fi\n  done\n \
    \ if [[ \"$stack\" == \"\" ]]; then\n    return 0\n  else\n    return 1\n  fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \">\" ]]; then\n    \
    \        if [[ \"${#stack[@]}\" == 0 ]]; then\n                return 1\n    \
    \        fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n \
    \   if [[ \"${#stack[@]}\" == 0 ]]; then\n        return 0\n    else\n       \
    \ return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n\
    \    local close_count=0\n    local i=0\n    local c=''\n    while [ $i -lt ${#brackets}\
    \ ]; do\n        c=${brackets:$i:1}\n        if [ \"$c\" == \"<\" ]; then\n  \
    \          open_count=$((open_count + 1))\n        elif [ \"$c\" == \">\" ]; then\n\
    \            close_count=$((close_count + 1))\n        fi\n        if [ $close_count\
    \ -gt $open_count ]; then\n            return 1\n        fi\n        i=$((i +\
    \ 1))\n    done\n    if [ $open_count -eq $close_count ]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack+=($bracket)\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n           \
    \ fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[\
    \ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i\n    local c\n    for ((i=0; i<${#brackets}; i++)); do\n        c=${brackets:$i:1}\n\
    \        if [[ $c == \"<\" ]]; then\n            stack+=($c)\n        elif [[\
    \ $c == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n      \
    \          return 1\n            fi\n            stack=(\"${stack[@]:0:${#stack[@]}-1}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for (( i=0; i<${#brackets}; i++ )); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    [[ -z \"$stack\"\
    \ ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i=0\n    local len=${#brackets}\n    while [ $i -lt $len ]; do\n\
    \        local char=${brackets:$i:1}\n        if [ \"$char\" == \"<\" ]; then\n\
    \            stack=\"$stack<\"\n        elif [ \"$char\" == \">\" ]; then\n  \
    \          if [ -z \"$stack\" ]; then\n                return 1\n            fi\n\
    \            stack=${stack:0:-1}\n        fi\n        i=$((i+1))\n    done\n \
    \   if [ -z \"$stack\" ]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=\"\
    ${brackets:$i:1}\"\n        if [[ \"$c\" == \"<\" ]]; then\n            stack=\"\
    $stack<\"\n        elif [[ \"$c\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                return 1\n            fi\n            stack=\"${stack%<}\"\
    \n        fi\n    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=\"\
    ${brackets:$i:1}\"\n        if [[ \"$c\" == \"<\" ]]; then\n            stack=\"\
    $stack$c\"\n        elif [[ \"$c\" == \">\" ]]; then\n            if [[ \"$stack\"\
    \ == \"\" ]]; then\n                return 1\n            fi\n            stack=\"\
    ${stack%?}\"\n        fi\n    done\n    if [[ \"$stack\" == \"\" ]]; then\n  \
    \      return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n\
    \  local bracket\n  for ((i=0; i<${#brackets}; i++)); do\n    bracket=\"${brackets:$i:1}\"\
    \n    if [[ \"$bracket\" == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif\
    \ [[ \"$bracket\" == \">\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n    \
    \    return 1\n      fi\n      stack=\"${stack:0:-1}\"\n    fi\n  done\n  if [[\
    \ -z \"$stack\" ]]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for (( i=0; i<${#brackets}; i++ )); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \">\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    [[\
    \ ${#stack[@]} -eq 0 ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local i=0\n    local c=''\n    local top=''\n    local len=${#brackets}\n\
    \    while [ $i -lt $len ]; do\n        c=${brackets:$i:1}\n        if [ \"$c\"\
    \ == \"<\" ]; then\n            stack+=($c)\n        elif [ \"$c\" == \">\" ];\
    \ then\n            top=${stack[-1]}\n            if [ \"$top\" == \"<\" ]; then\n\
    \                stack=(${stack[@]:0:$((${#stack[@]}-1))})\n            else\n\
    \                return 1\n            fi\n        fi\n        i=$(($i+1))\n \
    \   done\n    if [ ${#stack[@]} -eq 0 ]; then\n        return 0\n    else\n  \
    \      return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"<\" ]]; then\n            stack+=(\"$bracket\")\n\
    \        elif [[ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq\
    \ 0 ]]; then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=\"\
    ${brackets:$i:1}\"\n        if [[ \"$char\" == \"<\" ]]; then\n            stack=\"\
    $stack<\"\n        elif [[ \"$char\" == \">\" ]]; then\n            if [[ -z \"\
    $stack\" ]]; then\n                return 1\n            fi\n            stack=\"\
    ${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n    \
    \    return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i=0\n    local c\n    local top\n    local result=1\n\n    while\
    \ [ $i -lt ${#brackets} ]; do\n        c=${brackets:$i:1}\n        if [ \"$c\"\
    \ == \"<\" ]; then\n            stack=\"$stack$c\"\n        elif [ \"$c\" == \"\
    >\" ]; then\n            if [ ${#stack} -eq 0 ]; then\n                result=0\n\
    \                break\n            fi\n            top=${stack:${#stack}-1:1}\n\
    \            if [ \"$top\" != \"<\" ]; then\n                result=0\n      \
    \          break\n            fi\n            stack=${stack:0:${#stack}-1}\n \
    \       fi\n        i=$((i+1))\n    done\n\n    if [ ${#stack} -ne 0 ]; then\n\
    \        result=0\n    fi\n\n    echo $result\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=\"\
    ${brackets:$i:1}\"\n        if [[ \"$char\" == \"<\" ]]; then\n            stack+=(\"\
    $char\")\n        elif [[ \"$char\" == \">\" ]]; then\n            if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n                return 1\n            fi\n            stack=(\"\
    ${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    local top\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]];\
    \ then\n            stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]];\
    \ then\n            top=\"${stack: -1}\"\n            if [[ \"$top\" == \"<\"\
    \ ]]; then\n                stack=\"${stack:0:-1}\"\n            else\n      \
    \          return 1\n            fi\n        else\n            return 1\n    \
    \    fi\n    done\n    if [[ \"$stack\" == \"\" ]]; then\n        return 0\n \
    \   else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack$bracket\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n \
    \           if [[ -z \"$stack\" ]]; then\n                return 1\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    [[ -z \"$stack\"\
    \ ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for (( i=0; i<${#brackets}; i++ )); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for (( i=0; i<${#brackets}; i++ )); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    [[ -z \"$stack\"\
    \ ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=''\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ $c == '<' ]]; then\n            stack+=$c\n        elif [[ $c ==\
    \ '>' ]]; then\n            if [[ -z $stack ]]; then\n                return 1\n\
    \            fi\n            stack=${stack:0:-1}\n        fi\n    done\n    [[\
    \ -z $stack ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n\
    \    local close_count=0\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n            open_count=$((open_count\
    \ + 1))\n        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n            close_count=$((close_count\
    \ + 1))\n        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i=0\n    local len=${#brackets}\n    while [ $i -lt $len ]; do\n  \
    \      local c=${brackets:$i:1}\n        if [ \"$c\" == \"<\" ]; then\n      \
    \      stack+=($c)\n        elif [ \"$c\" == \">\" ]; then\n            if [ ${#stack[@]}\
    \ -eq 0 ]; then\n                return 1\n            fi\n            stack=(\"\
    ${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n        i=$(($i+1))\n    done\n\
    \    if [ ${#stack[@]} -eq 0 ]; then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%<}\"\n        fi\n    done\n    [[ -z \"$stack\"\
    \ ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=\"\
    ${brackets:$i:1}\"\n        if [[ \"$c\" == \"<\" ]]; then\n            stack=\"\
    $stack$c\"\n        elif [[ \"$c\" == \">\" ]]; then\n            if [[ -z \"\
    $stack\" ]]; then\n                return 1\n            fi\n            stack=\"\
    ${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n       \
    \ return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local stack_size=0\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        local bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"\
    <\" ]]; then\n            stack[$stack_size]=\"$bracket\"\n            ((stack_size++))\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if ((stack_size ==\
    \ 0)); then\n                return 1\n            fi\n            ((stack_size--))\n\
    \        fi\n    done\n    if ((stack_size == 0)); then\n        return 0\n  \
    \  else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local c\n    for ((i=0; i<${#brackets}; i++)); do\n        c=${brackets:$i:1}\n\
    \        if [[ \"$c\" == \"<\" ]]; then\n            stack=\"$stack<\"\n     \
    \   elif [[ \"$c\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n\
    \                return 1\n            fi\n            stack=${stack:0:-1}\n \
    \       fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        return 0\n   \
    \ else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n  \
    \  [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n            (( count++ ))\n        elif [[ \"${brackets:$i:1}\"\
    \ == \">\" ]]; then\n            (( count-- ))\n        fi\n        if (( count\
    \ < 0 )); then\n            return 1\n        fi\n    done\n    if (( count ==\
    \ 0 )); then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack:0:-1}\"\n        fi\n    done\n    [[ -z \"$stack\"\
    \ ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \">\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n\
    \    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local c=\"\"\n    local top=\"\"\n    for ((i=0; i<${#brackets}; i++));\
    \ do\n        c=\"${brackets:$i:1}\"\n        if [[ \"$c\" == \"<\" ]]; then\n\
    \            stack=\"$stack$c\"\n        elif [[ \"$c\" == \">\" ]]; then\n  \
    \          if [[ -z \"$stack\" ]]; then\n                return 1\n          \
    \  fi\n            top=\"${stack: -1}\"\n            if [[ \"$top\" == \"<\" ]];\
    \ then\n                stack=\"${stack:0:-1}\"\n            else\n          \
    \      return 1\n            fi\n        else\n            return 1\n        fi\n\
    \    done\n    if [[ -z \"$stack\" ]]; then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local char\n    for ((i=0; i<${#brackets}; i++)); do\n        char=\"\
    ${brackets:$i:1}\"\n        if [[ \"$char\" == \"<\" ]]; then\n            stack=\"\
    $stack<\"\n        elif [[ \"$char\" == \">\" ]]; then\n            if [[ -z \"\
    $stack\" ]]; then\n                return 1\n            fi\n            stack=\"\
    ${stack:0:-1}\"\n        fi\n    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=\"${brackets:$i:1}\"\
    \n        if [[ \"$c\" == \"<\" ]]; then\n            stack=\"$stack<\"\n    \
    \    elif [[ \"$c\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n\
    \                return 1\n            fi\n            stack=\"${stack%<}\"\n\
    \        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        return 0\n  \
    \  else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local char\n    local stack_top\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        char=\"${brackets:$i:1}\"\n        if [[ \"$char\" == \"<\" ]]; then\n\
    \            stack+=(\"$char\")\n        elif [[ \"$char\" == \">\" ]]; then\n\
    \            stack_top=\"${stack[-1]}\"\n            if [[ \"$stack_top\" == \"\
    <\" ]]; then\n                unset stack[-1]\n            else\n            \
    \    return 1\n            fi\n        fi\n    done\n    if [[ \"${#stack[@]}\"\
    \ -eq 0 ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    local top\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]];\
    \ then\n            stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]];\
    \ then\n            top=\"${stack: -1}\"\n            if [[ \"$top\" == \"<\"\
    \ ]]; then\n                stack=\"${stack:0:-1}\"\n            else\n      \
    \          return 1\n            fi\n        else\n            return 1\n    \
    \    fi\n    done\n    if [[ \"$stack\" == \"\" ]]; then\n        return 0\n \
    \   else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n            (( count++ ))\n        elif [[ \"${brackets:$i:1}\"\
    \ == \">\" ]]; then\n            (( count-- ))\n        fi\n        if (( count\
    \ < 0 )); then\n            return 1\n        fi\n    done\n    if (( count ==\
    \ 0 )); then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local i=0\n    local c\n    local top\n    local len=${#brackets}\n    while\
    \ [ $i -lt $len ]; do\n        c=${brackets:$i:1}\n        if [ \"$c\" == \"<\"\
    \ ]; then\n            stack+=($c)\n        elif [ \"$c\" == \">\" ]; then\n \
    \           top=${stack[-1]}\n            if [ \"$top\" == \"<\" ]; then\n   \
    \             stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n            else\n   \
    \             return 1\n            fi\n        fi\n        i=$((i+1))\n    done\n\
    \    if [ ${#stack[@]} -eq 0 ]; then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ \"$stack\" == \"\" ]]; then\n                return 1\n           \
    \ fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ \"$stack\"\
    \ == \"\" ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n\
    \    local close_count=0\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        local c=${brackets:$i:1}\n        if [[ $c == \"<\" ]]; then\n      \
    \      ((open_count++))\n        elif [[ $c == \">\" ]]; then\n            ((close_count++))\n\
    \        else\n            echo \"Error: invalid character '$c' in string '$brackets'\"\
    \ >&2\n            return 1\n        fi\n    done\n    if [[ $open_count -eq $close_count\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local current=\"\"\n    local top=\"\"\n    local i=0\n    local len=${#brackets}\n\
    \    while [ $i -lt $len ]; do\n        current=\"${brackets:$i:1}\"\n       \
    \ if [ \"$current\" == \"<\" ]; then\n            stack=\"$stack<\"\n        elif\
    \ [ \"$current\" == \">\" ]; then\n            top=\"${stack: -1}\"\n        \
    \    if [ \"$top\" == \"<\" ]; then\n                stack=\"${stack:0:${#stack}-1}\"\
    \n            else\n                return 1\n            fi\n        fi\n   \
    \     i=$((i+1))\n    done\n    if [ \"$stack\" == \"\" ]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    for ((i=0; i<${#brackets}; i++)); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[ \"${brackets:$i:1}\"\
    \ == \">\" ]]; then\n            if [[ \"$stack\" == \"\" ]]; then\n         \
    \       return 1\n            fi\n            stack=\"${stack:0:-1}\"\n      \
    \  fi\n    done\n    if [[ \"$stack\" == \"\" ]]; then\n        return 0\n   \
    \ else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n  \
    \  [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n            (( count++ ))\n        elif [[ \"${brackets:$i:1}\"\
    \ == \">\" ]]; then\n            (( count-- ))\n        fi\n        if (( count\
    \ < 0 )); then\n            return 1\n        fi\n    done\n    return $count\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local stack=()\n\
    \  local i\n  for ((i=0; i<${#brackets}; i++)); do\n    local char=\"${brackets:$i:1}\"\
    \n    if [[ \"$char\" == \"<\" ]]; then\n      stack+=(\"$char\")\n    elif [[\
    \ \"$char\" == \">\" ]]; then\n      if [[ \"${#stack[@]}\" -eq 0 ]]; then\n \
    \       return 1\n      fi\n      stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n    fi\n  done\n  if [[ \"${#stack[@]}\" -eq 0 ]]; then\n    return 0\n  else\n\
    \    return 1\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\
    \n        if [[ \"$char\" == \"<\" ]]; then\n            stack=\"$stack<\"\n \
    \       elif [[ \"$char\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]];\
    \ then\n                return 1\n            fi\n            stack=\"${stack%?}\"\
    \n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        return 0\n \
    \   else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i=0\n    local c\n    local top\n    while [ $i -lt ${#brackets} ];\
    \ do\n        c=${brackets:$i:1}\n        if [ \"$c\" == \"<\" ]; then\n     \
    \       stack+=($c)\n        elif [ \"$c\" == \">\" ]; then\n            top=${stack[-1]}\n\
    \            if [ \"$top\" == \"<\" ]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\"\
    )\n            else\n                return 1\n            fi\n        fi\n  \
    \      i=$((i+1))\n    done\n    if [ ${#stack[@]} -eq 0 ]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ \"$c\" == \"<\" ]]; then\n            stack+=(\"$c\")\n       \
    \ elif [[ \"$c\" == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                return 1\n            fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n        fi\n    done\n    [[ ${#stack[@]} -eq 0 ]]\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    local top\n\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]];\
    \ then\n            stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \"\
    >\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                return\
    \ 1\n            fi\n            top=\"${stack[-1]}\"\n            if [[ \"$top\"\
    \ == \"<\" ]]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n\
    \            else\n                return 1\n            fi\n        else\n  \
    \          return 1\n        fi\n    done\n\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\
    \n        if [[ \"$char\" == \"<\" ]]; then\n            stack=\"$stack<\"\n \
    \       elif [[ \"$char\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]];\
    \ then\n                return 1\n            fi\n            stack=\"${stack%?}\"\
    \n        fi\n    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \">\" ]]; then\n    \
    \        if [[ \"${#stack[@]}\" == 0 ]]; then\n                return 1\n    \
    \        fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n \
    \   if [[ \"${#stack[@]}\" == 0 ]]; then\n        return 0\n    else\n       \
    \ return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n\
    \  local i\n  for ((i=0; i<${#brackets}; i++)); do\n    local char=\"${brackets:$i:1}\"\
    \n    if [[ \"$char\" == \"<\" ]]; then\n      stack=\"$stack$char\"\n    elif\
    \ [[ \"$char\" == \">\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n       \
    \ return 1\n      fi\n      stack=\"${stack%?}\"\n    fi\n  done\n  [[ -z \"$stack\"\
    \ ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n\
    \  local bracket\n  for ((i=0; i<${#brackets}; i++)); do\n    bracket=\"${brackets:$i:1}\"\
    \n    if [[ \"$bracket\" == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif\
    \ [[ \"$bracket\" == \">\" ]]; then\n      if [[ \"$stack\" == \"\" ]]; then\n\
    \        return 1\n      fi\n      stack=\"${stack%?}\"\n    fi\n  done\n  [[\
    \ \"$stack\" == \"\" ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n\
    \  local bracket\n  local top\n  for ((i=0; i<${#brackets}; i++)); do\n    bracket=\"\
    ${brackets:$i:1}\"\n    if [[ \"$bracket\" == \"<\" ]]; then\n      stack=\"$stack$bracket\"\
    \n    elif [[ \"$bracket\" == \">\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n\
    \        return 1\n      fi\n      top=\"${stack: -1}\"\n      if [[ \"$top\"\
    \ == \"<\" ]]; then\n        stack=\"${stack:0:-1}\"\n      else\n        return\
    \ 1\n      fi\n    else\n      return 1\n    fi\n  done\n  if [[ -z \"$stack\"\
    \ ]]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ \"$c\" == \"<\" ]]; then\n            stack+=(\"$c\")\n       \
    \ elif [[ \"$c\" == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                return 1\n            fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \">\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ \"$c\" == \"<\" ]]; then\n            stack+=(\"$c\")\n       \
    \ elif [[ \"$c\" == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                return 1\n            fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local c\n    for ((i=0; i<${#brackets}; i++)); do\n        c=${brackets:$i:1}\n\
    \        if [[ \"$c\" == \"<\" ]]; then\n            stack+=($c)\n        elif\
    \ [[ \"$c\" == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                return 1\n            fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ \"$c\" == \"<\" ]]; then\n            stack+=($c)\n        elif\
    \ [[ \"$c\" == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local result=true\n    for ((i=0; i<${#brackets}; i++)); do\n        local\
    \ bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n\
    \            stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n\
    \            if [[ -z \"$stack\" ]]; then\n                result=false\n    \
    \            break\n            else\n                stack=\"${stack:0:-1}\"\n\
    \            fi\n        fi\n    done\n    if [[ -n \"$stack\" ]]; then\n    \
    \    result=false\n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n\
    \  local bracket\n  local top\n  for (( i=0; i<${#brackets}; i++ )); do\n    bracket=\"\
    ${brackets:$i:1}\"\n    if [[ \"$bracket\" == \"<\" ]]; then\n      stack=\"$stack$bracket\"\
    \n    elif [[ \"$bracket\" == \">\" ]]; then\n      top=\"${stack: -1}\"\n   \
    \   if [[ \"$top\" == \"<\" ]]; then\n        stack=\"${stack:0:-1}\"\n      else\n\
    \        return 1\n      fi\n    fi\n  done\n  if [[ -z \"$stack\" ]]; then\n\
    \    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local i=0\n    local c\n    local top\n    local len=${#brackets}\n    while\
    \ [ $i -lt $len ]; do\n        c=${brackets:$i:1}\n        if [ \"$c\" == \"<\"\
    \ ]; then\n            stack+=($c)\n        elif [ \"$c\" == \">\" ]; then\n \
    \           top=${stack[-1]}\n            if [ \"$top\" == \"<\" ]; then\n   \
    \             stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n            else\n\
    \                return 1\n            fi\n        fi\n        i=$(($i+1))\n \
    \   done\n    if [ ${#stack[@]} -eq 0 ]; then\n        return 0\n    else\n  \
    \      return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local c\n    for ((i=0; i<${#brackets}; i++)); do\n        c=${brackets:$i:1}\n\
    \        if [[ \"$c\" == \"<\" ]]; then\n            stack=\"$stack$c\"\n    \
    \    elif [[ \"$c\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n\
    \                return 1\n            fi\n            stack=${stack%?}\n    \
    \    fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        case \"${brackets:$i:1}\"\
    \ in\n            \"<\")\n                stack=\"$stack<\"\n                ;;\n\
    \            \">\")\n                if [[ -z \"$stack\" ]]; then\n          \
    \          return 1\n                fi\n                stack=\"${stack%<}\"\n\
    \                ;;\n            *)\n                return 1\n              \
    \  ;;\n        esac\n    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate() {\n \
    \   correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local i=0\n    local n=${#brackets}\n    while [ $i -lt $n ]; do\n      \
    \  local char=${brackets:$i:1}\n        if [ \"$char\" == \"<\" ]; then\n    \
    \        stack+=($char)\n        elif [ \"$char\" == \">\" ]; then\n         \
    \   if [ ${#stack[@]} -eq 0 ]; then\n                return 1\n            fi\n\
    \            unset stack[${#stack[@]}-1]\n        fi\n        i=$((i+1))\n   \
    \ done\n    if [ ${#stack[@]} -eq 0 ]; then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \">\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n\
    \    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack$bracket\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n \
    \           if [[ -z \"$stack\" ]]; then\n                return 1\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    [[ -z \"$stack\"\
    \ ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local open_bracket=\"<\"\n    local close_bracket=\">\"\n    local open_count=0\n\
    \    local close_count=0\n    local i=0\n    local len=${#brackets}\n    local\
    \ bracket\n    local top\n\n    while [ $i -lt $len ]; do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [ \"$bracket\" == \"$open_bracket\" ]; then\n \
    \           stack=\"$stack$open_bracket\"\n            open_count=$((open_count\
    \ + 1))\n        elif [ \"$bracket\" == \"$close_bracket\" ]; then\n         \
    \   if [ -z \"$stack\" ]; then\n                return 1\n            fi\n   \
    \         top=\"${stack: -1}\"\n            if [ \"$top\" == \"$open_bracket\"\
    \ ]; then\n                stack=\"${stack:0:-1}\"\n                close_count=$((close_count\
    \ + 1))\n            else\n                return 1\n            fi\n        else\n\
    \            return 1\n        fi\n        i=$((i + 1))\n    done\n\n    if [\
    \ -z \"$stack\" ]; then\n        return 0\n    else\n        return 1\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i\n\n    for ((i=0; i<${#brackets}; i++)); do\n        if [[ \"\
    ${brackets:$i:1}\" == \"<\" ]]; then\n            stack+=\"<\"\n        elif [[\
    \ \"${brackets:$i:1}\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]];\
    \ then\n                return 1\n            fi\n            stack=\"${stack%?}\"\
    \n        fi\n    done\n\n    if [[ -z \"$stack\" ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ \"$stack\" == \"\" ]]; then\n                return 1\n           \
    \ fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ \"\
    $stack\" == \"\" ]]; then\n        return 0\n    else\n        return 1\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local open_brackets=0\n\
    \  local close_brackets=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    if [[\
    \ \"${brackets:$i:1}\" == \"<\" ]]; then\n      open_brackets=$(( open_brackets\
    \ + 1 ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n      close_brackets=$((\
    \ close_brackets + 1 ))\n    fi\n    if [[ $close_brackets -gt $open_brackets\
    \ ]]; then\n      return 1\n    fi\n  done\n  if [[ $open_brackets -eq $close_brackets\
    \ ]]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n\
    \    local close_count=0\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n            ((open_count++))\n\
    \        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n            ((close_count++))\n\
    \        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n     \
    \   return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            stack=(\"${stack[@]:0:${#stack[@]}-1}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \">\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    local top\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        bracket=${brackets:$i:1}\n        if [[ $bracket == \"<\" ]]; then\n\
    \            stack+=($bracket)\n        elif [[ $bracket == \">\" ]]; then\n \
    \           top=${stack[-1]}\n            if [[ $top == \"<\" ]]; then\n     \
    \           unset stack[-1]\n                stack=(\"${stack[@]}\")\n       \
    \     else\n                return 1\n            fi\n        fi\n    done\n \
    \   if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local open_bracket=\"<\"\n    local close_bracket=\">\"\n    local i=0\n\
    \    local len=${#brackets}\n    while [ $i -lt $len ]; do\n        local char=${brackets:$i:1}\n\
    \        if [ \"$char\" == \"$open_bracket\" ]; then\n            stack=\"$stack$open_bracket\"\
    \n        elif [ \"$char\" == \"$close_bracket\" ]; then\n            if [ -z\
    \ \"$stack\" ]; then\n                return 1\n            fi\n            stack=${stack%$open_bracket}\n\
    \        fi\n        i=$((i+1))\n    done\n    if [ -z \"$stack\" ]; then\n  \
    \      return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i=0\n    local len=${#brackets}\n    local bracket\n    local top\n\
    \n    while [ $i -lt $len ]; do\n        bracket=${brackets:$i:1}\n        if\
    \ [ \"$bracket\" == \"<\" ]; then\n            stack+=($bracket)\n        elif\
    \ [ \"$bracket\" == \">\" ]; then\n            top=${stack[${#stack[@]}-1]}\n\
    \            if [ \"$top\" == \"<\" ]; then\n                unset stack[${#stack[@]}-1]\n\
    \            else\n                return 1\n            fi\n        fi\n    \
    \    i=$((i+1))\n    done\n\n    if [ ${#stack[@]} -eq 0 ]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open=0\n\
    \    local close=0\n    for ((i=0; i<${#brackets}; i++)); do\n        if [[ \"\
    ${brackets:$i:1}\" == \"<\" ]]; then\n            ((open++))\n        elif [[\
    \ \"${brackets:$i:1}\" == \">\" ]]; then\n            ((close++))\n        fi\n\
    \        if ((close > open)); then\n            return 1\n        fi\n    done\n\
    \    if ((open == close)); then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for (( i=0; i<${#brackets}; i++ )); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local stack=()\n\
    \  local bracket\n  for ((i=0; i<${#brackets}; i++)); do\n    bracket=\"${brackets:$i:1}\"\
    \n    if [[ \"$bracket\" == \"<\" ]]; then\n      stack+=(\"$bracket\")\n    elif\
    \ [[ \"$bracket\" == \">\" ]]; then\n      if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \        return 1\n      fi\n      unset stack[${#stack[@]}-1]\n    fi\n  done\n\
    \  if [[ ${#stack[@]} -eq 0 ]]; then\n    return 0\n  else\n    return 1\n  fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local i\n    local c\n    for ((i=0; i<${#brackets}; i++)); do\n        c=\"\
    ${brackets:$i:1}\"\n        if [[ \"$c\" == \"<\" ]]; then\n            stack+=(\"\
    $c\")\n        elif [[ \"$c\" == \">\" ]]; then\n            if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n                return 1\n            fi\n            stack=(\"\
    ${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local c\n    for ((i=0; i<${#brackets}; i++)); do\n        c=\"${brackets:$i:1}\"\
    \n        if [[ \"$c\" == \"<\" ]]; then\n            stack=\"$stack<\"\n    \
    \    elif [[ \"$c\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n\
    \                return 1\n            fi\n            stack=\"${stack%<}\"\n\
    \        fi\n    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local open_bracket=\"<\"\n    local close_bracket=\">\"\n    local open_count=0\n\
    \    local close_count=0\n    local i=0\n    local char=\"\"\n\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        char=\"${brackets:$i:1}\"\n        if [[\
    \ \"$char\" == \"$open_bracket\" ]]; then\n            stack=\"$stack$open_bracket\"\
    \n            open_count=$((open_count + 1))\n        elif [[ \"$char\" == \"\
    $close_bracket\" ]]; then\n            if [[ \"$stack\" == \"\" ]]; then\n   \
    \             return 1\n            fi\n            stack=\"${stack:0:-1}\"\n\
    \            close_count=$((close_count + 1))\n        fi\n    done\n\n    if\
    \ [[ \"$open_count\" -eq \"$close_count\" ]]; then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \">\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n\
    \    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_count=0\n\
    \    local close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n       \
    \ if [[ ${brackets:$i:1} == \"<\" ]]; then\n            (( open_count++ ))\n \
    \       elif [[ ${brackets:$i:1} == \">\" ]]; then\n            (( close_count++\
    \ ))\n        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    local top_of_stack\n\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\"\
    \ == \"<\" ]]; then\n            stack=\"$stack$bracket\"\n        elif [[ \"\
    $bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n     \
    \           return 1\n            fi\n            top_of_stack=\"${stack: -1}\"\
    \n            if [[ \"$top_of_stack\" == \"<\" ]]; then\n                stack=\"\
    ${stack:0:-1}\"\n            else\n                return 1\n            fi\n\
    \        else\n            return 1\n        fi\n    done\n\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[ \"${brackets:$i:1}\"\
    \ == \">\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n              \
    \  return 1\n            fi\n            stack=\"${stack:0:-1}\"\n        fi\n\
    \    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ \"$c\" == \"<\" ]]; then\n            stack+=($c)\n        elif\
    \ [[ \"$c\" == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                return 1\n            fi\n            stack=(\"${stack[@]:0:${#stack[@]}-1}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i=0\n    local len=${#brackets}\n    local bracket\n    local top\n\
    \n    while [ $i -lt $len ]; do\n        bracket=${brackets:$i:1}\n        if\
    \ [ \"$bracket\" == \"<\" ]; then\n            stack+=($bracket)\n        elif\
    \ [ \"$bracket\" == \">\" ]; then\n            top=${stack[-1]}\n            if\
    \ [ \"$top\" == \"<\" ]; then\n                unset stack[-1]\n            else\n\
    \                return 1\n            fi\n        fi\n        i=$((i+1))\n  \
    \  done\n\n    if [ ${#stack[@]} -eq 0 ]; then\n        return 0\n    else\n \
    \       return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \">\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local open_count=0\n\
    \  local close_count=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ \"\
    ${brackets:$i:1}\" == \"<\" ]]; then\n      (( open_count++ ))\n    elif [[ \"\
    ${brackets:$i:1}\" == \">\" ]]; then\n      (( close_count++ ))\n    fi\n  done\n\
    \  if [[ $open_count -eq $close_count ]]; then\n    return 0\n  else\n    return\
    \ 1\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n\
    \  local bracket\n  for (( i=0; i<${#brackets}; i++ )); do\n    bracket=\"${brackets:$i:1}\"\
    \n    if [[ \"$bracket\" == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif\
    \ [[ \"$bracket\" == \">\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n    \
    \    return 1\n      fi\n      stack=\"${stack%?}\"\n    fi\n  done\n  [[ -z \"\
    $stack\" ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    local top\n\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]];\
    \ then\n            stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \"\
    >\" ]]; then\n            top=\"${stack[-1]}\"\n            if [[ \"$top\" ==\
    \ \"<\" ]]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n \
    \           else\n                return 1\n            fi\n        else\n   \
    \         return 1\n        fi\n    done\n\n    if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    local top\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]];\
    \ then\n            stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]];\
    \ then\n            if [[ -z \"$stack\" ]]; then\n                return 1\n \
    \           fi\n            top=\"${stack: -1}\"\n            if [[ \"$top\" ==\
    \ \"<\" ]]; then\n                stack=\"${stack:0:-1}\"\n            else\n\
    \                return 1\n            fi\n        else\n            return 1\n\
    \        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        return 0\n  \
    \  else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local open_bracket=\"<\"\n    local close_bracket=\">\"\n    local open_count=0\n\
    \    local close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n       \
    \ local char=\"${brackets:$i:1}\"\n        if [[ \"$char\" == \"$open_bracket\"\
    \ ]]; then\n            (( open_count++ ))\n            stack=\"$stack$open_bracket\"\
    \n        elif [[ \"$char\" == \"$close_bracket\" ]]; then\n            (( close_count++\
    \ ))\n            if [[ \"${#stack}\" -eq 0 ]]; then\n                return 1\n\
    \            fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n \
    \   if [[ \"$open_count\" -eq \"$close_count\" ]]; then\n        return 0\n  \
    \  else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local char\n    for ((i=0; i<${#brackets}; i++)); do\n        char=\"\
    ${brackets:$i:1}\"\n        if [[ \"$char\" == \"<\" ]]; then\n            stack=\"\
    $stack<\"\n        elif [[ \"$char\" == \">\" ]]; then\n            if [[ -z \"\
    $stack\" ]]; then\n                return 1\n            fi\n            stack=\"\
    ${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n       \
    \ return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \">\" ]]; then\n    \
    \        if [[ \"${#stack[@]}\" == 0 ]]; then\n                return 1\n    \
    \        fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n \
    \   if [[ \"${#stack[@]}\" == 0 ]]; then\n        return 0\n    else\n       \
    \ return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=\"\
    ${brackets:$i:1}\"\n        if [[ \"$char\" == \"<\" ]]; then\n            stack=\"\
    $stack<\"\n        elif [[ \"$char\" == \">\" ]]; then\n            if [[ -z \"\
    $stack\" ]]; then\n                return 1\n            fi\n            stack=\"\
    ${stack:0:-1}\"\n        fi\n    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i=0\n    local len=${#brackets}\n    local c=\"\"\n    local top=\"\
    \"\n    local ret=0\n\n    while [ $i -lt $len ]; do\n        c=${brackets:$i:1}\n\
    \        if [ \"$c\" == \"<\" ]; then\n            stack=\"$stack$c\"\n      \
    \  elif [ \"$c\" == \">\" ]; then\n            if [ -z \"$stack\" ]; then\n  \
    \              ret=1\n                break\n            fi\n            top=${stack:\
    \ -1}\n            if [ \"$top\" == \"<\" ]; then\n                stack=${stack:0:-1}\n\
    \            else\n                ret=1\n                break\n            fi\n\
    \        else\n            ret=1\n            break\n        fi\n        i=$((i+1))\n\
    \    done\n\n    if [ -n \"$stack\" ]; then\n        ret=1\n    fi\n\n    return\
    \ $ret\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack\n\
    \    local c\n    for ((i=0; i<${#brackets}; i++)); do\n        c=${brackets:$i:1}\n\
    \        if [[ \"$c\" == \"<\" ]]; then\n            stack=\"$stack<\"\n     \
    \   elif [[ \"$c\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n\
    \                return 1\n            fi\n            stack=${stack%?}\n    \
    \    fi\n    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=''\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\
    \n        if [[ \"$char\" == \"<\" ]]; then\n            stack=\"$stack<\"\n \
    \       elif [[ \"$char\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]];\
    \ then\n                return 1\n            fi\n            stack=\"${stack:1}\"\
    \n        fi\n    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack$bracket\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n \
    \           if [[ \"$stack\" == \"\" ]]; then\n                return 1\n    \
    \        fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[\
    \ \"$stack\" == \"\" ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ \"$c\" == \"<\" ]]; then\n            stack+=(\"$c\")\n       \
    \ elif [[ \"$c\" == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                return 1\n            fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open=0\n\
    \    local close=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[\
    \ \"${brackets:$i:1}\" == \"<\" ]]; then\n            open=$((open+1))\n     \
    \   elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n            close=$((close+1))\n\
    \        fi\n        if [[ $close -gt $open ]]; then\n            return 1\n \
    \       fi\n    done\n    if [[ $open -eq $close ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \">\" ]]; then\n    \
    \        if [[ \"${#stack[@]}\" == 0 ]]; then\n                return 1\n    \
    \        fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n \
    \   if [[ \"${#stack[@]}\" == 0 ]]; then\n        return 0\n    else\n       \
    \ return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_brackets=0\n\
    \    local close_brackets=0\n    for ((i=0; i<${#brackets}; i++)); do\n      \
    \  local char=\"${brackets:$i:1}\"\n        if [[ \"$char\" == \"<\" ]]; then\n\
    \            open_brackets=$((open_brackets + 1))\n        elif [[ \"$char\" ==\
    \ \">\" ]]; then\n            close_brackets=$((close_brackets + 1))\n       \
    \ fi\n        if [[ $close_brackets -gt $open_brackets ]]; then\n            return\
    \ 1\n        fi\n    done\n    if [[ $open_brackets -eq $close_brackets ]]; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open=0\n\
    \    local close=0\n    local i=0\n    while [ $i -lt ${#brackets} ]; do\n   \
    \     if [ \"${brackets:$i:1}\" == \"<\" ]; then\n            open=$((open+1))\n\
    \        else\n            close=$((close+1))\n        fi\n        if [ $close\
    \ -gt $open ]; then\n            return 1\n        fi\n        i=$((i+1))\n  \
    \  done\n    if [ $open -eq $close ]; then\n        return 0\n    else\n     \
    \   return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i=0\n    while [ $i -lt ${#brackets} ]; do\n        local bracket=${brackets:$i:1}\n\
    \        if [ \"$bracket\" == \"<\" ]; then\n            stack+=($bracket)\n \
    \       elif [ \"$bracket\" == \">\" ]; then\n            if [ ${#stack[@]} -eq\
    \ 0 ]; then\n                return 1\n            fi\n            stack=(\"${stack[@]:0:${#stack[@]}-1}\"\
    )\n        fi\n        i=$((i+1))\n    done\n    if [ ${#stack[@]} -eq 0 ]; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open=0\n\
    \    local close=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[\
    \ \"${brackets:$i:1}\" == \"<\" ]]; then\n            (( open++ ))\n        elif\
    \ [[ \"${brackets:$i:1}\" == \">\" ]]; then\n            (( close++ ))\n     \
    \   fi\n        if (( close > open )); then\n            return 1\n        fi\n\
    \    done\n    if (( open != close )); then\n        return 1\n    fi\n    return\
    \ 0\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n            stack+=(\"<\")\n        elif [[ \"${brackets:$i:1}\"\
    \ == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n         \
    \       return 1\n            fi\n            unset stack[${#stack[@]}-1]\n  \
    \      fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ \"$stack\" == \"\" ]]; then\n                return 1\n           \
    \ fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ \"$stack\"\
    \ == \"\" ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for (( i=0; i<${#brackets}; i++ )); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket=\"\"\n    local top=\"\"\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\"\
    \ == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n            top=\"${stack: -1}\"\n            if [[ \"$top\"\
    \ == \"<\" ]]; then\n                stack=\"${stack:0:-1}\"\n            else\n\
    \                return 1\n            fi\n        fi\n    done\n    if [[ -z\
    \ \"$stack\" ]]; then\n        return 0\n    else\n        return 1\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ \"$c\" == \"<\" ]]; then\n            stack+=(\"$c\")\n       \
    \ elif [[ \"$c\" == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i=0\n    local len=${#brackets}\n    while [ $i -lt $len ]; do\n  \
    \      local c=${brackets:$i:1}\n        if [ \"$c\" == \"<\" ]; then\n      \
    \      stack+=($c)\n        elif [ \"$c\" == \">\" ]; then\n            if [ ${#stack[@]}\
    \ -eq 0 ]; then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n        i=$((i+1))\n    done\n    if [ ${#stack[@]} -eq 0 ]; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local stack_top\n    local bracket\n    for ((i=0; i<${#brackets}; i++));\
    \ do\n        bracket=${brackets:$i:1}\n        if [[ $bracket == \"<\" ]]; then\n\
    \            stack+=($bracket)\n        elif [[ $bracket == \">\" ]]; then\n \
    \           stack_top=${stack[-1]}\n            if [[ $stack_top == \"<\" ]];\
    \ then\n                unset stack[-1]\n                stack=(${stack[@]})\n\
    \            else\n                return 1\n            fi\n        fi\n    done\n\
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    [[ -z \"$stack\"\
    \ ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n\
    \  local i=0\n  local len=${#brackets}\n  while [ $i -lt $len ]; do\n    local\
    \ bracket=\"${brackets:$i:1}\"\n    if [ \"$bracket\" == \"<\" ]; then\n     \
    \ stack=\"$stack<\"\n    elif [ \"$bracket\" == \">\" ]; then\n      if [ \"$stack\"\
    \ == \"\" ]; then\n        return 1\n      fi\n      stack=\"${stack:0:-1}\"\n\
    \    fi\n    i=$((i+1))\n  done\n  if [ \"$stack\" == \"\" ]; then\n    return\
    \ 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n  \
    \  [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n\
    \        if [[ $char == \"<\" ]]; then\n            stack+=($char)\n        elif\
    \ [[ $char == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for (( i=0; i<${#brackets}; i++ )); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \">\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \">\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000973
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local c\n    for ((i=0; i<${#brackets}; i++)); do\n        c=${brackets:$i:1}\n\
    \        if [[ \"$c\" == \"<\" ]]; then\n            stack=\"$stack<\"\n     \
    \   elif [[ \"$c\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n\
    \                return 1\n            fi\n            stack=${stack:0:-1}\n \
    \       fi\n    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    local top\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]];\
    \ then\n            stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \"\
    >\" ]]; then\n            top=\"${stack[-1]}\"\n            if [[ \"$top\" ==\
    \ \"<\" ]]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n \
    \           else\n                return 1\n            fi\n        else\n   \
    \         return 1\n        fi\n    done\n    if [[ \"${#stack[@]}\" -eq 0 ]];\
    \ then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i=0\n    local c\n    while [ $i -lt ${#brackets} ]; do\n      \
    \  c=${brackets:$i:1}\n        if [ \"$c\" == \"<\" ]; then\n            stack=\"\
    $stack<\"\n        elif [ \"$c\" == \">\" ]; then\n            if [ -z \"$stack\"\
    \ ]; then\n                return 1\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n        i=$((i+1))\n    done\n    if [ -z \"$stack\" ]; then\n  \
    \      return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            stack=(\"${stack[@]:0:${#stack[@]}-1}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local ch=${brackets:$i:1}\n\
    \        if [[ $ch == \"<\" ]]; then\n            stack+=($ch)\n        elif [[\
    \ $ch == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n     \
    \           return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000974
