language: sh
name: HumanEval_79_decimal_to_binary
results:
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local i=0\n  local j=0\n  local k=0\n  local temp=0\n  local temp2=0\n  local\
    \ temp3=0\n  local temp4=0\n  local temp5=0\n  local temp6=0\n  local temp7=0\n\
    \  local temp8=0\n  local temp9=0\n  local temp10=0\n  local temp11=0\n  local\
    \ temp12=0\n  local temp13=0\n  local temp14=0\n  local temp15=0\n  local temp16=0\n\
    \  local temp17=0\n  local temp18=0\n  local temp19=0\n  local temp20=0\n  local\
    \ temp21=0\n  local temp22=0\n  local temp23=0\n  local temp24=0\n  local temp25=0\n\
    \  local temp26=0\n  local temp27=0\n  local temp28=0\n  local temp29=0\n  local\
    \ temp30=0\n  local temp31=0\n  local temp32=0\n  local temp33=0\n  local temp34=0\n\
    \  local temp35=0\n  local temp36=0\n  local temp37=0\n  local temp38=0\n  local\
    \ temp39=0\n  local temp40=0\n  local temp41=0\n  local temp42=0\n  local temp43=0\n\
    \  local temp44=0\n  local temp45=0\n  local temp46=0\n  local temp47=0\n  local\
    \ temp48=0\n  local temp49=0\n  local temp50=0\n  local temp51=0\n  local temp52=0\n\
    \  local temp53=0\n  local temp54=0\n  local temp55=0\n  local temp56=0\n  local\
    \ temp57=0\n  local temp58=0\n  local temp59=0\n  local temp60=0\n  local temp61=0\n\
    \  local temp62=0\n  local temp63=0\n  local temp64=0\n  local temp65=0\n  local\
    \ temp66=0\n  local temp67=0\n \n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local result=0\n  while [ $number -gt 0 ]; do\n    remainder=$((number % 2))\n\
    \    quotient=$((number / 2))\n    number=$quotient\n    binary=\"$remainder$binary\"\
    \n  done\n  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local result=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local\
    \ m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local\
    \ s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local\
    \ y=0\n  local z=0\n  local aa=0\n  local ab=0\n  local ac=0\n  local ad=0\n \
    \ local ae=0\n  local af=0\n  local ag=0\n  local ah=0\n  local ai=0\n  local\
    \ aj=0\n  local ak=0\n  local al=0\n  local am=0\n  local an=0\n  local ao=0\n\
    \  local ap=0\n  local aq=0\n  local ar=0\n  local as=0\n  local at=0\n  local\
    \ au=0\n  local av=0\n  local aw=0\n  local ax=0\n  local ay=0\n  local az=0\n\
    \  local ba=0\n  local bb=0\n  local bc=0\n  local bd=0\n  local be=0\n  local\
    \ bf=0\n  local bg=0\n  local bh=0\n  local bi=0\n  local bj=0\n  local bk=0\n\
    \  local bl=0\n  local bm=0\n  local bn=0\n  local bo=0\n  local bp=0\n  local\
    \ bq=0\n  local br=0\n  local bs=0\n  local bt=0\n  local bu=0\n  local bv=0\n\
    \  local bw=0\n  local bx=0\n  local by=0\n  local bz=0\n  local ca=0\n  local\
    \ cb=0\n  local cc=0\n  local cd=0\n  local ce=0\n  local cf=0\n \n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=''\n  local remainder=0\n  local quotient=0\n\
    \  local result=''\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local\
    \ m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local\
    \ s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local\
    \ y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n \
    \ local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local\
    \ jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n\
    \  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local\
    \ uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n\
    \  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n \
    \ local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n  local\
    \ kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n\
    \  local qqq=0\n  local rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n \
    \ local vvv=0\n  local www=0\n  local xxx=0\n  local yyy=0\n  local zzz=0\n  local\
    \ aaaa=0\n  local bbbb=0\n  local ccc\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  local remainder=0\n  while [ $number\
    \ -gt 0 ]; do\n    remainder=$((number % 2))\n    number=$((number / 2))\n   \
    \ binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local n=$1\n  local result=''\n  while [ $n -gt 0 ]; do\n    result=\"\
    $((n % 2))$result\"\n    n=$((n / 2))\n  done\n  echo \"db$result\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local result=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local\
    \ m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local\
    \ s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local\
    \ y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n \
    \ local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local\
    \ jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n\
    \  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local\
    \ uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n\
    \  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n \
    \ local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n  local\
    \ kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n\
    \  local qqq=0\n  local rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n \
    \ local vvv=0\n  local www=0\n  local xxx=0\n  local yyy=0\n  local zzz=0\n  local\
    \ aaaa=0\n  local bbbb=0\n  local cccc\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=''\n  while [ $decimal -gt 0 ]; do\n \
    \   binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    local remainder=0\n    local\
    \ quotient=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n   \
    \ local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local\
    \ r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n\
    \    local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local ab=0\n\
    \    local ac=0\n    local ad=0\n    local ae=0\n    local af=0\n    local ag=0\n\
    \    local ah=0\n    local ai=0\n    local aj=0\n    local ak=0\n    local al=0\n\
    \    local am=0\n    local an=0\n    local ao=0\n    local ap=0\n    local aq=0\n\
    \    local ar=0\n    local as=0\n    local at=0\n    local au=0\n    local av=0\n\
    \    local aw=0\n    local ax=0\n    local ay=0\n    local az=0\n    local ba=0\n\
    \    local bb=0\n    local bc=0\n    local bd=0\n    local be=0\n    local bf=0\n\
    \    local bg=0\n    local bh=0\n    local bi=0\n    local bj=0\n    local bk=0\n\
    \    local bl=0\n    local bm=0\n    local bn=0\n    local bo=0\n    local bp=0\n\
    \    local bq=0\n    local br=0\n    local bs=0\n    local bt=0\n    local bu=0\n\
    \    local bv=0\n    local bw=0\n    local bx=0\n    local by=0\n    local bz=0\n\
    \    local ca=0\n    local cb=0\n    local cc=0\n    local cd=0\n    local ce=0\n\
    \    local cf=0\n    local cg=0\n\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local num=$1\n    local binary=\"\"\n    while [ $num -gt 0 ]; do\n \
    \       binary=\"$((num % 2))$binary\"\n        num=$((num / 2))\n    done\n \
    \   echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local aa=0\n  local ab=0\n  local ac=0\n  local ad=0\n  local ae=0\n  local\
    \ af=0\n  local ag=0\n  local ah=0\n  local ai=0\n  local aj=0\n  local ak=0\n\
    \  local al=0\n  local am=0\n  local an=0\n  local ao=0\n  local ap=0\n  local\
    \ aq=0\n  local ar=0\n  local as=0\n  local at=0\n  local au=0\n  local av=0\n\
    \  local aw=0\n  local ax=0\n  local ay=0\n  local az=0\n  local ba=0\n  local\
    \ bb=0\n  local bc=0\n  local bd=0\n  local be=0\n  local bf=0\n  local bg=0\n\
    \  local bh=0\n  local bi=0\n  local bj=0\n  local bk=0\n  local bl=0\n  local\
    \ bm=0\n  local bn=0\n  local bo=0\n  local bp=0\n  local bq=0\n  local br=0\n\
    \  local bs=0\n  local bt=0\n  local bu=0\n  local bv=0\n  local bw=0\n  local\
    \ bx=0\n  local by=0\n  local bz=0\n  local ca=0\n  local cb=0\n  local cc=0\n\
    \  local cd=0\n  local ce=0\n  local cf=0\n  local cg=0\n\n}\n\ncandidate() {\n\
    \    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate\
    \ \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local num=$1\n    local bin=\"\"\n    local remainder=0\n    local quotient=0\n\
    \    local result=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local aa=0\n  \
    \  local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n\
    \    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n\
    \    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n\
    \    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n\
    \    local vv=0\n    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n\
    \    local aaa=0\n    local bbb=0\n    local ccc=0\n    local ddd=0\n    local\
    \ eee=0\n    local fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n\
    \    local jjj=0\n    local kkk=0\n    local lll=0\n    local mmm=0\n    local\
    \ nnn=0\n    local ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n\
    \    local sss=0\n    local ttt=0\n    local uuu=0\n    local vvv=0\n    local\
    \ www=0\n    local xxx=0\n    local yyy=0\n    local zzz=0\n    local aaaa=0\n\
    \    local bbbb=0\n    local cccc\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local dec=$1\n  local bin=\"\"\n  local rem=0\n  local quotient=0\n  local\
    \ i=0\n  local j=0\n  local k=0\n  local bin_array=()\n  local bin_array_len=0\n\
    \  local bin_array_len_mod=0\n  local bin_array_len_mod_div=0\n  local bin_array_len_mod_div_rem=0\n\
    \  local bin_array_len_mod_div_rem_quotient=0\n  local bin_array_len_mod_div_rem_quotient_rem=0\n\
    \  local bin_array_len_mod_div_rem_quotient_rem_quotient=0\n  local bin_array_len_mod_div_rem_quotient_rem_quotient_rem=0\n\
    \  local bin_array_len_mod_div_rem_quotient_rem_quotient_rem_quotient=0\n  local\
    \ bin_array_len_mod_div_rem_quotient_rem_quotient_rem_quotient_rem=0\n  local\
    \ bin_array_len_mod_div_rem_quotient_rem_quotient_rem_quotient_rem_quotient=0\n\
    \  local bin_array_len_mod_div_rem_quotient_rem_quotient_rem_quotient_rem_quotient_rem=0\n\
    \  local bin_array_len_mod_div_rem_quotient_rem_quotient_rem_quotient_rem_quotient_rem_quotient=0\n\
    \  local bin_array_len_mod_div_rem_quotient_rem_quotient_rem_quotient_rem_quotient_rem_quotient_rem=0\n\
    \  local bin_array_len_mod_div_rem_quotient_rem_quotient_rem_quotient_rem_quotient_rem_quotient_rem_quotient=0\n\
    \  local bin_array_len_mod_div_rem_quotient_rem_quotient_rem_quotient\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=''\n  while [ $number -gt 0 ]; do\n   \
    \ local remainder=$((number % 2))\n    number=$((number / 2))\n    binary=\"$remainder$binary\"\
    \n  done\n  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary_number=\"\"\n  local remainder=0\n  while\
    \ [ $number -gt 0 ]; do\n    remainder=$(( $number % 2 ))\n    number=$(( $number\
    \ / 2 ))\n    binary_number=\"$remainder$binary_number\"\n  done\n  echo \"db$binary_number\"\
    db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=''\n  local remainder=0\n  local quotient=0\n\
    \  local result=''\n  local count=0\n  local i=0\n  local j=0\n  local k=0\n \
    \ local temp=0\n  local temp2=0\n  local temp3=0\n  local temp4=0\n  local temp5=0\n\
    \  local temp6=0\n  local temp7=0\n  local temp8=0\n  local temp9=0\n  local temp10=0\n\
    \  local temp11=0\n  local temp12=0\n  local temp13=0\n  local temp14=0\n  local\
    \ temp15=0\n  local temp16=0\n  local temp17=0\n  local temp18=0\n  local temp19=0\n\
    \  local temp20=0\n  local temp21=0\n  local temp22=0\n  local temp23=0\n  local\
    \ temp24=0\n  local temp25=0\n  local temp26=0\n  local temp27=0\n  local temp28=0\n\
    \  local temp29=0\n  local temp30=0\n  local temp31=0\n  local temp32=0\n  local\
    \ temp33=0\n  local temp34=0\n  local temp35=0\n  local temp36=0\n  local temp37=0\n\
    \  local temp38=0\n  local temp39=0\n  local temp40=0\n  local temp41=0\n  local\
    \ temp42=0\n  local temp43=0\n  local temp44=0\n  local temp45=0\n  local temp46=0\n\
    \  local temp47=0\n  local temp48=0\n  local temp49=0\n  local temp50=0\n  local\
    \ temp51=0\n  local temp52=0\n  local temp53=0\n  local temp54=0\n  local temp55=0\n\
    \  local temp56=0\n  local temp57=0\n  local temp58=0\n  local temp59=0\n  local\
    \ temp60=0\n  local temp61=0\n  local temp62=0\n  local temp63=0\n  local temp64=0\n\
    \  local temp65=0\n  local\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder=0\n  while [ $decimal\
    \ -gt 0 ]; do\n    remainder=$((decimal % 2))\n    decimal=$((decimal / 2))\n\
    \    binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local num=$1\n  local binary=\"\"\n  local remainder=0\n  while [ $num\
    \ -gt 0 ]; do\n    remainder=$((num % 2))\n    num=$((num / 2))\n    binary=\"\
    $remainder$binary\"\n  done\n  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local num=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local result=0\n  while [ $num -gt 0 ]; do\n    remainder=$((num % 2))\n  \
    \  num=$((num / 2))\n    binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"\
    db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  local remainder\n  while [ $number\
    \ -gt 0 ]; do\n    remainder=$(( number % 2 ))\n    number=$(( number / 2 ))\n\
    \    binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   binary=\"$((number % 2))$binary\"\n    number=$((number / 2))\n  done\n  echo\
    \ \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local n=$1\n    local result=''\n    while [ $n -gt 0 ]; do\n       \
    \ result=$((n % 2))$result\n        n=$((n / 2))\n    done\n    echo \"db$result\"\
    db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   binary=\"$((number % 2))$binary\"\n    number=$((number / 2))\n  done\n  echo\
    \ \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local i=0\n  local j=0\n  local k=0\n  local temp=0\n  local temp2=0\n  local\
    \ temp3=0\n  local temp4=0\n  local temp5=0\n  local temp6=0\n  local temp7=0\n\
    \  local temp8=0\n  local temp9=0\n  local temp10=0\n  local temp11=0\n  local\
    \ temp12=0\n  local temp13=0\n  local temp14=0\n  local temp15=0\n  local temp16=0\n\
    \  local temp17=0\n  local temp18=0\n  local temp19=0\n  local temp20=0\n  local\
    \ temp21=0\n  local temp22=0\n  local temp23=0\n  local temp24=0\n  local temp25=0\n\
    \  local temp26=0\n  local temp27=0\n  local temp28=0\n  local temp29=0\n  local\
    \ temp30=0\n  local temp31=0\n  local temp32=0\n  local temp33=0\n  local temp34=0\n\
    \  local temp35=0\n  local temp36=0\n  local temp37=0\n  local temp38=0\n  local\
    \ temp39=0\n  local temp40=0\n  local temp41=0\n  local temp42=0\n  local temp43=0\n\
    \  local temp44=0\n  local temp45=0\n  local temp46=0\n  local temp47=0\n  local\
    \ temp48=0\n  local temp49=0\n  local temp50=0\n  local temp51=0\n  local temp52=0\n\
    \  local temp53=0\n  local temp54=0\n  local temp55=0\n  local temp56=0\n  local\
    \ temp57=0\n  local temp58=0\n  local temp59=0\n  local temp60=0\n  local temp61=0\n\
    \  local temp62=0\n  local temp63=0\n  local temp64=0\n  local temp65=0\n  local\
    \ temp66=0\n  local temp67=0\n \n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local input=$1\n  local output=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local binary_number=0\n  local binary_string=\"\"\n  local binary_array=()\n\
    \  local binary_array_length=0\n  local i=0\n  local j=0\n  local k=0\n  local\
    \ l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local\
    \ r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local\
    \ x=0\n  local y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local\
    \ dd=0\n  local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n\
    \  local jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local\
    \ oo=0\n  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n\
    \  local uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local\
    \ zz=0\n  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n\
    \  local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n \
    \ local kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local\
    \ ppp=0\n  local qqq=0\n  local rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n\
    \  local vvv=0\n  local www=0\n  local xxx=0\n  local yyy=0\n\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local num=$1\n    local binary=\"\"\n    while [ $num -gt 0 ]; do\n \
    \       binary=\"$((num % 2))$binary\"\n        num=$((num / 2))\n    done\n \
    \   echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  while [ $number -gt 0 ]; do\n    remainder=$((number % 2))\n    number=$((number\
    \ / 2))\n    binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"db\n}\n\
    \ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   local remainder=$((number % 2))\n    binary=\"$remainder$binary\"\n    number=$((number\
    \ / 2))\n  done\n  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary_number=\"\"\n  while [ $number -gt 0 ];\
    \ do\n    local remainder=$((number % 2))\n    binary_number=\"$remainder$binary_number\"\
    \n    number=$((number / 2))\n  done\n  echo \"db$binary_number\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local i=0\n  local j=0\n  local temp=0\n  local temp1=0\n  local temp2=0\n\
    \  local temp3=0\n  local temp4=0\n  local temp5=0\n  local temp6=0\n  local temp7=0\n\
    \  local temp8=0\n  local temp9=0\n  local temp10=0\n  local temp11=0\n  local\
    \ temp12=0\n  local temp13=0\n  local temp14=0\n  local temp15=0\n  local temp16=0\n\
    \  local temp17=0\n  local temp18=0\n  local temp19=0\n  local temp20=0\n  local\
    \ temp21=0\n  local temp22=0\n  local temp23=0\n  local temp24=0\n  local temp25=0\n\
    \  local temp26=0\n  local temp27=0\n  local temp28=0\n  local temp29=0\n  local\
    \ temp30=0\n  local temp31=0\n  local temp32=0\n  local temp33=0\n  local temp34=0\n\
    \  local temp35=0\n  local temp36=0\n  local temp37=0\n  local temp38=0\n  local\
    \ temp39=0\n  local temp40=0\n  local temp41=0\n  local temp42=0\n  local temp43=0\n\
    \  local temp44=0\n  local temp45=0\n  local temp46=0\n  local temp47=0\n  local\
    \ temp48=0\n  local temp49=0\n  local temp50=0\n  local temp51=0\n  local temp52=0\n\
    \  local temp53=0\n  local temp54=0\n  local temp55=0\n  local temp56=0\n  local\
    \ temp57=0\n  local temp58=0\n  local temp59=0\n  local temp60=0\n  local temp61=0\n\
    \  local temp62=0\n  local temp63=0\n  local temp64=0\n  local temp65=0\n  local\
    \ temp66=0\n  local temp67=0\n\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[\
    \ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\"\
    \ ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  local remainder=0\n  while [ $number\
    \ -gt 0 ]; do\n    remainder=$((number % 2))\n    number=$((number / 2))\n   \
    \ binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local num=$1\n    local result=\"\"\n    while [ $num -gt 0 ]; do\n \
    \       result=\"$((num % 2))$result\"\n        num=$((num / 2))\n    done\n \
    \   echo \"db$result\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   binary=\"$((number % 2))$binary\"\n    number=$((number / 2))\n  done\n  echo\
    \ \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  local remainder=0\n  while [ $number\
    \ -gt 0 ]; do\n    remainder=$(( $number % 2 ))\n    number=$(( $number / 2 ))\n\
    \    binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local result=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local binary=\"\"\n  local i=0\n  local j=0\n  local k=0\n  local length=0\n\
    \  local temp=0\n  local temp_result=\"\"\n  local temp_binary=\"\"\n  local temp_quotient=0\n\
    \  local temp_remainder=0\n  local temp_length=0\n  local temp_i=0\n  local temp_j=0\n\
    \  local temp_k=0\n  local temp_temp=0\n  local temp_temp_result=\"\"\n  local\
    \ temp_temp_binary=\"\"\n  local temp_temp_quotient=0\n  local temp_temp_remainder=0\n\
    \  local temp_temp_length=0\n  local temp_temp_i=0\n  local temp_temp_j=0\n  local\
    \ temp_temp_k=0\n  local temp_temp_temp=0\n  local temp_temp_temp_result=\"\"\n\
    \  local temp_temp_temp_binary=\"\"\n  local temp_temp_temp_quotient=0\n  local\
    \ temp_temp_temp_remainder=0\n  local temp_temp_temp_length=0\n  local temp_temp_temp_i=0\n\
    \  local temp_temp_temp_j=0\n  local temp_temp_temp_k=0\n  local temp_temp_temp_temp=0\n\
    \  local temp_temp_temp_temp_result=\"\"\n  local temp_temp_temp_temp_binary=\"\
    \"\n  local temp_temp_temp_temp_quotient=0\n  local temp_temp_temp_temp_remainder=0\n\
    \  local temp_temp_temp_temp_length=0\n  local temp_temp_temp_temp_i=0\n  local\
    \ temp_temp_temp_temp_j=0\n  local temp_temp_temp_temp_k=0\n  local temp_temp_temp_temp_temp=0\n\
    \  local temp_temp_temp_temp_temp_result=\"\"\n  local temp_temp_temp_temp_temp_binary=\"\
    \"\n  local temp_temp_temp_temp_temp_quotient=0\n\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db${binary}db\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local num=$1\n    local bin=\"\"\n    while [ $num -gt 0 ]; do\n    \
    \    bin=\"$((num % 2))$bin\"\n        num=$((num / 2))\n    done\n    echo \"\
    db$bin\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local result=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local\
    \ m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local\
    \ s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local\
    \ y=0\n  local z=0\n  local aa=0\n  local ab=0\n  local ac=0\n  local ad=0\n \
    \ local ae=0\n  local af=0\n  local ag=0\n  local ah=0\n  local ai=0\n  local\
    \ aj=0\n  local ak=0\n  local al=0\n  local am=0\n  local an=0\n  local ao=0\n\
    \  local ap=0\n  local aq=0\n  local ar=0\n  local as=0\n  local at=0\n  local\
    \ au=0\n  local av=0\n  local aw=0\n  local ax=0\n  local ay=0\n  local az=0\n\
    \  local ba=0\n  local bb=0\n  local bc=0\n  local bd=0\n  local be=0\n  local\
    \ bf=0\n  local bg=0\n  local bh=0\n  local bi=0\n  local bj=0\n  local bk=0\n\
    \  local bl=0\n  local bm=0\n  local bn=0\n  local bo=0\n  local bp=0\n  local\
    \ bq=0\n  local br=0\n  local bs=0\n  local bt=0\n  local bu=0\n  local bv=0\n\
    \  local bw=0\n  local bx=0\n  local by=0\n  local bz=0\n  local ca=0\n  local\
    \ cb=0\n  local cc=0\n  local cd=0\n  local ce=0\n  local cf=0\n \n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local num=$1\n  local result=\"\"\n  while [ $num -gt 0 ]; do\n    result=\"\
    $((num%2))$result\"\n    num=$((num/2))\n  done\n  echo \"db$result\"db\n}\n\n\
    candidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary_number=\"\"\n  local remainder=0\n  local\
    \ quotient=0\n  local binary_digit=0\n  local binary_number_length=0\n  local\
    \ binary_number_length_mod_4=0\n  local binary_number_length_mod_4_diff=0\n  local\
    \ binary_number_length_mod_4_diff_counter=0\n  local binary_number_length_mod_4_diff_counter_index=0\n\
    \  local binary_number_length_mod_4_diff_counter_index_counter=0\n  local binary_number_length_mod_4_diff_counter_index_counter_index=0\n\
    \  local binary_number_length_mod_4_diff_counter_index_counter_index_counter=0\n\
    \  local binary_number_length_mod_4_diff_counter_index_counter_index_counter_index=0\n\
    \  local binary_number_length_mod_4_diff_counter_index_counter_index_counter_index_counter=0\n\
    \  local binary_number_length_mod_4_diff_counter_index_counter_index_counter_index_counter_index=0\n\
    \  local binary_number_length_mod_4_diff_counter_index_counter_index_counter_index_counter_index_counter=0\n\
    \  local binary_number_length_mod_4_diff_counter_index_counter_index_counter_index_counter_index_counter_index=0\n\
    \  local binary_number_length_mod_4_diff_counter_index_counter_index_counter_index_counter_index_counter_index_counter=0\n\
    \  local binary_number_length_mod_4_diff_counter_index_counter_index_counter_index_counter_index_counter_index_counter_index=0\n\
    \  local binary_number_length_mod_4_diff_counter_index_counter_index_counter_index_counter_index_counter_index_counter_index_counter=0\n\
    \  local binary_number_length_mod_4_diff_counter_index_counter_index_counter_index_counter_index_counter_index_counter_index_counter_index=0\n\
    \  local binary\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"\
    32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local -i number=$1\n  local -i remainder\n  local -i quotient\n  local\
    \ -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local\
    \ -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local\
    \ -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local\
    \ -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n \
    \ local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i\
    \ gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n \
    \ local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i\
    \ pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n \
    \ local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i\
    \ yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n\
    \  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local\
    \ -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n\
    \  local -i mmm=0\n  local -i n\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local number=$1\n    local binary=\"\"\n    while [ $number -gt 0 ];\
    \ do\n        binary=\"$((number % 2))$binary\"\n        number=$((number / 2))\n\
    \    done\n    echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    local remainder=$((decimal % 2))\n    decimal=$((decimal / 2))\n    binary=\"\
    $remainder$binary\"\n  done\n  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local result=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local binary_number=0\n  local binary_string=\"\"\n  local binary_string_length=0\n\
    \  local binary_string_length_diff=0\n  local i=0\n\n  if [ $number -eq 0 ]; then\n\
    \    echo \"db0db\"\n    return\n  fi\n\n  while [ $number -gt 0 ]; do\n    remainder=$((\
    \ $number % 2 ))\n    quotient=$(( $number / 2 ))\n    number=$quotient\n    result=\"\
    $remainder$result\"\n  done\n\n  binary_string=\"db$result\"\n  binary_string_length=${#binary_string}\n\
    \  binary_string_length_diff=$(( 8 - $binary_string_length ))\n\n  for (( i=0;\
    \ i<$binary_string_length_diff; i++ )); do\n    binary_string=\"0$binary_string\"\
    \n  done\n\n  echo \"$binary_string\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local n=$1\n  local result=\"\"\n  while [ $n -gt 0 ]; do\n    result=\"\
    $((n%2))$result\"\n    n=$((n/2))\n  done\n  echo \"db$result\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  local remainder=0\n  while [ $number\
    \ -gt 0 ]; do\n    remainder=$((number % 2))\n    number=$((number / 2))\n   \
    \ binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local binary_string=\"\"\n\n  while [ $number -gt 0 ]; do\n    remainder=$((number\
    \ % 2))\n    quotient=$((number / 2))\n    binary=\"$remainder$binary\"\n    number=$quotient\n\
    \  done\n\n  binary_string=\"db$binary\"\n  binary_string=\"${binary_string}db\"\
    \n\n  echo $binary_string\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   local remainder=$((number % 2))\n    binary=\"$remainder$binary\"\n    number=$((number\
    \ / 2))\n  done\n  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local -i num=$1\n  local -i rem\n  local -i quotient\n  local -i i=1\n\
    \  local -i j\n  local -i binary=0\n  local -i length=0\n  local -i temp\n\n \
    \ while [ $num -gt 0 ]\n  do\n    rem=$((num%2))\n    quotient=$((num/2))\n  \
    \  num=$quotient\n    binary=$((binary+rem*i))\n    i=$((i*10))\n  done\n\n  temp=$binary\n\
    \  while [ $temp -gt 0 ]\n  do\n    length=$((length+1))\n    temp=$((temp/10))\n\
    \  done\n\n  for (( j=1; j<=8-length; j++ ))\n  do\n    binary=$((binary*10))\n\
    \  done\n\n  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local -i number=$1\n    local -i remainder\n    local -i quotient\n \
    \   local -i i\n    local -i j\n    local -i k\n    local -i binary_number\n \
    \   local -i binary_array\n    local -i binary_string\n    local -i binary_string_length\n\
    \    local -i binary_string_array\n    local -i binary_string_array_length\n \
    \   local -i binary_string_array_length_minus_one\n    local -i binary_string_array_length_minus_two\n\
    \    local -i binary_string_array_length_minus_three\n    local -i binary_string_array_length_minus_four\n\
    \    local -i binary_string_array_length_minus_five\n    local -i binary_string_array_length_minus_six\n\
    \    local -i binary_string_array_length_minus_seven\n    local -i binary_string_array_length_minus_eight\n\
    \    local -i binary_string_array_length_minus_nine\n    local -i binary_string_array_length_minus_ten\n\
    \    local -i binary_string_array_length_minus_eleven\n    local -i binary_string_array_length_minus_twelve\n\
    \    local -i binary_string_array_length_minus_thirteen\n    local -i binary_string_array_length_minus_fourteen\n\
    \    local -i binary_string_array_length_minus_fifteen\n    local -i binary_string_array_length_minus_sixteen\n\
    \    local -i binary_string_array_length_minus_seventeen\n    local -i binary_string_array_length_minus_eighteen\n\
    \    local -i binary_string_array_length_minus_nineteen\n    local -i binary_string_array_length_minus_twenty\n\
    \    local -i binary_string_array_length_minus_twenty_one\n    local -i binary_string_array_length_minus_twenty_two\n\
    \    local -i binary_string_array_length_minus_twenty_three\n    local -i binary_string_array_length_minus_twenty_four\n\
    \    local -i binary_string_array\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local number=$1\n    local binary=\"\"\n    while [ $number -gt 0 ];\
    \ do\n        binary=\"$((number % 2))$binary\"\n        number=$((number / 2))\n\
    \    done\n    echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=''\n  while [ $decimal -gt 0 ]; do\n \
    \   binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local -i decimal=$1\n  local -i remainder\n  local -i quotient\n  local\
    \ -i binary=0\n  local -i power=1\n  local -i i=0\n  local -i j=0\n  local -i\
    \ k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local\
    \ -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local\
    \ -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local\
    \ -i z=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n\
    \  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i\
    \ ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n \
    \ local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i\
    \ rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n \
    \ local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i\
    \ aaa=0\n  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n\
    \  local -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local\
    \ -i jjj=0\n  local -i kkk=0\n  local -i lll=\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local number=$1\n    local binary=\"\"\n    while [ $number -gt 0 ];\
    \ do\n        binary=\"$((number % 2))$binary\"\n        number=$((number / 2))\n\
    \    done\n    echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   binary=\"$((number % 2))$binary\"\n    number=$((number / 2))\n  done\n  echo\
    \ \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local -i decimal=$1\n  local -i remainder\n  local -i quotient\n  local\
    \ -i binary=0\n  local -i i=1\n  local -i j\n\n  while [ $decimal -gt 0 ]; do\n\
    \    remainder=$((decimal % 2))\n    decimal=$((decimal / 2))\n    binary=$((binary\
    \ + remainder * i))\n    i=$((i * 10))\n  done\n\n  echo \"db${binary}db\"\n}\n\
    \ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local i=0\n  while [ $number -gt 0 ]; do\n    remainder=$((number % 2))\n \
    \   number=$((number / 2))\n    binary=\"$remainder$binary\"\n  done\n  echo \"\
    db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=''\n  local remainder=0\n  local quotient=0\n\
    \  local result=''\n  local i=0\n\n  if [[ $decimal -eq 0 ]]; then\n    echo 'db0db'\n\
    \    return\n  fi\n\n  while [[ $decimal -ne 0 ]]; do\n    remainder=$((decimal\
    \ % 2))\n    quotient=$((decimal / 2))\n    decimal=$quotient\n    binary=\"$remainder$binary\"\
    \n  done\n\n  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local dec=$1\n    local bin=\"\"\n    local rem=0\n    local i=0\n  \
    \  local j=0\n    local k=0\n    local bin_arr=()\n    local bin_arr_len=0\n \
    \   local bin_str=\"\"\n\n    while [ $dec -gt 0 ]; do\n        rem=$((dec % 2))\n\
    \        bin_arr[$i]=$rem\n        dec=$((dec / 2))\n        i=$((i + 1))\n  \
    \  done\n\n    bin_arr_len=${#bin_arr[@]}\n    for (( j = 0; j < bin_arr_len;\
    \ j++ )); do\n        bin_str=\"${bin_arr[$j]}$bin_str\"\n    done\n\n    bin_str=\"\
    db$bin_str\"\n    bin_str=\"$bin_str\"db\n\n    echo $bin_str\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local number=$1\n    local binary=\"\"\n    while [ $number -gt 0 ];\
    \ do\n        local remainder=$(( number % 2 ))\n        binary=\"$remainder$binary\"\
    \n        number=$(( number / 2 ))\n    done\n    echo \"db$binary\"db\n}\n\n\
    candidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder\n  while [ $decimal\
    \ -gt 0 ]; do\n    remainder=$((decimal % 2))\n    decimal=$((decimal / 2))\n\
    \    binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary_number=\"\"\n  while [ $number -gt 0 ];\
    \ do\n    binary_number=\"$((number % 2))$binary_number\"\n    number=$((number\
    \ / 2))\n  done\n  echo \"db$binary_number\"db\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local result=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   result=\"$((number % 2))$result\"\n    number=$((number / 2))\n  done\n  echo\
    \ \"db$result\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  local remainder=0\n  while [ $number\
    \ -gt 0 ]; do\n    remainder=$(( $number % 2 ))\n    binary=\"$remainder$binary\"\
    \n    number=$(( $number / 2 ))\n  done\n  echo \"db$binary\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local -i decimal=$1\n  local -i remainder\n  local -i quotient\n  local\
    \ -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local\
    \ -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local\
    \ -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local\
    \ -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n \
    \ local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i\
    \ gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n \
    \ local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i\
    \ pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n \
    \ local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i\
    \ yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n\
    \  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local\
    \ -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n\
    \  local -i mmm=0\n  local -i n\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local result=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local binary=0\n  local i=0\n  local j=0\n  local k=0\n  local temp=0\n  local\
    \ temp_result=\"\"\n  local temp_binary=\"\"\n  local temp_binary_array=()\n \
    \ local temp_binary_array_length=0\n  local temp_binary_array_index=0\n  local\
    \ temp_binary_array_value=0\n  local temp_binary_array_value_length=0\n  local\
    \ temp_binary_array_value_index=0\n  local temp_binary_array_value_char=0\n  local\
    \ temp_binary_array_value_char_length=0\n  local temp_binary_array_value_char_index=0\n\
    \  local temp_binary_array_value_char_value=0\n  local temp_binary_array_value_char_value_length=0\n\
    \  local temp_binary_array_value_char_value_index=0\n  local temp_binary_array_value_char_value_char=0\n\
    \  local temp_binary_array_value_char_value_char_length=0\n  local temp_binary_array_value_char_value_char_index=0\n\
    \  local temp_binary_array_value_char_value_char_value=0\n  local temp_binary_array_value_char_value_char_value_length=0\n\
    \  local temp_binary_array_value_char_value_char_value_index=0\n  local temp_binary_array_value_char_value_char_value_char=0\n\
    \  local temp_binary_array_value_char_value_char_value_char_length=0\n  local\
    \ temp_binary_array_value_char_value_char_value_char_index=0\n  local temp_binary_array_value_char_value_char_value_char_value=0\n\
    \  local temp_binary_array_value_char_value_char_value_char_value_length=0\n \
    \ local temp_binary_array_value_char_value_char_value_char_value_index=0\n  local\
    \ temp\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local num=$1\n  local result=\"\"\n  while [ $num -gt 0 ]; do\n    result=\"\
    $(( $num % 2 ))$result\"\n    num=$(( $num / 2 ))\n  done\n  echo \"db$result\"\
    db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local num=$1\n  local bin=\"\"\n  while [ $num -gt 0 ]; do\n    bin=\"\
    $((num % 2))$bin\"\n    num=$((num / 2))\n  done\n  echo \"db$bin\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   binary=\"$((number % 2))$binary\"\n    number=$((number / 2))\n  done\n  echo\
    \ \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary_string=\"\"\n  local remainder=0\n  local\
    \ quotient=0\n  local binary_digit=0\n  local binary_string_length=0\n  local\
    \ i=0\n\n  if [ $number -eq 0 ]; then\n    binary_string=\"db0db\"\n  else\n \
    \   while [ $number -gt 0 ]; do\n      remainder=$(( $number % 2 ))\n      quotient=$((\
    \ $number / 2 ))\n      binary_string=\"$remainder$binary_string\"\n      number=$quotient\n\
    \    done\n    binary_string=\"db$binary_string\"\n    binary_string_length=${#binary_string}\n\
    \    binary_string=\"${binary_string}db\"\n  fi\n  echo $binary_string\n}\n\n\
    candidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  local remainder=0\n  while [ $number\
    \ -gt 0 ]; do\n    remainder=$(( $number % 2 ))\n    number=$(( $number / 2 ))\n\
    \    binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local number=$1\n    local binary=\"\"\n    while [ $number -gt 0 ];\
    \ do\n        local remainder=$((number % 2))\n        number=$((number / 2))\n\
    \        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"db\n}\n\
    \ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local num=$1\n  local bin=\"\"\n  local rem=0\n  while [ $num -gt 0 ];\
    \ do\n    rem=$((num % 2))\n    num=$((num / 2))\n    bin=\"$rem$bin\"\n  done\n\
    \  echo \"db$bin\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local number=$1\n    local binary=\"\"\n    local remainder=0\n    while\
    \ [ $number -gt 0 ]; do\n        remainder=$(( $number % 2 ))\n        number=$((\
    \ $number / 2 ))\n        binary=\"$remainder$binary\"\n    done\n    echo \"\
    db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"\
    32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=''\n    local remainder=0\n    local\
    \ quotient=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n   \
    \ local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local\
    \ r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n\
    \    local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local bb=0\n\
    \    local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n\
    \    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n\
    \    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n\
    \    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n\
    \    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n\
    \    local bbb=0\n    local ccc=0\n    local ddd=0\n    local eee=0\n    local\
    \ fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n\
    \    local kkk=0\n    local lll=0\n    local mmm=0\n    local nnn=0\n    local\
    \ ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n\
    \    local ttt=0\n    local uuu=0\n    local vvv=0\n    local www=0\n    local\
    \ xxx=0\n    local yyy=0\n    local zzz=0\n    local aaaa=0\n    local bbbb=0\n\
    \    local cccc=0\n    local\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[\
    \ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\"\
    \ ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  # Write your code here\n  # Use echo to print to stdout\n  #echo \"db$1db\"\
    \n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local -i decimal=$1\n  local -i remainder\n  local -i quotient\n  local\
    \ -i binary=0\n  local -i i=1\n  local -i j\n\n  while [ $decimal -gt 0 ]; do\n\
    \    remainder=$((decimal % 2))\n    quotient=$((decimal / 2))\n    decimal=$quotient\n\
    \    binary=$((binary + remainder * i))\n    i=$((i * 10))\n  done\n\n  echo \"\
    db${binary}db\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"\
    32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local result=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   local remainder=$((number % 2))\n    number=$((number / 2))\n    result=\"\
    $remainder$result\"\n  done\n  echo \"db$result\"db\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local -i dec=$1\n  local -i bin=0\n  local -i i=0\n  local -i j=0\n  local\
    \ -i remainder=0\n  local -i temp=0\n  local -i bin_array=()\n  local -i bin_array_length=0\n\
    \  local -i bin_array_index=0\n  local -i bin_array_index_2=0\n  local -i bin_array_index_3=0\n\
    \  local -i bin_array_index_4=0\n  local -i bin_array_index_5=0\n  local -i bin_array_index_6=0\n\
    \  local -i bin_array_index_7=0\n  local -i bin_array_index_8=0\n  local -i bin_array_index_9=0\n\
    \  local -i bin_array_index_10=0\n  local -i bin_array_index_11=0\n  local -i\
    \ bin_array_index_12=0\n  local -i bin_array_index_13=0\n  local -i bin_array_index_14=0\n\
    \  local -i bin_array_index_15=0\n  local -i bin_array_index_16=0\n  local -i\
    \ bin_array_index_17=0\n  local -i bin_array_index_18=0\n  local -i bin_array_index_19=0\n\
    \  local -i bin_array_index_20=0\n  local -i bin_array_index_21=0\n  local -i\
    \ bin_array_index_22=0\n  local -i bin_array_index_23=0\n  local -i bin_array_index_24=0\n\
    \  local -i bin_array_index_25=0\n  local -i bin_array_index_26=0\n  local -i\
    \ bin_array_index_27=0\n  local -i bin_array_index_28=0\n  local -i bin_array_index_29=0\n\
    \  local -i bin_array_index_30=0\n  local -i bin_array_index_31=0\n  local -i\
    \ bin_array_index\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   binary=\"$((number % 2))$binary\"\n    number=$((number / 2))\n  done\n  echo\
    \ \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local number=$1\n    local binary=\"\"\n    while [ $number -gt 0 ];\
    \ do\n        binary=\"$((number % 2))$binary\"\n        number=$((number / 2))\n\
    \    done\n    echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=''\n    local remainder=0\n    while\
    \ [ $decimal -gt 0 ]; do\n        remainder=$((decimal % 2))\n        decimal=$((decimal\
    \ / 2))\n        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"\
    db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    local remainder=0\n    while\
    \ [ $decimal -gt 0 ]; do\n        remainder=$((decimal % 2))\n        decimal=$((decimal\
    \ / 2))\n        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"\
    db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  local remainder\n  while [ $number\
    \ -gt 0 ]; do\n    remainder=$(( number % 2 ))\n    number=$(( number / 2 ))\n\
    \    binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=''\n  while [ $decimal -gt 0 ]; do\n \
    \   binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder\n  while [ $decimal\
    \ -gt 0 ]; do\n    remainder=$((decimal % 2))\n    decimal=$((decimal / 2))\n\
    \    binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   binary=\"$((number % 2))$binary\"\n    number=$((number / 2))\n  done\n  echo\
    \ \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    local remainder=$((decimal % 2))\n    decimal=$((decimal / 2))\n    binary=\"\
    $remainder$binary\"\n  done\n  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local -i decimal=$1\n  local -i remainder\n  local -i quotient\n  local\
    \ binary=\"\"\n\n  while (( decimal > 0 )); do\n    remainder=$(( decimal % 2\
    \ ))\n    decimal=$(( decimal / 2 ))\n    binary=\"$remainder$binary\"\n  done\n\
    \n  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local n=$1\n  local result=\"\"\n  while [ $n -gt 0 ]; do\n    local remainder=$((\
    \ n % 2 ))\n    n=$(( n / 2 ))\n    result=\"$remainder$result\"\n  done\n  echo\
    \ \"db$result\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   binary=\"$((number % 2))$binary\"\n    number=$((number / 2))\n  done\n  echo\
    \ \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary_number=\"\"\n  local remainder=0\n  local\
    \ quotient=0\n  local binary_digit=0\n  local i=0\n  local j=0\n  local k=0\n\
    \  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n\
    \  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n\
    \  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local ab=0\n  local ac=0\n\
    \  local ad=0\n  local ae=0\n  local af=0\n  local ag=0\n  local ah=0\n  local\
    \ ai=0\n  local aj=0\n  local ak=0\n  local al=0\n  local am=0\n  local an=0\n\
    \  local ao=0\n  local ap=0\n  local aq=0\n  local ar=0\n  local as=0\n  local\
    \ at=0\n  local au=0\n  local av=0\n  local aw=0\n  local ax=0\n  local ay=0\n\
    \  local az=0\n  local ba=0\n  local bb=0\n  local bc=0\n  local bd=0\n  local\
    \ be=0\n  local bf=0\n  local bg=0\n  local bh=0\n  local bi=0\n  local bj=0\n\
    \  local bk=0\n  local bl=0\n  local bm=0\n  local bn=0\n  local bo=0\n  local\
    \ bp=0\n  local bq=0\n  local br=0\n  local bs=0\n  local bt=0\n  local bu=0\n\
    \  local bv=0\n  local bw=0\n  local bx=0\n  local by=0\n  local bz=0\n  local\
    \ ca=0\n  local cb=0\n  local cc=0\n  local cd=0\n  local ce=0\n  local cf\n}\n\
    \ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local num=$1\n  local binary=\"\"\n  while [ $num -gt 0 ]; do\n    binary=\"\
    $((num % 2))$binary\"\n    num=$((num / 2))\n  done\n  echo \"db${binary}db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local result=0\n  while [ $decimal -gt 0 ]; do\n    remainder=$((decimal %\
    \ 2))\n    decimal=$((decimal / 2))\n    binary=\"$remainder$binary\"\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder=0\n  while [ $decimal\
    \ -gt 0 ]; do\n    remainder=$((decimal % 2))\n    decimal=$((decimal / 2))\n\
    \    binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local\
    \ ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n\
    \  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local\
    \ qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n\
    \  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local\
    \ bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n\
    \  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n \
    \ local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local\
    \ rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n\
    \  local xxx=0\n  local yyy=0\n  local zzz=0\n  local aaaa=0\n  local bbbb=0\n\
    \  local cccc=0\n  local d\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder\n  while [ $decimal\
    \ -gt 0 ]; do\n    remainder=$((decimal % 2))\n    decimal=$((decimal / 2))\n\
    \    binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  local remainder=0\n  while [ $number\
    \ -gt 0 ]; do\n    remainder=$((number % 2))\n    number=$((number / 2))\n   \
    \ binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local aa=0\n  local ab=0\n  local ac=0\n  local ad=0\n  local ae=0\n  local\
    \ af=0\n  local ag=0\n  local ah=0\n  local ai=0\n  local aj=0\n  local ak=0\n\
    \  local al=0\n  local am=0\n  local an=0\n  local ao=0\n  local ap=0\n  local\
    \ aq=0\n  local ar=0\n  local as=0\n  local at=0\n  local au=0\n  local av=0\n\
    \  local aw=0\n  local ax=0\n  local ay=0\n  local az=0\n  local ba=0\n  local\
    \ bb=0\n  local bc=0\n  local bd=0\n  local be=0\n  local bf=0\n  local bg=0\n\
    \  local bh=0\n  local bi=0\n  local bj=0\n  local bk=0\n  local bl=0\n  local\
    \ bm=0\n  local bn=0\n  local bo=0\n  local bp=0\n  local bq=0\n  local br=0\n\
    \  local bs=0\n  local bt=0\n  local bu=0\n  local bv=0\n  local bw=0\n  local\
    \ bx=0\n  local by=0\n  local bz=0\n  local ca=0\n  local cb=0\n  local cc=0\n\
    \  local cd=0\n  local ce=0\n  local cf=0\n  local cg=0\n\n}\n\ncandidate() {\n\
    \    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate\
    \ \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  local remainder\n  while [ $number\
    \ -gt 0 ]; do\n    remainder=$((number % 2))\n    number=$((number / 2))\n   \
    \ binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=''\n  while [ $number -gt 0 ]; do\n   \
    \ binary=\"$(($number % 2))$binary\"\n    number=$(($number / 2))\n  done\n  echo\
    \ \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary_number=\"\"\n  local remainder\n  while\
    \ [ $number -gt 0 ]; do\n    remainder=$((number % 2))\n    number=$((number /\
    \ 2))\n    binary_number=\"$remainder$binary_number\"\n  done\n  echo \"db$binary_number\"\
    db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   binary=\"$((number % 2))$binary\"\n    number=$((number / 2))\n  done\n  echo\
    \ \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=''\n  local remainder=''\n  while [ $decimal\
    \ -gt 0 ]; do\n    remainder=$((decimal % 2))\n    decimal=$((decimal / 2))\n\
    \    binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db${binary}db\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    local remainder=$((decimal % 2))\n    decimal=$((decimal / 2))\n    binary=\"\
    $remainder$binary\"\n  done\n  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   binary=\"$((number % 2))$binary\"\n    number=$((number / 2))\n  done\n  echo\
    \ \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder\n  local quotient\n\
    \  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local\
    \ ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n\
    \  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local\
    \ qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n\
    \  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local\
    \ bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n\
    \  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n \
    \ local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local\
    \ rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n\
    \  local xxx=0\n  local yyy=0\n  local zzz=0\n  local aaaa=0\n  local bbbb=0\n\
    \  local cccc=0\n  local dddd=0\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local result=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local\
    \ m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local\
    \ s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local\
    \ y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n \
    \ local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local\
    \ jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n\
    \  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local\
    \ uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n\
    \  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n \
    \ local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n  local\
    \ kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n\
    \  local qqq=0\n  local rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n \
    \ local vvv=0\n  local www=0\n  local xxx=0\n  local yyy=0\n  local zzz=0\n  local\
    \ aaaa=0\n  local bbbb=0\n  local cccc\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local number=$1\n    local binary=\"\"\n    local remainder\n    while\
    \ [ $number -gt 0 ]; do\n        remainder=$(( number % 2 ))\n        number=$((\
    \ number / 2 ))\n        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"\
    db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=''\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local -i dec=$1\n  local -i bin=0\n  local -i rem=0\n  local -i base=1\n\
    \  local -i i=0\n  local -i j=0\n  local -i n=0\n  local -i num=0\n  local -i\
    \ count=0\n  local -i temp=0\n  local -i temp1=0\n  local -i temp2=0\n  local\
    \ -i temp3=0\n  local -i temp4=0\n  local -i temp5=0\n  local -i temp6=0\n  local\
    \ -i temp7=0\n  local -i temp8=0\n  local -i temp9=0\n  local -i temp10=0\n  local\
    \ -i temp11=0\n  local -i temp12=0\n  local -i temp13=0\n  local -i temp14=0\n\
    \  local -i temp15=0\n  local -i temp16=0\n  local -i temp17=0\n  local -i temp18=0\n\
    \  local -i temp19=0\n  local -i temp20=0\n  local -i temp21=0\n  local -i temp22=0\n\
    \  local -i temp23=0\n  local -i temp24=0\n  local -i temp25=0\n  local -i temp26=0\n\
    \  local -i temp27=0\n  local -i temp28=0\n  local -i temp29=0\n  local -i temp30=0\n\
    \  local -i temp31=0\n  local -i temp32=0\n  local -i temp33=0\n  local -i temp34=0\n\
    \  local -i temp35=0\n  local -i temp36=0\n  local -i temp37=0\n  local -i temp38=0\n\
    \  local -i temp39=0\n  local -i temp40=0\n  local -i temp41=0\n  local -i temp42=0\n\
    \  local -i temp43=0\n  local -i temp44=0\n  local -i temp45=0\n  local -i temp46=0\n\
    \  local -i temp47=0\n  local -i temp48=0\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local i=0\n  local j=0\n  local k=0\n  local temp=0\n  local temp2=0\n  local\
    \ temp3=0\n  local temp4=0\n  local temp5=0\n  local temp6=0\n  local temp7=0\n\
    \  local temp8=0\n  local temp9=0\n  local temp10=0\n  local temp11=0\n  local\
    \ temp12=0\n  local temp13=0\n  local temp14=0\n  local temp15=0\n  local temp16=0\n\
    \  local temp17=0\n  local temp18=0\n  local temp19=0\n  local temp20=0\n  local\
    \ temp21=0\n  local temp22=0\n  local temp23=0\n  local temp24=0\n  local temp25=0\n\
    \  local temp26=0\n  local temp27=0\n  local temp28=0\n  local temp29=0\n  local\
    \ temp30=0\n  local temp31=0\n  local temp32=0\n  local temp33=0\n  local temp34=0\n\
    \  local temp35=0\n  local temp36=0\n  local temp37=0\n  local temp38=0\n  local\
    \ temp39=0\n  local temp40=0\n  local temp41=0\n  local temp42=0\n  local temp43=0\n\
    \  local temp44=0\n  local temp45=0\n  local temp46=0\n  local temp47=0\n  local\
    \ temp48=0\n  local temp49=0\n  local temp50=0\n  local temp51=0\n  local temp52=0\n\
    \  local temp53=0\n  local temp54=0\n  local temp55=0\n  local temp56=0\n  local\
    \ temp57=0\n  local temp58=0\n  local temp59=0\n  local temp60=0\n  local temp61=0\n\
    \  local temp62=0\n  local temp63=0\n  local temp64=0\n  local temp65=0\n  local\
    \ temp66=0\n  local temp67=0\n \n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  local remainder=0\n  local result=0\n\
    \  while [ $number -gt 0 ]; do\n    remainder=$(( $number % 2 ))\n    result=$((\
    \ $number / 2 ))\n    number=$result\n    binary=\"$remainder$binary\"\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local num=$1\n    local bin=\"\"\n    while [ $num -gt 0 ]; do\n    \
    \    bin=\"$((num % 2))$bin\"\n        num=$((num / 2))\n    done\n    echo \"\
    db$bin\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    local remainder=$((decimal % 2))\n    decimal=$((decimal / 2))\n    binary=\"\
    $remainder$binary\"\n  done\n  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder\n  while [ $decimal\
    \ -gt 0 ]; do\n    remainder=$((decimal % 2))\n    decimal=$((decimal / 2))\n\
    \    binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local number=\"$1\"\n    local binary=\"\"\n    local remainder=0\n \
    \   while [ $number -gt 0 ]; do\n        remainder=$((number % 2))\n        number=$((number\
    \ / 2))\n        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"\
    db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\n  while [ $number -gt 0 ]; do\n    binary=$((number\
    \ % 2))$binary\n    number=$((number / 2))\n  done\n  echo \"db$binary\"db\n}\n\
    \ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local dec=$1\n  local bin=\"\"\n  while [ $dec -gt 0 ]; do\n    bin=\"\
    $((dec%2))$bin\"\n    dec=$((dec/2))\n  done\n  echo \"db$bin\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local i=0\n  local j=0\n  local k=0\n  local temp=\"\"\n  local temp2=\"\"\n\
    \  local temp3=\"\"\n  local temp4=\"\"\n  local temp5=\"\"\n  local temp6=\"\"\
    \n  local temp7=\"\"\n  local temp8=\"\"\n  local temp9=\"\"\n  local temp10=\"\
    \"\n  local temp11=\"\"\n  local temp12=\"\"\n  local temp13=\"\"\n  local temp14=\"\
    \"\n  local temp15=\"\"\n  local temp16=\"\"\n  local temp17=\"\"\n  local temp18=\"\
    \"\n  local temp19=\"\"\n  local temp20=\"\"\n  local temp21=\"\"\n  local temp22=\"\
    \"\n  local temp23=\"\"\n  local temp24=\"\"\n  local temp25=\"\"\n  local temp26=\"\
    \"\n  local temp27=\"\"\n  local temp28=\"\"\n  local temp29=\"\"\n  local temp30=\"\
    \"\n  local temp31=\"\"\n  local temp32=\"\"\n  local temp33=\"\"\n  local temp34=\"\
    \"\n  local temp35=\"\"\n  local temp36=\"\"\n  local temp37=\"\"\n  local temp38=\"\
    \"\n  local temp39=\"\"\n  local temp40=\"\"\n  local temp41=\"\"\n  local temp42=\"\
    \"\n  local temp43=\"\"\n  local temp44=\"\"\n  local temp45=\"\"\n  local temp46=\"\
    \"\n  local temp47=\"\"\n  local temp48=\"\"\n  local temp49=\"\"\n  local temp50=\"\
    \"\n  local temp51=\"\"\n  local temp52=\"\"\n  local temp53=\"\"\n  local temp54=\"\
    \"\n  local temp55=\"\"\n  local temp56=\"\"\n  local temp57=\"\"\n  local temp58=\"\
    \"\n  local temp59=\"\"\n  local temp60=\"\"\n  local temp61=\"\"\n  local temp62=\"\
    \"\n  local temp63=\"\"\n  local temp64=\"\"\n  local temp65=\"\"\n  local temp66=\"\
    \"\n  local temp67=\"\"\n  local temp68=\"\"\n  local temp69=\"\"\n  local temp70=\"\
    \"\n  local temp71=\"\"\n  local temp72=\"\"\n  local temp73=\"\"\n  local temp74=\"\
    \"\n  local temp75=\"\"\n  local temp76=\"\"\n  local temp77=\"\"\n  local temp78=\"\
    \"\n  local\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local num=$1\n    local bin=\"\"\n    while [ $num -gt 0 ]; do\n    \
    \    bin=\"$((num % 2))$bin\"\n        num=$((num / 2))\n    done\n    echo \"\
    db$bin\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   binary=\"$((number % 2))$binary\"\n    number=$((number / 2))\n  done\n  echo\
    \ \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local num=$1\n    local result=\"\"\n    while [ $num -gt 0 ]; do\n \
    \       result=\"$((num % 2))$result\"\n        num=$((num / 2))\n    done\n \
    \   echo \"db$result\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local i=0\n  local j=0\n  local k=0\n  local binary_array=()\n  local binary_array_length=0\n\
    \  local binary_array_index=0\n  local binary_array_index_length=0\n  local binary_array_index_length_string=\"\
    \"\n  local binary_array_index_length_string_length=0\n  local binary_array_index_length_string_length_string=\"\
    \"\n  local binary_array_index_length_string_length_string_length=0\n  local binary_array_index_length_string_length_string_length_string=\"\
    \"\n  local binary_array_index_length_string_length_string_length_string_length=0\n\
    \  local binary_array_index_length_string_length_string_length_string_length_string=\"\
    \"\n  local binary_array_index_length_string_length_string_length_string_length_string_length=0\n\
    \  local binary_array_index_length_string_length_string_length_string_length_string_length_string=\"\
    \"\n  local binary_array_index_length_string_length_string_length_string_length_string_length_string_length=0\n\
    \  local binary_array_index_length_string_length_string_length_string_length_string_length_string_length_string=\"\
    \"\n  local binary_array_index_length_string_length_string_length_string_length_string_length_string_length_string_length=0\n\
    \  local binary_array_index_length_string_length_string_length_string_length_string_length_string_length_string_length_string=\"\
    \"\n  local binary_array_index_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length=0\n\
    \  local binary_array_index_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string=\"\
    \"\n  local binary_array_index_length_string_length_string_length\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary_number=\"\"\n  local remainder=0\n  local\
    \ quotient=0\n  local db=\"db\"\n  while [ $number -gt 0 ]; do\n    remainder=$((\
    \ $number % 2 ))\n    quotient=$(( $number / 2 ))\n    number=$quotient\n    binary_number=\"\
    $remainder$binary_number\"\n  done\n  echo \"$db$binary_number$db\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local num=$1\n  local result=''\n  while [ $num -gt 0 ]; do\n    result=\"\
    $((num % 2))$result\"\n    num=$((num / 2))\n  done\n  echo \"db$result\"db\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local num=$1\n  local bin=\"\"\n  while [ $num -gt 0 ]; do\n    bin=\"\
    $((num % 2))$bin\"\n    num=$((num / 2))\n  done\n  echo \"db$bin\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder=0\n  while [ $decimal\
    \ -gt 0 ]; do\n    remainder=$((decimal % 2))\n    decimal=$((decimal / 2))\n\
    \    binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder\n  while [ $decimal\
    \ -gt 0 ]; do\n    remainder=$((decimal % 2))\n    decimal=$((decimal / 2))\n\
    \    binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local num=$1\n  local binary=\"\"\n  while [ $num -gt 0 ]; do\n    binary=\"\
    $((num % 2))$binary\"\n    num=$((num / 2))\n  done\n  echo \"db$binary\"db\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local dec=$1\n  local bin=\"\"\n  local rem=0\n  local i=0\n  while [ $dec\
    \ -gt 0 ]; do\n    rem=$((dec % 2))\n    dec=$((dec / 2))\n    bin=\"$rem$bin\"\
    \n  done\n  echo \"db$bin\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[\
    \ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\"\
    \ ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder=0\n  while [ $decimal\
    \ -gt 0 ]; do\n    remainder=$((decimal % 2))\n    binary=\"$remainder$binary\"\
    \n    decimal=$((decimal / 2))\n  done\n  echo \"db$binary\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        local remainder=$((decimal % 2))\n        decimal=$((decimal / 2))\n\
    \        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"db\n}\n\
    \ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local result=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   result=\"$((number % 2))$result\"\n    number=$((number / 2))\n  done\n  echo\
    \ \"db$result\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local n=$1\n  local result=''\n  while (( n > 0 )); do\n    result=\"$((\
    \ n % 2 ))$result\"\n    n=$(( n / 2 ))\n  done\n  echo \"db$result\"db\n}\n\n\
    candidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder=0\n  while [ $decimal\
    \ -gt 0 ]; do\n    remainder=$((decimal % 2))\n    decimal=$((decimal / 2))\n\
    \    binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"db\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    local remainder\n    while\
    \ [ $decimal -gt 0 ]; do\n        remainder=$((decimal % 2))\n        decimal=$((decimal\
    \ / 2))\n        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"\
    db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary_number=\"\"\n  local remainder=0\n  local\
    \ quotient=0\n  local result=0\n  local i=0\n  local j=0\n  local k=0\n  local\
    \ binary_array=()\n  local binary_string=\"\"\n  local binary_string_length=0\n\
    \  local binary_string_length_mod_4=0\n  local binary_string_length_mod_4_div_4=0\n\
    \  local binary_string_length_mod_4_div_4_mod_4=0\n  local binary_string_length_mod_4_div_4_mod_4_div_4=0\n\
    \  local binary_string_length_mod_4_div_4_mod_4_div_4_mod_4=0\n  local binary_string_length_mod_4_div_4_mod_4_div_4_mod_4_div_4=0\n\
    \  local binary_string_length_mod_4_div_4_mod_4_div_4_mod_4_div_4_mod_4=0\n  local\
    \ binary_string_length_mod_4_div_4_mod_4_div_4_mod_4_div_4_mod_4_div_4=0\n  local\
    \ binary_string_length_mod_4_div_4_mod_4_div_4_mod_4_div_4_mod_4_div_4_mod_4=0\n\
    \  local binary_string_length_mod_4_div_4_mod_4_div_4_mod_4_div_4_mod_4_div_4_mod_4_div_4=0\n\
    \  local binary_string_length_mod_4_div_4_mod_4_div_4_mod_4_div_4_mod_4_div_4_mod_4_div_4_mod_4=0\n\
    \  local binary_string_length_mod_4_div_4_mod_4_div_4_mod_4_div_4_mod_4_div_4_mod_4_div_4_mod_4_div_4=0\n\
    \  local binary_\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"\
    32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local\
    \ ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n\
    \  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local\
    \ qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n\
    \  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local\
    \ bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n\
    \  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n \
    \ local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local\
    \ rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n\
    \  local xxx=0\n  local yyy=0\n  local zzz=0\n  local aaaa=0\n  local bbbb=0\n\
    \  local cccc=0\n  local d\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   binary=\"$((number % 2))$binary\"\n    number=$((number / 2))\n  done\n  echo\
    \ \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local num=$1\n  local bin=\"\"\n  local bin_rev=\"\"\n  local bin_len=0\n\
    \  local bin_len_mod=0\n  local bin_len_mod_div=0\n  local bin_len_mod_div_mul=0\n\
    \  local bin_len_mod_div_mul_sub=0\n  local bin_len_mod_div_mul_sub_add=0\n  local\
    \ bin_len_mod_div_mul_sub_add_sub=0\n  local bin_len_mod_div_mul_sub_add_sub_add=0\n\
    \  local bin_len_mod_div_mul_sub_add_sub_add_sub=0\n  local bin_len_mod_div_mul_sub_add_sub_add_sub_add=0\n\
    \  local bin_len_mod_div_mul_sub_add_sub_add_sub_add_sub=0\n  local bin_len_mod_div_mul_sub_add_sub_add_sub_add_sub_add=0\n\
    \  local bin_len_mod_div_mul_sub_add_sub_add_sub_add_sub_add_sub=0\n  local bin_len_mod_div_mul_sub_add_sub_add_sub_add_sub_add_sub_add=0\n\
    \  local bin_len_mod_div_mul_sub_add_sub_add_sub_add_sub_add_sub_add_sub=0\n \
    \ local bin_len_mod_div_mul_sub_add_sub_add_sub_add_sub_add_sub_add_sub_add=0\n\
    \  local bin_len_mod_div_mul_sub_add_sub_add_sub_add_sub_add_sub_add_sub_add_sub=0\n\
    \  local bin_len_mod_div_mul_sub_add_sub_add_sub_add_sub_add_sub_add_sub_add_sub_add=0\n\
    \  local bin_len_mod_div_mul_sub_add_sub_add_sub_add_sub_add\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   binary=\"$((number % 2))$binary\"\n    number=$((number / 2))\n  done\n  echo\
    \ \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary_number=\"\"\n  while (( number > 0 ));\
    \ do\n    binary_number=\"$(( number % 2 ))$binary_number\"\n    number=$(( number\
    \ / 2 ))\n  done\n  echo \"db$binary_number\"db\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local result=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local\
    \ m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local\
    \ s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local\
    \ y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n \
    \ local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local\
    \ jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n\
    \  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local\
    \ uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n\
    \  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n \
    \ local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n  local\
    \ kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n\
    \  local qqq=0\n  local rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n \
    \ local vvv=0\n  local www=0\n  local xxx=0\n  local yyy=0\n  local zzz=0\n  local\
    \ aaaa=0\n  local bbbb=0\n  local cccc\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local result=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local\
    \ m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local\
    \ s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local\
    \ y=0\n  local z=0\n  local aa=0\n  local ab=0\n  local ac=0\n  local ad=0\n \
    \ local ae=0\n  local af=0\n  local ag=0\n  local ah=0\n  local ai=0\n  local\
    \ aj=0\n  local ak=0\n  local al=0\n  local am=0\n  local an=0\n  local ao=0\n\
    \  local ap=0\n  local aq=0\n  local ar=0\n  local as=0\n  local at=0\n  local\
    \ au=0\n  local av=0\n  local aw=0\n  local ax=0\n  local ay=0\n  local az=0\n\
    \  local ba=0\n  local bb=0\n  local bc=0\n  local bd=0\n  local be=0\n  local\
    \ bf=0\n  local bg=0\n  local bh=0\n  local bi=0\n  local bj=0\n  local bk=0\n\
    \  local bl=0\n  local bm=0\n  local bn=0\n  local bo=0\n  local bp=0\n  local\
    \ bq=0\n  local br=0\n  local bs=0\n  local bt=0\n  local bu=0\n  local bv=0\n\
    \  local bw=0\n  local bx=0\n  local by=0\n  local bz=0\n  local ca=0\n  local\
    \ cb=0\n  local cc=0\n  local cd=0\n  local ce=0\n  local cf=0\n \n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local -i number=$1\n  local -i remainder\n  local -i quotient\n  local\
    \ -i i=0\n  local binary=''\n  while [ $number -gt 0 ]; do\n    remainder=$((\
    \ number % 2 ))\n    number=$(( number / 2 ))\n    binary[$i]=$remainder\n   \
    \ ((i++))\n  done\n  echo \"db${binary[@]}db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   binary=\"$((number % 2))$binary\"\n    number=$((number / 2))\n  done\n  echo\
    \ \"db${binary}db\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local result=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local\
    \ m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local\
    \ s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local\
    \ y=0\n  local z=0\n  local aa=0\n  local ab=0\n  local ac=0\n  local ad=0\n \
    \ local ae=0\n  local af=0\n  local ag=0\n  local ah=0\n  local ai=0\n  local\
    \ aj=0\n  local ak=0\n  local al=0\n  local am=0\n  local an=0\n  local ao=0\n\
    \  local ap=0\n  local aq=0\n  local ar=0\n  local as=0\n  local at=0\n  local\
    \ au=0\n  local av=0\n  local aw=0\n  local ax=0\n  local ay=0\n  local az=0\n\
    \  local ba=0\n  local bb=0\n  local bc=0\n  local bd=0\n  local be=0\n  local\
    \ bf=0\n  local bg=0\n  local bh=0\n  local bi=0\n  local bj=0\n  local bk=0\n\
    \  local bl=0\n  local bm=0\n  local bn=0\n  local bo=0\n  local bp=0\n  local\
    \ bq=0\n  local br=0\n  local bs=0\n  local bt=0\n  local bu=0\n  local bv=0\n\
    \  local bw=0\n  local bx=0\n  local by=0\n  local bz=0\n  local ca=0\n  local\
    \ cb=0\n  local cc=0\n  local cd=0\n  local ce=0\n  local cf=0\n \n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local number=$1\n    local binary=\"\"\n    local remainder=0\n    while\
    \ [ $number -gt 0 ]; do\n        remainder=$((number % 2))\n        number=$((number\
    \ / 2))\n        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"\
    db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local decimal=$1\n    local binary=\"\"\n    while [ $decimal -gt 0 ];\
    \ do\n        binary=\"$((decimal % 2))$binary\"\n        decimal=$((decimal /\
    \ 2))\n    done\n    echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   binary=\"$((number % 2))$binary\"\n    number=$((number / 2))\n  done\n  echo\
    \ \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   binary=\"$(( $number % 2 ))$binary\"\n    number=$(( $number / 2 ))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   binary=\"$((number % 2))$binary\"\n    number=$((number / 2))\n  done\n  echo\
    \ \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  echo \"ob$(echo \"obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local num=$1\n  local result=\"\"\n  while [ $num -gt 0 ]; do\n    result=\"\
    $((num % 2))$result\"\n    num=$((num / 2))\n  done\n  echo \"db$result\"db\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    local remainder=$((decimal % 2))\n    binary=\"$remainder$binary\"\n    decimal=$((decimal\
    \ / 2))\n  done\n  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local result=\"\"\n  while [ $number -gt 0 ]; do\n \
    \   result=\"$((number % 2))$result\"\n    number=$((number / 2))\n  done\n  echo\
    \ \"db$result\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  local remainder=0\n  local result=0\n\
    \  while [ $number -gt 0 ]; do\n    remainder=$((number % 2))\n    number=$((number\
    \ / 2))\n    binary=\"$remainder$binary\"\n  done\n  echo \"db$binary\"db\n}\n\
    \ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local -i num=$1\n  local -i rem\n  local -i div\n  local -i i=0\n  local\
    \ -i j\n  local -i k\n  local -i l\n  local -i m\n  local -i n\n  local -i o\n\
    \  local -i p\n  local -i q\n  local -i r\n  local -i s\n  local -i t\n  local\
    \ -i u\n  local -i v\n  local -i w\n  local -i x\n  local -i y\n  local -i z\n\
    \  local -i aa\n  local -i bb\n  local -i cc\n  local -i dd\n  local -i ee\n \
    \ local -i ff\n  local -i gg\n  local -i hh\n  local -i ii\n  local -i jj\n  local\
    \ -i kk\n  local -i ll\n  local -i mm\n  local -i nn\n  local -i oo\n  local -i\
    \ pp\n  local -i qq\n  local -i rr\n  local -i ss\n  local -i tt\n  local -i uu\n\
    \  local -i vv\n  local -i ww\n  local -i xx\n  local -i yy\n  local -i zz\n \
    \ local -i aaa\n  local -i bbb\n  local -i ccc\n  local -i ddd\n  local -i eee\n\
    \  local -i fff\n  local -i ggg\n  local -i hhh\n  local -i iii\n  local -i jjj\n\
    \  local -i kkk\n  local -i lll\n  local -i mmm\n  local -i nnn\n  local -i ooo\n\
    \  local -i ppp\n  local -i qqq\n  local -i rrr\n  local -i sss\n  local -i ttt\n\
    \  local -i uuu\n  local -i vvv\n  local -i www\n  local -i xxx\n  local -i yyy\n\
    \  local -i zzz\n  local -i aaaa\n  local -i bbbb\n  local -i cccc\n  local -i\
    \ d\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local num=$1\n    local result=\"\"\n    while [ $num -gt 0 ]; do\n \
    \       result=\"$((num % 2))$result\"\n        num=$((num / 2))\n    done\n \
    \   echo \"db$result\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  echo \"ob$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while (( decimal > 0 )); do\n\
    \    binary=\"$(( decimal % 2 ))$binary\"\n    decimal=$(( decimal / 2 ))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local result=0\n  local i=0\n  local j=0\n  local temp=0\n  local temp_binary=\"\
    \"\n  local temp_decimal=0\n  local temp_remainder=0\n  local temp_quotient=0\n\
    \  local temp_result=0\n  local temp_i=0\n  local temp_j=0\n  local temp_temp=0\n\
    \  local temp_temp_binary=\"\"\n  local temp_temp_decimal=0\n  local temp_temp_remainder=0\n\
    \  local temp_temp_quotient=0\n  local temp_temp_result=0\n  local temp_temp_i=0\n\
    \  local temp_temp_j=0\n  local temp_temp_temp=0\n  local temp_temp_temp_binary=\"\
    \"\n  local temp_temp_temp_decimal=0\n  local temp_temp_temp_remainder=0\n  local\
    \ temp_temp_temp_quotient=0\n  local temp_temp_temp_result=0\n  local temp_temp_temp_i=0\n\
    \  local temp_temp_temp_j=0\n  local temp_temp_temp_temp=0\n  local temp_temp_temp_temp_binary=\"\
    \"\n  local temp_temp_temp_temp_decimal=0\n  local temp_temp_temp_temp_remainder=0\n\
    \  local temp_temp_temp_temp_quotient=0\n  local temp_temp_temp_temp_result=0\n\
    \  local temp_temp_temp_temp_i=0\n  local temp_temp_temp_temp_j=0\n  local temp_temp_temp_temp_temp=0\n\
    \  local temp_temp_temp_temp_temp_binary=\"\"\n  local temp_temp_temp_temp_temp_decimal=0\n\
    \  local temp_temp_temp_temp_temp_remainder=0\n  local temp_temp_temp_temp_temp_quotient=0\n\
    \  local temp_temp_temp_temp_temp_result=0\n  local temp_temp_temp_temp_temp\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local number=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local result=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local\
    \ m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local\
    \ s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local\
    \ y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n \
    \ local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local\
    \ jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n\
    \  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local\
    \ uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n\
    \  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n \
    \ local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n  local\
    \ kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n\
    \  local qqq=0\n  local rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n \
    \ local vvv=0\n  local www=0\n  local xxx=0\n  local yyy=0\n  local zzz=0\n  local\
    \ aaaa=0\n  local bbbb=0\n  local cccc\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  while [ $decimal -gt 0 ]; do\n\
    \    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local number=$1\n    local binary=\"\"\n    local remainder=0\n    while\
    \ [ $number -gt 0 ]; do\n        remainder=$((number % 2))\n        number=$((number\
    \ / 2))\n        binary=\"$remainder$binary\"\n    done\n    echo \"db$binary\"\
    db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=\"\"\n  local remainder=0\n  local quotient=0\n\
    \  local result=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local\
    \ m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local\
    \ s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local\
    \ y=0\n  local z=0\n  local aa=0\n  local ab=0\n  local ac=0\n  local ad=0\n \
    \ local ae=0\n  local af=0\n  local ag=0\n  local ah=0\n  local ai=0\n  local\
    \ aj=0\n  local ak=0\n  local al=0\n  local am=0\n  local an=0\n  local ao=0\n\
    \  local ap=0\n  local aq=0\n  local ar=0\n  local as=0\n  local at=0\n  local\
    \ au=0\n  local av=0\n  local aw=0\n  local ax=0\n  local ay=0\n  local az=0\n\
    \  local ba=0\n  local bb=0\n  local bc=0\n  local bd=0\n  local be=0\n  local\
    \ bf=0\n  local bg=0\n  local bh=0\n  local bi=0\n  local bj=0\n  local bk=0\n\
    \  local bl=0\n  local bm=0\n  local bn=0\n  local bo=0\n  local bp=0\n  local\
    \ bq=0\n  local br=0\n  local bs=0\n  local bt=0\n  local bu=0\n  local bv=0\n\
    \  local bw=0\n  local bx=0\n  local by=0\n  local bz=0\n  local ca=0\n  local\
    \ cb=0\n  local cc=0\n  local cd=0\n  local ce=0\n  local cf=0\n \n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n    local n=$1\n    local result=\"\"\n    while [ $n -gt 0 ]; do\n     \
    \   result=\"$((n % 2))$result\"\n        n=$((n / 2))\n    done\n    echo \"\
    db${result}db\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"\
    32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local decimal=$1\n  local binary=''\n  while [ $decimal -gt 0 ]; do\n \
    \   binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal / 2))\n  done\n\
    \  echo \"db$binary\"db\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999782
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n#\n# $1 is an integer\ndecimal_to_binary()\
    \ {\n  local num=$1\n  local result=''\n  local remainder=''\n  local quotient=''\n\
    \  local i=0\n  local j=0\n  local k=0\n  local temp=''\n  local temp2=''\n  local\
    \ temp3=''\n  local temp4=''\n  local temp5=''\n  local temp6=''\n  local temp7=''\n\
    \  local temp8=''\n  local temp9=''\n  local temp10=''\n  local temp11=''\n  local\
    \ temp12=''\n  local temp13=''\n  local temp14=''\n  local temp15=''\n  local\
    \ temp16=''\n  local temp17=''\n  local temp18=''\n  local temp19=''\n  local\
    \ temp20=''\n  local temp21=''\n  local temp22=''\n  local temp23=''\n  local\
    \ temp24=''\n  local temp25=''\n  local temp26=''\n  local temp27=''\n  local\
    \ temp28=''\n  local temp29=''\n  local temp30=''\n  local temp31=''\n  local\
    \ temp32=''\n  local temp33=''\n  local temp34=''\n  local temp35=''\n  local\
    \ temp36=''\n  local temp37=''\n  local temp38=''\n  local temp39=''\n  local\
    \ temp40=''\n  local temp41=''\n  local temp42=''\n  local temp43=''\n  local\
    \ temp44=''\n  local temp45=''\n  local temp46=''\n  local temp47=''\n  local\
    \ temp48=''\n  local temp49=''\n  local temp50=''\n  local temp51=''\n  local\
    \ temp52=''\n  local temp53=''\n  local temp54=''\n  local temp55=''\n  local\
    \ temp56=''\n  local temp57=''\n  local temp58=''\n  local temp59=''\n  local\
    \ temp60=''\n  local temp61=''\n  local temp62=''\n  local temp63=''\n  local\
    \ temp64=''\n  local temp65=''\n  local temp66=''\n  local temp67=''\n\n}\n\n\
    candidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999783
