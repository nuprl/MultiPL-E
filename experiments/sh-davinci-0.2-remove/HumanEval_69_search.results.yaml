language: sh
name: HumanEval_69_search
results:
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -n arr=$1\n    local max=0\n    local max_freq=0\n    local freq=0\n \
    \   for i in \"${arr[@]}\"; do\n        freq=0\n        for j in \"${arr[@]}\"\
    ; do\n            if [[ $i -eq $j ]]; then\n                freq=$((freq+1))\n\
    \            fi\n        done\n        if [[ $freq -ge $i ]] && [[ $freq -gt $max_freq\
    \ ]]; then\n            max=$i\n            max_freq=$freq\n        fi\n    done\n\
    \    if [[ $max_freq -eq 0 ]]; then\n        echo -1\n    else\n        echo $max\n\
    \    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfyqtzz2a.sh: line 10: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003186
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=(0)\n    local max=${arr[0]}\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local len=${#arr[@]}\n    local freq_len=0\n\
    \    local result=-1\n\n    # find max value\n    for ((i=0; i<len; i++)); do\n\
    \        if [[ ${arr[i]} -gt $max ]]; then\n            max=${arr[i]}\n      \
    \  fi\n    done\n\n    # create frequency array\n    for ((i=0; i<len; i++));\
    \ do\n        for ((j=0; j<len; j++)); do\n            if [[ ${arr[i]} -eq ${arr[j]}\
    \ ]]; then\n                ((freq[i]++))\n            fi\n        done\n    done\n\
    \n    # find the greatest integer that is greater than zero, and has a frequency\
    \ greater than or equal to the value of the integer itself\n    for ((i=0; i<len;\
    \ i++)); do\n        if [[ ${arr[i]} -gt 0 ]]; then\n            if [[ ${freq[i]}\
    \ -ge ${arr[i]} ]]; then\n                if [[ ${arr[i]} -gt $result ]]; then\n\
    \                    result=${arr[i]}\n                fi\n            fi\n  \
    \      fi\n    done\n\n    echo $result\n}\n\ncandidate() {\n    search \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n  \
    \  [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"\
    -1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq\n    local max=0\n    local i\n   \
    \ for i in \"${arr[@]}\"; do\n        ((freq[i]++))\n        ((max < i)) && max=$i\n\
    \    done\n    for ((i=max; i>0; i--)); do\n        ((freq[i] >= i)) && echo $i\
    \ && return\n    done\n    echo -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpal5o9h_5.sh: line 15: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' |\
    \ sort | uniq -c | sort -nr | awk '{print $1}'))\n    local -a uniq=($(echo \"\
    ${arr[@]}\" | tr ' ' '\\n' | sort | uniq))\n    local -a res=()\n    for ((i=0;\
    \ i<${#uniq[@]}; i++)); do\n        if [[ ${uniq[$i]} -le ${freq[$i]} ]]; then\n\
    \            res+=(${uniq[$i]})\n        fi\n    done\n    if [[ ${#res[@]} -eq\
    \ 0 ]]; then\n        echo -1\n    else\n        echo ${res[@]} | tr ' ' '\\n'\
    \ | sort -nr | head -n1\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n  local\
    \ -a arr\n  local -i i\n  local -i max=0\n  local -i max_count=0\n  local -i count=0\n\
    \  local -i res=-1\n  arr=($1)\n  for i in \"${arr[@]}\"; do\n    if [[ $i -gt\
    \ $max ]]; then\n      max=$i\n    fi\n  done\n  for ((i=1; i<=max; i++)); do\n\
    \    count=0\n    for j in \"${arr[@]}\"; do\n      if [[ $j -eq $i ]]; then\n\
    \        count=$((count+1))\n      fi\n    done\n    if [[ $count -ge $i ]]; then\n\
    \      if [[ $count -gt $max_count ]]; then\n        max_count=$count\n      \
    \  res=$i\n      fi\n    fi\n  done\n  echo $res\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=$1\n    local max=0\n    local freq=0\n    local i=0\n    local j=0\n\
    \    local num=0\n    local nums=()\n    local freqs=()\n    local result=-1\n\
    \    local len=0\n    local tmp=0\n    local tmp2=0\n    for i in $list; do\n\
    \        nums[$i]=$i\n        freqs[$i]=0\n    done\n    for i in $list; do\n\
    \        freqs[$i]=$((freqs[$i]+1))\n    done\n    for i in ${nums[@]}; do\n \
    \       if [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n \
    \   for i in $(seq 0 $max); do\n        if [ ${freqs[$i]} -ge $i ]; then\n   \
    \         result=$i\n        fi\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: '/tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /tmp/tmpqx3au53g.sh: line 35: [: -ge: unary operator expected

    /t'
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=$1\n    local max=0\n    local max_freq=0\n    local freq=0\n   \
    \ local num=0\n    for num in $list; do\n        if [[ $num -gt $max ]]; then\n\
    \            max=$num\n        fi\n    done\n    for num in $list; do\n      \
    \  if [[ $num -eq $max ]]; then\n            max_freq=$((max_freq + 1))\n    \
    \    fi\n    done\n    for num in $list; do\n        freq=0\n        for i in\
    \ $list; do\n            if [[ $i -eq $num ]]; then\n                freq=$((freq\
    \ + 1))\n            fi\n        done\n        if [[ $freq -ge $num ]] && [[ $num\
    \ -gt $max_freq ]]; then\n            max_freq=$num\n        fi\n    done\n  \
    \  if [[ $max_freq -eq 0 ]]; then\n        echo -1\n    else\n        echo $max_freq\n\
    \    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -n arr=$1\n    local -i max=0\n    local -i count=0\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n   \
    \ done\n    for i in \"${arr[@]}\"; do\n        if [[ $i -eq $max ]]; then\n \
    \           ((count++))\n        fi\n    done\n    if [[ $count -ge $max ]]; then\n\
    \        echo $max\n    else\n        echo -1\n    fi\n}\n\ncandidate() {\n  \
    \  search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyb3co7an.sh: line 10: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003186
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=()\n    local -a res=()\n    local max=0\n\
    \    local i=0\n    for i in ${arr[@]}; do\n        if [ $i -gt $max ]; then\n\
    \            max=$i\n        fi\n        freq[$i]=$((freq[$i]+1))\n    done\n\
    \    for i in $(seq 0 $max); do\n        if [ ${freq[$i]} -ge $i ]; then\n   \
    \         res+=($i)\n        fi\n    done\n    if [ ${#res[@]} -eq 0 ]; then\n\
    \        echo -1\n    else\n        echo ${res[@]} | tr ' ' '\\n' | sort -nr |\
    \ head -n1\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /tmp/tmp9k5bfxx0.sh: line 22: [: -ge: unary operator expected

    /t'
  stdout: ''
  timestamp: 1660003187
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=(0)\n    local max=0\n    local i=0\n \
    \   local j=0\n    local res=-1\n    for i in ${arr[@]}; do\n        if [[ $i\
    \ -gt $max ]]; then\n            max=$i\n        fi\n    done\n    for ((i=0;\
    \ i<=max; i++)); do\n        freq[$i]=0\n    done\n    for i in ${arr[@]}; do\n\
    \        ((freq[$i]++))\n    done\n    for ((i=1; i<=max; i++)); do\n        if\
    \ [[ ${freq[$i]} -ge $i ]]; then\n            res=$i\n        fi\n    done\n \
    \   echo $res\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(printf \"%s\\n\" \"${arr[@]}\" | sort\
    \ | uniq -c | awk '{print $1}'))\n    local -a uniq=($(printf \"%s\\n\" \"${arr[@]}\"\
    \ | sort | uniq))\n    local -a res=()\n    for ((i=0; i<${#uniq[@]}; i++)); do\n\
    \        if [[ ${freq[$i]} -ge ${uniq[$i]} ]]; then\n            res+=(${uniq[$i]})\n\
    \        fi\n    done\n    if [[ ${#res[@]} -eq 0 ]]; then\n        echo -1\n\
    \    else\n        echo $(printf \"%s\\n\" \"${res[@]}\" | sort -nr | head -n\
    \ 1)\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4\
    \ 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003188
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' |\
    \ sort | uniq -c | awk '{print $1}'))\n    local -a nums=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq))\n    local -a res=()\n    for ((i=0; i<${#nums[@]};\
    \ i++)); do\n        if [ ${nums[$i]} -le ${freq[$i]} ]; then\n            res+=(${nums[$i]})\n\
    \        fi\n    done\n    if [ ${#res[@]} -eq 0 ]; then\n        echo -1\n  \
    \  else\n        echo ${res[@]} | tr ' ' '\\n' | sort -nr | head -n1\n    fi\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003188
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -n arr=$1\n    local -i max=0\n    local -i count=0\n    for i in ${arr[@]};\
    \ do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n   \
    \ done\n    for i in ${arr[@]}; do\n        if [[ $i -eq $max ]]; then\n     \
    \       ((count++))\n        fi\n    done\n    if [[ $count -ge $max ]]; then\n\
    \        echo $max\n    else\n        echo -1\n    fi\n}\n\ncandidate() {\n  \
    \  search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpy4ug326y.sh: line 10: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=()\n    local -a res=()\n    local max=0\n\
    \    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n \
    \   local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n  \
    \  local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n   \
    \ local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local bb=0\n  \
    \  local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n\
    \    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n\
    \    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n\
    \    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n\
    \    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n\
    \    local bbb=0\n    local ccc=0\n    local ddd=0\n    local eee=0\n    local\
    \ fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n\
    \    local kkk=0\n    local lll=0\n    local mmm=0\n    local nnn=0\n    local\
    \ ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n\
    \    local ttt=0\n    local uuu=0\n    local vvv=0\n    local www=0\n    local\
    \ xxx=0\n    local yyy=0\n    local zzz=0\n    local aaaa=0\n    local bbbb=0\n\
    \    local\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4\
    \ 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: -1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=$1\n    local max=0\n    local max_freq=0\n    local freq=0\n   \
    \ for i in $list; do\n        freq=$(echo \"$list\" | grep -o \"$i\" | wc -l)\n\
    \        if [ $freq -ge $i ]; then\n            if [ $freq -gt $max_freq ]; then\n\
    \                max=$i\n                max_freq=$freq\n            elif [ $freq\
    \ -eq $max_freq ]; then\n                if [ $i -gt $max ]; then\n          \
    \          max=$i\n                    max_freq=$freq\n                fi\n  \
    \          fi\n        fi\n    done\n    if [ $max -eq 0 ]; then\n        echo\
    \ -1\n    else\n        echo $max\n    fi\n}\n\ncandidate() {\n    search \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n  \
    \  [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"\
    -1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003191
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=($1)\n    local max=0\n    local freq=0\n    local result=-1\n  \
    \  for i in ${list[@]}; do\n        if [ $i -gt $max ]; then\n            max=$i\n\
    \        fi\n    done\n    for i in ${list[@]}; do\n        if [ $i -eq $max ];\
    \ then\n            freq=$((freq+1))\n        fi\n    done\n    if [ $freq -ge\
    \ $max ]; then\n        result=$max\n    fi\n    echo $result\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a array=(\"$@\")\n    local -a freq=()\n    local -i max=0\n    local\
    \ -i i=0\n    local -i j=0\n    local -i n=${#array[@]}\n    local -i k=0\n  \
    \  local -i max_freq=0\n    local -i max_freq_index=0\n    local -i max_freq_value=0\n\
    \    local -i max_freq_value_index=0\n    local -i max_freq_value_freq=0\n   \
    \ local -i max_freq_value_freq_index=0\n    local -i max_freq_value_freq_value=0\n\
    \    local -i max_freq_value_freq_value_index=0\n    local -i max_freq_value_freq_value_freq=0\n\
    \    local -i max_freq_value_freq_value_freq_index=0\n    local -i max_freq_value_freq_value_freq_value=0\n\
    \    local -i max_freq_value_freq_value_freq_value_index=0\n    local -i max_freq_value_freq_value_freq_value_freq=0\n\
    \    local -i max_freq_value_freq_value_freq_value_freq_index=0\n    local -i\
    \ max_freq_value_freq_value_freq_value_freq_value=0\n    local -i max_freq_value_freq_value_freq_value_freq_value_index=0\n\
    \    local -i max_freq_value_freq_value_freq_value_freq_value_freq=0\n    local\
    \ -i max_freq_value_freq_value_freq_value_freq_value_freq_index=0\n    local -i\
    \ max_freq_value_freq_value_freq_value_freq_value_freq_value=0\n    local -i max_freq_value_freq_value_freq_value_\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq\n    local -i max=0\n    local -i i\n\
    \    local -i j\n    local -i n=${#arr[@]}\n    local -i k=0\n    local -i res=-1\n\
    \    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -gt max ]]; then\n   \
    \         max=${arr[i]}\n        fi\n    done\n    for ((i=0; i<=max; i++)); do\n\
    \        freq[i]=0\n    done\n    for ((i=0; i<n; i++)); do\n        ((freq[arr[i]]++))\n\
    \    done\n    for ((i=1; i<=max; i++)); do\n        if [[ ${freq[i]} -ge i ]];\
    \ then\n            res=$i\n        fi\n    done\n    echo $res\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1yy5lug3.sh: line 19: [[: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    /tmp/tmp1yy5lug3.sh: line 27: 5 5 5 5 1: syntax error in expression (error token
    is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -A freq\n    local i\n    local max_freq=0\n\
    \    local max_freq_val=0\n    local max_val=0\n    for i in \"${arr[@]}\"; do\n\
    \        ((freq[$i]++))\n        ((max_val < i)) && max_val=$i\n    done\n   \
    \ for i in \"${!freq[@]}\"; do\n        if ((i <= freq[$i] && freq[$i] >= max_freq));\
    \ then\n            max_freq=${freq[$i]}\n            max_freq_val=$i\n      \
    \  fi\n    done\n    ((max_freq_val > 0)) && echo $max_freq_val || echo -1\n}\n\
    \ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqrjzgqkj.sh: line 18: ((: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    /tmp/tmpqrjzgqkj.sh: line 21: ((: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=\"$1\"\n    local max=0\n    local freq=0\n    local val=0\n    local\
    \ result=-1\n    for val in $list; do\n        if [ $val -gt $max ]; then\n  \
    \          max=$val\n        fi\n    done\n    for val in $list; do\n        if\
    \ [ $val -eq $max ]; then\n            freq=$((freq+1))\n        fi\n    done\n\
    \    if [ $freq -ge $max ]; then\n        result=$max\n    fi\n    echo $result\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=(0)\n    local max=0\n    local i=0\n \
    \   local j=0\n    local result=-1\n    for i in \"${arr[@]}\"; do\n        if\
    \ [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n    for ((i=0;\
    \ i<=max; i++)); do\n        freq[$i]=0\n    done\n    for i in \"${arr[@]}\"\
    ; do\n        freq[$i]=$((freq[$i]+1))\n    done\n    for ((i=max; i>=0; i--));\
    \ do\n        if [ ${freq[$i]} -ge $i ]; then\n            result=$i\n       \
    \     break\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -A freq\n    local max=0\n    for i in \"${arr[@]}\"\
    ; do\n        (( freq[$i]++ ))\n        (( max < i )) && max=$i\n    done\n  \
    \  for (( i=max; i>0; i-- )); do\n        (( freq[$i] >= i )) && echo $i && return\n\
    \    done\n    echo -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn4qlw9u5.sh: line 15: ((: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003186
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a array=($1)\n    local -a freq=($(echo \"${array[@]}\" | tr ' ' '\\\
    n' | sort | uniq -c | awk '{print $1}'))\n    local -a uniq=($(echo \"${array[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq))\n    local -a result=()\n    local i=0\n    for\
    \ ((i=0; i<${#uniq[@]}; i++)); do\n        if [[ ${freq[$i]} -ge ${uniq[$i]} ]];\
    \ then\n            result+=(${uniq[$i]})\n        fi\n    done\n    if [[ ${#result[@]}\
    \ -eq 0 ]]; then\n        echo -1\n    else\n        echo ${result[@]} | tr '\
    \ ' '\\n' | sort -nr | head -n1\n    fi\n}\n\ncandidate() {\n    search \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n  \
    \  [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"\
    -1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a array=($1)\n    local -a counts=(0 0 0 0 0 0 0 0 0 0)\n    local -a\
    \ results=(0 0 0 0 0 0 0 0 0 0)\n    local -i max=0\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i result=0\n    local -i temp=0\n    for\
    \ i in \"${array[@]}\"; do\n        (( counts[i]++ ))\n    done\n    for j in\
    \ \"${counts[@]}\"; do\n        if (( j > 0 )); then\n            (( results[j]++\
    \ ))\n        fi\n    done\n    for k in \"${results[@]}\"; do\n        if ((\
    \ k > 0 )); then\n            (( temp = k + results[k] ))\n            if (( temp\
    \ > max )); then\n                max=$temp\n                result=$k\n     \
    \       fi\n        fi\n    done\n    if (( result > 0 )); then\n        echo\
    \ $result\n    else\n        echo -1\n    fi\n}\n\ncandidate() {\n    search \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") =\
    \ \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a list=($1)\n    local -a freq=($(echo \"${list[@]}\" | tr ' ' '\\n'\
    \ | sort | uniq -c | awk '{print $1}'))\n    local -a val=($(echo \"${list[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq))\n    local max=0\n    for i in ${!val[@]}; do\n\
    \        if [[ ${freq[$i]} -ge ${val[$i]} ]] && [[ ${val[$i]} -gt $max ]]; then\n\
    \            max=${val[$i]}\n        fi\n    done\n    if [[ $max -eq 0 ]]; then\n\
    \        echo -1\n    else\n        echo $max\n    fi\n}\n\ncandidate() {\n  \
    \  search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003188
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' |\
    \ sort | uniq -c | awk '{print $1}'))\n    local -a val=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq -c | awk '{print $2}'))\n    local -a res=()\n\
    \    local i=0\n    for i in ${!freq[@]}; do\n        if [[ ${freq[$i]} -ge ${val[$i]}\
    \ ]]; then\n            res+=(${val[$i]})\n        fi\n    done\n    if [[ ${#res[@]}\
    \ -eq 0 ]]; then\n        echo -1\n    else\n        echo ${res[@]} | tr ' ' '\\\
    n' | sort -nr | head -n1\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local -i max=0\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i len=${#arr[@]}\n    local\
    \ -i freq_len=0\n    local -i found=0\n    local -i result=-1\n\n    for ((i=0;\
    \ i<len; i++)); do\n        if [[ ${arr[$i]} -gt max ]]; then\n            max=${arr[$i]}\n\
    \        fi\n    done\n\n    for ((i=0; i<=max; i++)); do\n        freq[$i]=0\n\
    \    done\n\n    for ((i=0; i<len; i++)); do\n        ((freq[${arr[$i]}]++))\n\
    \    done\n\n    freq_len=${#freq[@]}\n\n    for ((i=1; i<freq_len; i++)); do\n\
    \        if [[ ${freq[$i]} -eq $i ]]; then\n            result=$i\n        fi\n\
    \    done\n\n    echo $result\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmnjt8721.sh: line 22: [[: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    /tmp/tmpmnjt8721.sh: line 32: 5 5 5 5 1: syntax error in expression (error token
    is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -A freq\n    local max=0\n    for i in \"${arr[@]}\"\
    ; do\n        (( freq[$i]++ ))\n        (( max < i )) && max=$i\n    done\n  \
    \  for i in $(seq 1 $max); do\n        (( freq[$i] >= i )) && echo $i && return\n\
    \    done\n    echo -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxal2qm_4.sh: line 15: ((: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003186
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=(0)\n    local max=0\n    local i=0\n \
    \   local j=0\n    local res=-1\n    for i in \"${arr[@]}\"; do\n        if [[\
    \ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    for ((i=0;\
    \ i<=max; i++)); do\n        freq[$i]=0\n    done\n    for i in \"${arr[@]}\"\
    ; do\n        ((freq[$i]++))\n    done\n    for ((i=1; i<=max; i++)); do\n   \
    \     if [[ ${freq[$i]} -ge $i ]]; then\n            res=$i\n        fi\n    done\n\
    \    echo $res\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq\n    local max=0\n    local i\n   \
    \ for ((i=0; i<${#arr[@]}; i++)); do\n        if [[ ${arr[$i]} -gt $max ]]; then\n\
    \            max=${arr[$i]}\n        fi\n        ((freq[${arr[$i]}]++))\n    done\n\
    \    for ((i=1; i<=max; i++)); do\n        if [[ ${freq[$i]} -ge $i ]]; then\n\
    \            echo $i\n            return\n        fi\n    done\n    echo -1\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb0w1e5ns.sh: line 15: [[: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    /tmp/tmpb0w1e5ns.sh: line 18: 5 5 5 5 1: syntax error in expression (error token
    is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=\"$1\"\n    local max=0\n    local freq=0\n    local result=-1\n\
    \    for i in $list; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n\
    \        fi\n    done\n    for i in $list; do\n        if [[ $i -eq $max ]]; then\n\
    \            freq=$((freq+1))\n        fi\n    done\n    if [[ $freq -ge $max\
    \ ]]; then\n        result=$max\n    fi\n    echo $result\n}\n\ncandidate() {\n\
    \    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=\"$1\"\n    local max=0\n    local max_freq=0\n    local freq=0\n\
    \    local num=0\n    for i in $list; do\n        if [ $i -gt $max ]; then\n \
    \           max=$i\n        fi\n    done\n    for i in $(seq 1 $max); do\n   \
    \     freq=0\n        for j in $list; do\n            if [ $i -eq $j ]; then\n\
    \                freq=$((freq+1))\n            fi\n        done\n        if [\
    \ $freq -ge $i ]; then\n            num=$i\n        fi\n    done\n    if [ $num\
    \ -eq 0 ]; then\n        echo -1\n    else\n        echo $num\n    fi\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(echo ${arr[@]} | tr ' ' '\\n' | sort\
    \ | uniq -c | tr -s ' ' | cut -d ' ' -f 2,3))\n    local -a freq_arr=($(echo ${freq[@]}\
    \ | tr ' ' '\\n' | cut -d ' ' -f 1))\n    local -a val_arr=($(echo ${freq[@]}\
    \ | tr ' ' '\\n' | cut -d ' ' -f 2))\n    local -a res_arr=($(echo ${freq_arr[@]}\
    \ | tr ' ' '\\n' | sort -nr))\n    local res=${res_arr[0]}\n    local i=0\n  \
    \  for val in ${val_arr[@]}; do\n        if [ $val -eq $res ]; then\n        \
    \    echo ${val_arr[$i]}\n            return\n        fi\n        ((i++))\n  \
    \  done\n    echo -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -n arr=$1\n    local -i max=0\n    local -i curr=0\n    local -i count=0\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local\
    \ -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n\
    \    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local\
    \ -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\
    \    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n\
    \    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n\
    \    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n\
    \    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n\
    \    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n\
    \    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n\
    \    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n\
    \    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n\
    \    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n\
    \    local -i kkk=0\n    local -i lll=0\n    local\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzfkqm0_k.sh: line 10: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local max=0\n    for i in \"\
    ${arr[@]}\"; do\n        ((freq[i]++))\n        ((max < i)) && max=$i\n    done\n\
    \    for ((i=1; i<=max; i++)); do\n        ((freq[i] >= i)) && echo $i && return\n\
    \    done\n    echo -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpczimhjsw.sh: line 14: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003186
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=(0)\n    local max=0\n    local result=-1\n\
    \    for i in ${arr[@]}; do\n        ((freq[i]++))\n        ((i > max)) && max=$i\n\
    \    done\n    for ((i=1; i<=max; i++)); do\n        ((freq[i] >= i)) && result=$i\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(printf \"%s\\n\" \"${arr[@]}\" | sort\
    \ | uniq -c | awk '{print $1}'))\n    local -a uniq=($(printf \"%s\\n\" \"${arr[@]}\"\
    \ | sort | uniq))\n    local -a res=()\n    for i in \"${!uniq[@]}\"; do\n   \
    \     if [[ ${freq[$i]} -ge ${uniq[$i]} ]]; then\n            res+=(${uniq[$i]})\n\
    \        fi\n    done\n    if [[ ${#res[@]} -eq 0 ]]; then\n        echo -1\n\
    \    else\n        echo $(printf \"%s\\n\" \"${res[@]}\" | sort -nr | head -n\
    \ 1)\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4\
    \ 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=(0)\n    local max=0\n    local i=0\n \
    \   local j=0\n    local result=-1\n    for ((i=0; i<${#arr[@]}; i++)); do\n \
    \       if [[ ${arr[$i]} -gt $max ]]; then\n            max=${arr[$i]}\n     \
    \   fi\n    done\n    for ((i=0; i<${#arr[@]}; i++)); do\n        ((freq[${arr[$i]}]++))\n\
    \    done\n    for ((i=1; i<=max; i++)); do\n        if [[ ${freq[$i]} -ge $i\
    \ ]]; then\n            result=$i\n        fi\n    done\n    echo $result\n}\n\
    \ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' |\
    \ sort | uniq -c | awk '{print $1}'))\n    local -a val=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq))\n    local max=0\n    for ((i=0; i<${#val[@]};\
    \ i++)); do\n        if [[ ${val[$i]} -le ${freq[$i]} ]]; then\n            if\
    \ [[ ${val[$i]} -gt $max ]]; then\n                max=${val[$i]}\n          \
    \  fi\n        fi\n    done\n    if [[ $max -eq 0 ]]; then\n        echo -1\n\
    \    else\n        echo $max\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[\
    \ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"\
    2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7\
    \ 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n   \
    \ [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"\
    8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10\
    \ 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003188
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n  local\
    \ list=$1\n  local max=0\n  local max_freq=0\n  local freq=0\n  for i in $list;\
    \ do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  for i in\
    \ $list; do\n    if [[ $i -eq $max ]]; then\n      max_freq=$((max_freq+1))\n\
    \    fi\n  done\n  for i in $list; do\n    freq=0\n    for j in $list; do\n  \
    \    if [[ $i -eq $j ]]; then\n        freq=$((freq+1))\n      fi\n    done\n\
    \    if [[ $freq -ge $i ]] && [[ $freq -eq $max_freq ]]; then\n      echo $i\n\
    \      return\n    fi\n  done\n  echo -1\n}\n\ncandidate() {\n    search \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n  \
    \  [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"\
    -1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' |\
    \ sort | uniq -c | awk '{print $1}'))\n    local -a uniq=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq))\n    local -a res=()\n    for ((i=0; i<${#uniq[@]};\
    \ i++)); do\n        if [[ ${uniq[$i]} -le ${freq[$i]} ]]; then\n            res+=(${uniq[$i]})\n\
    \        fi\n    done\n    if [[ ${#res[@]} -eq 0 ]]; then\n        echo -1\n\
    \    else\n        echo ${res[@]} | tr ' ' '\\n' | sort -nr | head -n1\n    fi\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=$1\n    local max=0\n    local max_count=0\n    local count=0\n \
    \   local num=0\n    for num in $list; do\n        if [[ $num -gt $max ]]; then\n\
    \            max=$num\n        fi\n    done\n    for num in $list; do\n      \
    \  if [[ $num -eq $max ]]; then\n            ((max_count++))\n        fi\n   \
    \ done\n    for num in $list; do\n        count=0\n        for i in $list; do\n\
    \            if [[ $i -eq $num ]]; then\n                ((count++))\n       \
    \     fi\n        done\n        if [[ $count -ge $num ]]; then\n            if\
    \ [[ $count -gt $max_count ]]; then\n                max=$num\n              \
    \  max_count=$count\n            fi\n        fi\n    done\n    if [[ $max_count\
    \ -eq 0 ]]; then\n        echo -1\n    else\n        echo $max\n    fi\n}\n\n\
    candidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a counts=(0)\n    local max=0\n    local i=0\n\
    \    local j=0\n    local result=-1\n    for i in \"${arr[@]}\"; do\n        if\
    \ [ $i -gt $max ]; then\n            for ((j=max+1; j<=i; j++)); do\n        \
    \        counts[$j]=0\n            done\n            max=$i\n        fi\n    \
    \    ((counts[$i]++))\n    done\n    for ((i=1; i<=max; i++)); do\n        if\
    \ [ ${counts[$i]} -ge $i ]; then\n            result=$i\n        fi\n    done\n\
    \    echo $result\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=\"$1\"\n    local max=0\n    local max_count=0\n    local count=0\n\
    \    local num=0\n    for num in $list; do\n        if [[ $num -gt $max ]]; then\n\
    \            max=$num\n        fi\n    done\n    for ((i=1; i<=$max; i++)); do\n\
    \        count=0\n        for num in $list; do\n            if [[ $num -eq $i\
    \ ]]; then\n                count=$((count+1))\n            fi\n        done\n\
    \        if [[ $count -ge $i ]]; then\n            max_count=$i\n        fi\n\
    \    done\n    if [[ $max_count -eq 0 ]]; then\n        echo -1\n    else\n  \
    \      echo $max_count\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=$1\n    local max=0\n    local max_freq=0\n    local freq=0\n   \
    \ local i=0\n    local j=0\n    local arr=($list)\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        local num=${arr[$i]}\n        if [ $num\
    \ -gt $max ]; then\n            max=$num\n        fi\n    done\n    for ((i=0;\
    \ i<len; i++)); do\n        local num=${arr[$i]}\n        for ((j=0; j<len; j++));\
    \ do\n            if [ $num -eq ${arr[$j]} ]; then\n                freq=$((freq+1))\n\
    \            fi\n        done\n        if [ $freq -ge $num ] && [ $freq -ge $max_freq\
    \ ]; then\n            max_freq=$freq\n        fi\n        freq=0\n    done\n\
    \    if [ $max_freq -eq 0 ]; then\n        echo -1\n    else\n        echo $max_freq\n\
    \    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=(0)\n    local max=0\n    local i=0\n \
    \   local j=0\n    local k=0\n    local len=${#arr[@]}\n    for ((i=0; i<len;\
    \ i++)); do\n        j=${arr[$i]}\n        freq[$j]=$((freq[$j]+1))\n        if\
    \ [ $j -gt $max ]; then\n            max=$j\n        fi\n    done\n    for ((i=1;\
    \ i<=max; i++)); do\n        if [ ${freq[$i]} -lt $i ]; then\n            continue\n\
    \        fi\n        for ((j=i+1; j<=max; j++)); do\n            if [ ${freq[$j]}\
    \ -lt $j ]; then\n                continue\n            fi\n            if [ ${freq[$i]}\
    \ -lt ${freq[$j]} ]; then\n                k=$i\n                i=$j\n      \
    \          j=$k\n            fi\n            freq[$i]=$((freq[$i]+freq[$j]))\n\
    \            freq[$j]=0\n        done\n        if [ ${freq[$i]} -ge $i ]; then\n\
    \            echo $i\n            return\n        fi\n    done\n    echo -1\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpw2e0zpm1.sh: line 29: [: -lt: unary operator expected

    /tmp/tmpw2e0zpm1.sh: line 32: [: 1: unary operator expected

    /tmp/tmpw2e0zpm1.sh: line 29: [: -lt: unary operator expected

    /tmp/tmpw2e0zpm1.sh: line 32: [: 1: unary operator expected

    /tmp/tmpw2e0zpm1.sh: line 29: [: -lt: unary operator expected

    /tmp/tmpw2e0zpm1.sh: line 32: [: 1: unary operator expected

    /tmp/tmpw2e0zpm1.sh: line 29: [: -lt: unary operator expected

    /tmp/tmpw2e0zpm1.sh: line 32: [: 2: unary operator expected

    /tmp/tmpw2e0zpm1.sh: line 29: [: -lt: unary operator expected

    /tmp/tmpw2e0zpm1.sh: line 32: [: 2: unary operator expected

    '
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -A freq\n    local -i max=0\n    local -i i=0\n\
    \    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        ((freq[${arr[$i]}]++))\n\
    \        ((max < ${arr[$i]})) && max=${arr[$i]}\n    done\n    for ((i=1; i<=max;\
    \ i++)); do\n        if [[ -z ${freq[$i]} ]]; then\n            echo -1\n    \
    \        return\n        fi\n        ((freq[$i] < i)) && continue\n        echo\
    \ $i\n        return\n    done\n    echo -1\n}\n\ncandidate() {\n    search \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") =\
    \ \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9db2h_9p.sh: line 17: ((: max < 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a array=($1)\n    local -a freq=($(echo \"${array[@]}\" | tr ' ' '\\\
    n' | sort | uniq -c | awk '{print $1}'))\n    for (( i=0; i<${#array[@]}; i++\
    \ )); do\n        if [[ ${array[$i]} -le ${freq[$i]} ]]; then\n            echo\
    \ ${array[$i]}\n            return\n        fi\n    done\n    echo -1\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local -a result=()\n    local\
    \ max=0\n    local i=0\n    local j=0\n    local k=0\n    local found=0\n    local\
    \ len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[$i]} -gt\
    \ $max ]]; then\n            max=${arr[$i]}\n        fi\n    done\n    for ((i=0;\
    \ i<max; i++)); do\n        freq[$i]=0\n    done\n    for ((i=0; i<len; i++));\
    \ do\n        ((freq[${arr[$i]}-1]++))\n    done\n    for ((i=0; i<max; i++));\
    \ do\n        if [[ ${freq[$i]} -ge $((i+1)) ]]; then\n            result[$j]=$((i+1))\n\
    \            ((j++))\n        fi\n    done\n    if [[ ${#result[@]} -eq 0 ]];\
    \ then\n        echo -1\n    else\n        for ((i=0; i<${#result[@]}; i++));\
    \ do\n            for ((j=i+1; j<${#result[@]}; j++)); do\n                if\
    \ [[ ${result[$i]} -lt ${result[$j]} ]]; then\n                    k=${result[$i]}\n\
    \                    result[$i]=${result[$j]}\n                    result[$j]=$k\n\
    \                fi\n            done\n        done\n        echo ${result[0]}\n\
    \    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdcht3_ri.sh: line 20: [[: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    /tmp/tmpdcht3_ri.sh: line 28: 5 5 5 5 1-1: syntax error in expression (error token
    is "5 5 5 1-1")

    '
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=(0)\n    local max=0\n    local i=0\n \
    \   local j=0\n    local result=-1\n    for i in \"${arr[@]}\"; do\n        if\
    \ [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n    for ((i=0;\
    \ i<=max; i++)); do\n        freq[$i]=0\n    done\n    for i in \"${arr[@]}\"\
    ; do\n        freq[$i]=$((freq[$i]+1))\n    done\n    for ((i=max; i>=0; i--));\
    \ do\n        if [ ${freq[$i]} -ge $i ]; then\n            result=$i\n       \
    \     break\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=$1\n    local max=0\n    local max_count=0\n    local count=0\n \
    \   local num=0\n    for num in $list; do\n        count=0\n        for num2 in\
    \ $list; do\n            if [ $num -eq $num2 ]; then\n                count=$((count+1))\n\
    \            fi\n        done\n        if [ $count -eq $num ] && [ $count -ge\
    \ $max_count ]; then\n            max=$num\n            max_count=$count\n   \
    \     fi\n    done\n    if [ $max -eq 0 ]; then\n        echo -1\n    else\n \
    \       echo $max\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(printf \"%s\\n\" \"${arr[@]}\" | sort\
    \ | uniq -c | awk '{print $1}'))\n    local -a nums=($(printf \"%s\\n\" \"${arr[@]}\"\
    \ | sort | uniq))\n    local -a res=()\n    for ((i=0; i<${#nums[@]}; i++)); do\n\
    \        if [[ ${nums[$i]} -le ${freq[$i]} ]]; then\n            res+=(${nums[$i]})\n\
    \        fi\n    done\n    if [[ ${#res[@]} -eq 0 ]]; then\n        echo -1\n\
    \    else\n        echo ${res[@]} | tr ' ' '\\n' | sort -nr | head -n1\n    fi\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq\n    local -i max=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local\
    \ -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n\
    \    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local\
    \ -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n\
    \    local -i ab=0\n    local -i ac=0\n    local -i ad=0\n    local -i ae=0\n\
    \    local -i af=0\n    local -i ag=0\n    local -i ah=0\n    local -i ai=0\n\
    \    local -i aj=0\n    local -i ak=0\n    local -i al=0\n    local -i am=0\n\
    \    local -i an=0\n    local -i ao=0\n    local -i ap=0\n    local -i aq=0\n\
    \    local -i ar=0\n    local -i as=0\n    local -i at=0\n    local -i au=0\n\
    \    local -i av=0\n    local -i aw=0\n    local -i ax=0\n    local -i ay=0\n\
    \    local -i az=0\n    local -i ba=0\n    local -i bb=0\n    local -i bc=0\n\
    \    local -i bd=0\n    local -i be=0\n    local -i bf=0\n    local -i bg=0\n\
    \    local -i bh=0\n    local -i bi=0\n    local -i bj=0\n    local -i bk=0\n\
    \    local -i bl=0\n    local -i bm=0\n    local -i bn=0\n    local -i bo=\n}\n\
    \ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' |\
    \ sort | uniq -c | awk '{print $1}'))\n    local -a uniq=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq))\n    local -a result=()\n    for ((i=0; i<${#uniq[@]};\
    \ i++)); do\n        if [[ ${uniq[$i]} -le ${freq[$i]} ]]; then\n            result+=(${uniq[$i]})\n\
    \        fi\n    done\n    if [[ ${#result[@]} -eq 0 ]]; then\n        echo -1\n\
    \    else\n        echo ${result[@]} | tr ' ' '\\n' | sort -nr | head -n1\n  \
    \  fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") =\
    \ \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8\
    \ 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10\
    \ 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n\
    \    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local -i max=0\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i n=${#arr[@]}\n    local\
    \ -i m=0\n    local -i res=-1\n    for ((i=0; i<n; i++)); do\n        m=${arr[$i]}\n\
    \        if ((m>max)); then\n            max=$m\n        fi\n    done\n    for\
    \ ((i=0; i<max; i++)); do\n        freq[$i]=0\n    done\n    for ((i=0; i<n; i++));\
    \ do\n        m=${arr[$i]}\n        freq[$((m-1))]=$((freq[$((m-1))]+1))\n   \
    \ done\n    for ((i=0; i<max; i++)); do\n        if ((freq[$i]>=i+1)); then\n\
    \            res=$((i+1))\n        fi\n    done\n    echo $res\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2txb70xk.sh: line 20: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -i max=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local\
    \ -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n\
    \    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local\
    \ -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n\
    \    local -i z=0\n    local -i aa=0\n    local -i ab=0\n    local -i ac=0\n \
    \   local -i ad=0\n    local -i ae=0\n    local -i af=0\n    local -i ag=0\n \
    \   local -i ah=0\n    local -i ai=0\n    local -i aj=0\n    local -i ak=0\n \
    \   local -i al=0\n    local -i am=0\n    local -i an=0\n    local -i ao=0\n \
    \   local -i ap=0\n    local -i aq=0\n    local -i ar=0\n    local -i as=0\n \
    \   local -i at=0\n    local -i au=0\n    local -i av=0\n    local -i aw=0\n \
    \   local -i ax=0\n    local -i ay=0\n    local -i az=0\n    local -i ba=0\n \
    \   local -i bb=0\n    local -i bc=0\n    local -i bd=0\n    local -i be=0\n \
    \   local -i bf=0\n    local -i bg=0\n    local -i bh=0\n    local -i bi=0\n \
    \   local -i bj=0\n    local -i bk=0\n    local -i bl=0\n    local -i bm=0\n \
    \   local -i bn=0\n    local -i bo=0\n    local -i bp=0\n    local -i bq=\n}\n\
    \ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -n arr=$1\n    local -A freq\n    local max=0\n    for i in \"${arr[@]}\"\
    ; do\n        ((freq[$i]++))\n        ((max<i)) && max=$i\n    done\n    for ((i=max;\
    \ i>0; i--)); do\n        ((freq[$i]>=i)) && echo $i && return\n    done\n   \
    \ echo -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4\
    \ 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0lcjpvg1.sh: line 10: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local -i max=0\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i len=${#arr[@]}\n    local\
    \ -i max_freq=0\n    local -i max_freq_index=0\n    local -i max_freq_value=0\n\
    \    local -i max_value=0\n    local -i max_value_index=0\n    local -i max_value_freq=0\n\
    \    local -i max_value_freq_index=0\n    local -i max_value_freq_value=0\n  \
    \  local -i max_value_freq_value_index=0\n    local -i max_value_freq_value_freq=0\n\
    \    local -i max_value_freq_value_freq_index=0\n    local -i max_value_freq_value_freq_value=0\n\
    \    local -i max_value_freq_value_freq_value_index=0\n    local -i max_value_freq_value_freq_value_freq=0\n\
    \    local -i max_value_freq_value_freq_value_freq_index=0\n    local -i max_value_freq_value_freq_value_freq_value=0\n\
    \    local -i max_value_freq_value_freq_value_freq_value_index=0\n    local -i\
    \ max_value_freq_value_freq_value_freq_value_freq=0\n    local -i max_value_freq_value_freq_value_freq_value_freq_index=0\n\
    \    local -i max_value_freq_value_freq_value_freq_value_freq_value=0\n    local\
    \ -i max_value_freq_value_freq_value_freq_value_freq_value_index=0\n    local\
    \ -i max_value_freq_value_freq_value_freq_value_freq_value\n}\n\ncandidate() {\n\
    \    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=$1\n    local max=0\n    local result=-1\n    for i in $list; do\n\
    \        if [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n\
    \    for i in $(seq 1 $max); do\n        local count=0\n        for j in $list;\
    \ do\n            if [ $i -eq $j ]; then\n                count=$((count+1))\n\
    \            fi\n        done\n        if [ $count -ge $i ]; then\n          \
    \  result=$i\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n   \
    \ search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\")\
    \ = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -n arr=$1\n    local -A freq\n    local max=0\n    for i in \"${arr[@]}\"\
    ; do\n        (( freq[$i]++ ))\n        (( max < i )) && max=$i\n    done\n  \
    \  for (( i=max; i>0; i-- )); do\n        (( freq[$i] >= i )) && echo $i && return\n\
    \    done\n    echo -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpa7tjwlc8.sh: line 10: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq\n    local i\n    local max=0\n   \
    \ for i in \"${arr[@]}\"; do\n        (( freq[i]++ ))\n        (( max < i )) &&\
    \ max=$i\n    done\n    for (( i=max; i>0; i-- )); do\n        (( freq[i] >= i\
    \ )) && echo $i && return\n    done\n    echo -1\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnpvr1ldi.sh: line 15: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq\n    local -i max=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i len=${#arr[@]}\n    local -i\
    \ max_freq=0\n    local -i max_freq_val=0\n    local -i max_freq_val_idx=0\n \
    \   local -i max_freq_val_idx_2=0\n    local -i max_freq_val_idx_3=0\n    local\
    \ -i max_freq_val_idx_4=0\n    local -i max_freq_val_idx_5=0\n    local -i max_freq_val_idx_6=0\n\
    \    local -i max_freq_val_idx_7=0\n    local -i max_freq_val_idx_8=0\n    local\
    \ -i max_freq_val_idx_9=0\n    local -i max_freq_val_idx_10=0\n    local -i max_freq_val_idx_11=0\n\
    \    local -i max_freq_val_idx_12=0\n    local -i max_freq_val_idx_13=0\n    local\
    \ -i max_freq_val_idx_14=0\n    local -i max_freq_val_idx_15=0\n    local -i max_freq_val_idx_16=0\n\
    \    local -i max_freq_val_idx_17=0\n    local -i max_freq_val_idx_18=0\n    local\
    \ -i max_freq_val_idx_19=0\n    local -i max_freq_val_idx_20=0\n    local -i max_freq_val_idx_21=0\n\
    \    local -i max_freq_val_idx_22=0\n    local -i max_freq_val_idx_23=0\n    local\
    \ -i max_freq_val_id\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=\"$1\"\n    local max=0\n    local max_freq=0\n    local freq=0\n\
    \    local num=0\n    for num in $list; do\n        freq=0\n        for n in $list;\
    \ do\n            if [ $n -eq $num ]; then\n                freq=$((freq+1))\n\
    \            fi\n        done\n        if [ $freq -ge $num ] && [ $freq -gt $max_freq\
    \ ]; then\n            max=$num\n            max_freq=$freq\n        fi\n    done\n\
    \    if [ $max -eq 0 ]; then\n        echo -1\n    else\n        echo $max\n \
    \   fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n  local\
    \ -a arr=($1)\n  local -a freq=($(echo $1 | tr ' ' '\\n' | sort | uniq -c | awk\
    \ '{print $1}'))\n  local -a uniq=($(echo $1 | tr ' ' '\\n' | sort | uniq))\n\
    \  local -i max=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i\
    \ len=${#uniq[@]}\n  for ((i=0; i<len; i++)); do\n    if [[ ${freq[i]} -ge ${uniq[i]}\
    \ ]]; then\n      if [[ ${uniq[i]} -gt max ]]; then\n        max=${uniq[i]}\n\
    \      fi\n    fi\n  done\n  if [[ max -eq 0 ]]; then\n    echo -1\n  else\n \
    \   echo $max\n  fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003188
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' |\
    \ sort | uniq -c | awk '{print $1}'))\n    local -a nums=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq))\n    local -a res=($(echo \"${freq[@]}\" | tr\
    \ ' ' '\\n' | sort -nr))\n    local -a res2=($(echo \"${nums[@]}\" | tr ' ' '\\\
    n' | sort -nr))\n    for ((i=0; i<${#res[@]}; i++)); do\n        if [[ ${res[$i]}\
    \ -ge ${res2[$i]} ]]; then\n            echo ${res2[$i]}\n            return\n\
    \        fi\n    done\n    echo -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=(0)\n    local max=0\n    local i=0\n \
    \   local j=0\n    local res=-1\n    for i in ${arr[@]}; do\n        if [ $i -gt\
    \ $max ]; then\n            max=$i\n        fi\n    done\n    for ((i=0; i<=max;\
    \ i++)); do\n        freq[$i]=0\n    done\n    for i in ${arr[@]}; do\n      \
    \  freq[$i]=$((freq[$i]+1))\n    done\n    for ((i=max; i>=0; i--)); do\n    \
    \    if [ ${freq[$i]} -ge $i ]; then\n            res=$i\n            break\n\
    \        fi\n    done\n    echo $res\n}\n\ncandidate() {\n    search \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[\
    \ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"\
    2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7\
    \ 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n   \
    \ [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"\
    8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10\
    \ 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=(0)\n    local max=0\n    local i=0\n \
    \   local j=0\n    local k=0\n    local len=${#arr[@]}\n    local result=-1\n\n\
    \    for ((i=0; i<len; i++)); do\n        k=${arr[$i]}\n        if [[ $k -gt $max\
    \ ]]; then\n            max=$k\n        fi\n    done\n\n    for ((i=0; i<max;\
    \ i++)); do\n        freq[$i]=0\n    done\n\n    for ((i=0; i<len; i++)); do\n\
    \        k=${arr[$i]}\n        freq[$k]=$((freq[$k]+1))\n    done\n\n    for ((i=0;\
    \ i<max; i++)); do\n        if [[ ${freq[$i]} -ge $i ]]; then\n            result=$i\n\
    \        fi\n    done\n\n    echo $result\n}\n\ncandidate() {\n    search \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n  \
    \  [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"\
    -1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq\n    local -i max=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i len=${#arr[@]}\n    local -i max_freq=0\n    local\
    \ -i max_freq_val=0\n    local -i val=0\n    local -i freq_val=0\n    local -i\
    \ freq_val_freq=0\n    local -i freq_val_freq_val=0\n    local -i freq_val_freq_val_freq=0\n\
    \    local -i freq_val_freq_val_freq_val=0\n    local -i freq_val_freq_val_freq_val_freq=0\n\
    \    local -i freq_val_freq_val_freq_val_freq_val=0\n    local -i freq_val_freq_val_freq_val_freq_val_freq=0\n\
    \    local -i freq_val_freq_val_freq_val_freq_val_freq_val=0\n    local -i freq_val_freq_val_freq_val_freq_val_freq_val_freq=0\n\
    \    local -i freq_val_freq_val_freq_val_freq_val_freq_val_freq_val=0\n    local\
    \ -i freq_val_freq_val_freq_val_freq_val_freq_val_freq_val_freq=0\n    local -i\
    \ freq_val_freq_val_freq_val_freq_val_freq_val_freq_val_freq_val=0\n    local\
    \ -i freq_val_freq_val_freq_val_freq_val_freq_val_freq_val_freq_val_freq=0\n \
    \   local -i freq_val_freq_val_freq_val_freq_val_freq_val_freq_val_freq_val_\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local -a res=()\n    local\
    \ i j k\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=0; j<${#arr[@]};\
    \ j++)); do\n            if [[ ${arr[$i]} -eq ${arr[$j]} ]]; then\n          \
    \      freq[$i]=$((freq[$i]+1))\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<${#arr[@]}; i++)); do\n        if [[ ${freq[$i]} -ge ${arr[$i]} ]];\
    \ then\n            res[$i]=${arr[$i]}\n        fi\n    done\n    if [[ ${#res[@]}\
    \ -eq 0 ]]; then\n        echo -1\n    else\n        echo ${res[@]} | tr ' ' '\\\
    n' | sort -nr | head -n1\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6wyf69o0.sh: line 16: [[: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    /tmp/tmp6wyf69o0.sh: line 22: [[: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local -i max=0\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i len=${#arr[@]}\n    local\
    \ -i count=0\n    local -i result=-1\n\n    for ((i=0; i<len; i++)); do\n    \
    \    if [[ ${arr[i]} -gt max ]]; then\n            max=${arr[i]}\n        fi\n\
    \    done\n\n    for ((i=0; i<=max; i++)); do\n        freq[i]=0\n    done\n\n\
    \    for ((i=0; i<len; i++)); do\n        ((freq[arr[i]]++))\n    done\n\n   \
    \ for ((i=1; i<=max; i++)); do\n        if [[ ${freq[i]} -ge i ]]; then\n    \
    \        result=$i\n        fi\n    done\n\n    echo $result\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo3ehahoc.sh: line 21: [[: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    /tmp/tmpo3ehahoc.sh: line 31: 5 5 5 5 1: syntax error in expression (error token
    is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=()\n    local -a max=()\n    local -a max_freq=()\n\
    \    local -a max_freq_idx=()\n    local -a max_freq_val=()\n    local -a max_freq_val_idx=()\n\
    \    local -a max_freq_val_idx_idx=()\n    local -a max_freq_val_idx_idx_idx=()\n\
    \    local -a max_freq_val_idx_idx_idx_idx=()\n    local -a max_freq_val_idx_idx_idx_idx_idx=()\n\
    \    local -a max_freq_val_idx_idx_idx_idx_idx_idx=()\n    local -a max_freq_val_idx_idx_idx_idx_idx_idx_idx=()\n\
    \    local -a max_freq_val_idx_idx_idx_idx_idx_idx_idx_idx=()\n    local -a max_freq_val_idx_idx_idx_idx_idx_idx_idx_idx_idx=()\n\
    \    local -a max_freq_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx=()\n    local\
    \ -a max_freq_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx=()\n    local -a\
    \ max_freq_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx=()\n    local -a\
    \ max_freq_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx=()\n    local\
    \ -a\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") =\
    \ \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8\
    \ 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10\
    \ 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n\
    \    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local -i max=0\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n\
    \    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local\
    \ -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n\
    \    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local\
    \ -i aa=0\n    local -i ab=0\n    local -i ac=0\n    local -i ad=0\n    local\
    \ -i ae=0\n    local -i af=0\n    local -i ag=0\n    local -i ah=0\n    local\
    \ -i ai=0\n    local -i aj=0\n    local -i ak=0\n    local -i al=0\n    local\
    \ -i am=0\n    local -i an=0\n    local -i ao=0\n    local -i ap=0\n    local\
    \ -i aq=0\n    local -i ar=0\n    local -i as=0\n    local -i at=0\n    local\
    \ -i au=0\n    local -i av=0\n    local -i aw=0\n    local -i ax=0\n    local\
    \ -i ay=0\n    local -i az=0\n    local -i ba=0\n    local -i bb=0\n    local\
    \ -i bc=0\n    local -i bd=0\n    local -i be=0\n    local -i bf=0\n    local\
    \ -i bg=0\n    local -i bh=0\n    local -i bi=0\n    local -i bj=0\n    local\
    \ -i bk=0\n    local -i bl=0\n    local -i bm=0\n    local -i bn=0\n    local\
    \ -i\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") =\
    \ \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8\
    \ 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10\
    \ 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n\
    \    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n  local\
    \ list=$1\n  local max=0\n  local max_freq=0\n  local freq=0\n  local i=0\n  local\
    \ j=0\n  local n=0\n  local num=0\n  local nums=()\n  local nums_freq=()\n  local\
    \ nums_freq_max=()\n  local nums_freq_max_idx=()\n  local nums_freq_max_idx_max=()\n\
    \  local nums_freq_max_idx_max_idx=()\n  local nums_freq_max_idx_max_idx_max=()\n\
    \  local nums_freq_max_idx_max_idx_max_idx=()\n  local nums_freq_max_idx_max_idx_max_idx_max=()\n\
    \  local nums_freq_max_idx_max_idx_max_idx_max_idx=()\n  local nums_freq_max_idx_max_idx_max_idx_max_idx_max=()\n\
    \  local nums_freq_max_idx_max_idx_max_idx_max_idx_max_idx=()\n  local nums_freq_max_idx_max_idx_max_idx_max_idx_max_idx_max=()\n\
    \  local nums_freq_max_idx_max_idx_max_idx_max_idx_max_idx_max_idx=()\n  local\
    \ nums_freq_max_idx_max_idx_max_idx_max_idx_max_idx_max_idx_max=()\n  local nums_freq_max_idx_max_idx_max_idx_max_idx_max_idx_max_idx_max_idx=()\n\
    \  local nums_freq_max_idx_max_idx_max_idx_max_idx_max_idx_max_idx_max_idx_\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local max=0\n    local count=0\n    local i=0\n    local\
    \ j=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if [[ ${arr[$i]} -gt $max\
    \ ]]; then\n            max=${arr[$i]}\n        fi\n    done\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        count=0\n        for ((j=0; j<${#arr[@]}; j++)); do\n   \
    \         if [[ ${arr[$i]} -eq ${arr[$j]} ]]; then\n                count=$((count+1))\n\
    \            fi\n        done\n        if [[ $count -ge ${arr[$i]} ]]; then\n\
    \            echo ${arr[$i]}\n            return\n        fi\n    done\n    echo\
    \ -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") =\
    \ \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8\
    \ 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10\
    \ 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n\
    \    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=(0)\n    local max=0\n    local i=0\n \
    \   for i in ${arr[@]}; do\n        if [ $i -gt $max ]; then\n            max=$i\n\
    \        fi\n        freq[$i]=$((freq[$i]+1))\n    done\n    for i in $(seq 1\
    \ $max); do\n        if [ ${freq[$i]} -ge $i ]; then\n            echo $i\n  \
    \          return\n        fi\n    done\n    echo -1\n}\n\ncandidate() {\n   \
    \ search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\")\
    \ = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -n arr=$1\n    local -n freq=$2\n    local max=0\n    local max_freq=0\n\
    \    for i in \"${arr[@]}\"; do\n        ((freq[i]++))\n        if [[ ${freq[i]}\
    \ -ge i ]]; then\n            if [[ ${freq[i]} -gt max_freq ]]; then\n       \
    \         max=$i\n                max_freq=${freq[i]}\n            fi\n      \
    \  fi\n    done\n    echo $max\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcaqtgt8l.sh: line 10: local: `5 5 5 5 1'': invalid variable name
    for name reference

    /tmp/tmpcaqtgt8l.sh: line 11: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660003186
- exit_code: -1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=$1\n    local max=0\n    local max_freq=0\n    local freq=0\n   \
    \ local num=0\n    for num in $list; do\n        freq=`echo $list | tr ' ' '\\\
    n' | grep -c \"^$num$\"`\n        if [ $freq -ge $num ] && [ $freq -ge $max_freq\
    \ ]; then\n            max=$num\n            max_freq=$freq\n        fi\n    done\n\
    \    if [ $max -eq 0 ]; then\n        echo -1\n    else\n        echo $max\n \
    \   fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003192
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -A freq\n    local -i max=0\n    for i in \"\
    ${arr[@]}\"; do\n        (( freq[$i]++ ))\n        (( max < i )) && max=$i\n \
    \   done\n    for ((i=max; i>0; i--)); do\n        (( freq[$i] >= i )) && echo\
    \ $i && return\n    done\n    echo -1\n}\n\ncandidate() {\n    search \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[\
    \ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"\
    2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7\
    \ 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n   \
    \ [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"\
    8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10\
    \ 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvds9nhwj.sh: line 15: ((: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ for i in $1; do\n        if [ $(echo $1 | tr ' ' '\\n' | grep -c $i) -ge $i\
    \ ]; then\n            echo $i\n            return\n        fi\n    done\n   \
    \ echo -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4\
    \ 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local max=0\n    local i=0\n\
    \    local j=0\n    local found=0\n    for i in \"${arr[@]}\"; do\n        if\
    \ [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    for ((i=0;\
    \ i<=max; i++)); do\n        freq[$i]=0\n    done\n    for i in \"${arr[@]}\"\
    ; do\n        freq[$i]=$((freq[$i]+1))\n    done\n    for ((i=max; i>=0; i--));\
    \ do\n        if [[ ${freq[$i]} -ge $i ]]; then\n            echo $i\n       \
    \     found=1\n            break\n        fi\n    done\n    if [[ $found -eq 0\
    \ ]]; then\n        echo -1\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_ghpqls8.sh: line 17: [[: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    /tmp/tmp_ghpqls8.sh: line 25: 5 5 5 5 1: syntax error in expression (error token
    is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n  local\
    \ -a arr=($1)\n  local -a freq\n  local max=0\n  local max_freq=0\n  local i=0\n\
    \  local j=0\n  local len=${#arr[@]}\n  for ((i=0; i<len; i++)); do\n    if [[\
    \ ${arr[$i]} -gt $max ]]; then\n      max=${arr[$i]}\n    fi\n  done\n  for ((i=0;\
    \ i<max; i++)); do\n    freq[$i]=0\n  done\n  for ((i=0; i<len; i++)); do\n  \
    \  ((freq[${arr[$i]}-1]++))\n  done\n  for ((i=0; i<max; i++)); do\n    if [[\
    \ ${freq[$i]} -ge $i+1 ]]; then\n      max_freq=$i\n    fi\n  done\n  if [[ $max_freq\
    \ -eq 0 ]]; then\n    echo -1\n  else\n    echo $((max_freq+1))\n  fi\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' |\
    \ sort | uniq -c | awk '{print $1}'))\n    local -a nums=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq))\n    local -a res=()\n    for ((i=0; i<${#nums[@]};\
    \ i++)); do\n        if [[ ${nums[$i]} -le ${freq[$i]} ]]; then\n            res+=(${nums[$i]})\n\
    \        fi\n    done\n    if [[ ${#res[@]} -eq 0 ]]; then\n        echo -1\n\
    \    else\n        echo ${res[@]} | tr ' ' '\\n' | sort -nr | head -n1\n    fi\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -i max=0\n    local -i i=0\n    local -i j=0\n\
    \    local -i count=0\n    local -i max_count=0\n    local -i max_index=0\n  \
    \  local -i max_value=0\n    local -i max_index_value=0\n    for i in \"${arr[@]}\"\
    ; do\n        if (( i > max )); then\n            max=$i\n        fi\n    done\n\
    \    for (( i=0; i<${#arr[@]}; i++ )); do\n        count=0\n        for (( j=0;\
    \ j<${#arr[@]}; j++ )); do\n            if (( arr[i] == arr[j] )); then\n    \
    \            count=$(( count + 1 ))\n            fi\n        done\n        if\
    \ (( count >= arr[i] )); then\n            if (( count > max_count )); then\n\
    \                max_count=$count\n                max_index=$i\n            fi\n\
    \        fi\n    done\n    if (( max_count > 0 )); then\n        max_index_value=${arr[max_index]}\n\
    \        if (( max_index_value > max_value )); then\n            max_value=$max_index_value\n\
    \        fi\n    fi\n    if (( max_value > 0 )); then\n        echo $max_value\n\
    \    else\n        echo -1\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=(0)\n    local max=0\n    local i=0\n \
    \   local j=0\n    local len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n   \
    \     if [[ ${arr[$i]} -gt $max ]]; then\n            max=${arr[$i]}\n       \
    \ fi\n    done\n    for ((i=0; i<max; i++)); do\n        freq[$i]=0\n    done\n\
    \    for ((i=0; i<len; i++)); do\n        freq[${arr[$i]}-1]=$((freq[${arr[$i]}-1]+1))\n\
    \    done\n    for ((i=0; i<max; i++)); do\n        if [[ ${freq[$i]} -ge $((i+1))\
    \ ]]; then\n            echo $((i+1))\n            return\n        fi\n    done\n\
    \    echo -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4\
    \ 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -i max=0\n    local -i i=0\n    local -i j=0\n\
    \    local -i count=0\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        if [[\
    \ ${arr[$i]} -gt $max ]]; then\n            max=${arr[$i]}\n        fi\n    done\n\
    \    for (( i=1; i<=$max; i++ )); do\n        count=0\n        for (( j=0; j<${#arr[@]};\
    \ j++ )); do\n            if [[ ${arr[$j]} -eq $i ]]; then\n                count=$((count+1))\n\
    \            fi\n        done\n        if [[ $count -ge $i ]]; then\n        \
    \    echo $i\n            return\n        fi\n    done\n    echo -1\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local -i i=0\n    local -i\
    \ max=0\n    local -i max_freq=0\n    local -i curr_freq=0\n    local -i curr_val=0\n\
    \    local -i curr_max=0\n    local -i curr_max_freq=0\n    local -i ret=0\n\n\
    \    for i in \"${arr[@]}\"; do\n        (( freq[i]++ ))\n        (( max < i ))\
    \ && max=$i\n    done\n\n    for (( i=1; i<=max; i++ )); do\n        curr_freq=${freq[i]}\n\
    \        curr_val=$i\n        if (( curr_freq >= curr_val )); then\n         \
    \   if (( curr_freq > curr_max_freq )); then\n                curr_max=$curr_val\n\
    \                curr_max_freq=$curr_freq\n            elif (( curr_freq == curr_max_freq\
    \ )); then\n                (( curr_max < curr_val )) && curr_max=$curr_val\n\
    \            fi\n        fi\n    done\n\n    (( curr_max_freq > 0 )) && ret=$curr_max\
    \ || ret=-1\n    echo $ret\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps7_02hhu.sh: line 21: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003187
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(printf \"%s\\n\" \"${arr[@]}\" | sort\
    \ | uniq -c | awk '{print $1}'))\n    local -a uniq=($(printf \"%s\\n\" \"${arr[@]}\"\
    \ | sort | uniq))\n    local i=0\n    local max=-1\n    for n in \"${uniq[@]}\"\
    ; do\n        if [ \"${freq[$i]}\" -ge \"$n\" ]; then\n            if [ \"$n\"\
    \ -gt \"$max\" ]; then\n                max=\"$n\"\n            fi\n        fi\n\
    \        i=$((i+1))\n    done\n    echo \"$max\"\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=$1\n    local max=0\n    local max_freq=0\n    local freq=0\n   \
    \ local num=0\n    for num in $list; do\n        freq=0\n        for num2 in $list;\
    \ do\n            if [ $num -eq $num2 ]; then\n                freq=$((freq+1))\n\
    \            fi\n        done\n        if [ $freq -ge $num ] && [ $freq -gt $max_freq\
    \ ]; then\n            max=$num\n            max_freq=$freq\n        fi\n    done\n\
    \    if [ $max -eq 0 ]; then\n        echo -1\n    else\n        echo $max\n \
    \   fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n  local\
    \ -a arr=($1)\n  local -a freq=()\n  local -a res=()\n  local i=0\n  local j=0\n\
    \  local max=0\n  for i in ${arr[@]}; do\n    freq[$i]=$((freq[$i]+1))\n  done\n\
    \  for i in ${arr[@]}; do\n    if [[ ${freq[$i]} -ge $i ]]; then\n      res[$j]=$i\n\
    \      ((j++))\n    fi\n  done\n  if [[ ${#res[@]} -eq 0 ]]; then\n    echo -1\n\
    \  else\n    for i in ${res[@]}; do\n      if [[ $i -gt $max ]]; then\n      \
    \  max=$i\n      fi\n    done\n    echo $max\n  fi\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n\tlocal\
    \ -a nums=($1)\n\tlocal -a freq=()\n\tlocal -i max=0\n\tlocal -i i=0\n\tlocal\
    \ -i j=0\n\tlocal -i k=0\n\tlocal -i l=0\n\tlocal -i m=0\n\tlocal -i n=0\n\tlocal\
    \ -i o=0\n\tlocal -i p=0\n\tlocal -i q=0\n\tlocal -i r=0\n\tlocal -i s=0\n\tlocal\
    \ -i t=0\n\tlocal -i u=0\n\tlocal -i v=0\n\tlocal -i w=0\n\tlocal -i x=0\n\tlocal\
    \ -i y=0\n\tlocal -i z=0\n\tlocal -i aa=0\n\tlocal -i bb=0\n\tlocal -i cc=0\n\t\
    local -i dd=0\n\tlocal -i ee=0\n\tlocal -i ff=0\n\tlocal -i gg=0\n\tlocal -i hh=0\n\
    \tlocal -i ii=0\n\tlocal -i jj=0\n\tlocal -i kk=0\n\tlocal -i ll=0\n\tlocal -i\
    \ mm=0\n\tlocal -i nn=0\n\tlocal -i oo=0\n\tlocal -i pp=0\n\tlocal -i qq=0\n\t\
    local -i rr=0\n\tlocal -i ss=0\n\tlocal -i tt=0\n\tlocal -i uu=0\n\tlocal -i vv=0\n\
    \tlocal -i ww=0\n\tlocal -i xx=0\n\tlocal -i yy=0\n\tlocal -i zz=0\n\tlocal -i\
    \ aaa=0\n\tlocal -i bbb=0\n\tlocal -i ccc=0\n\tlocal -i ddd=0\n\tlocal -i eee=0\n\
    \tlocal -i fff=0\n\tlocal -i ggg=0\n\tlocal -i hhh=0\n\tlocal -i iii=0\n\tlocal\
    \ -i jjj=0\n\tlocal -i kkk=0\n\tlocal -i lll=0\n\tlocal -i mmm=\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=$1\n    local max=0\n    local freq=0\n    for i in $list; do\n \
    \       if [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n \
    \   for i in $list; do\n        if [ $i -eq $max ]; then\n            freq=$((freq+1))\n\
    \        fi\n    done\n    if [ $freq -ge $max ]; then\n        echo $max\n  \
    \  else\n        echo -1\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq\n    local -i max=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local\
    \ -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n\
    \    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local\
    \ -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n\
    \    local -i ab=0\n    local -i ac=0\n    local -i ad=0\n    local -i ae=0\n\
    \    local -i af=0\n    local -i ag=0\n    local -i ah=0\n    local -i ai=0\n\
    \    local -i aj=0\n    local -i ak=0\n    local -i al=0\n    local -i am=0\n\
    \    local -i an=0\n    local -i ao=0\n    local -i ap=0\n    local -i aq=0\n\
    \    local -i ar=0\n    local -i as=0\n    local -i at=0\n    local -i au=0\n\
    \    local -i av=0\n    local -i aw=0\n    local -i ax=0\n    local -i ay=0\n\
    \    local -i az=0\n    local -i ba=0\n    local -i bb=0\n    local -i bc=0\n\
    \    local -i bd=0\n    local -i be=0\n    local -i bf=0\n    local -i bg=0\n\
    \    local -i bh=0\n    local -i bi=0\n    local -i bj=0\n    local -i bk=0\n\
    \    local -i bl=0\n    local -i bm=0\n    local -i bn=0\n    local -i bo=\n}\n\
    \ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' |\
    \ sort | uniq -c | awk '{print $1}'))\n    local -a val=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq))\n    local -a res=()\n    for ((i=0; i<${#val[@]};\
    \ i++)); do\n        if [[ ${val[$i]} -le ${freq[$i]} ]]; then\n            res+=(${val[$i]})\n\
    \        fi\n    done\n    if [[ ${#res[@]} -eq 0 ]]; then\n        echo -1\n\
    \    else\n        echo ${res[@]} | tr ' ' '\\n' | sort -nr | head -n1\n    fi\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -A freq\n    local max=0\n    for i in \"${arr[@]}\"\
    ; do\n        (( freq[$i]++ ))\n        (( max < i )) && max=$i\n    done\n  \
    \  for (( i=max; i>0; i-- )); do\n        (( freq[$i] >= i )) && echo $i && return\n\
    \    done\n    echo -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn4qlw9u5.sh: line 15: ((: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=\"$1\"\n    local freq=()\n    local max=0\n    local result=-1\n\
    \    for i in $list; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n\
    \        fi\n        freq[$i]=$((freq[$i]+1))\n    done\n    for i in $(seq 0\
    \ $max); do\n        if [[ ${freq[$i]} -ge $i ]]; then\n            result=$i\n\
    \        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    search \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n  \
    \  [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"\
    -1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n  local\
    \ -a arr=(\"$@\")\n  local -a freq=()\n  local -a result=()\n  local max=0\n \
    \ for i in \"${arr[@]}\"; do\n    freq[$i]=$((freq[$i]+1))\n    if [[ ${freq[$i]}\
    \ -ge $i ]]; then\n      result+=($i)\n    fi\n    if [[ $i -gt $max ]]; then\n\
    \      max=$i\n    fi\n  done\n  if [[ ${#result[@]} -eq 0 ]]; then\n    echo\
    \ -1\n  else\n    echo ${result[@]} | tr ' ' '\\n' | sort -nr | head -n1\n  fi\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprf_09h8u.sh: line 15: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local input=$1\n    local max=0\n    local max_freq=0\n    local freq=0\n  \
    \  for i in $input; do\n        if [ $i -gt $max ]; then\n            max=$i\n\
    \        fi\n    done\n    for i in $input; do\n        if [ $i -eq $max ]; then\n\
    \            max_freq=$((max_freq+1))\n        fi\n    done\n    for i in $input;\
    \ do\n        if [ $i -eq $max ]; then\n            freq=$((freq+1))\n       \
    \ fi\n    done\n    if [ $freq -ge $max ]; then\n        echo $max\n    else\n\
    \        echo -1\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n  local\
    \ -a arr=(\"$@\")\n  local -a freq=()\n  local -i max=0\n  local -i i=0\n  local\
    \ -i j=0\n  local -i k=0\n  local -i n=${#arr[@]}\n  local -i m=0\n  local -i\
    \ tmp=0\n  local -i res=-1\n  for ((i=0; i<n; i++)); do\n    tmp=${arr[$i]}\n\
    \    if ((tmp > max)); then\n      max=$tmp\n    fi\n  done\n  for ((i=0; i<=max;\
    \ i++)); do\n    freq[$i]=0\n  done\n  for ((i=0; i<n; i++)); do\n    tmp=${arr[$i]}\n\
    \    freq[$tmp]=$((freq[$tmp]+1))\n  done\n  for ((i=1; i<=max; i++)); do\n  \
    \  if ((freq[$i] >= i)); then\n      res=$i\n    fi\n  done\n  echo $res\n}\n\n\
    candidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2hec62f1.sh: line 21: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003187
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n  local\
    \ -a arr=($1)\n  local -a freq=(0)\n  local max=0\n  local i=0\n  local j=0\n\
    \  local result=-1\n  for i in \"${arr[@]}\"; do\n    if [[ $i -gt $max ]]; then\n\
    \      max=$i\n    fi\n  done\n  for ((i=0; i<=max; i++)); do\n    freq[$i]=0\n\
    \  done\n  for i in \"${arr[@]}\"; do\n    freq[$i]=$((freq[$i]+1))\n  done\n\
    \  for ((i=1; i<=max; i++)); do\n    if [[ ${freq[$i]} -ge $i ]]; then\n     \
    \ result=$i\n    fi\n  done\n  echo $result\n}\n\ncandidate() {\n    search \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") =\
    \ \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=($1)\n    local max=0\n    for i in ${list[@]}; do\n        if [[\
    \ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    for i in\
    \ ${list[@]}; do\n        if [[ $i -eq $max ]]; then\n            echo $i\n  \
    \          return\n        fi\n    done\n    echo -1\n}\n\ncandidate() {\n   \
    \ search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\")\
    \ = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=$1\n    local max=0\n    local freq=0\n    local max_freq=0\n   \
    \ local max_freq_val=0\n    for i in $list; do\n        if [ $i -gt $max ]; then\n\
    \            max=$i\n        fi\n    done\n    for i in $(seq 1 $max); do\n  \
    \      freq=$(echo $list | tr ' ' '\\n' | grep -c $i)\n        if [ $freq -ge\
    \ $i ]; then\n            if [ $freq -gt $max_freq ]; then\n                max_freq=$freq\n\
    \                max_freq_val=$i\n            fi\n        fi\n    done\n    if\
    \ [ $max_freq -eq 0 ]; then\n        echo -1\n    else\n        echo $max_freq_val\n\
    \    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003191
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq\n    local max=0\n    local i\n   \
    \ local j\n    local k\n    local flag=0\n    for ((i=0; i<${#arr[@]}; i++));\
    \ do\n        if [[ ${arr[$i]} -gt $max ]]; then\n            max=${arr[$i]}\n\
    \        fi\n    done\n    for ((i=0; i<${#arr[@]}; i++)); do\n        freq[$i]=0\n\
    \    done\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=0; j<${#arr[@]};\
    \ j++)); do\n            if [[ ${arr[$i]} -eq ${arr[$j]} ]]; then\n          \
    \      freq[$i]=$((freq[$i]+1))\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<${#arr[@]}; i++)); do\n        if [[ ${freq[$i]} -ge ${arr[$i]} ]];\
    \ then\n            flag=1\n            break\n        fi\n    done\n    if [[\
    \ $flag -eq 1 ]]; then\n        echo ${arr[$i]}\n    else\n        echo -1\n \
    \   fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpddcv77jf.sh: line 18: [[: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    /tmp/tmpddcv77jf.sh: line 27: [[: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    /tmp/tmpddcv77jf.sh: line 33: [[: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=(0)\n    local max=0\n    for i in ${arr[@]};\
    \ do\n        if [ $i -gt $max ]; then\n            max=$i\n        fi\n     \
    \   freq[$i]=$((freq[$i]+1))\n    done\n    for i in $(seq 1 $max); do\n     \
    \   if [ ${freq[$i]} -ge $i ]; then\n            echo $i\n            return\n\
    \        fi\n    done\n    echo -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=\"$1\"\n    local max=0\n    local max_count=0\n    local count=0\n\
    \    local num=0\n    local num_count=0\n    local result=-1\n    for num in $list;\
    \ do\n        if [[ $num -gt $max ]]; then\n            max=$num\n        fi\n\
    \        ((num_count++))\n    done\n    for ((i=1; i<=$max; i++)); do\n      \
    \  count=0\n        for num in $list; do\n            if [[ $num -eq $i ]]; then\n\
    \                ((count++))\n            fi\n        done\n        if [[ $count\
    \ -ge $i ]]; then\n            result=$i\n        fi\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ for i in $1; do\n        if [ $i -gt 0 ]; then\n            count=$(echo $1\
    \ | tr ' ' '\\n' | grep -c \"^$i$\")\n            if [ $count -ge $i ]; then\n\
    \                echo $i\n                return\n            fi\n        fi\n\
    \    done\n    echo -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local -i max=0\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n\
    \    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local\
    \ -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n\
    \    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local\
    \ -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local\
    \ -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local\
    \ -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local\
    \ -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local\
    \ -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local\
    \ -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local\
    \ -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local\
    \ -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local\
    \ -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local\
    \ -i kkk=0\n    local -i lll=0\n    local -i mmm=\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq\n    local -i max=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i len=${#arr[@]}\n    local -i max_freq=0\n    local\
    \ -i max_freq_num=0\n    local -i max_num=0\n    local -i freq_num=0\n    local\
    \ -i num=0\n    local -i freq_max=0\n    local -i freq_max_num=0\n    local -i\
    \ freq_max_num_count=0\n    local -i freq_max_num_count_max=0\n    local -i freq_max_num_count_max_num=0\n\
    \    local -i freq_max_num_count_max_num_freq=0\n    local -i freq_max_num_count_max_num_freq_max=0\n\
    \    local -i freq_max_num_count_max_num_freq_max_num=0\n    local -i freq_max_num_count_max_num_freq_max_num_freq=0\n\
    \    local -i freq_max_num_count_max_num_freq_max_num_freq_max=0\n    local -i\
    \ freq_max_num_count_max_num_freq_max_num_freq_max_num=0\n    local -i freq_max_num_count_max_num_freq_max_num_freq_max_num_freq=0\n\
    \    local -i freq_max_num_count_max_num_freq_max_num_freq_max_num_freq_max=0\n\
    \    local -i freq_max_num_count_max_num_freq_max_num_freq_max_num_freq_max_num=0\n\
    \    local -i freq_max_num_count_max_num_freq_max_num_freq_max_num_freq_max_num_freq=0\n\
    \    local -i freq\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=(0)\n    local max=0\n    for i in ${arr[@]};\
    \ do\n        if [ $i -gt $max ]; then\n            max=$i\n        fi\n     \
    \   ((freq[$i]++))\n    done\n    for i in $(seq 0 $max); do\n        if [ ${freq[$i]}\
    \ -ge $i ]; then\n            echo $i\n            return\n        fi\n    done\n\
    \    echo -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4\
    \ 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n  local\
    \ -a arr=($1)\n  local -a freq=($(echo $1 | tr ' ' '\\n' | sort | uniq -c | awk\
    \ '{print $1}'))\n  local -a uniq=($(echo $1 | tr ' ' '\\n' | sort | uniq))\n\
    \  local -a res=()\n  for ((i=0; i<${#uniq[@]}; i++)); do\n    if [[ ${uniq[$i]}\
    \ -le ${freq[$i]} ]]; then\n      res+=(${uniq[$i]})\n    fi\n  done\n  if [[\
    \ ${#res[@]} -eq 0 ]]; then\n    echo -1\n  else\n    echo ${res[@]} | tr ' '\
    \ '\\n' | sort -nr | head -n1\n  fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003190
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq\n    local i\n    local max=0\n   \
    \ local max_freq=0\n    local res=-1\n\n    for i in \"${arr[@]}\"; do\n     \
    \   ((freq[i]++))\n        if ((i > max)); then\n            max=$i\n        fi\n\
    \    done\n\n    for ((i=1; i<=max; i++)); do\n        if ((freq[i] >= i)); then\n\
    \            if ((freq[i] > max_freq)); then\n                max_freq=$freq[i]\n\
    \                res=$i\n            fi\n        fi\n    done\n\n    echo $res\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsgogj3f0.sh: line 18: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003187
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' |\
    \ sort | uniq -c | awk '{print $1}'))\n    local -a uniq=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq))\n    local -a res=()\n    local i=0\n    local\
    \ j=0\n    for i in \"${uniq[@]}\"; do\n        if [[ \"$i\" -le \"${freq[$j]}\"\
    \ ]]; then\n            res+=(\"$i\")\n        fi\n        j=$((j+1))\n    done\n\
    \    if [[ ${#res[@]} -eq 0 ]]; then\n        echo -1\n    else\n        echo\
    \ \"${res[@]}\" | tr ' ' '\\n' | sort -nr | head -n 1\n    fi\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003190
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=$1\n    local max=0\n    local max_freq=0\n    local freq=0\n   \
    \ local num=0\n    local i=0\n    local j=0\n    local len=0\n    local tmp=0\n\
    \    local tmp_freq=0\n    local tmp_num=0\n    local tmp_max=0\n    local tmp_max_freq=0\n\
    \    local tmp_len=0\n    local tmp_i=0\n    local tmp_j=0\n    local tmp_freq=0\n\
    \    local tmp_num=0\n    local tmp_max=0\n    local tmp_max_freq=0\n    local\
    \ tmp_len=0\n    local tmp_i=0\n    local tmp_j=0\n    local tmp_freq=0\n    local\
    \ tmp_num=0\n    local tmp_max=0\n    local tmp_max_freq=0\n    local tmp_len=0\n\
    \    local tmp_i=0\n    local tmp_j=0\n    local tmp_freq=0\n    local tmp_num=0\n\
    \    local tmp_max=0\n    local tmp_max_freq=0\n    local tmp_len=0\n    local\
    \ tmp_i=0\n    local tmp_j=0\n    local tmp_freq=0\n    local tmp_num=0\n    local\
    \ tmp_max=0\n    local tmp_max_freq=0\n    local tmp_len=0\n    local tmp_i=0\n\
    \    local tmp_j=0\n    local tmp_freq=0\n    local tmp_num=0\n    local tmp_max=0\n\
    \    local tmp_max_freq=0\n    local tmp_len=0\n    local tmp_i=0\n    local tmp_j=0\n\
    \    local tmp_freq=0\n    local tmp_num=0\n    local tmp_max=0\n    local tmp_max_freq=0\n\
    \    local tmp_len=0\n    local tmp_i=0\n    local tmp_j=0\n    local tmp_freq=0\n\
    \    local tmp_num=0\n    local tmp_max=0\n    local tmp_max_freq\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local -i max=0\n    local -i\
    \ i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    local -i res=-1\n\n\
    \    for ((i=0; i<len; i++)); do\n        if [[ ${arr[$i]} -gt $max ]]; then\n\
    \            max=${arr[$i]}\n        fi\n    done\n\n    for ((i=0; i<=max; i++));\
    \ do\n        freq[$i]=0\n    done\n\n    for ((i=0; i<len; i++)); do\n      \
    \  freq[${arr[$i]}]=$((freq[${arr[$i]}]+1))\n    done\n\n    for ((i=1; i<=max;\
    \ i++)); do\n        if [[ ${freq[$i]} -ge $i ]]; then\n            res=$i\n \
    \       fi\n    done\n\n    echo $res\n}\n\ncandidate() {\n    search \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[\
    \ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"\
    2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7\
    \ 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n   \
    \ [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"\
    8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10\
    \ 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi1qasi0z.sh: line 19: [[: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    /tmp/tmpi1qasi0z.sh: line 29: 5 5 5 5 1: syntax error in expression (error token
    is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003188
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=$1\n    local max=0\n    local max_freq=0\n    local freq=0\n   \
    \ for i in $list; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n\
    \        fi\n    done\n    for i in $list; do\n        if [[ $i -eq $max ]]; then\n\
    \            ((max_freq++))\n        fi\n    done\n    for i in $list; do\n  \
    \      if [[ $i -eq $max ]]; then\n            ((freq++))\n        fi\n    done\n\
    \    if [[ $freq -ge $max ]]; then\n        echo $max\n    else\n        echo\
    \ -1\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4\
    \ 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003188
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' |\
    \ sort | uniq -c | awk '{print $1}'))\n    local -a val=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq -c | awk '{print $2}'))\n    local -a res=()\n\
    \    for ((i=0; i<${#val[@]}; i++)); do\n        if [[ ${freq[$i]} -ge ${val[$i]}\
    \ ]]; then\n            res+=(${val[$i]})\n        fi\n    done\n    if [[ ${#res[@]}\
    \ -eq 0 ]]; then\n        echo -1\n    else\n        echo ${res[@]} | tr ' ' '\\\
    n' | sort -nr | head -n1\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003190
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq\n    local -i i\n    local -i max=0\n\
    \    local -i max_freq=0\n    local -i freq_val=0\n    local -i freq_val_freq=0\n\
    \    local -i n=${#arr[@]}\n    local -i val\n    local -i val_freq\n\n    for\
    \ ((i=0; i<n; i++)); do\n        val=${arr[i]}\n        ((freq[val]++))\n    \
    \    if ((val > max)); then\n            max=$val\n        fi\n    done\n\n  \
    \  for ((i=0; i<=max; i++)); do\n        val_freq=${freq[i]}\n        if ((val_freq\
    \ > max_freq)); then\n            max_freq=$val_freq\n            freq_val=$i\n\
    \        fi\n    done\n\n    for ((i=0; i<=max; i++)); do\n        val_freq=${freq[i]}\n\
    \        if ((val_freq == i)); then\n            freq_val_freq=$i\n        fi\n\
    \    done\n\n    if ((freq_val_freq > 0)); then\n        echo $freq_val_freq\n\
    \    else\n        echo -1\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphlpqxufl.sh: line 22: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003188
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -n arr=$1\n    local max=0\n    local freq=0\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n   \
    \ done\n    for i in \"${arr[@]}\"; do\n        if [[ $i -eq $max ]]; then\n \
    \           freq=$((freq+1))\n        fi\n    done\n    if [[ $freq -ge $max ]];\
    \ then\n        echo $max\n    else\n        echo -1\n    fi\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphbd_r53j.sh: line 10: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003188
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq\n    local -i i\n    local -i j\n \
    \   local -i max=-1\n    local -i max_freq=-1\n    local -i freq_val\n    local\
    \ -i val\n    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n     \
    \   val=${arr[$i]}\n        freq[$val]=$((freq[$val]+1))\n    done\n    for ((i=0;\
    \ i<len; i++)); do\n        val=${arr[$i]}\n        freq_val=${freq[$val]}\n \
    \       if [[ $freq_val -ge $val ]] && [[ $freq_val -gt $max_freq ]]; then\n \
    \           max=$val\n            max_freq=$freq_val\n        fi\n    done\n \
    \   echo $max\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprq8z7jrs.sh: line 20: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003188
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a count\n    local -i i\n    local -i max=0\n\
    \    local -i max_count=0\n    local -i max_index=-1\n    local -i len=${#arr[@]}\n\
    \    local -i j\n\n    for ((i=0; i<len; i++)); do\n        count[${arr[$i]}]=$((count[${arr[$i]}]+1))\n\
    \    done\n\n    for ((i=0; i<len; i++)); do\n        if [[ ${count[${arr[$i]}]}\
    \ -ge ${arr[$i]} ]]; then\n            if [[ ${arr[$i]} -gt $max ]]; then\n  \
    \              max=${arr[$i]}\n                max_count=${count[${arr[$i]}]}\n\
    \                max_index=$i\n            fi\n        fi\n    done\n\n    if\
    \ [[ $max_index -eq -1 ]]; then\n        echo -1\n    else\n        echo $max\n\
    \    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003188
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=\"$1\"\n    local max=0\n    local result=-1\n    for i in $list;\
    \ do\n        if [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n\
    \    for i in $(seq 1 $max); do\n        local count=0\n        for j in $list;\
    \ do\n            if [ $i -eq $j ]; then\n                count=$((count+1))\n\
    \            fi\n        done\n        if [ $count -ge $i ]; then\n          \
    \  result=$i\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n   \
    \ search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\")\
    \ = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local -i i=0\n    local -i\
    \ j=0\n    local -i max=0\n    local -i max_freq=0\n    local -i freq_val=0\n\
    \    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        freq[${arr[$i]}]=$((freq[${arr[$i]}]+1))\n\
    \    done\n    for ((i=0; i<len; i++)); do\n        freq_val=${freq[${arr[$i]}]}\n\
    \        if [[ $freq_val -ge ${arr[$i]} ]]; then\n            if [[ $freq_val\
    \ -gt $max_freq ]]; then\n                max_freq=$freq_val\n               \
    \ max=${arr[$i]}\n            elif [[ $freq_val -eq $max_freq ]]; then\n     \
    \           if [[ ${arr[$i]} -gt $max ]]; then\n                    max=${arr[$i]}\n\
    \                fi\n            fi\n        fi\n    done\n    if [[ $max -gt\
    \ 0 ]]; then\n        echo $max\n    else\n        echo -1\n    fi\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2nbp88xj.sh: line 19: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003188
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=(0)\n    local max=0\n    local i=0\n \
    \   local j=0\n    local result=-1\n    for i in \"${arr[@]}\"; do\n        if\
    \ [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n    for ((i=0;\
    \ i<=max; i++)); do\n        freq[$i]=0\n    done\n    for i in \"${arr[@]}\"\
    ; do\n        freq[$i]=$((freq[$i]+1))\n    done\n    for ((i=max; i>=0; i--));\
    \ do\n        if [ ${freq[$i]} -ge $i ]; then\n            result=$i\n       \
    \     break\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq\n    local i\n    local max=0\n   \
    \ local result=-1\n    for ((i=0; i<${#arr[@]}; i++)); do\n        ((freq[${arr[$i]}]++))\n\
    \        ((max<${arr[$i]})) && max=${arr[$i]}\n    done\n    for ((i=1; i<=max;\
    \ i++)); do\n        ((freq[$i]<i)) && continue\n        ((result<i)) && result=$i\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp92wk6qrj.sh: line 16: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003188
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=$1\n    local max=0\n    local max_freq=0\n    local freq=0\n   \
    \ local num=0\n    for num in $list; do\n        if [[ $num -gt $max ]]; then\n\
    \            max=$num\n        fi\n    done\n    for num in $list; do\n      \
    \  if [[ $num -eq $max ]]; then\n            ((max_freq++))\n        fi\n    done\n\
    \    if [[ $max_freq -ge $max ]]; then\n        echo $max\n    else\n        echo\
    \ -1\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4\
    \ 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003188
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a list=($1)\n    local -a count=($(echo \"${list[@]}\" | tr ' ' '\\n'\
    \ | sort | uniq -c | tr -s ' ' | cut -d ' ' -f 2,1))\n    local -i max=0\n   \
    \ local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local\
    \ -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n\
    \    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local\
    \ -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\
    \    local -i aa=0\n    local -i ab=0\n    local -i ac=0\n    local -i ad=0\n\
    \    local -i ae=0\n    local -i af=0\n    local -i ag=0\n    local -i ah=0\n\
    \    local -i ai=0\n    local -i aj=0\n    local -i ak=0\n    local -i al=0\n\
    \    local -i am=0\n    local -i an=0\n    local -i ao=0\n    local -i ap=0\n\
    \    local -i aq=0\n    local -i ar=0\n    local -i as=0\n    local -i at=0\n\
    \    local -i au=0\n    local -i av=0\n    local -i aw=0\n    local -i ax=0\n\
    \    local -i ay=0\n    local -i az=0\n    local -i ba=0\n    local -i bb=0\n\
    \    local -i bc=0\n    local -i bd=0\n    local -i be=0\n    local -i bf=0\n\
    \    local -i bg=0\n    local -i bh=0\n    local -i bi=0\n    local -i bj=0\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003188
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n  local\
    \ -a arr=(\"$@\")\n  local -A freq\n  local -i i\n  local -i max=0\n  local -i\
    \ res=-1\n  for i in \"${arr[@]}\"; do\n    (( freq[i]++ ))\n    (( i > max ))\
    \ && max=$i\n  done\n  for (( i=1; i<=max; i++ )); do\n    (( freq[i] >= i ))\
    \ && res=$i\n  done\n  echo $res\n}\n\ncandidate() {\n    search \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpc2zp9j0w.sh: line 15: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003188
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n  local\
    \ -a arr=(\"$@\")\n  local -a freq\n  local -i max=0\n  local -i i=0\n  local\
    \ -i j=0\n  local -i len=${#arr[@]}\n  local -i res=-1\n\n  for ((i=0; i<len;\
    \ i++)); do\n    ((freq[arr[i]]++))\n    ((max<arr[i])) && max=arr[i]\n  done\n\
    \n  for ((i=1; i<=max; i++)); do\n    ((freq[i]>=i)) && ((res<i)) && res=i\n \
    \ done\n\n  echo $res\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsoai_z4r.sh: line 19: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003188
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a array=($1)\n    local -a counts\n    local -i max=0\n    local -i i\n\
    \    local -i j\n    local -i count\n    local -i result=-1\n\n    for ((i=0;\
    \ i<${#array[@]}; i++)); do\n        if [[ ${array[$i]} -gt $max ]]; then\n  \
    \          max=${array[$i]}\n        fi\n    done\n\n    for ((i=0; i<=$max; i++));\
    \ do\n        counts[$i]=0\n    done\n\n    for ((i=0; i<${#array[@]}; i++));\
    \ do\n        ((counts[${array[$i]}]++))\n    done\n\n    for ((i=0; i<=max; i++));\
    \ do\n        if [[ ${counts[$i]} -ge $i ]]; then\n            result=$i\n   \
    \     fi\n    done\n\n    echo $result\n}\n\ncandidate() {\n    search \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[\
    \ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"\
    2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7\
    \ 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n   \
    \ [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"\
    8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10\
    \ 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=()\n    local -i i=0\n    local -i j=0\n\
    \    local -i max=0\n    local -i max_freq=0\n    local -i freq_value=0\n    local\
    \ -i freq_value_freq=0\n    local -i len=${#arr[@]}\n    local -i value=0\n  \
    \  local -i value_freq=0\n    local -i value_freq_value=0\n    local -i value_freq_value_freq=0\n\
    \    local -i value_freq_value_freq_value=0\n    local -i value_freq_value_freq_value_freq=0\n\
    \    local -i value_freq_value_freq_value_freq_value=0\n    local -i value_freq_value_freq_value_freq_value_freq=0\n\
    \    local -i value_freq_value_freq_value_freq_value_freq_value=0\n    local -i\
    \ value_freq_value_freq_value_freq_value_freq_value_freq=0\n    local -i value_freq_value_freq_value_freq_value_freq_value_freq_value=0\n\
    \    local -i value_freq_value_freq_value_freq_value_freq_value_freq_value_freq=0\n\
    \    local -i value_freq_value_freq_value_freq_value_freq_value_freq_value_freq_value=0\n\
    \    local -i value_freq_value_freq_value_freq_value_freq_value_freq_value_freq_value_freq=0\n\
    \    local -i value_freq_value_freq_value_freq_value_freq_value_freq_value_freq_value_freq_value=0\n\
    \    local -i value_freq_value_freq_value_freq_value_freq_value_freq_value_freq\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n  local\
    \ -a arr=(\"$@\")\n  local -a freq=()\n  local -a result=()\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local max=0\n  local max_freq=0\n  local max_freq_index=0\n\
    \  local freq_index=0\n  local freq_value=0\n  local freq_value_index=0\n  local\
    \ result_index=0\n  local result_value=0\n  local result_value_index=0\n  local\
    \ result_value_freq=0\n  local result_value_freq_index=0\n  local result_value_freq_value=0\n\
    \  local result_value_freq_value_index=0\n  local result_value_freq_value_freq=0\n\
    \  local result_value_freq_value_freq_index=0\n  local result_value_freq_value_freq_value=0\n\
    \  local result_value_freq_value_freq_value_index=0\n  local result_value_freq_value_freq_value_freq=0\n\
    \  local result_value_freq_value_freq_value_freq_index=0\n  local result_value_freq_value_freq_value_freq_value=0\n\
    \  local result_value_freq_value_freq_value_freq_value_index=0\n  local result_value_freq_value_freq_value_freq_value_freq=0\n\
    \  local result_value_freq_value_freq_value_freq_value_freq_index=0\n  local result_value_freq_value_freq_value_freq_value_freq_value=0\n\
    \  local result_value_freq_value_freq_value_freq_value_freq_value_index=0\n  local\
    \ result_value_freq_value_freq_value_freq_value_freq_value_freq=0\n  local result_value_freq_value_freq_value_freq_value_freq_value\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' |\
    \ sort | uniq -c | awk '{print $1}'))\n    local -a uniq=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq -c | awk '{print $2}'))\n    local -a result=()\n\
    \    for ((i=0; i<${#uniq[@]}; i++)); do\n        if [[ ${freq[$i]} -ge ${uniq[$i]}\
    \ ]]; then\n            result+=(${uniq[$i]})\n        fi\n    done\n    if [[\
    \ ${#result[@]} -eq 0 ]]; then\n        echo -1\n    else\n        echo ${result[@]}\
    \ | tr ' ' '\\n' | sort -nr | head -n1\n    fi\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003191
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local max=0\n    for i in \"\
    ${arr[@]}\"; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n    \
    \    fi\n        if [[ -z ${freq[$i]} ]]; then\n            freq[$i]=1\n     \
    \   else\n            freq[$i]=$((freq[$i]+1))\n        fi\n    done\n    for\
    \ i in $(seq 0 $max); do\n        if [[ ${freq[$i]} -ge $i ]]; then\n        \
    \    echo $i\n            return\n        fi\n    done\n    echo -1\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxi71r9d5.sh: line 14: [[: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    /tmp/tmpxi71r9d5.sh: line 17: 5 5 5 5 1: syntax error in expression (error token
    is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003189
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' |\
    \ sort | uniq -c | awk '{print $1}'))\n    local -a nums=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq))\n    local -a res=()\n    for ((i=0; i<${#nums[@]};\
    \ i++)); do\n        if [[ ${nums[$i]} -le ${freq[$i]} ]]; then\n            res+=(${nums[$i]})\n\
    \        fi\n    done\n    if [[ ${#res[@]} -eq 0 ]]; then\n        echo -1\n\
    \    else\n        echo \"${res[@]}\" | tr ' ' '\\n' | sort -nr | head -n1\n \
    \   fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003191
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local -i max=0\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i len=${#arr[@]}\n    local\
    \ -i res=-1\n\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[$i]} -gt max\
    \ ]]; then\n            max=${arr[$i]}\n        fi\n    done\n\n    for ((i=0;\
    \ i<max; i++)); do\n        freq[$i]=0\n    done\n\n    for ((i=0; i<len; i++));\
    \ do\n        freq[${arr[$i]}-1]=$((freq[${arr[$i]}-1]+1))\n    done\n\n    for\
    \ ((i=0; i<max; i++)); do\n        if [[ ${freq[$i]} -ge $((i+1)) ]]; then\n \
    \           res=$((i+1))\n        fi\n    done\n\n    echo $res\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7naue9un.sh: line 20: [[: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    /tmp/tmp7naue9un.sh: line 30: 5 5 5 5 1-1: syntax error in expression (error token
    is "5 5 5 1-1")

    '
  stdout: ''
  timestamp: 1660003189
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=$1\n    local max=0\n    local result=-1\n    for i in $list; do\n\
    \        if [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n\
    \    for i in $(seq 1 $max); do\n        local count=0\n        for j in $list;\
    \ do\n            if [ $i -eq $j ]; then\n                count=$((count+1))\n\
    \            fi\n        done\n        if [ $count -ge $i ]; then\n          \
    \  result=$i\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n   \
    \ search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\")\
    \ = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003187
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local -i max=0\n    local -i\
    \ i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    local -i max_freq=0\n\
    \    local -i max_freq_val=0\n    local -i max_val=0\n    local -i max_val_freq=0\n\
    \    local -i val=0\n    local -i freq_val=0\n    local -i freq_val_freq=0\n \
    \   local -i freq_val_freq_val=0\n    local -i freq_val_freq_val_freq=0\n    local\
    \ -i freq_val_freq_val_freq_val=0\n    local -i freq_val_freq_val_freq_val_freq=0\n\
    \    local -i freq_val_freq_val_freq_val_freq_val=0\n    local -i freq_val_freq_val_freq_val_freq_val_freq=0\n\
    \    local -i freq_val_freq_val_freq_val_freq_val_freq_val=0\n    local -i freq_val_freq_val_freq_val_freq_val_freq_val_freq=0\n\
    \    local -i freq_val_freq_val_freq_val_freq_val_freq_val_freq_val=0\n    local\
    \ -i freq_val_freq_val_freq_val_freq_val_freq_val_freq_val_freq=0\n    local -i\
    \ freq_val_freq_val_freq_val_freq_val_freq_val_freq_val_freq_val=0\n    local\
    \ -i freq_val_freq_val_freq_val_freq_val_freq_val_freq_val_freq_val_freq=0\n \
    \   local -i freq_val_freq_val_\n}\n\ncandidate() {\n    search \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' |\
    \ sort | uniq -c | awk '{print $1}'))\n    local -a nums=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq))\n    local max=0\n    for i in ${!nums[@]}; do\n\
    \        if [[ ${nums[$i]} -le ${freq[$i]} ]]; then\n            if [[ ${nums[$i]}\
    \ -gt $max ]]; then\n                max=${nums[$i]}\n            fi\n       \
    \ fi\n    done\n    if [[ $max -eq 0 ]]; then\n        echo -1\n    else\n   \
    \     echo $max\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003191
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local -a freq\n   \
    \ local max=0\n    for i in \"${arr[@]}\"; do\n        ((freq[i]++))\n       \
    \ ((i > max)) && max=$i\n    done\n    for ((i=max; i>0; i--)); do\n        ((freq[i]\
    \ >= i)) && echo $i && return\n    done\n    echo -1\n}\n\ncandidate() {\n   \
    \ search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\")\
    \ = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local -i i=0\n    local -i\
    \ j=0\n    local -i max=0\n    local -i max_freq=0\n    local -i freq_i=0\n  \
    \  local -i freq_j=0\n    local -i freq_max=0\n    local -i freq_max_freq=0\n\
    \    local -i len=${#arr[@]}\n    local -i len_freq=0\n    local -i ret=-1\n \
    \   local -i ret_freq=-1\n    local -i tmp=0\n    local -i tmp_freq=0\n    local\
    \ -i tmp_freq_i=0\n    local -i tmp_freq_j=0\n    local -i tmp_freq_max=0\n  \
    \  local -i tmp_freq_max_freq=0\n    local -i tmp_max=0\n    local -i tmp_max_freq=0\n\
    \    local -i tmp_ret=-1\n    local -i tmp_ret_freq=-1\n    local -i tmp_len=0\n\
    \    local -i tmp_len_freq=0\n    local -i tmp_freq_len=0\n    local -i tmp_freq_len_freq=0\n\
    \    local -i tmp_freq_max_len=0\n    local -i tmp_freq_max_len_freq=0\n    local\
    \ -i tmp_freq_max_freq_len=0\n    local -i tmp_freq_max_freq_len_freq=0\n    local\
    \ -i tmp_max_len=0\n    local -i tmp_max_len_freq=0\n    local -i tmp_max_freq_len=0\n\
    \    local -i tmp_max_freq_len_freq=0\n    local -i tmp_ret_len=0\n    local -i\
    \ tmp_ret_len_freq=0\n    local -i tmp_ret_freq_len=0\n    local -i tmp_ret_freq_len_freq=0\n\
    \    local\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4\
    \ 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: -1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n  local\
    \ list=$1\n  local max=0\n  local max_freq=0\n  local freq=0\n  local num=0\n\
    \  for num in $list; do\n    freq=$(echo $list | tr ' ' '\\n' | grep -c \"^$num$\"\
    )\n    if [ $freq -ge $num ]; then\n      if [ $freq -gt $max_freq ]; then\n \
    \       max=$num\n        max_freq=$freq\n      elif [ $freq -eq $max_freq ] &&\
    \ [ $num -gt $max ]; then\n        max=$num\n      fi\n    fi\n  done\n  if [\
    \ $max -eq 0 ]; then\n    echo -1\n  else\n    echo $max\n  fi\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003194
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local -i max=0\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i len=${#arr[@]}\n    local\
    \ -i tmp=0\n    for ((i=0; i<len; i++)); do\n        tmp=${arr[$i]}\n        if\
    \ ((tmp > max)); then\n            max=$tmp\n        fi\n    done\n    for ((i=0;\
    \ i<max; i++)); do\n        freq[$i]=0\n    done\n    for ((i=0; i<len; i++));\
    \ do\n        tmp=${arr[$i]}\n        ((freq[tmp-1]++))\n    done\n    for ((i=max-1;\
    \ i>=0; i--)); do\n        if ((freq[i] >= i+1)); then\n            echo $((i+1))\n\
    \            return\n        fi\n    done\n    echo -1\n}\n\ncandidate() {\n \
    \   search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyhjp6sx2.sh: line 19: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003189
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' |\
    \ sort | uniq -c | awk '{print $1}'))\n    local -a nums=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq -c | awk '{print $2}'))\n    local max=0\n    for\
    \ ((i=0; i<${#nums[@]}; i++)); do\n        if [[ ${nums[$i]} -le ${freq[$i]} ]];\
    \ then\n            if [[ ${nums[$i]} -gt $max ]]; then\n                max=${nums[$i]}\n\
    \            fi\n        fi\n    done\n    if [[ $max -eq 0 ]]; then\n       \
    \ echo -1\n    else\n        echo $max\n    fi\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003191
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=$1\n    local max=0\n    local max_count=0\n    local count=0\n \
    \   local num=0\n    for num in $list; do\n        if [ $num -gt $max ]; then\n\
    \            max=$num\n        fi\n    done\n    for num in $list; do\n      \
    \  if [ $num -eq $max ]; then\n            max_count=$((max_count+1))\n      \
    \  fi\n    done\n    for num in $list; do\n        count=0\n        for n in $list;\
    \ do\n            if [ $num -eq $n ]; then\n                count=$((count+1))\n\
    \            fi\n        done\n        if [ $count -ge $num ] && [ $num -gt $max_count\
    \ ]; then\n            max_count=$num\n        fi\n    done\n    if [ $max_count\
    \ -eq 0 ]; then\n        echo -1\n    else\n        echo $max_count\n    fi\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ # sort the list\n    local sorted=$(echo $1 | tr ' ' '\\n' | sort -n)\n    #\
    \ count the frequency of each number\n    local counts=$(echo $sorted | tr ' '\
    \ '\\n' | uniq -c | tr ' ' '\\n')\n    # find the greatest number that has a frequency\
    \ greater than or equal to the value of the integer itself\n    local max=0\n\
    \    for i in $counts; do\n        if [ $i -gt $max ]; then\n            max=$i\n\
    \        fi\n    done\n    local result=-1\n    for i in $counts; do\n       \
    \ if [ $i -eq $max ]; then\n            result=$i\n        fi\n    done\n    echo\
    \ $result\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4\
    \ 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=(0)\n    local max=0\n    local i=0\n \
    \   local j=0\n    local res=-1\n    for i in \"${arr[@]}\"; do\n        if [\
    \ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n    for i in\
    \ \"${arr[@]}\"; do\n        freq[$i]=$((freq[$i]+1))\n    done\n    for ((i=1;\
    \ i<=max; i++)); do\n        if [ ${freq[$i]} -ge $i ]; then\n            res=$i\n\
    \        fi\n    done\n    echo $res\n}\n\ncandidate() {\n    search \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[\
    \ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"\
    2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7\
    \ 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n   \
    \ [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"\
    8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10\
    \ 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /tmp/tmp8cugib4d.sh: line 25: [: -ge: unary operator expected

    /t'
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=(0)\n    local max=0\n    local i=0\n \
    \   local j=0\n    local result=-1\n    for i in \"${arr[@]}\"; do\n        if\
    \ [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n    for ((i=0;\
    \ i<=max; i++)); do\n        freq[$i]=0\n    done\n    for i in \"${arr[@]}\"\
    ; do\n        freq[$i]=$((freq[$i]+1))\n    done\n    for ((i=max; i>=0; i--));\
    \ do\n        if [ ${freq[$i]} -ge $i ]; then\n            result=$i\n       \
    \     break\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=$1\n    local max=0\n    local max_freq=0\n    local freq=0\n   \
    \ local i=0\n    local j=0\n    local num=0\n    local num_freq=0\n    for i in\
    \ $list; do\n        num=$i\n        num_freq=0\n        for j in $list; do\n\
    \            if [ $j -eq $num ]; then\n                num_freq=$((num_freq+1))\n\
    \            fi\n        done\n        if [ $num_freq -ge $num ]; then\n     \
    \       if [ $num_freq -gt $max_freq ]; then\n                max=$num\n     \
    \           max_freq=$num_freq\n            elif [ $num_freq -eq $max_freq ];\
    \ then\n                if [ $num -gt $max ]; then\n                    max=$num\n\
    \                    max_freq=$num_freq\n                fi\n            fi\n\
    \        fi\n    done\n    if [ $max_freq -eq 0 ]; then\n        echo -1\n   \
    \ else\n        echo $max\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: -1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=$1\n    local num\n    local freq\n    local max_num=-1\n    local\
    \ max_freq=-1\n    for num in $list; do\n        freq=$(echo \"$list\" | tr '\
    \ ' '\\n' | grep -c \"^$num$\")\n        if [ $freq -ge $num ] && [ $freq -gt\
    \ $max_freq ]; then\n            max_num=$num\n            max_freq=$freq\n  \
    \      fi\n    done\n    echo $max_num\n}\n\ncandidate() {\n    search \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[\
    \ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"\
    2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7\
    \ 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n   \
    \ [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"\
    8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10\
    \ 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003194
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n  local\
    \ -a arr=($1)\n  local -a freq\n  local i\n  local max=0\n  local max_freq=0\n\
    \  local max_freq_val=0\n  local val\n  for i in \"${arr[@]}\"; do\n    if [[\
    \ $i -gt $max ]]; then\n      max=$i\n    fi\n    (( freq[$i]++ ))\n  done\n \
    \ for i in \"${!freq[@]}\"; do\n    if [[ ${freq[$i]} -ge $i ]]; then\n      if\
    \ [[ ${freq[$i]} -gt $max_freq ]]; then\n        max_freq=${freq[$i]}\n      \
    \  max_freq_val=$i\n      fi\n    fi\n  done\n  if [[ $max_freq_val -gt 0 ]];\
    \ then\n    echo $max_freq_val\n  else\n    echo -1\n  fi\n}\n\ncandidate() {\n\
    \    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -n arr=$1\n    local -n freq=$2\n    local -n max=$3\n    local -n max_freq=$4\n\
    \    local -n max_freq_val=$5\n    local -n max_freq_val_freq=$6\n    local -n\
    \ max_freq_val_freq_val=$7\n    local -n max_freq_val_freq_val_freq=$8\n    local\
    \ -n max_freq_val_freq_val_freq_val=$9\n    local -n max_freq_val_freq_val_freq_val_freq=${10}\n\
    \    local -n max_freq_val_freq_val_freq_val_freq_val=${11}\n    local -n max_freq_val_freq_val_freq_val_freq_val_freq=${12}\n\
    \    local -n max_freq_val_freq_val_freq_val_freq_val_freq_val=${13}\n    local\
    \ -n max_freq_val_freq_val_freq_val_freq_val_freq_val_freq=${14}\n    local -n\
    \ max_freq_val_freq_val_freq_val_freq_val_freq_val_freq_val=${15}\n    local -n\
    \ max_freq_val_freq_val_freq_val_freq_val_freq_val_freq_val_freq=${16}\n    local\
    \ -n max_freq_val_freq_val_freq_val_freq_val_freq_val_freq_val_freq_val=${17}\n\
    \    local -n max_freq_val_freq_val_freq_val_freq_val_freq_val_freq_val_freq_val_freq=${18}\n\
    \    local -n max_freq_val_freq_val_freq_val_freq_val_freq_val_freq_val_freq_val_freq_\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7guew6y5.sh: line 10: local: `5 5 5 5 1'': invalid variable name
    for name reference

    /tmp/tmp7guew6y5.sh: line 11: local: `'': not a valid identifier

    /tmp/tmp7guew6y5.sh: line 12: local: `'': not a valid identifier

    /tmp/tmp7guew6y5.sh: line 13: local: `'': not a valid identifier

    /tmp/tmp7guew6y5.sh: line 14: local: `'': not a valid identifier

    /tmp/tmp7guew6y5.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp7guew6y5.sh: line 16: local: `'': not a valid identifier

    /tmp/tmp7guew6y5.sh: line 17: local: `'': not a valid identifier

    /tmp/tmp7guew6y5.sh: line 18: local: `'': not a valid identifier

    /tmp/tmp7guew6y5.sh: line 19: local: `'': not a valid identifier

    /tmp/tmp7guew6y5.sh: line 20: local: `'': not a valid identifier

    /tmp/tmp7guew6y5.sh: line 21: local: `'': not a valid identifier

    /tmp/tmp7guew6y5.sh: line 22: local: `'': not a valid identifier

    /tmp/tmp7guew6y5.sh: line 23: local: `'': not a valid identifier

    /tmp/tmp7guew6y5.sh: line 24: local: `'': not a valid identifier

    /tmp/tmp7guew6y5.sh: line 25: local: `'': not a valid identifier

    /tmp/tmp7guew6y5.sh: line 26: local: `'': not a valid identifier

    /tmp/tmp7guew6y5.sh: line 27: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local -a res=()\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local max=0\n    local max_i=0\n    local\
    \ max_j=0\n    local max_k=0\n    local max_freq=0\n    local max_res=0\n    local\
    \ max_res_i=0\n    local max_res_j=0\n    local max_res_k=0\n    local max_res_freq=0\n\
    \    local max_res_res=0\n    for i in \"${arr[@]}\"; do\n        freq[$i]=$((freq[$i]+1))\n\
    \    done\n    for j in \"${!freq[@]}\"; do\n        if [[ ${freq[$j]} -ge $j\
    \ ]]; then\n            res[$j]=$j\n        fi\n    done\n    for k in \"${res[@]}\"\
    ; do\n        if [[ $k -gt $max ]]; then\n            max=$k\n        fi\n   \
    \ done\n    if [[ $max -eq 0 ]]; then\n        echo -1\n    else\n        echo\
    \ $max\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnjd97dac.sh: line 28: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003189
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n  local\
    \ -a arr=($1)\n  local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort | uniq\
    \ -c | awk '{print $1}'))\n  local -a val=($(echo \"${arr[@]}\" | tr ' ' '\\n'\
    \ | sort | uniq))\n  local -a res=()\n  for ((i=0; i<${#val[@]}; i++)); do\n \
    \   if [[ ${val[$i]} -le ${freq[$i]} ]]; then\n      res+=(${val[$i]})\n    fi\n\
    \  done\n  if [[ ${#res[@]} -eq 0 ]]; then\n    echo -1\n  else\n    echo \"${res[@]}\"\
    \ | tr ' ' '\\n' | sort -nr | head -n1\n  fi\n}\n\ncandidate() {\n    search \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") =\
    \ \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003191
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a list=($1)\n    local -a freq=($(echo \"${list[@]}\" | tr ' ' '\\n'\
    \ | sort | uniq -c | awk '{print $1}'))\n    local -a nums=($(echo \"${list[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq))\n    local -a res=()\n    for (( i=0; i<${#nums[@]};\
    \ i++ )); do\n        if [[ ${nums[$i]} -le ${freq[$i]} ]]; then\n           \
    \ res+=(${nums[$i]})\n        fi\n    done\n    if [[ ${#res[@]} -eq 0 ]]; then\n\
    \        echo -1\n    else\n        echo ${res[@]} | tr ' ' '\\n' | sort -nr |\
    \ head -n1\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003191
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local -i max=0\n    local -i\
    \ i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    local -i freq_len=0\n\
    \    local -i freq_max=0\n    local -i freq_max_index=0\n    local -i freq_max_value=0\n\
    \    local -i freq_max_value_index=0\n    local -i freq_max_value_freq=0\n   \
    \ local -i freq_max_value_freq_index=0\n    local -i freq_max_value_freq_value=0\n\
    \    local -i freq_max_value_freq_value_index=0\n    local -i freq_max_value_freq_value_freq=0\n\
    \    local -i freq_max_value_freq_value_freq_index=0\n    local -i freq_max_value_freq_value_freq_value=0\n\
    \    local -i freq_max_value_freq_value_freq_value_index=0\n    local -i freq_max_value_freq_value_freq_value_freq=0\n\
    \    local -i freq_max_value_freq_value_freq_value_freq_index=0\n    local -i\
    \ freq_max_value_freq_value_freq_value_freq_value=0\n    local -i freq_max_value_freq_value_freq_value_freq_value_index=0\n\
    \    local -i freq_max_value_freq_value_freq_value_freq_value_freq=0\n    local\
    \ -i freq_max_value_freq_value_freq_value_freq_value_freq_index=0\n    local -i\
    \ freq_max_value_freq_value_freq_value_freq_value_freq_value=0\n    local -i freq_max_value_freq_value_freq\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -n arr=$1\n    local -i max=0\n    local -i count=0\n    local -i i=0\n\
    \    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        local -i\
    \ num=${arr[i]}\n        if ((num > max)); then\n            max=$num\n      \
    \  fi\n    done\n    for ((i=0; i<len; i++)); do\n        local -i num=${arr[i]}\n\
    \        if ((num == max)); then\n            count+=1\n        fi\n    done\n\
    \    if ((count >= max)); then\n        echo $max\n    else\n        echo -1\n\
    \    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp70llhg9y.sh: line 10: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n  local\
    \ -n arr=$1\n  local -i max=0\n  local -i freq=0\n  local -i i=0\n  local -i j=0\n\
    \  local -i n=${#arr[@]}\n  for ((i=0; i<n; i++)); do\n    if [[ ${arr[i]} -gt\
    \ max ]]; then\n      max=${arr[i]}\n    fi\n  done\n  for ((i=0; i<n; i++));\
    \ do\n    if [[ ${arr[i]} -eq max ]]; then\n      freq+=1\n    fi\n  done\n  if\
    \ [[ freq -ge max ]]; then\n    echo $max\n  else\n    echo -1\n  fi\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6hct32ly.sh: line 10: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -A freq\n    local -i max=0\n    for i in \"\
    ${arr[@]}\"; do\n        (( freq[$i]++ ))\n        (( max < i )) && max=$i\n \
    \   done\n    for (( i=max; i>0; i-- )); do\n        (( freq[$i] >= i )) && echo\
    \ $i && return\n    done\n    echo -1\n}\n\ncandidate() {\n    search \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[\
    \ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"\
    2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7\
    \ 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n   \
    \ [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"\
    8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10\
    \ 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz2ice745.sh: line 15: ((: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003189
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=(0)\n    local max=0\n    local result=-1\n\
    \    for i in ${arr[@]}; do\n        ((freq[i]++))\n        ((max < i)) && max=$i\n\
    \    done\n    for ((i=1; i<=max; i++)); do\n        ((freq[i] >= i)) && result=$i\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -n arr=$1\n    local -A freq\n    local max_freq=0\n    local max_freq_val=0\n\
    \    local max_val=0\n    for i in \"${arr[@]}\"; do\n        ((freq[$i]++))\n\
    \        ((max_val<i)) && max_val=$i\n        ((max_freq<freq[$i])) && max_freq=$freq[$i]\n\
    \    done\n    for i in \"${!freq[@]}\"; do\n        ((freq[$i]==max_freq)) &&\
    \ max_freq_val=$i\n    done\n    ((max_freq_val>=max_val)) && echo $max_freq_val\
    \ || echo -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4\
    \ 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphll4n4vv.sh: line 10: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local -i max=0\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i len=${#arr[@]}\n    local\
    \ -i res=-1\n\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[$i]} -gt max\
    \ ]]; then\n            max=${arr[$i]}\n        fi\n    done\n\n    for ((i=0;\
    \ i<=max; i++)); do\n        freq[$i]=0\n    done\n\n    for ((i=0; i<len; i++));\
    \ do\n        freq[${arr[$i]}]=$((freq[${arr[$i]}]+1))\n    done\n\n    for ((i=max;\
    \ i>=0; i--)); do\n        if [[ ${freq[$i]} -ge $i ]]; then\n            res=$i\n\
    \            break\n        fi\n    done\n\n    echo $res\n}\n\ncandidate() {\n\
    \    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7jvdhl2s.sh: line 20: [[: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    /tmp/tmp7jvdhl2s.sh: line 30: 5 5 5 5 1: syntax error in expression (error token
    is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003189
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' |\
    \ sort | uniq -c | awk '{print $1}'))\n    local -a nums=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq))\n    local -a result=()\n    local i=0\n    for\
    \ f in ${freq[@]}; do\n        if [ $f -ge ${nums[$i]} ]; then\n            result+=(${nums[$i]})\n\
    \        fi\n        ((i++))\n    done\n    if [ ${#result[@]} -eq 0 ]; then\n\
    \        echo -1\n    else\n        echo ${result[@]} | tr ' ' '\\n' | sort -nr\
    \ | head -n 1\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003192
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=(0)\n    local max=0\n    local i=0\n \
    \   local j=0\n    local len=${#arr[@]}\n    local result=-1\n\n    for ((i=0;\
    \ i<len; i++)); do\n        if [[ ${arr[$i]} -gt $max ]]; then\n            max=${arr[$i]}\n\
    \        fi\n    done\n\n    for ((i=0; i<max; i++)); do\n        freq[$i]=0\n\
    \    done\n\n    for ((i=0; i<len; i++)); do\n        freq[${arr[$i]}-1]=$((freq[${arr[$i]}-1]+1))\n\
    \    done\n\n    for ((i=0; i<max; i++)); do\n        if [[ ${freq[$i]} -ge $((i+1))\
    \ ]]; then\n            result=$((i+1))\n        fi\n    done\n\n    echo $result\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -n arr=$1\n    local max=0\n    local freq=0\n    for i in \"${arr[@]}\"\
    ; do\n        if [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n\
    \    for i in \"${arr[@]}\"; do\n        if [ $i -eq $max ]; then\n          \
    \  freq=$((freq+1))\n        fi\n    done\n    if [ $freq -ge $max ]; then\n \
    \       echo $max\n    else\n        echo -1\n    fi\n}\n\ncandidate() {\n   \
    \ search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\")\
    \ = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgmm__i4b.sh: line 10: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local -i max=0\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i n=${#arr[@]}\n    local\
    \ -i tmp=0\n    local -i max_freq=0\n    local -i max_freq_val=0\n    local -i\
    \ max_freq_val_freq=0\n    local -i max_freq_val_freq_val=0\n    local -i max_freq_val_freq_val_freq=0\n\
    \    local -i max_freq_val_freq_val_freq_val=0\n    local -i max_freq_val_freq_val_freq_val_freq=0\n\
    \    local -i max_freq_val_freq_val_freq_val_freq_val=0\n    local -i max_freq_val_freq_val_freq_val_freq_val_freq=0\n\
    \    local -i max_freq_val_freq_val_freq_val_freq_val_freq_val=0\n    local -i\
    \ max_freq_val_freq_val_freq_val_freq_val_freq_val_freq=0\n    local -i max_freq_val_freq_val_freq_val_freq_val_freq_val_freq_val=0\n\
    \    local -i max_freq_val_freq_val_freq_val_freq_val_freq_val_freq_val_freq=0\n\
    \    local -i max_freq_val_freq_val_freq_val_freq_val_freq_val_freq_val_freq_val=0\n\
    \    local -i max_freq_val_freq_val_freq_val_freq_val_freq_val_freq_val_freq_val_freq=0\n\
    \    local -i max_freq_val_freq_\n}\n\ncandidate() {\n    search \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=$1\n    local max=0\n    local result=-1\n    local i=0\n    local\
    \ count=0\n    local arr=($list)\n    for i in ${arr[@]}; do\n        if [ $i\
    \ -gt $max ]; then\n            max=$i\n        fi\n    done\n    for i in ${arr[@]};\
    \ do\n        if [ $i -eq $max ]; then\n            count=$((count+1))\n     \
    \   fi\n    done\n    if [ $count -ge $max ]; then\n        result=$max\n    fi\n\
    \    echo $result\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq\n    local -i max=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i n=${#arr[@]}\n    local -i res=-1\n\n    for ((i=0;\
    \ i<n; i++)); do\n        ((arr[i] > max)) && max=${arr[i]}\n    done\n\n    for\
    \ ((i=0; i<=max; i++)); do\n        freq[i]=0\n    done\n\n    for ((i=0; i<n;\
    \ i++)); do\n        ((freq[arr[i]]++))\n    done\n\n    for ((i=max; i>=0; i--));\
    \ do\n        if ((freq[i] >= i)); then\n            res=i\n            break\n\
    \        fi\n    done\n\n    echo $res\n}\n\ncandidate() {\n    search \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[\
    \ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"\
    2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7\
    \ 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n   \
    \ [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"\
    8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10\
    \ 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9ir1hbnx.sh: line 19: ((: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    /tmp/tmp9ir1hbnx.sh: line 27: 5 5 5 5 1: syntax error in expression (error token
    is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local -i i=0\n    local -i\
    \ j=0\n    local -i max=0\n    local -i freq_max=0\n    local -i len=${#arr[@]}\n\
    \    local -i freq_len=0\n    local -i index=0\n    local -i freq_index=0\n  \
    \  local -i result=-1\n\n    for ((i=0; i<len; i++)); do\n        max=${arr[i]}\n\
    \        for ((j=0; j<len; j++)); do\n            if [[ ${arr[j]} -eq $max ]];\
    \ then\n                freq[freq_len]=$max\n                ((freq_len++))\n\
    \            fi\n        done\n        if [[ $max -le $freq_len ]]; then\n   \
    \         if [[ $max -gt $result ]]; then\n                result=$max\n     \
    \       fi\n        fi\n        unset freq\n        freq_len=0\n    done\n   \
    \ echo $result\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpikb3upmm.sh: line 23: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=(0)\n    local max=0\n    local i=0\n \
    \   local j=0\n    local len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n   \
    \     if [[ ${arr[$i]} -gt $max ]]; then\n            max=${arr[$i]}\n       \
    \ fi\n    done\n    for ((i=0; i<len; i++)); do\n        ((freq[${arr[$i]}]++))\n\
    \    done\n    for ((i=1; i<=max; i++)); do\n        if [[ ${freq[$i]} -ge $i\
    \ ]]; then\n            echo $i\n            return\n        fi\n    done\n  \
    \  echo -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4\
    \ 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=$1\n    local max=0\n    local max_count=0\n    local count=0\n \
    \   local num=0\n    for num in $list; do\n        if [[ $num -gt $max ]]; then\n\
    \            max=$num\n        fi\n    done\n    for num in $list; do\n      \
    \  if [[ $num -eq $max ]]; then\n            ((max_count++))\n        fi\n   \
    \ done\n    for num in $list; do\n        count=0\n        for num2 in $list;\
    \ do\n            if [[ $num -eq $num2 ]]; then\n                ((count++))\n\
    \            fi\n        done\n        if [[ $count -ge $num ]] && [[ $count -eq\
    \ $max_count ]]; then\n            echo $num\n            return\n        fi\n\
    \    done\n    echo -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq\n    local -i i j max=0\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        ((freq[${arr[$i]}]++))\n        ((max<${arr[$i]}))\
    \ && max=${arr[$i]}\n    done\n    for ((i=1; i<=max; i++)); do\n        ((freq[$i]>=i))\
    \ && echo $i && return\n    done\n    echo -1\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu6m2i76i.sh: line 14: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003189
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' |\
    \ sort | uniq -c | awk '{print $1}'))\n    local -a uniq=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq))\n    local max=0\n    for ((i=0; i<${#uniq[@]};\
    \ i++)); do\n        if [[ ${uniq[$i]} -le ${freq[$i]} ]]; then\n            if\
    \ [[ ${uniq[$i]} -gt $max ]]; then\n                max=${uniq[$i]}\n        \
    \    fi\n        fi\n    done\n    if [[ $max -eq 0 ]]; then\n        echo -1\n\
    \    else\n        echo $max\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[\
    \ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"\
    2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7\
    \ 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n   \
    \ [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"\
    8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10\
    \ 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003191
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n  local\
    \ list=\"$1\"\n  local max=0\n  local result=-1\n  for i in $list; do\n    if\
    \ [ $i -gt $max ]; then\n      max=$i\n    fi\n  done\n  for i in $(seq 1 $max);\
    \ do\n    local count=0\n    for j in $list; do\n      if [ $i -eq $j ]; then\n\
    \        count=$((count+1))\n      fi\n    done\n    if [ $count -ge $i ]; then\n\
    \      result=$i\n    fi\n  done\n  echo $result\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003190
- exit_code: -1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=$1\n    local max=0\n    local max_freq=0\n    for i in $list; do\n\
    \        local freq=$(echo \"$list\" | tr ' ' '\\n' | grep -c \"^$i$\")\n    \
    \    if [ $freq -ge $i ] && [ $freq -ge $max_freq ]; then\n            max=$i\n\
    \            max_freq=$freq\n        fi\n    done\n    if [ $max -eq 0 ]; then\n\
    \        echo -1\n    else\n        echo $max\n    fi\n}\n\ncandidate() {\n  \
    \  search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003194
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=(0)\n    local max=0\n    local i=0\n \
    \   local j=0\n    local result=-1\n    for i in \"${arr[@]}\"; do\n        if\
    \ [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n    for ((i=0;\
    \ i<=max; i++)); do\n        freq[$i]=0\n    done\n    for i in \"${arr[@]}\"\
    ; do\n        freq[$i]=$((freq[$i]+1))\n    done\n    for ((i=max; i>=0; i--));\
    \ do\n        if [ ${freq[$i]} -ge $i ]; then\n            result=$i\n       \
    \     break\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003186
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq\n    local -i max=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i n=${#arr[@]}\n    local -i res=-1\n\
    \n    for ((i=0; i<n; i++)); do\n        ((arr[i] > max)) && max=${arr[i]}\n \
    \   done\n\n    for ((i=0; i<=max; i++)); do\n        freq[i]=0\n    done\n\n\
    \    for ((i=0; i<n; i++)); do\n        ((freq[arr[i]]++))\n    done\n\n    for\
    \ ((i=max; i>=0; i--)); do\n        if ((freq[i] >= i)); then\n            res=i\n\
    \            break\n        fi\n    done\n\n    echo $res\n}\n\ncandidate() {\n\
    \    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbi0leb0u.sh: line 20: ((: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    /tmp/tmpbi0leb0u.sh: line 28: 5 5 5 5 1: syntax error in expression (error token
    is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local -i max=0\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i len=${#arr[@]}\n    local\
    \ -i val=0\n    local -i freq_val=0\n    local -i freq_val_idx=0\n    local -i\
    \ freq_val_count=0\n    local -i freq_val_count_idx=0\n    local -i freq_val_count_count=0\n\
    \    local -i freq_val_count_count_idx=0\n    local -i freq_val_count_count_count=0\n\
    \    local -i freq_val_count_count_count_idx=0\n    local -i freq_val_count_count_count_count=0\n\
    \    local -i freq_val_count_count_count_count_idx=0\n    local -i freq_val_count_count_count_count_count=0\n\
    \    local -i freq_val_count_count_count_count_count_idx=0\n    local -i freq_val_count_count_count_count_count_count=0\n\
    \    local -i freq_val_count_count_count_count_count_count_idx=0\n    local -i\
    \ freq_val_count_count_count_count_count_count_count=0\n    local -i freq_val_count_count_count_count_count_count_count_idx=0\n\
    \    local -i freq_val_count_count_count_count_count_count_count_count=0\n   \
    \ local -i freq_val_count_count_count_count_count_count_count_count_idx=0\n  \
    \  local -i freq_val_count_count_count_count_count_count_count_count_count=0\n\
    \    local -i freq_val_count_count_count_count_count_count_count_count_count_idx=0\n\
    \    local -i freq_val\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003189
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' |\
    \ sort | uniq -c | awk '{print $1}'))\n    local -a uniq=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq))\n    local -a res=()\n    for ((i=0; i<${#uniq[@]};\
    \ i++)); do\n        if [[ ${uniq[$i]} -eq ${freq[$i]} ]]; then\n            res+=(${uniq[$i]})\n\
    \        fi\n    done\n    if [[ ${#res[@]} -eq 0 ]]; then\n        echo -1\n\
    \    else\n        echo ${res[@]} | tr ' ' '\\n' | sort -nr | head -n1\n    fi\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003190
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' |\
    \ sort | uniq -c | awk '{print $1}'))\n    local -a val=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq))\n    local -a result=($(for ((i=0; i<${#val[@]};\
    \ i++)); do\n        if [[ ${val[$i]} -le ${freq[$i]} ]]; then\n            echo\
    \ ${val[$i]}\n        fi\n    done))\n    if [[ ${#result[@]} -eq 0 ]]; then\n\
    \        echo -1\n    else\n        echo ${result[@]} | tr ' ' '\\n' | sort -nr\
    \ | head -n1\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003192
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' |\
    \ sort | uniq -c | awk '{print $1}'))\n    local -a nums=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq))\n    local -i i=0\n    local -i j=0\n    local\
    \ -i max=-1\n    local -i max_i=-1\n    for i in ${!nums[@]}; do\n        if [[\
    \ ${freq[$i]} -ge ${nums[$i]} ]]; then\n            if [[ ${nums[$i]} -gt $max\
    \ ]]; then\n                max=${nums[$i]}\n                max_i=$i\n      \
    \      fi\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003192
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -A freq\n    local max=0\n    for i in $1; do\n        ((freq[$i]++))\n\
    \        ((max<i)) && max=$i\n    done\n    for ((i=max; i>0; i--)); do\n    \
    \    ((freq[$i]>=i)) && echo $i && return\n    done\n    echo -1\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003190
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -i max=0\n    local -i i=0\n    local -i j=0\n\
    \    local -i count=0\n    local -i max_count=0\n    local -i max_count_value=0\n\
    \    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        if ((arr[i]\
    \ > max)); then\n            max=${arr[i]}\n        fi\n    done\n    for ((i=0;\
    \ i<len; i++)); do\n        count=0\n        for ((j=0; j<len; j++)); do\n   \
    \         if ((arr[i] == arr[j])); then\n                count=$((count+1))\n\
    \            fi\n        done\n        if ((count >= arr[i]) && ((count > max_count)));\
    \ then\n            max_count=${count}\n            max_count_value=${arr[i]}\n\
    \        fi\n    done\n    if ((max_count_value > 0)); then\n        echo ${max_count_value}\n\
    \    else\n        echo -1\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpin61gi90.sh: line 30: count: command not found

    /tmp/tmpin61gi90.sh: line 30: count: command not found

    /tmp/tmpin61gi90.sh: line 30: count: command not found

    /tmp/tmpin61gi90.sh: line 30: count: command not found

    /tmp/tmpin61gi90.sh: line 30: count: command not found

    '
  stdout: ''
  timestamp: 1660003190
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' |\
    \ sort | uniq -c | awk '{print $1}'))\n    local -a nums=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq))\n    local -a result=($(echo \"${freq[@]}\" |\
    \ tr ' ' '\\n' | sort -nr))\n    local -a res=($(echo \"${nums[@]}\" | tr ' '\
    \ '\\n' | sort -nr))\n    local i=0\n    for n in ${result[@]}; do\n        if\
    \ [[ ${res[$i]} -le $n ]]; then\n            echo ${res[$i]}\n            return\n\
    \        fi\n        ((i++))\n    done\n    echo -1\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003191
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=()\n    local -a result=()\n    local max=0\n\
    \    local i=0\n    local j=0\n    local k=0\n    local len=${#arr[@]}\n    local\
    \ len2=0\n    local len3=0\n    local found=0\n    local found2=0\n    local found3=0\n\
    \    local -i count=0\n    local -i count2=0\n    local -i count3=0\n    local\
    \ -i max_freq=0\n    local -i max_freq2=0\n    local -i max_freq3=0\n    local\
    \ -i max_freq_index=0\n    local -i max_freq_index2=0\n    local -i max_freq_index3=0\n\
    \    local -i max_freq_index4=0\n    local -i max_freq_index5=0\n    local -i\
    \ max_freq_index6=0\n    local -i max_freq_index7=0\n    local -i max_freq_index8=0\n\
    \    local -i max_freq_index9=0\n    local -i max_freq_index10=0\n    local -i\
    \ max_freq_index11=0\n    local -i max_freq_index12=0\n    local -i max_freq_index13=0\n\
    \    local -i max_freq_index14=0\n    local -i max_freq_index15=0\n    local -i\
    \ max_freq_index16=0\n    local -i max_freq_index17=0\n    local -i max_freq_index18=0\n\
    \    local -i max_freq_index19=0\n    local -i max_freq_index20=0\n    local -i\
    \ max_freq_index21=0\n    local -i max_freq_index22=0\n    local -i max_freq_index23=0\n\
    \    local -i max_freq_index24=0\n    local -i max_freq_index25=0\n    local -i\
    \ max\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") =\
    \ \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8\
    \ 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10\
    \ 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n\
    \    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003190
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -n arr=$1\n    local -i max=0\n    local -i count=0\n    local -i i=0\n\
    \    local -i j=0\n    for i in \"${arr[@]}\"; do\n        if (( i > max )); then\n\
    \            max=$i\n        fi\n    done\n    for (( i=1; i<=max; i++ )); do\n\
    \        count=0\n        for j in \"${arr[@]}\"; do\n            if (( j == i\
    \ )); then\n                (( count++ ))\n            fi\n        done\n    \
    \    if (( count >= i )); then\n            echo $i\n            return\n    \
    \    fi\n    done\n    echo -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptklg5077.sh: line 10: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003190
- exit_code: -1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local list=$1\n    local max=0\n    local max_freq=0\n    local freq=0\n   \
    \ local num=0\n    for num in $list; do\n        freq=$(echo \"$list\" | tr '\
    \ ' '\\n' | grep -c \"^$num$\")\n        if [ $freq -ge $num ]; then\n       \
    \     if [ $freq -gt $max_freq ]; then\n                max=$num\n           \
    \     max_freq=$freq\n            fi\n        fi\n    done\n    if [ $max -gt\
    \ 0 ]; then\n        echo $max\n    else\n        echo -1\n    fi\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003195
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a array\n    local -i i\n    local -i max=0\n    local -i max_count=0\n\
    \    local -i count=0\n    local -i result=-1\n    IFS=' ' read -a array <<< \"\
    $1\"\n    for ((i=0; i<${#array[@]}; i++)); do\n        if [[ ${array[i]} -gt\
    \ max ]]; then\n            max=${array[i]}\n        fi\n    done\n    for ((i=1;\
    \ i<=max; i++)); do\n        count=0\n        for ((j=0; j<${#array[@]}; j++));\
    \ do\n            if [[ ${array[j]} -eq i ]]; then\n                ((count++))\n\
    \            fi\n        done\n        if [[ count -ge i ]]; then\n          \
    \  result=$i\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n   \
    \ search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\")\
    \ = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003190
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n  local\
    \ -a arr\n  local -i i\n  local -i max\n  local -i max_freq\n  local -i freq\n\
    \  local -i res\n  arr=($1)\n  max=${arr[0]}\n  max_freq=1\n  for ((i=1; i<${#arr[@]};\
    \ i++)); do\n    if [[ ${arr[i]} -gt $max ]]; then\n      max=${arr[i]}\n    \
    \  max_freq=1\n    elif [[ ${arr[i]} -eq $max ]]; then\n      ((max_freq++))\n\
    \    fi\n  done\n  res=-1\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if [[ ${arr[i]}\
    \ -eq $max ]]; then\n      ((freq++))\n    elif [[ ${arr[i]} -gt $max ]]; then\n\
    \      freq=1\n      max=${arr[i]}\n    fi\n    if [[ $freq -ge $max ]]; then\n\
    \      res=$max\n    fi\n  done\n  echo $res\n}\n\ncandidate() {\n    search \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") =\
    \ \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003190
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq\n    local -i i\n    local -i max=0\n \
    \   local -i max_freq=0\n    local -i curr_freq=0\n    local -i res=-1\n\n   \
    \ for i in ${arr[@]}; do\n        freq[$i]=$((freq[$i]+1))\n        if (( i >\
    \ max )); then\n            max=$i\n        fi\n    done\n\n    for i in $(seq\
    \ 1 $max); do\n        curr_freq=${freq[$i]}\n        if (( curr_freq >= i ));\
    \ then\n            if (( curr_freq > max_freq )); then\n                max_freq=$curr_freq\n\
    \                res=$i\n            fi\n        fi\n    done\n\n    echo $res\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003190
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a array=($1)\n    local -a freq=($(echo \"${array[@]}\" | tr ' ' '\\\
    n' | sort | uniq -c | awk '{print $1}'))\n    local -a uniq=($(echo \"${array[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq))\n    local -a result=()\n    for ((i=0; i<${#uniq[@]};\
    \ i++)); do\n        if [[ ${uniq[$i]} -le ${freq[$i]} ]]; then\n            result+=(${uniq[$i]})\n\
    \        fi\n    done\n    if [[ ${#result[@]} -eq 0 ]]; then\n        echo -1\n\
    \    else\n        echo ${result[@]} | tr ' ' '\\n' | sort -nr | head -n1\n  \
    \  fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") =\
    \ \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8\
    \ 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10\
    \ 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n\
    \    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003193
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -n list=$1\n    local -A freq\n    local max=0\n    for i in \"${list[@]}\"\
    ; do\n        ((freq[$i]++))\n        ((max < i)) && max=$i\n    done\n    for\
    \ ((i=max; i>0; i--)); do\n        [[ ${freq[$i]} -ge $i ]] && echo $i && return\n\
    \    done\n    echo -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpj0czb51m.sh: line 10: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003190
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=(0)\n    local max=0\n    local i=0\n \
    \   local j=0\n    local res=-1\n    for i in ${arr[@]}; do\n        if [ $i -gt\
    \ $max ]; then\n            max=$i\n        fi\n    done\n    for i in ${arr[@]};\
    \ do\n        freq[$i]=$((freq[$i]+1))\n    done\n    for i in ${arr[@]}; do\n\
    \        if [ ${freq[$i]} -ge $i ]; then\n            if [ $i -gt $res ]; then\n\
    \                res=$i\n            fi\n        fi\n    done\n    echo $res\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003190
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' |\
    \ sort | uniq -c | awk '{print $1}'))\n    local -a nums=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq | awk '{print $1}'))\n    local -a res=()\n   \
    \ for ((i=0; i<${#nums[@]}; i++)); do\n        if [[ ${nums[$i]} -le ${freq[$i]}\
    \ ]]; then\n            res+=(${nums[$i]})\n        fi\n    done\n    if [[ ${#res[@]}\
    \ -eq 0 ]]; then\n        echo -1\n    else\n        echo ${res[@]} | tr ' ' '\\\
    n' | sort -nr | head -n1\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003193
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=(0)\n    local max=0\n    local i=0\n \
    \   local j=0\n    local result=-1\n    for i in \"${arr[@]}\"; do\n        if\
    \ [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    for ((i=0;\
    \ i<=max; i++)); do\n        freq[$i]=0\n    done\n    for i in \"${arr[@]}\"\
    ; do\n        freq[$i]=$((freq[$i]+1))\n    done\n    for ((i=max; i>=0; i--));\
    \ do\n        if [[ ${freq[$i]} -ge $i ]]; then\n            result=$i\n     \
    \       break\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n  \
    \  search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003190
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local -i max=0\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i len=${#arr[@]}\n    local\
    \ -i freq_len=0\n    local -i max_freq=0\n    local -i max_freq_index=0\n    local\
    \ -i max_freq_value=0\n    local -i max_freq_value_index=0\n    local -i max_freq_value_index_value=0\n\
    \    local -i max_freq_value_index_value_freq=0\n    local -i max_freq_value_index_value_freq_index=0\n\
    \    local -i max_freq_value_index_value_freq_index_value=0\n    local -i max_freq_value_index_value_freq_index_value_freq=0\n\
    \    local -i max_freq_value_index_value_freq_index_value_freq_index=0\n    local\
    \ -i max_freq_value_index_value_freq_index_value_freq_index_value=0\n    local\
    \ -i max_freq_value_index_value_freq_index_value_freq_index_value_freq=0\n   \
    \ local -i max_freq_value_index_value_freq_index_value_freq_index_value_freq_index=0\n\
    \    local -i max_freq_value_index_value_freq_index_value_freq_index_value_freq_index_value=0\n\
    \    local -i max_freq_value_index_value_freq_index_value_freq_index_value_freq_index_value_freq=0\n\
    \    local -i max_freq_value_index_value_freq_index_value_freq_index_value_freq_index_value_freq_index=0\n\
    \    local -i max_freq_value_index_value_freq_index_value\n}\n\ncandidate() {\n\
    \    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003190
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -a freq=()\n    local -a result=()\n    local\
    \ max=0\n    local i=0\n    local j=0\n    local k=0\n    local n=${#arr[@]}\n\
    \    local m=0\n    local flag=0\n    local res=-1\n\n    for ((i=0; i<n; i++));\
    \ do\n        if [[ ${arr[$i]} -gt $max ]]; then\n            max=${arr[$i]}\n\
    \        fi\n    done\n\n    for ((i=0; i<=max; i++)); do\n        freq[$i]=0\n\
    \    done\n\n    for ((i=0; i<n; i++)); do\n        freq[${arr[$i]}]=$((freq[${arr[$i]}]+1))\n\
    \    done\n\n    for ((i=1; i<=max; i++)); do\n        if [[ ${freq[$i]} -ge $i\
    \ ]]; then\n            result[$j]=$i\n            j=$((j+1))\n        fi\n  \
    \  done\n\n    m=${#result[@]}\n\n    for ((i=0; i<m; i++)); do\n        for ((j=i+1;\
    \ j<m; j++)); do\n            if [[ ${result[$i]} -lt ${result[$j]} ]]; then\n\
    \                k=${result[$i]}\n                result[$i]=${result[$j]}\n \
    \               result[$j]=$k\n            fi\n        done\n    done\n\n    if\
    \ [[ $m -gt 0 ]]; then\n        res=${result[0]}\n    fi\n\n    echo $res\n}\n\
    \ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe990x8ch.sh: line 23: [[: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    /tmp/tmpe990x8ch.sh: line 33: 5 5 5 5 1: syntax error in expression (error token
    is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003190
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ for i in $1; do\n        if [ $i -gt 0 ]; then\n            count=$(echo $1\
    \ | tr ' ' '\\n' | grep -c $i)\n            if [ $count -ge $i ]; then\n     \
    \           echo $i\n                return\n            fi\n        fi\n    done\n\
    \    echo -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4\
    \ 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003193
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n  local\
    \ -a arr=($1)\n  local max=0\n  local freq=0\n  local -A freq_map\n  for i in\
    \ \"${arr[@]}\"; do\n    ((freq_map[$i]++))\n    if [[ $i -gt $max ]]; then\n\
    \      max=$i\n    fi\n  done\n  for ((i=1; i<=max; i++)); do\n    if [[ ${freq_map[$i]}\
    \ -ge $i ]]; then\n      freq=$i\n    fi\n  done\n  if [[ $freq -eq 0 ]]; then\n\
    \    echo -1\n  else\n    echo $freq\n  fi\n}\n\ncandidate() {\n    search \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") =\
    \ \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003191
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -n arr=$1\n    local -i max=0\n    local -i i=0\n    local -i j=0\n  \
    \  local -i k=0\n    local -i count=0\n    local -i len=${#arr[@]}\n    local\
    \ -i max_count=0\n    local -i max_index=0\n    local -i max_value=0\n    local\
    \ -i max_freq=0\n    local -i max_freq_index=0\n    local -i max_freq_value=0\n\
    \    local -i max_freq_count=0\n    local -i max_freq_len=0\n    local -i max_freq_max=0\n\
    \    local -i max_freq_max_index=0\n    local -i max_freq_max_value=0\n    local\
    \ -i max_freq_max_count=0\n    local -i max_freq_max_len=0\n    local -i max_freq_max_freq=0\n\
    \    local -i max_freq_max_freq_index=0\n    local -i max_freq_max_freq_value=0\n\
    \    local -i max_freq_max_freq_count=0\n    local -i max_freq_max_freq_len=0\n\
    \    local -i max_freq_max_freq_max=0\n    local -i max_freq_max_freq_max_index=0\n\
    \    local -i max_freq_max_freq_max_value=0\n    local -i max_freq_max_freq_max_count=0\n\
    \    local -i max_freq_max_freq_max_len=0\n    local -i max_freq_max_freq_max_freq=0\n\
    \    local -i max_freq_max_freq_max_freq_index=0\n    local -i max_freq_max_freq_max_freq_value=0\n\
    \    local -i max_freq_max_freq_max_freq_count=0\n    local -i max_freq\n}\n\n\
    candidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpv1z78tuq.sh: line 10: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003191
- exit_code: 0
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=($1)\n    local -a freq=($(echo \"${arr[@]}\" | tr ' ' '\\n' |\
    \ sort | uniq -c | awk '{print $1}'))\n    local -a nums=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort | uniq))\n    local -a res=()\n    local i=0\n    for\
    \ n in ${nums[@]}; do\n        if [[ ${freq[$i]} -ge $n ]]; then\n           \
    \ res+=($n)\n        fi\n        ((i++))\n    done\n    if [[ ${#res[@]} -eq 0\
    \ ]]; then\n        echo -1\n    else\n        echo \"${res[@]}\" | tr ' ' '\\\
    n' | sort -rn | head -n 1\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003194
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n#\n# $1 is a space-separated list\nsearch() {\n   \
    \ local -a arr=(\"$@\")\n    local -A freq\n    local -i max=0\n    local -i i=0\n\
    \    local -i len=${#arr[@]}\n    local -i val=0\n    local -i res=-1\n\n    for\
    \ ((i=0; i<len; i++)); do\n        val=${arr[$i]}\n        freq[$val]=$((freq[$val]\
    \ + 1))\n        if ((val > max)); then\n            max=$val\n        fi\n  \
    \  done\n\n    for ((i=1; i<=max; i++)); do\n        if ((freq[$i] >= i)); then\n\
    \            res=$i\n        fi\n    done\n\n    echo $res\n}\n\ncandidate() {\n\
    \    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpucq_ry1s.sh: line 19: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660003191
