language: sh
name: HumanEval_49_modp
results:
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    while (( n > 0 )); do\n        if (( n % 2 == 1 )); then\n\
    \            (( result = (result * 2) % p ))\n        fi\n        (( n /= 2 ))\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i\n    for ((i=0; i<n; i++)); do\n        r=$((r*2%p))\n\
    \    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i=0\n    while [ $i -lt $n ]; do\n        res=$((res*2))\n\
    \        res=$((res%p))\n        i=$((i+1))\n    done\n    echo $res\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=1\n    while [ $i -le $n ]; do\n        r=$((r*2))\n\
    \        r=$((r%p))\n        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=0\n    while [ $i -lt $n ]; do\n        r=$((r*2))\n\
    \        r=$((r%p))\n        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i\n    for ((i=0; i<n; i++)); do\n        res=$((res*2))\n\
    \        res=$((res%p))\n    done\n    echo $res\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i\n    for ((i=0; i<n; i++)); do\n        r=$((r*2%p))\n\
    \    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    while [[ $n -gt 0 ]]; do\n        if [[ $((n & 1)) -eq\
    \ 1 ]]; then\n            result=$(((result * 2) % p))\n        fi\n        n=$((n\
    \ >> 1))\n    done\n    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        if ((result>=p)); then\n            result=$((result-p))\n        fi\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n  local n=$1\n  local p=$2\n  local\
    \ res=1\n  local i=0\n  while [ $i -lt $n ]; do\n    res=$(( (res * 2) % p ))\n\
    \    i=$(( i + 1 ))\n  done\n  echo $res\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i=1\n    while [ $i -le $n ]; do\n        res=$((res*2))\n\
    \        res=$((res%p))\n        i=$((i+1))\n    done\n    echo $res\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i=0\n    while [ $i -lt $n ]; do\n        res=$(( (res\
    \ * 2) % p ))\n        i=$(( i + 1 ))\n    done\n    echo $res\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=1\n    while [ $i -le $n ]; do\n        r=$(( (r*2)\
    \ % p ))\n        i=$(( i+1 ))\n    done\n    echo $r\n}\n\ncandidate() {\n  \
    \  modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"\
    3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"\
    0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i\n    for ((i=0; i<n; i++)); do\n        res=$((res*2))\n\
    \        res=$((res%p))\n    done\n    echo $res\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=1\n    while [ $i -le $n ]; do\n        r=$(( (r*2)\
    \ % p ))\n        i=$(( i+1 ))\n    done\n    echo $r\n}\n\ncandidate() {\n  \
    \  modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"\
    3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"\
    0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i\n    for ((i=0; i<n; i++)); do\n        res=$((res*2))\n\
    \        res=$((res%p))\n    done\n    echo $res\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i\n    for ((i=0; i<n; i++)); do\n        res=$((res*2))\n\
    \        res=$((res%p))\n    done\n    echo $res\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        if ((result>=p)); then\n            result=$((result-p))\n        fi\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local x=1\n    local i\n    for ((i=0; i<n; i++)); do\n        x=$((x*2))\n\
    \        x=$((x%p))\n    done\n    echo $x\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i=0\n    while [ $i -lt $n ]; do\n        res=$((res*2))\n\
    \        res=$((res%p))\n        i=$((i+1))\n    done\n    echo $res\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i=0\n    while [ $i -lt $n ]; do\n        result=$((result*2))\n\
    \        result=$((result%p))\n        i=$((i+1))\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=0\n    while [ $i -lt $n ]; do\n        r=$(((r*2)%p))\n\
    \        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=0\n    while [ $i -lt $n ]; do\n        r=$(( (r*2)\
    \ % p ))\n        i=$(( i+1 ))\n    done\n    echo $r\n}\n\ncandidate() {\n  \
    \  modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"\
    3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"\
    0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    while ((n > 0)); do\n        if ((n % 2 == 1)); then\n\
    \            result=$((result * 2 % p))\n        fi\n        n=$((n / 2))\n  \
    \  done\n    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n  local n=$1\n  local p=$2\n  local\
    \ result=1\n  local i\n  for ((i=0; i<n; i++)); do\n    result=$((result*2))\n\
    \    result=$((result%p))\n  done\n  echo $result\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i=0\n    while [ $i -lt $n ]; do\n        res=$(( (res\
    \ * 2) % p ))\n        i=$(( i + 1 ))\n    done\n    echo $res\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i\n    for ((i=0; i<n; i++)); do\n        res=$((res*2))\n\
    \        res=$((res%p))\n    done\n    echo $res\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=1\n    while [ $i -le $n ]; do\n        r=$((r*2%p))\n\
    \        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    while [ $n -gt 0 ]; do\n        if [ $((n % 2)) -eq 1 ];\
    \ then\n            res=$((res * 2 % p))\n        fi\n        n=$((n / 2))\n \
    \   done\n    echo $res\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=1\n    while [ $i -le $n ]; do\n        r=$(( (r*2)\
    \ % p ))\n        i=$(( i+1 ))\n    done\n    echo $r\n}\n\ncandidate() {\n  \
    \  modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"\
    3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"\
    0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i\n    for ((i=0; i<n; i++)); do\n        res=$((res*2%p))\n\
    \    done\n    echo $res\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    while [ $n -gt 0 ]; do\n        if [ $((n % 2)) -eq 1 ]; then\n\
    \            r=$((r * 2 % p))\n        fi\n        n=$((n / 2))\n    done\n  \
    \  echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i=0\n    while [ $i -lt $n ]; do\n        res=$((res*2))\n\
    \        res=$((res%p))\n        i=$((i+1))\n    done\n    echo $res\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i=0\n    while [ $i -lt $n ]; do\n        result=$((result*2))\n\
    \        result=$((result%p))\n        i=$((i+1))\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i\n    for ((i=0; i<n; i++)); do\n        r=$((r*2%p))\n\
    \    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n  local n=$1\n  local p=$2\n  local\
    \ r=1\n  local i=1\n  while [ $i -le $n ]; do\n    r=$(( (r*2) % p ))\n    i=$((\
    \ i+1 ))\n  done\n  echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    while [ $n -gt 0 ]; do\n        if [ $((n & 1)) -eq 1\
    \ ]; then\n            result=$((result * 2 % p))\n        fi\n        n=$((n\
    \ >> 1))\n    done\n    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=1\n    while [ $i -le $n ]; do\n        r=$(( (r*2)\
    \ % p ))\n        i=$(( i+1 ))\n    done\n    echo $r\n}\n\ncandidate() {\n  \
    \  modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"\
    3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"\
    0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=1\n    while ((i <= n)); do\n        r=$((r * 2 % p))\n\
    \        i=$((i + 1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n  local n=$1\n  local p=$2\n  local\
    \ r=1\n  local i=1\n  while [ $i -le $n ]; do\n    r=$((r*2%p))\n    i=$((i+1))\n\
    \  done\n  echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n  local n=$1\n  local p=$2\n  local\
    \ r=1\n  local i\n  for ((i=0; i<n; i++)); do\n    r=$((r*2))\n    r=$((r%p))\n\
    \  done\n  echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=0\n    while [ $i -lt $n ]; do\n        r=$((r*2%p))\n\
    \        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=1\n    while [ $i -le $n ]; do\n        r=$(( (r*2)\
    \ % p ))\n        i=$(( i+1 ))\n    done\n    echo $r\n}\n\ncandidate() {\n  \
    \  modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"\
    3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"\
    0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i=0\n    while [ $i -lt $n ]; do\n        res=$((res*2))\n\
    \        res=$((res%p))\n        i=$((i+1))\n    done\n    echo $res\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i\n    for ((i=0; i<n; i++)); do\n        r=$((r*2%p))\n\
    \    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    while [ $n -gt 0 ]; do\n        if [ $((n & 1)) -eq 1\
    \ ]; then\n            result=$((result * 2 % p))\n        fi\n        n=$((n\
    \ >> 1))\n    done\n    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    echo \"($1^$2) % $p\" | bc\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '(standard_in) 2: syntax error

    '
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=1\n    while [ $i -le $n ]; do\n        r=$(( (r*2)\
    \ % p ))\n        i=$(( i+1 ))\n    done\n    echo $r\n}\n\ncandidate() {\n  \
    \  modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"\
    3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"\
    0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=1\n    while [ $i -le $n ]; do\n        r=$((r*2))\n\
    \        r=$((r%p))\n        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i=1\n    while [ $i -le $n ]; do\n        res=$((res*2))\n\
    \        res=$((res%p))\n        i=$((i+1))\n    done\n    echo $res\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=\"$1\"\n    local p=\"\
    $2\"\n    local r=1\n    local i\n    for ((i=0; i<n; i++)); do\n        r=$((r*2))\n\
    \        r=$((r%p))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i=0\n    while [ $i -lt $n ]; do\n        result=$((result*2))\n\
    \        result=$((result%p))\n        i=$((i+1))\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=1\n    while [ $i -le $n ]; do\n        r=$(( (r*2)\
    \ % p ))\n        i=$(( i+1 ))\n    done\n    echo $r\n}\n\ncandidate() {\n  \
    \  modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"\
    3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"\
    0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=0\n    while [ $i -lt $n ]; do\n        r=$((r*2))\n\
    \        r=$((r%p))\n        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=0\n    while [ $i -lt $n ]; do\n        r=$(( $r *\
    \ 2 % $p ))\n        i=$(( $i + 1 ))\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        if ((result>=p)); then\n            result=$((result-p))\n        fi\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i=0\n    while [ $i -lt $n ]; do\n        res=$((res*2))\n\
    \        res=$((res%p))\n        i=$((i+1))\n    done\n    echo $res\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=\"$1\"\n    local p=\"\
    $2\"\n    local res=1\n    local i\n    for ((i=0; i<n; i++)); do\n        res=$((res*2))\n\
    \        res=$((res%p))\n    done\n    echo \"$res\"\n}\n\ncandidate() {\n   \
    \ modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"\
    3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"\
    0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=0\n    while [ $i -lt $n ]; do\n        r=$((r*2%p))\n\
    \        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    while [ $n -gt 0 ]; do\n        if [ $((n % 2)) -eq 1\
    \ ]; then\n            result=$((result * 2 % p))\n        fi\n        n=$((n\
    \ / 2))\n    done\n    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=1\n    while [ $i -le $n ]; do\n        r=$((r*2%p))\n\
    \        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n  local n=$1\n  local p=$2\n  local\
    \ r=1\n  local i=1\n  while [ $i -le $n ]; do\n    r=$((r*2))\n    r=$((r%p))\n\
    \    i=$((i+1))\n  done\n  echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i\n    for ((i=0; i<n; i++)); do\n        res=$((res*2))\n\
    \        res=$((res%p))\n    done\n    echo $res\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        if ((result>=p)); then\n            result=$((result-p))\n        fi\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=0\n    while [ $i -lt $n ]; do\n        r=$((r*2))\n\
    \        r=$((r%p))\n        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=0\n    while [ $i -lt $n ]; do\n        r=$((r*2))\n\
    \        r=$((r%p))\n        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i\n    for ((i=0; i<n; i++)); do\n        res=$((res*2))\n\
    \        res=$((res%p))\n    done\n    echo $res\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local x=1\n    local i=0\n    while [ $i -lt $n ]; do\n        i=$((i+1))\n\
    \        x=$((x*2))\n        x=$((x%p))\n    done\n    echo $x\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=0\n    while [ $i -lt $n ]; do\n        r=$((r*2))\n\
    \        r=$((r%p))\n        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2%p))\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    while [ $n -gt 0 ]; do\n        if [ $((n % 2)) -eq 1\
    \ ]; then\n            result=$((result * 2 % p))\n        fi\n        n=$((n\
    \ / 2))\n    done\n    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=1\n    while [ $i -le $n ]; do\n        r=$((r*2%p))\n\
    \        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        if ((result>=p)); then\n            result=$((result-p))\n        fi\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i=0\n    while [ $i -lt $n ]; do\n        res=$((res*2))\n\
    \        res=$((res%p))\n        i=$((i+1))\n    done\n    echo $res\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=1\n    while [ $i -le $n ]; do\n        r=$((r*2%p))\n\
    \        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    echo \"($1^$2) % $p\" | bc\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '(standard_in) 2: syntax error

    '
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i\n    for ((i=0; i<n; i++)); do\n        r=$((r*2))\n\
    \        r=$((r%p))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i\n    for ((i=0; i<n; i++)); do\n        r=$((r*2))\n\
    \        r=$((r%p))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n  local n=$1\n  local p=$2\n  local\
    \ res=1\n  local i=0\n  while [ $i -lt $n ]; do\n    res=$((res*2))\n    res=$((res%p))\n\
    \    i=$((i+1))\n  done\n  echo $res\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=1\n    while [ $i -le $n ]; do\n        r=$(( (r*2)\
    \ % p ))\n        i=$(( i+1 ))\n    done\n    echo $r\n}\n\ncandidate() {\n  \
    \  modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"\
    3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"\
    0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i\n    for ((i=0; i<n; i++)); do\n        res=$((res*2%p))\n\
    \    done\n    echo $res\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i\n    for ((i=0; i<n; i++)); do\n        res=$((res*2))\n\
    \        res=$((res%p))\n    done\n    echo $res\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i=0\n    while [ $i -lt $n ]; do\n        res=$(( ($res\
    \ * 2) % $p ))\n        i=$(( $i + 1 ))\n    done\n    echo $res\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i\n    for ((i=0; i<n; i++)); do\n        res=$((res*2))\n\
    \        res=$((res%p))\n    done\n    echo $res\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    echo \"($1^$2) % $3\" | bc\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '(standard_in) 2: syntax error

    '
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i\n    for ((i=0; i<n; i++)); do\n        res=$(( (res*2)\
    \ % p ))\n    done\n    echo $res\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i\n    for ((i=0; i<n; i++)); do\n        res=$((res*2))\n\
    \        res=$((res%p))\n    done\n    echo $res\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n  local n=$1\n  local p=$2\n  local\
    \ result=1\n  local i\n  for ((i=0; i<n; i++)); do\n    result=$((result*2))\n\
    \    result=$((result%p))\n  done\n  echo $result\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=0\n    while [ $i -lt $n ]; do\n        r=$((r*2))\n\
    \        r=$((r%p))\n        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=1\n    while [ $i -le $n ]; do\n        r=$((r*2%p))\n\
    \        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    while [ $n -gt 0 ]; do\n        if [ $((n & 1)) -eq 1 ];\
    \ then\n            res=$((res * 2 % p))\n        fi\n        n=$((n >> 1))\n\
    \    done\n    echo $res\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=0\n    while [ $i -lt $n ]; do\n        r=$((r*2))\n\
    \        r=$((r%p))\n        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local i\n    local r=1\n    for ((i=0; i<n; i++)); do\n        r=$((r*2))\n\
    \        r=$((r%p))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=0\n    while [ $i -lt $n ]; do\n        r=$((r*2))\n\
    \        r=$((r%p))\n        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=1\n    while [ $i -le $n ]; do\n        r=$(((r*2)%p))\n\
    \        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    while [ $n -gt 0 ]; do\n        if [ $((n % 2)) -eq 1\
    \ ]; then\n            result=$((result * 2 % p))\n        fi\n        n=$((n\
    \ / 2))\n    done\n    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n  local n=$1\n  local p=$2\n  local\
    \ result=1\n  local i\n  for ((i=0; i<n; i++)); do\n    result=$((result*2))\n\
    \    if ((result>=p)); then\n      result=$((result-p))\n    fi\n  done\n  echo\
    \ $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=0\n    while [ $i -lt $n ]; do\n        r=$((r*2%p))\n\
    \        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=0\n    while [ $i -lt $n ]; do\n        r=$((r*2%p))\n\
    \        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i\n    for ((i=0; i<n; i++)); do\n        r=$((r*2%p))\n\
    \    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i=0\n    while [ $i -lt $n ]; do\n        result=$((result*2))\n\
    \        result=$((result%p))\n        i=$((i+1))\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i\n    for ((i=0; i<n; i++)); do\n        res=$((res*2))\n\
    \        res=$((res%p))\n    done\n    echo $res\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2%p))\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=\"$1\"\n    local p=\"\
    $2\"\n    local r=1\n    local i=0\n    while [ $i -lt $n ]; do\n        r=$((\
    \ $r * 2 % $p ))\n        i=$(( $i + 1 ))\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i=0\n    while [ $i -lt $n ]; do\n        res=$((res*2))\n\
    \        res=$((res%p))\n        i=$((i+1))\n    done\n    echo $res\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=1\n    while [ $i -le $n ]; do\n        r=$(( (r*2)\
    \ % p ))\n        i=$(( i+1 ))\n    done\n    echo $r\n}\n\ncandidate() {\n  \
    \  modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"\
    3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"\
    0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i=0\n    while [ $i -lt $n ]; do\n        res=$((res*2))\n\
    \        res=$((res%p))\n        i=$((i+1))\n    done\n    echo $res\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=0\n    while [ $i -lt $n ]; do\n        r=$((r*2))\n\
    \        r=$((r%p))\n        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i=0\n    while [ $i -lt $n ]; do\n        result=$((result*2))\n\
    \        result=$((result%p))\n        i=$((i+1))\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=0\n    while [ $i -lt $n ]; do\n        r=$((r*2))\n\
    \        r=$((r%p))\n        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i\n    for ((i=0; i<n; i++)); do\n        res=$((res*2))\n\
    \        res=$((res%p))\n    done\n    echo $res\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=1; i<=n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=1\n    while [ $i -le $n ]; do\n        r=$((r*2))\n\
    \        r=$((r%p))\n        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i=0\n    while [ $i -lt $n ]; do\n        res=$((res*2))\n\
    \        res=$((res%p))\n        i=$((i+1))\n    done\n    echo $res\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i\n    for ((i=0; i<n; i++)); do\n        res=$((res*2))\n\
    \        res=$((res%p))\n    done\n    echo $res\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    while (( n > 0 )); do\n        if (( n % 2 == 1 )); then\n\
    \            (( r = (r * 2) % p ))\n        fi\n        (( n = n / 2 ))\n    done\n\
    \    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i=0\n    while [ $i -lt $n ]; do\n        res=$(( (res\
    \ * 2) % p ))\n        i=$(( i + 1 ))\n    done\n    echo $res\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=1\n    while [ $i -le $n ]; do\n        r=$((r*2))\n\
    \        r=$((r%p))\n        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i\n    for ((i=0; i<n; i++)); do\n        res=$((res*2))\n\
    \        res=$((res%p))\n    done\n    echo $res\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i=0\n    while [ $i -lt $n ]; do\n        result=$((result*2))\n\
    \        result=$((result%p))\n        i=$((i+1))\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    echo \"($1^$2) % $p\" | bc\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '(standard_in) 2: syntax error

    '
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i\n    for ((i=0; i<n; i++)); do\n        r=$((r*2))\n\
    \        r=$((r%p))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    while [ $n -gt 0 ]; do\n        if [ $((n & 1)) -eq 1\
    \ ]; then\n            result=$(((result * result) % p))\n        fi\n       \
    \ n=$((n >> 1))\n    done\n    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    echo \"$1\" | bc -l | awk '{printf\
    \ \"%.'$2'f\\n\", $1}' | sed 's/0*$//'\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n  local n=$1\n  local p=$2\n  local\
    \ result=1\n  while [ $n -gt 0 ]; do\n    if [ $((n & 1)) -eq 1 ]; then\n    \
    \  result=$((result * 2 % p))\n    fi\n    n=$((n >> 1))\n  done\n  echo $result\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i=0\n    while [ $i -lt $n ]; do\n        result=$((result*2))\n\
    \        result=$((result%p))\n        i=$((i+1))\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=0\n    while [ $i -lt $n ]; do\n        r=$((r*2))\n\
    \        r=$((r%p))\n        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i\n    for ((i=0; i<n; i++)); do\n        res=$((res*2))\n\
    \        res=$((res%p))\n    done\n    echo $res\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=0\n    while [ $i -lt $n ]; do\n        r=$((r*2%p))\n\
    \        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        if ((result>=p)); then\n            result=$((result-p))\n        fi\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n  local n=$1\n  local p=$2\n  local\
    \ i\n  local res=1\n  for ((i=0; i<n; i++)); do\n    res=$((res*2))\n    res=$((res%p))\n\
    \  done\n  echo $res\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i\n    for ((i=0; i<n; i++)); do\n        res=$((res*2))\n\
    \        res=$((res%p))\n    done\n    echo $res\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    while [ $n -gt 0 ]; do\n        if [ $((n & 1)) -eq 1\
    \ ]; then\n            result=$((result * 2 % p))\n        fi\n        n=$((n\
    \ >> 1))\n    done\n    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=\"$1\"\n    local p=\"\
    $2\"\n    local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n       \
    \ result=$((result*2))\n        result=$((result%p))\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i\n    for ((i=0; i<n; i++)); do\n        r=$((r*2))\n\
    \        r=$((r%p))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i\n    for ((i=0; i<n; i++)); do\n        r=$((r*2))\n\
    \        r=$((r%p))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    while [ $n -gt 0 ]; do\n        if [ $((n & 1)) -eq 1 ]; then\n\
    \            r=$((r * 2 % p))\n        fi\n        n=$((n >> 1))\n    done\n \
    \   echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i=0\n    while [ $i -lt $n ]; do\n        res=$((res*2))\n\
    \        res=$((res%p))\n        i=$((i+1))\n    done\n    echo $res\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=0\n    while [ $i -lt $n ]; do\n        r=$((r*2))\n\
    \        r=$((r%p))\n        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    while [ $n -gt 0 ]; do\n        if [ $((n & 1)) -eq 1\
    \ ]; then\n            result=$((result * 2 % p))\n        fi\n        n=$((n\
    \ >> 1))\n    done\n    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n  local n=$1\n  local p=$2\n  local\
    \ res=1\n  local tmp\n  local i\n  for ((i=0; i<n; i++)); do\n    tmp=$((res*2))\n\
    \    res=$((tmp%p))\n  done\n  echo $res\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=1\n    while [ $i -le $n ]; do\n        r=$(( (r*2)\
    \ % p ))\n        i=$(( i+1 ))\n    done\n    echo $r\n}\n\ncandidate() {\n  \
    \  modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"\
    3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"\
    0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i=0\n    while [ $i -lt $n ]; do\n        res=$((res*2))\n\
    \        res=$((res%p))\n        i=$((i+1))\n    done\n    echo $res\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i=0\n    while [ $i -lt $n ]; do\n        result=$((result*2))\n\
    \        result=$((result%p))\n        i=$((i+1))\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=1\n    while [ $i -le $n ]; do\n        r=$(( ($r *\
    \ 2) % $p ))\n        i=$(( $i + 1 ))\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n  local n=$1\n  local p=$2\n  local\
    \ result=1\n  local i\n  for ((i=0; i<n; i++)); do\n    result=$((result*2))\n\
    \    result=$((result%p))\n  done\n  echo $result\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    while [ $n -gt 0 ]; do\n        if [ $((n % 2)) -eq 1\
    \ ]; then\n            result=$(((result * 2) % p))\n        fi\n        n=$((n\
    \ / 2))\n    done\n    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=0\n    while [ $i -lt $n ]; do\n        r=$((r * 2\
    \ % p))\n        i=$((i + 1))\n    done\n    echo $r\n}\n\ncandidate() {\n   \
    \ modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"\
    3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"\
    0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i\n    for ((i=0; i<n; i++)); do\n        res=$((res*2))\n\
    \        res=$((res%p))\n    done\n    echo $res\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=1\n    while [ $i -le $n ]; do\n        r=$((r*2))\n\
    \        r=$((r%p))\n        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local r=1\n    local i=1\n    while [ $i -le $n ]; do\n        r=$((r*2))\n\
    \        r=$((r%p))\n        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local res=1\n    local i=1\n    while [ $i -le $n ]; do\n        res=$((res*2))\n\
    \        res=$((res%p))\n        i=$((i+1))\n    done\n    echo $res\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n#\n# $1 is\
    \ an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n \
    \   local result=1\n    local i\n    for ((i=0; i<n; i++)); do\n        result=$((result*2))\n\
    \        result=$((result%p))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004841
