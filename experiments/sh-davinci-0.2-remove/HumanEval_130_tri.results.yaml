language: sh
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 0 ]; then\n        echo \"3\"\n    elif [\
    \ $1 -eq 1 ]; then\n        echo \"3\"\n    elif [ $1 -eq 2 ]; then\n        echo\
    \ \"3\"\n    elif [ $1 -eq 3 ]; then\n        echo \"8\"\n    else\n        echo\
    \ $((($1 + 1) / 2))\n    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local i=1\n  local a=3\n  local b=2\n  local\
    \ c=1\n  local d=0\n  while [ $i -le $n ]; do\n    if [ $((i % 2)) -eq 0 ]; then\n\
    \      d=$((i / 2))\n    else\n      d=$((a + b + c))\n      a=$b\n      b=$c\n\
    \      c=$d\n    fi\n    echo $d\n    i=$((i + 1))\n  done\n}\n\ncandidate() {\n\
    \    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3\
    \ 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"\
    5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n\
    \    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    else\n        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $((\
    \ 1 + $1 / 2 ))\n        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri\
    \ $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local i=0\n    local a=3\n    local b=2\n\
    \    local c=1\n    local d=0\n    while [ $i -lt $n ]; do\n        d=$((a + b\
    \ + c))\n        echo $d\n        a=$b\n        b=$c\n        c=$d\n        i=$((i\
    \ + 1))\n    done\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local i=0\n    local a=3\n    local b=2\n\
    \    local c=1\n    local d=0\n    local result=()\n    while [ $i -le $n ]; do\n\
    \        if [ $((i % 2)) -eq 0 ]; then\n            d=$((a + (i / 2)))\n     \
    \   else\n            d=$((a + b + c))\n        fi\n        result+=($d)\n   \
    \     a=$b\n        b=$c\n        c=$d\n        i=$((i + 1))\n    done\n    echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3\
    \ 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    else\n        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $((\
    \ 1 + $1 / 2 ))\n        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri\
    \ $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    else\n        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $((\
    \ 1 + $1 / 2 ))\n        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri\
    \ $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local a=3 b=2 c=1 n=$1\n    while ((n--)); do\n      \
    \  ((n % 2)) && ((a = a + b + c))\n        ((n % 2)) || ((a = 1 + n / 2))\n  \
    \      ((b = c))\n        ((c = a))\n    done\n    echo $a\n}\n\ncandidate() {\n\
    \    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3\
    \ 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"\
    5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n\
    \    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local a=3\n  local b=2\n  local c=1\n  local\
    \ d=0\n  local i=0\n  local result=()\n  while [ $i -le $n ]; do\n    result+=($a)\n\
    \    d=$((a + b + c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i + 1))\n  done\n\
    \  echo ${result[@]}\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [[ $1 -eq 1 ]]; then\n    echo 3\n  elif [[ $1 -eq 2\
    \ ]]; then\n    echo 2\n  elif [[ $1 -eq 3 ]]; then\n    echo 8\n  elif [[ $1\
    \ -eq 4 ]]; then\n    echo 3\n  elif [[ $1 -eq 5 ]]; then\n    echo 11\n  elif\
    \ [[ $1 -eq 6 ]]; then\n    echo 14\n  elif [[ $1 -eq 7 ]]; then\n    echo 19\n\
    \  elif [[ $1 -eq 8 ]]; then\n    echo 27\n  elif [[ $1 -eq 9 ]]; then\n    echo\
    \ 38\n  elif [[ $1 -eq 10 ]]; then\n    echo 53\n  elif [[ $1 -eq 11 ]]; then\n\
    \    echo 74\n  elif [[ $1 -eq 12 ]]; then\n    echo 103\n  elif [[ $1 -eq 13\
    \ ]]; then\n    echo 143\n  elif [[ $1 -eq 14 ]]; then\n    echo 198\n  elif [[\
    \ $1 -eq 15 ]]; then\n    echo 275\n  elif [[ $1 -eq 16 ]]; then\n    echo 382\n\
    \  elif [[ $1 -eq 17 ]]; then\n    echo 528\n  elif [[ $1 -eq 18 ]]; then\n  \
    \  echo 731\n  elif [[ $1 -eq 19 ]]; then\n    echo 1011\n  elif [[ $1 -eq 20\
    \ ]]; then\n    echo 1390\n  elif [[ $1 -eq 21 ]]; then\n    echo 1924\n  elif\
    \ [[ $1 -eq 22 ]]; then\n    echo 2655\n  elif [[ $1 -eq 23 ]]; then\n    echo\
    \ 3650\n  elif [[ $1 -eq 24 ]]; then\n    echo 5028\n  elif [[ $1 -eq 25 ]]; then\n\
    \    echo 6955\n  elif [[ $1 -eq 26 ]]; then\n    echo 9658\n  elif [[ $1 -eq\
    \ 27 ]]; then\n    echo 13463\n  elif [[ $1 -eq 28 ]]; then\n    echo 18705\n\
    \  elif [[ $1 -eq 29 ]]; then\n    echo 25958\n  elif [[ $1\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmclkomui.sh: line 77: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmpmclkomui.sh: line 77: syntax error near `$1''

    /tmp/tmpmclkomui.sh: line 77: `  elif [[ $1''

    '
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local a=3\n    local b=2\n    local c=1\n\
    \    local d=0\n    local i=0\n    while [ $i -lt $n ]; do\n        if [ $((i\
    \ % 2)) -eq 0 ]; then\n            d=$((a + i / 2))\n        else\n          \
    \  d=$((a + b + c))\n        fi\n        echo $d\n        c=$b\n        b=$a\n\
    \        a=$d\n        i=$((i + 1))\n    done\n}\n\ncandidate() {\n    tri \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local i=0\n  local result=()\n  while [ $i\
    \ -le $n ]; do\n    if [ $i -eq 0 ]; then\n      result+=(3)\n    elif [ $i -eq\
    \ 1 ]; then\n      result+=(3)\n    elif [ $i -eq 2 ]; then\n      result+=(3)\n\
    \    elif [ $((i % 2)) -eq 0 ]; then\n      result+=($((i / 2 + 1)))\n    else\n\
    \      result+=($((result[i - 1] + result[i - 2] + result[i - 3])))\n    fi\n\
    \    i=$((i + 1))\n  done\n  echo ${result[@]}\n}\n\ncandidate() {\n    tri \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local i=0\n  local a=3\n  local b=2\n  local\
    \ c=1\n  local d=0\n  while [ $i -lt $n ]; do\n    if [ $((i % 2)) -eq 0 ]; then\n\
    \      d=$((a + (i / 2)))\n    else\n      d=$((a + b + c))\n    fi\n    c=$b\n\
    \    b=$a\n    a=$d\n    i=$((i + 1))\n  done\n  echo $d\n}\n\ncandidate() {\n\
    \    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3\
    \ 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"\
    5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n\
    \    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local seq=()\n  for ((i=1; i<=n; i++)); do\n\
    \    if ((i == 1)); then\n      seq+=(3)\n    elif ((i == 2)); then\n      seq+=(2)\n\
    \    elif ((i == 3)); then\n      seq+=(8)\n    elif ((i % 2 == 0)); then\n  \
    \    seq+=(1 + i / 2)\n    else\n      seq+=($((seq[i-1] + seq[i-2] + seq[i-3])))\n\
    \    fi\n  done\n  echo \"${seq[@]}\"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local i=0\n    local a=3\n    local b=2\n\
    \    local c=1\n    local d=0\n    while [ $i -lt $n ]; do\n        if [ $((i\
    \ % 2)) -eq 0 ]; then\n            d=$((a + (i / 2)))\n        else\n        \
    \    d=$((a + b + c))\n        fi\n        echo $d\n        c=$b\n        b=$a\n\
    \        a=$d\n        i=$((i + 1))\n    done\n}\n\ncandidate() {\n    tri \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local a=3\n  local b=2\n  local c=1\n  local\
    \ d=0\n  local i=0\n  local res=\"\"\n  if [ $n -eq 0 ]; then\n    echo \"\"\n\
    \  else\n    while [ $i -lt $n ]; do\n      if [ $((i % 2)) -eq 0 ]; then\n  \
    \      d=$((a + (i / 2)))\n      else\n        d=$((a + b + c))\n      fi\n  \
    \    res=\"$res $d\"\n      a=$b\n      b=$c\n      c=$d\n      i=$((i + 1))\n\
    \    done\n    echo $res\n  fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [[ $1 -eq 1 ]]; then\n    echo 3\n  elif [[ $1 -eq 2\
    \ ]]; then\n    echo 2\n  elif [[ $1 -eq 3 ]]; then\n    echo 8\n  else\n    if\
    \ [[ $(( $1 % 2 )) -eq 0 ]]; then\n      echo $(( 1 + $1 / 2 ))\n    else\n  \
    \    echo $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 )))\
    \ ))\n    fi\n  fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local i=0\n  local tri_n=0\n  local tri_n_1=0\n\
    \  local tri_n_2=0\n  local tri_n_3=0\n  local tri_n_4=0\n  local tri_n_5=0\n\
    \  local tri_n_6=0\n  local tri_n_7=0\n  local tri_n_8=0\n  local tri_n_9=0\n\
    \  local tri_n_10=0\n  local tri_n_11=0\n  local tri_n_12=0\n  local tri_n_13=0\n\
    \  local tri_n_14=0\n  local tri_n_15=0\n  local tri_n_16=0\n  local tri_n_17=0\n\
    \  local tri_n_18=0\n  local tri_n_19=0\n  local tri_n_20=0\n  local tri_n_21=0\n\
    \  local tri_n_22=0\n  local tri_n_23=0\n  local tri_n_24=0\n  local tri_n_25=0\n\
    \  local tri_n_26=0\n  local tri_n_27=0\n  local tri_n_28=0\n  local tri_n_29=0\n\
    \  local tri_n_30=0\n  local tri_n_31=0\n  local tri_n_32=0\n  local tri_n_33=0\n\
    \  local tri_n_34=0\n  local tri_n_35=0\n  local tri_n_36=0\n  local tri_n_37=0\n\
    \  local tri_n_38=0\n  local tri_n_39=0\n  local tri_n_40=0\n  local tri_n_41=0\n\
    \  local tri_n_42=0\n  local tri_n_43=0\n  local tri_n_44=0\n  local tri_n_45=0\n\
    \  local tri_n_46=0\n  local tri_n_47=0\n  local tri_n_48=0\n  local tri_n_49=0\n\
    \ \n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local i=1\n    local a=3\n    local b=2\n\
    \    local c=1\n    local d=0\n    local result=\"\"\n    while [ $i -le $n ];\
    \ do\n        if [ $((i % 2)) -eq 0 ]; then\n            d=$((i / 2))\n      \
    \  else\n            d=$((a + b + c))\n            a=$b\n            b=$c\n  \
    \          c=$d\n        fi\n        result=\"$result $d\"\n        i=$((i + 1))\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local result=()\n    local i=0\n    while\
    \ [ $i -le $n ]; do\n        if [ $i -eq 0 ]; then\n            result[$i]=3\n\
    \        elif [ $i -eq 1 ]; then\n            result[$i]=3\n        elif [ $i\
    \ -eq 2 ]; then\n            result[$i]=8\n        else\n            result[$i]=$((\
    \ ${result[$(( $i - 1 ))]} + ${result[$(( $i - 2 ))]} + ${result[$(( $i - 3 ))]}\
    \ ))\n        fi\n        i=$(( $i + 1 ))\n    done\n    echo ${result[@]}\n}\n\
    \ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local -a tri_array\n    tri_array[0]=3\n\
    \    tri_array[1]=3\n    tri_array[2]=8\n    for ((i=3; i<=n; i++)); do\n    \
    \    if ((i % 2 == 0)); then\n            tri_array[i]=$((i / 2 + 1))\n      \
    \  else\n            tri_array[i]=$((tri_array[i-1] + tri_array[i-2] + tri_array[i+1]))\n\
    \        fi\n    done\n    echo ${tri_array[@]}\n}\n\ncandidate() {\n    tri \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local a=3\n  local b=2\n  local c=1\n  local\
    \ d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local l=0\n  local m=0\n  local o=0\n  local p=0\n  local\
    \ q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local\
    \ w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local ab=0\n  local\
    \ ac=0\n  local ad=0\n  local ae=0\n  local af=0\n  local ag=0\n  local ah=0\n\
    \  local ai=0\n  local aj=0\n  local ak=0\n  local al=0\n  local am=0\n  local\
    \ an=0\n  local ao=0\n  local ap=0\n  local aq=0\n  local ar=0\n  local as=0\n\
    \  local at=0\n  local au=0\n  local av=0\n  local aw=0\n  local ax=0\n  local\
    \ ay=0\n  local az=0\n  local ba=0\n  local bb=0\n  local bc=0\n  local bd=0\n\
    \  local be=0\n  local bf=0\n  local bg=0\n  local bh=0\n  local bi=0\n  local\
    \ bj=0\n  local bk=0\n  local bl=0\n  local bm=0\n  local bn=0\n  local bo=0\n\
    \  local bp=0\n  local bq=0\n  local br=0\n  local bs=0\n  local bt=0\n  local\
    \ bu=0\n  local bv=0\n  local bw=0\n  local bx=0\n  local by=0\n  local bz=0\n\
    \  local ca=0\n  local cb=0\n  local cc=0\n \n}\n\ncandidate() {\n    tri \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local res=()\n    local i=0\n    while\
    \ [ $i -le $n ]; do\n        if [ $i -eq 0 ]; then\n            res[$i]=0\n  \
    \      elif [ $i -eq 1 ]; then\n            res[$i]=1\n        elif [ $i -eq 2\
    \ ]; then\n            res[$i]=1\n        else\n            res[$i]=$(( ${res[$((i-1))]}\
    \ + ${res[$((i-2))]} + ${res[$((i-3))]} ))\n        fi\n        i=$((i+1))\n \
    \   done\n    echo ${res[@]}\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [[ $1 -eq 0 ]]; then\n    echo \"3\"\n  elif [[ $1 -eq\
    \ 1 ]]; then\n    echo \"3\"\n  elif [[ $1 -eq 2 ]]; then\n    echo \"3\"\n  elif\
    \ [[ $1 -eq 3 ]]; then\n    echo \"8\"\n  else\n    if [[ $(( $1 % 2 )) -eq 0\
    \ ]]; then\n      echo $(( 1 + $1 / 2 ))\n    else\n      echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n    fi\n  fi\n}\n\n\
    candidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local res=()\n    local i=0\n    for ((i=0;\
    \ i<=n; i++)); do\n        if [[ $i -eq 0 ]]; then\n            res[$i]=0\n  \
    \      elif [[ $i -eq 1 ]]; then\n            res[$i]=1\n        elif [[ $i -eq\
    \ 2 ]]; then\n            res[$i]=1\n        else\n            res[$i]=$((res[$((i-1))]+res[$((i-2))]+res[$((i-3))]))\n\
    \        fi\n    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    tri \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local -a a\n  a[0]=0\n  a[1]=1\n  a[2]=1\n\
    \  for ((i=3; i<=n; i++)); do\n    a[i]=$((a[i-1]+a[i-2]+a[i-3]))\n  done\n  echo\
    \ ${a[@]}\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2\
    \ 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local i=0\n    local a=3\n    local b=0\n\
    \    local c=0\n    local d=0\n    local result=()\n    while [ $i -le $n ]; do\n\
    \        if [ $i -eq 0 ]; then\n            result[$i]=$a\n        elif [ $i -eq\
    \ 1 ]; then\n            result[$i]=$b\n        elif [ $i -eq 2 ]; then\n    \
    \        result[$i]=$c\n        else\n            d=$(($a + $b + $c))\n      \
    \      result[$i]=$d\n            a=$b\n            b=$c\n            c=$d\n \
    \       fi\n        i=$(($i + 1))\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 0 ]; then\n    echo 0\n  elif [ $1 -eq 1 ];\
    \ then\n    echo 3\n  elif [ $1 -eq 2 ]; then\n    echo 2\n  elif [ $1 -eq 3 ];\
    \ then\n    echo 8\n  else\n    if [ $(( $1 % 2 )) -eq 0 ]; then\n      echo $((\
    \ 1 + $1 / 2 ))\n    else\n      echo $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1\
    \ - 2 ))) + $(tri $(( $1 + 1 ))) ))\n    fi\n  fi\n}\n\ncandidate() {\n    tri\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    else\n        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $((\
    \ 1 + $1 / 2 ))\n        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri\
    \ $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local -a arr\n    arr[0]=3\n    arr[1]=3\n\
    \    arr[2]=8\n    for ((i=3; i<=n; i++)); do\n        if ((i%2==0)); then\n \
    \           arr[i]=1+i/2\n        else\n            arr[i]=${arr[i-1]}+${arr[i-2]}+${arr[i+1]}\n\
    \        fi\n    done\n    echo ${arr[@]}\n}\n\ncandidate() {\n    tri \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    elif [[ $1 -eq 4 ]]; then\n        echo 3\n    else\n        if [[ $((\
    \ $1 % 2 )) -eq 0 ]]; then\n            echo $(( 1 + $1 / 2 ))\n        else\n\
    \            echo $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $((\
    \ $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local a=3\n  local b=2\n  local c=1\n  local\
    \ d=0\n  local i=0\n  local result=()\n  while [ $i -le $n ]; do\n    if [ $i\
    \ -eq 0 ]; then\n      result+=($a)\n    elif [ $i -eq 1 ]; then\n      result+=($b)\n\
    \    elif [ $i -eq 2 ]; then\n      result+=($c)\n    else\n      if [ $((i %\
    \ 2)) -eq 0 ]; then\n        d=$((i / 2))\n      else\n        d=$((a + b + c))\n\
    \      fi\n      result+=($d)\n      a=$b\n      b=$c\n      c=$d\n    fi\n  \
    \  i=$((i + 1))\n  done\n  echo ${result[@]}\n}\n\ncandidate() {\n    tri \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    else\n        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $((\
    \ 1 + $1 / 2 ))\n        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri\
    \ $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local a=3\n    local b=2\n    local c=1\n\
    \    local d=0\n    local i=0\n    local result=\"\"\n    while [ $i -le $n ];\
    \ do\n        if [ $i -eq 0 ]; then\n            result=\"$a\"\n        elif [\
    \ $i -eq 1 ]; then\n            result=\"$result $b\"\n        elif [ $i -eq 2\
    \ ]; then\n            result=\"$result $c\"\n        else\n            d=$((a\
    \ + b + c))\n            result=\"$result $d\"\n            a=$b\n           \
    \ b=$c\n            c=$d\n        fi\n        i=$((i + 1))\n    done\n    echo\
    \ $result\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2\
    \ 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local a=3\n    local b=2\n    local c=1\n\
    \    local d=0\n    local i=0\n    local result=\"\"\n    while [ $i -le $n ];\
    \ do\n        if [ $((i % 2)) -eq 0 ]; then\n            d=$((a + (i / 2)))\n\
    \        else\n            d=$((a + b + c))\n        fi\n        result=\"$result\
    \ $d\"\n        a=$b\n        b=$c\n        c=$d\n        i=$((i + 1))\n    done\n\
    \    echo $result\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local a=3\n  local b=2\n  local c=1\n  local\
    \ d=0\n  local i=0\n  local result=\"\"\n  while [ $i -lt $n ]; do\n    if [ $((i\
    \ % 2)) -eq 0 ]; then\n      d=$((a + (i / 2)))\n    else\n      d=$((a + b +\
    \ c))\n    fi\n    result=\"$result $d\"\n    a=$b\n    b=$c\n    c=$d\n    i=$((i\
    \ + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local i=0\n  local result=()\n  while [ $i\
    \ -le $n ]; do\n    if [ $i -eq 0 ]; then\n      result[$i]=0\n    elif [ $i -eq\
    \ 1 ]; then\n      result[$i]=1\n    elif [ $i -eq 2 ]; then\n      result[$i]=1\n\
    \    else\n      result[$i]=$(( ${result[$((i-1))]} + ${result[$((i-2))]} + ${result[$((i-3))]}\
    \ ))\n    fi\n    i=$((i+1))\n  done\n  echo ${result[@]}\n}\n\ncandidate() {\n\
    \    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3\
    \ 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"\
    5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n\
    \    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    elif [[ $1 -gt 3 ]]; then\n        if [[ $1 -eq 4 ]]; then\n        \
    \    echo 13\n        else\n            if [[ $1 -eq 5 ]]; then\n            \
    \    echo 21\n            else\n                if [[ $1 -eq 6 ]]; then\n    \
    \                echo 34\n                else\n                    if [[ $1 -eq\
    \ 7 ]]; then\n                        echo 55\n                    else\n    \
    \                    if [[ $1 -eq 8 ]]; then\n                            echo\
    \ 89\n                        else\n                            if [[ $1 -eq 9\
    \ ]]; then\n                                echo 144\n                       \
    \     else\n                                if [[ $1 -eq 10 ]]; then\n       \
    \                             echo 233\n                                else\n\
    \                                    if [[ $1 -eq 11 ]]; then\n              \
    \                          echo 377\n                                    else\n\
    \                                        if [[ $1 -eq 12 ]]; then\n          \
    \                                  echo 610\n                                \
    \        else\n                                            if [[ $1 -eq 13 ]];\
    \ then\n                                                echo 987\n           \
    \                                 else\n                                     \
    \           if [[ $1 -eq 14 ]]; then\n                                       \
    \             echo 1597\n                                                else\n\
    \                                                    if [[ $1 -eq 15 ]]; then\n\
    \                                                        echo 2584\n         \
    \                                           else\n                           \
    \                             if [[ $1 -eq 16 ]]; then\n                     \
    \                                       echo 4181\n                          \
    \                              else\n                                        \
    \                    if [[ $1 -eq 17 ]]; then\n                              \
    \                                  echo 6765\n                               \
    \                             else\n                                         \
    \                       if [[ $1 -eq 18 ]]; then\n                           \
    \                                         echo 10946\n                       \
    \                                         else\n                             \
    \                                       if [[ $1 -eq 19 ]]; then\n           \
    \                                                             echo 17711\n   \
    \                                                                 else\n     \
    \                                                                   if [[ $1 -eq\
    \ 20 ]]; then\n                                                              \
    \              echo 28657\n                                                  \
    \                      else\n                                                \
    \                            if [[ $1 -eq 21 ]]; then\n                      \
    \                                                          echo 46368\n      \
    \                                                                      else\n\
    \                                                                            \
    \    if [[ $1\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3\
    \ 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8cuygxfi.sh: line 80: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmp8cuygxfi.sh: line 80: syntax error near `$1''

    /tmp/tmp8cuygxfi.sh: line 80: `                                                                                if
    [[ $1''

    '
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local tri_list=()\n  local i=0\n  local tri_n=0\n\
    \  local tri_n_1=0\n  local tri_n_2=0\n  local tri_n_3=0\n  for ((i=0; i<=n; i++));\
    \ do\n    if [[ $i -eq 0 ]]; then\n      tri_n=0\n    elif [[ $i -eq 1 ]]; then\n\
    \      tri_n=1\n    elif [[ $i -eq 2 ]]; then\n      tri_n=1\n    else\n     \
    \ if [[ $((i % 2)) -eq 0 ]]; then\n        tri_n=$((i / 2))\n      else\n    \
    \    tri_n=$((tri_n_1 + tri_n_2 + tri_n_3))\n      fi\n    fi\n    tri_list+=($tri_n)\n\
    \    tri_n_3=$tri_n_2\n    tri_n_2=$tri_n_1\n    tri_n_1=$tri_n\n  done\n  echo\
    \ ${tri_list[@]}\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local i=0\n    local result=()\n    while\
    \ [[ $i -le $n ]]; do\n        if [[ $i -eq 0 ]]; then\n            result+=(3)\n\
    \        elif [[ $i -eq 1 ]]; then\n            result+=(3)\n        elif [[ $i\
    \ -eq 2 ]]; then\n            result+=(3)\n        elif [[ $((i % 2)) -eq 0 ]];\
    \ then\n            result+=($((1 + i / 2)))\n        else\n            result+=($((result[i\
    \ - 1] + result[i - 2] + result[i - 3])))\n        fi\n        i=$((i + 1))\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    else\n        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $((\
    \ 1 + $1 / 2 ))\n        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri\
    \ $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local i=1\n    local a=3\n    local b=2\n\
    \    local c=1\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n \
    \   local h=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n  \
    \  local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n   \
    \ local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local\
    \ y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local\
    \ dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local\
    \ ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local\
    \ nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local\
    \ ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local\
    \ xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n   \
    \ local ccc=0\n    local ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n\
    \    local hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n    local\
    \ lll=0\n    local mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n\
    \    local qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n    local\
    \ uuu=0\n    local vvv=0\n    local www=0\n    local xxx=0\n    local yyy=0\n\
    \    local zzz=0\n    local\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local i=1\n  local tri=3\n  local tri_1=3\n\
    \  local tri_2=3\n  local tri_3=3\n  local result=3\n  while [[ $i -lt $n ]];\
    \ do\n    if [[ $i -eq 1 ]]; then\n      result=\"$result $tri\"\n    elif [[\
    \ $i -eq 2 ]]; then\n      result=\"$result $tri\"\n    else\n      if [[ $((i\
    \ % 2)) -eq 0 ]]; then\n        tri=$(((i + 1) / 2))\n      else\n        tri=$((tri_1\
    \ + tri_2 + tri_3))\n      fi\n      result=\"$result $tri\"\n      tri_3=$tri_2\n\
    \      tri_2=$tri_1\n      tri_1=$tri\n    fi\n    i=$((i + 1))\n  done\n  echo\
    \ $result\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2\
    \ 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    else\n        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $((\
    \ 1 + $1 / 2 ))\n        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri\
    \ $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    elif [[ $1 -eq 4 ]]; then\n        echo 3\n    elif [[ $1 -eq 5 ]]; then\n\
    \        echo 11\n    elif [[ $1 -eq 6 ]]; then\n        echo 14\n    elif [[\
    \ $1 -eq 7 ]]; then\n        echo 19\n    elif [[ $1 -eq 8 ]]; then\n        echo\
    \ 27\n    elif [[ $1 -eq 9 ]]; then\n        echo 39\n    elif [[ $1 -eq 10 ]];\
    \ then\n        echo 55\n    elif [[ $1 -eq 11 ]]; then\n        echo 78\n   \
    \ elif [[ $1 -eq 12 ]]; then\n        echo 109\n    elif [[ $1 -eq 13 ]]; then\n\
    \        echo 154\n    elif [[ $1 -eq 14 ]]; then\n        echo 215\n    elif\
    \ [[ $1 -eq 15 ]]; then\n        echo 303\n    elif [[ $1 -eq 16 ]]; then\n  \
    \      echo 430\n    elif [[ $1 -eq 17 ]]; then\n        echo 612\n    elif [[\
    \ $1 -eq 18 ]]; then\n        echo 867\n    elif [[ $1 -eq 19 ]]; then\n     \
    \   echo 1219\n    elif [[ $1 -eq 20 ]]; then\n        echo 1706\n    elif [[\
    \ $1 -eq 21 ]]; then\n        echo 2395\n    elif [[ $1 -eq 22 ]]; then\n    \
    \    echo 3356\n    elif [[ $1 -eq 23 ]]; then\n        echo 4711\n    elif [[\
    \ $1 -eq 24 ]]; then\n        echo 6649\n    elif [[ $1 -eq 25 ]]; then\n    \
    \    echo 9365\n    elif [[ $1 -eq 26 ]]; then\n        echo 13226\n    elif [[\
    \ $1 -eq 27 ]]; then\n        echo 18591\n    elif [[ $1 -eq 28 ]]; then\n   \
    \     echo 26156\n    elif [[ $1 -eq 29 ]]; then\n        echo 36727\n    elif\
    \ [[ $1\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvt52vepb.sh: line 77: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmpvt52vepb.sh: line 77: syntax error near `$1''

    /tmp/tmpvt52vepb.sh: line 77: `    elif [[ $1''

    '
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    else\n        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $((\
    \ 1 + $1 / 2 ))\n        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri\
    \ $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    else\n        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $((\
    \ 1 + $1 / 2 ))\n        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri\
    \ $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local tri_n=3\n    local tri_n_1=3\n \
    \   local tri_n_2=3\n    local tri_n_3=3\n    local i=1\n    local result=()\n\
    \    while [ $i -le $n ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n        \
    \    tri_n=$((i / 2 + 1))\n        else\n            tri_n=$((tri_n_1 + tri_n_2\
    \ + tri_n_3))\n        fi\n        result[$i]=$tri_n\n        tri_n_3=$tri_n_2\n\
    \        tri_n_2=$tri_n_1\n        tri_n_1=$tri_n\n        i=$((i + 1))\n    done\n\
    \    echo ${result[@]}\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local i=0\n  local arr=()\n  while [ $i -le\
    \ $n ]; do\n    if [ $i -eq 0 ]; then\n      arr[$i]=0\n    elif [ $i -eq 1 ];\
    \ then\n      arr[$i]=1\n    elif [ $i -eq 2 ]; then\n      arr[$i]=1\n    else\n\
    \      arr[$i]=$((arr[$i-1]+arr[$i-2]+arr[$i-3]))\n    fi\n    i=$((i+1))\n  done\n\
    \  echo ${arr[@]}\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local -a seq\n    seq[0]=3\n    seq[1]=3\n\
    \    seq[2]=8\n    for ((i=3; i<=n; i++)); do\n        if ((i % 2 == 0)); then\n\
    \            seq[i]=$((1 + i / 2))\n        else\n            seq[i]=$((seq[i-1]\
    \ + seq[i-2] + seq[i+1]))\n        fi\n    done\n    echo ${seq[@]}\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local tri_list=()\n    local i=0\n   \
    \ while [ $i -le $n ]; do\n        if [ $i -eq 0 ]; then\n            tri_list[$i]=0\n\
    \        elif [ $i -eq 1 ]; then\n            tri_list[$i]=0\n        elif [ $i\
    \ -eq 2 ]; then\n            tri_list[$i]=1\n        else\n            if [ $((i\
    \ % 2)) -eq 0 ]; then\n                tri_list[$i]=$((i / 2))\n            else\n\
    \                tri_list[$i]=$((tri_list[$((i - 1))] + tri_list[$((i - 2))] +\
    \ tri_list[$((i + 1))]))\n            fi\n        fi\n        i=$((i + 1))\n \
    \   done\n    echo ${tri_list[@]}\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local -a arr\n  arr[0]=3\n  arr[1]=3\n  arr[2]=8\n\
    \  for ((i=3; i<=n; i++)); do\n    if ((i%2==0)); then\n      arr[i]=$((1+i/2))\n\
    \    else\n      arr[i]=$((arr[i-1]+arr[i-2]+arr[i+1]))\n    fi\n  done\n  echo\
    \ ${arr[@]}\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3\
    \ 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local -a arr\n    arr[0]=3\n    arr[1]=3\n\
    \    arr[2]=8\n    for ((i=3; i<=n; i++)); do\n        if ((i%2==0)); then\n \
    \           arr[i]=1+i/2\n        else\n            arr[i]=${arr[i-1]}+${arr[i-2]}+${arr[i+1]}\n\
    \        fi\n    done\n    echo ${arr[@]}\n}\n\ncandidate() {\n    tri \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local i=1\n  local tri_n=3\n  local tri_n_1=3\n\
    \  local tri_n_2=3\n  local tri_n_3=3\n  local tri_n_4=3\n  local tri_n_5=3\n\
    \  local tri_n_6=3\n  local tri_n_7=3\n  local tri_n_8=3\n  local tri_n_9=3\n\
    \  local tri_n_10=3\n  local tri_n_11=3\n  local tri_n_12=3\n  local tri_n_13=3\n\
    \  local tri_n_14=3\n  local tri_n_15=3\n  local tri_n_16=3\n  local tri_n_17=3\n\
    \  local tri_n_18=3\n  local tri_n_19=3\n  local tri_n_20=3\n  local tri_n_21=3\n\
    \  local tri_n_22=3\n  local tri_n_23=3\n  local tri_n_24=3\n  local tri_n_25=3\n\
    \  local tri_n_26=3\n  local tri_n_27=3\n  local tri_n_28=3\n  local tri_n_29=3\n\
    \  local tri_n_30=3\n  local tri_n_31=3\n  local tri_n_32=3\n  local tri_n_33=3\n\
    \  local tri_n_34=3\n  local tri_n_35=3\n  local tri_n_36=3\n  local tri_n_37=3\n\
    \  local tri_n_38=3\n  local tri_n_39=3\n  local tri_n_40=3\n  local tri_n_41=3\n\
    \  local tri_n_42=3\n  local tri_n_43=3\n  local tri_n_44=3\n  local tri_n_45=3\n\
    \  local tri_n_46=3\n  local tri_n_47=3\n  local tri_n_48=3\n  local tri_n_49=3\n\
    \ \n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 0 ]; then\n    echo 3\n  elif [ $1 -eq 1 ];\
    \ then\n    echo 2\n  elif [ $1 -eq 2 ]; then\n    echo 1\n  else\n    if [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n      echo $(( 1 + $1 / 2 ))\n    else\n      echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n  fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3\
    \ 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local i=0\n  local a=3\n  local b=2\n  local\
    \ c=1\n  local d=0\n  while [ $i -lt $n ]; do\n    if [ $((i % 2)) -eq 0 ]; then\n\
    \      d=$((a + i / 2))\n    else\n      d=$((a + b + c))\n    fi\n    echo $d\n\
    \    c=$b\n    b=$a\n    a=$d\n    i=$((i + 1))\n  done\n}\n\ncandidate() {\n\
    \    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3\
    \ 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"\
    5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n\
    \    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local tri_n=3\n    local tri_n_1=3\n \
    \   local tri_n_2=1\n    local tri_n_3=0\n    local i=1\n    local result=()\n\
    \    while [ $i -le $n ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n        \
    \    tri_n=$(((i + 1) / 2))\n        else\n            tri_n=$((tri_n_1 + tri_n_2\
    \ + tri_n_3))\n        fi\n        result+=($tri_n)\n        tri_n_3=$tri_n_2\n\
    \        tri_n_2=$tri_n_1\n        tri_n_1=$tri_n\n        i=$((i + 1))\n    done\n\
    \    echo ${result[@]}\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local i=0\n  local a=3\n  local b=2\n  local\
    \ c=1\n  local d\n  while [ $i -lt $n ]; do\n    echo $a\n    d=$c\n    c=$b\n\
    \    b=$a\n    a=$((a + b + c))\n    ((i++))\n  done\n}\n\ncandidate() {\n   \
    \ tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\"\
    \ ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\")\
    \ = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n \
    \   [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local result=()\n    local i=0\n    while\
    \ [ $i -le $n ]; do\n        if [ $i -eq 0 ]; then\n            result[$i]=0\n\
    \        elif [ $i -eq 1 ]; then\n            result[$i]=1\n        elif [ $i\
    \ -eq 2 ]; then\n            result[$i]=1\n        else\n            result[$i]=$((\
    \ ${result[$((i-1))]} + ${result[$((i-2))]} + ${result[$((i-3))]} ))\n       \
    \ fi\n        i=$((i+1))\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n\
    \    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3\
    \ 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"\
    5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n\
    \    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 0 ]]; then\n        echo \"3\"\n    elif\
    \ [[ $1 -eq 1 ]]; then\n        echo \"3\"\n    elif [[ $1 -eq 2 ]]; then\n  \
    \      echo \"3\"\n    elif [[ $1 -eq 3 ]]; then\n        echo \"8\"\n    else\n\
    \        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $(( 1 + $1 / 2 ))\n\
    \        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 )))\
    \ + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate() {\n    tri \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local i=0\n    local a=3\n    local b=2\n\
    \    local c=1\n    local d=0\n    while [ $i -lt $n ]; do\n        if [ $((i\
    \ % 2)) -eq 0 ]; then\n            d=$((a + (i / 2)))\n        else\n        \
    \    d=$((a + b + c))\n        fi\n        echo $d\n        c=$b\n        b=$a\n\
    \        a=$d\n        i=$((i + 1))\n    done\n}\n\ncandidate() {\n    tri \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local tri_list=()\n  local i=0\n  while [\
    \ $i -le $n ]; do\n    if [ $i -eq 0 ]; then\n      tri_list+=(3)\n    elif [\
    \ $i -eq 1 ]; then\n      tri_list+=(3)\n    elif [ $i -eq 2 ]; then\n      tri_list+=(3)\n\
    \    elif [ $((i % 2)) -eq 0 ]; then\n      tri_list+=($((1 + i / 2)))\n    else\n\
    \      tri_list+=($((tri_list[$((i - 1))] + tri_list[$((i - 2))] + tri_list[$((i\
    \ + 1))])))\n    fi\n    i=$((i + 1))\n  done\n  echo \"${tri_list[@]}\"\n}\n\n\
    candidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    else\n        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $((\
    \ 1 + $1 / 2 ))\n        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri\
    \ $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local i=0\n    local a=3\n    local b=2\n\
    \    local c=1\n    local d=0\n    local res=()\n    while [ $i -le $n ]; do\n\
    \        if [ $((i % 2)) -eq 0 ]; then\n            res+=($((a + i / 2)))\n  \
    \      else\n            res+=($((a + b + c)))\n            a=$b\n           \
    \ b=$c\n            c=$d\n        fi\n        d=${res[$i]}\n        i=$((i + 1))\n\
    \    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: -1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [[ $1 -eq 0 ]]; then\n    echo \"3\"\n  elif [[ $1 -eq\
    \ 1 ]]; then\n    echo \"3 2\"\n  elif [[ $1 -eq 2 ]]; then\n    echo \"3 2 2\"\
    \n  else\n    echo \"3 2 2\"\n    for (( i = 3; i <= $1; i++ )); do\n      if\
    \ [[ $(( i % 2 )) -eq 0 ]]; then\n        echo $(( 1 + i / 2 ))\n      else\n\
    \        echo $(( $(tri $(( i - 1 ))) + $(tri $(( i - 2 ))) + $(tri $(( i + 1\
    \ ))) ))\n      fi\n    done\n  fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660004645
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local a=3\n    local b=2\n    local c=1\n\
    \    local d=0\n    local i=0\n    local res=()\n    while [ $i -le $n ]; do\n\
    \        if [ $i -eq 0 ]; then\n            res[$i]=$a\n        elif [ $i -eq\
    \ 1 ]; then\n            res[$i]=$b\n        elif [ $i -eq 2 ]; then\n       \
    \     res[$i]=$c\n        else\n            if [ $((i % 2)) -eq 0 ]; then\n  \
    \              d=$((i / 2))\n            else\n                d=$((a + b + c))\n\
    \                a=$b\n                b=$c\n                c=$d\n          \
    \  fi\n            res[$i]=$d\n        fi\n        i=$((i + 1))\n    done\n  \
    \  echo ${res[@]}\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    else\n        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $((\
    \ 1 + $1 / 2 ))\n        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri\
    \ $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( $1 / 2 + 1 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    else\n        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $((\
    \ 1 + $1 / 2 ))\n        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri\
    \ $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local i=0\n    local a=3\n    local b=0\n\
    \    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n \
    \   local h=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n  \
    \  local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n   \
    \ local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local\
    \ y=0\n    local z=0\n    local aa=0\n    local ab=0\n    local ac=0\n    local\
    \ ad=0\n    local ae=0\n    local af=0\n    local ag=0\n    local ah=0\n    local\
    \ ai=0\n    local aj=0\n    local ak=0\n    local al=0\n    local am=0\n    local\
    \ an=0\n    local ao=0\n    local ap=0\n    local aq=0\n    local ar=0\n    local\
    \ as=0\n    local at=0\n    local au=0\n    local av=0\n    local aw=0\n    local\
    \ ax=0\n    local ay=0\n    local az=0\n    local ba=0\n    local bb=0\n    local\
    \ bc=0\n    local bd=0\n    local be=0\n    local bf=0\n    local bg=0\n    local\
    \ bh=0\n    local bi=0\n    local bj=0\n    local bk=0\n    local bl=0\n    local\
    \ bm=0\n    local bn=0\n    local bo=0\n    local bp=0\n    local bq=0\n    local\
    \ br=0\n    local bs=0\n    local bt=0\n    local bu=0\n    local bv=0\n    local\
    \ bw=0\n    local bx=0\n    local by=0\n    local bz=0\n    local ca=0\n    local\
    \ cb=0\n    local cc=0\n   \n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local a=3\n  local b=2\n  local c=1\n  local\
    \ d=0\n  local i=0\n  local result=\"\"\n  while [ $i -lt $n ]; do\n    if [ $((i\
    \ % 2)) -eq 0 ]; then\n      d=$((a + (i / 2)))\n    else\n      d=$((a + b +\
    \ c))\n    fi\n    result=\"$result $d\"\n    a=$b\n    b=$c\n    c=$d\n    i=$((i\
    \ + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local i=0\n  local tri_seq=()\n  while [ $i\
    \ -le $n ]; do\n    if [ $i -eq 0 ]; then\n      tri_seq[$i]=0\n    elif [ $i\
    \ -eq 1 ]; then\n      tri_seq[$i]=1\n    elif [ $i -eq 2 ]; then\n      tri_seq[$i]=1\n\
    \    else\n      tri_seq[$i]=$(( ${tri_seq[$((i-1))]} + ${tri_seq[$((i-2))]} +\
    \ ${tri_seq[$((i-3))]} ))\n    fi\n    i=$((i+1))\n  done\n  echo \"${tri_seq[@]}\"\
    \n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local i=0\n    local a=3\n    local b=2\n\
    \    local c=1\n    local d=0\n    local result=\"\"\n    while [ $i -le $n ];\
    \ do\n        if [ $i -eq 0 ]; then\n            result=\"$result $a\"\n     \
    \   elif [ $i -eq 1 ]; then\n            result=\"$result $b\"\n        elif [\
    \ $i -eq 2 ]; then\n            result=\"$result $c\"\n        else\n        \
    \    d=$((a + b + c))\n            a=$b\n            b=$c\n            c=$d\n\
    \            result=\"$result $d\"\n        fi\n        i=$((i + 1))\n    done\n\
    \    echo $result\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local i=1\n  local tri=3\n  local tri_1=0\n\
    \  local tri_2=0\n  local tri_3=0\n  local result=()\n  while [ $i -le $n ]; do\n\
    \    if [ $((i % 2)) -eq 0 ]; then\n      tri=$(((i + 1) / 2))\n    else\n   \
    \   tri=$((tri_1 + tri_2 + tri_3))\n    fi\n    result+=($tri)\n    tri_3=$tri_2\n\
    \    tri_2=$tri_1\n    tri_1=$tri\n    i=$((i + 1))\n  done\n  echo ${result[@]}\n\
    }\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    else\n        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $((\
    \ 1 + $1 / 2 ))\n        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri\
    \ $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local i=1\n    local a=3\n    local b=2\n\
    \    local c=1\n    local d=0\n    local result=\"\"\n    while [ $i -le $n ];\
    \ do\n        if [ $((i % 2)) -eq 0 ]; then\n            d=$((i / 2))\n      \
    \  else\n            d=$((a + b + c))\n            a=$b\n            b=$c\n  \
    \          c=$d\n        fi\n        result=\"$result $d\"\n        i=$((i + 1))\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    else\n        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $((\
    \ 1 + $1 / 2 ))\n        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri\
    \ $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( $1 / 2 + 1 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local seq=(3 1 2)\n    for ((i=3; i<=n;\
    \ i++)); do\n        if ((i % 2 == 0)); then\n            seq[i]=$((1 + i / 2))\n\
    \        else\n            seq[i]=$((seq[i-1] + seq[i-2] + seq[i+1]))\n      \
    \  fi\n    done\n    echo ${seq[@]}\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local i=0\n    local t1=3\n    local t2=0\n\
    \    local t3=0\n    local t4=0\n    local result=\"\"\n    while [ $i -le $n\
    \ ]; do\n        if [ $i -eq 0 ]; then\n            result=\"$result$t1\"\n  \
    \      elif [ $i -eq 1 ]; then\n            result=\"$result $t2\"\n        elif\
    \ [ $i -eq 2 ]; then\n            result=\"$result $t3\"\n        else\n     \
    \       t4=$((t1 + t2 + t3))\n            result=\"$result $t4\"\n           \
    \ t1=$t2\n            t2=$t3\n            t3=$t4\n        fi\n        i=$((i +\
    \ 1))\n    done\n    echo $result\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    else\n        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $((\
    \ 1 + $1 / 2 ))\n        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri\
    \ $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local -a arr\n    arr[0]=3\n    arr[1]=3\n\
    \    arr[2]=8\n    for ((i=3; i<=n; i++)); do\n        if ((i % 2 == 0)); then\n\
    \            arr[i]=1+i/2\n        else\n            arr[i]=${arr[i-1]}+${arr[i-2]}+${arr[i+1]}\n\
    \        fi\n    done\n    echo ${arr[@]}\n}\n\ncandidate() {\n    tri \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local i=1\n    local a=3\n    local b=2\n\
    \    local c=1\n    local d=0\n    local result=()\n    while [ $i -le $n ]; do\n\
    \        if [ $((i % 2)) -eq 0 ]; then\n            d=$((i / 2))\n        else\n\
    \            d=$((a + b + c))\n            a=$b\n            b=$c\n          \
    \  c=$d\n        fi\n        result+=($d)\n        i=$((i + 1))\n    done\n  \
    \  echo ${result[@]}\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    else\n        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $((\
    \ 1 + $1 / 2 ))\n        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri\
    \ $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    elif [[ $1 -eq 4 ]]; then\n        echo 3\n    elif [[ $1 -eq 5 ]]; then\n\
    \        echo 11\n    elif [[ $1 -eq 6 ]]; then\n        echo 14\n    elif [[\
    \ $1 -eq 7 ]]; then\n        echo 19\n    elif [[ $1 -eq 8 ]]; then\n        echo\
    \ 27\n    elif [[ $1 -eq 9 ]]; then\n        echo 39\n    elif [[ $1 -eq 10 ]];\
    \ then\n        echo 55\n    elif [[ $1 -eq 11 ]]; then\n        echo 78\n   \
    \ elif [[ $1 -eq 12 ]]; then\n        echo 109\n    elif [[ $1 -eq 13 ]]; then\n\
    \        echo 154\n    elif [[ $1 -eq 14 ]]; then\n        echo 215\n    elif\
    \ [[ $1 -eq 15 ]]; then\n        echo 302\n    elif [[ $1 -eq 16 ]]; then\n  \
    \      echo 423\n    elif [[ $1 -eq 17 ]]; then\n        echo 597\n    elif [[\
    \ $1 -eq 18 ]]; then\n        echo 832\n    elif [[ $1 -eq 19 ]]; then\n     \
    \   echo 1161\n    elif [[ $1 -eq 20 ]]; then\n        echo 1629\n    elif [[\
    \ $1 -eq 21 ]]; then\n        echo 2276\n    elif [[ $1 -eq 22 ]]; then\n    \
    \    echo 3195\n    elif [[ $1 -eq 23 ]]; then\n        echo 4483\n    elif [[\
    \ $1 -eq 24 ]]; then\n        echo 6306\n    elif [[ $1 -eq 25 ]]; then\n    \
    \    echo 8825\n    elif [[ $1 -eq 26 ]]; then\n        echo 12333\n    elif [[\
    \ $1 -eq 27 ]]; then\n        echo 17275\n    elif [[ $1 -eq 28 ]]; then\n   \
    \     echo 24110\n    elif [[ $1 -eq 29 ]]; then\n        echo 33695\n    elif\
    \ [[ $1\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqr016hv3.sh: line 77: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmpqr016hv3.sh: line 77: syntax error near `$1''

    /tmp/tmpqr016hv3.sh: line 77: `    elif [[ $1''

    '
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local i=0\n    local res=()\n    while\
    \ [ $i -le $n ]; do\n        if [ $i -eq 0 ]; then\n            res[$i]=0\n  \
    \      elif [ $i -eq 1 ]; then\n            res[$i]=1\n        elif [ $i -eq 2\
    \ ]; then\n            res[$i]=1\n        else\n            res[$i]=$(( ${res[$((i-1))]}\
    \ + ${res[$((i-2))]} + ${res[$((i-3))]} ))\n        fi\n        i=$((i+1))\n \
    \   done\n    echo ${res[@]}\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local i=0\n    local a=3\n    local b=2\n\
    \    local c=1\n    local d=0\n    local result=\"\"\n    while [ $i -le $n ];\
    \ do\n        if [ $i -eq 0 ]; then\n            result=\"$result$a\"\n      \
    \  elif [ $i -eq 1 ]; then\n            result=\"$result $b\"\n        elif [\
    \ $i -eq 2 ]; then\n            result=\"$result $c\"\n        else\n        \
    \    d=$((a + b + c))\n            a=$b\n            b=$c\n            c=$d\n\
    \            result=\"$result $d\"\n        fi\n        i=$((i + 1))\n    done\n\
    \    echo $result\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [[ $1 -eq 1 ]]; then\n    echo 3\n  elif [[ $1 -eq 2\
    \ ]]; then\n    echo 2\n  elif [[ $1 -eq 3 ]]; then\n    echo 8\n  else\n    if\
    \ [[ $(( $1 % 2 )) -eq 0 ]]; then\n      echo $(( 1 + $1 / 2 ))\n    else\n  \
    \    echo $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 )))\
    \ ))\n    fi\n  fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    else\n        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $((\
    \ 1 + $1 / 2 ))\n        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri\
    \ $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    else\n        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $((\
    \ 1 + $1 / 2 ))\n        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri\
    \ $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local -a arr=(3 2 1)\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local\
    \ p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local\
    \ v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local\
    \ bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n  local gg=0\n\
    \  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n  local ll=0\n  local\
    \ mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n  local rr=0\n\
    \  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n  local ww=0\n  local\
    \ xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n  local ccc=0\n\
    \  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n  local hhh=0\n \
    \ local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n  local mmm=0\n  local\
    \ nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local rrr=0\n  local sss=0\n\
    \  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n  local xxx=0\n \
    \ local yyy=0\n  local zzz=0\n  local aaaa=0\n  local bbbb=0\n  local cccc=0\n\
    \  local dddd=0\n  local\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local i=1\n  local a=3\n  local b=2\n  local\
    \ c=1\n  local d=0\n  while [ $i -le $n ]; do\n    if [ $((i % 2)) -eq 0 ]; then\n\
    \      d=$((a + i / 2))\n    else\n      d=$((a + b + c))\n    fi\n    echo $d\n\
    \    a=$b\n    b=$c\n    c=$d\n    i=$((i + 1))\n  done\n}\n\ncandidate() {\n\
    \    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3\
    \ 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"\
    5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n\
    \    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local res=\"\"\n  if [[ $n -eq 1 ]]; then\n\
    \    res=\"3\"\n  elif [[ $n -eq 2 ]]; then\n    res=\"3 2\"\n  elif [[ $n -eq\
    \ 3 ]]; then\n    res=\"3 2 8\"\n  else\n    local i=3\n    local a=3\n    local\
    \ b=2\n    local c=8\n    local d=0\n    res=\"3 2 8\"\n    while [[ $i -lt $n\
    \ ]]; do\n      if [[ $(( $i % 2 )) -eq 0 ]]; then\n        d=$(( $i / 2 ))\n\
    \      else\n        d=$(( $a + $b + $c ))\n      fi\n      res=\"$res $d\"\n\
    \      a=$b\n      b=$c\n      c=$d\n      (( i++ ))\n    done\n  fi\n  echo $res\n\
    }\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    elif [[ $1 -eq 4 ]]; then\n        echo 3\n    elif [[ $1 -eq 5 ]]; then\n\
    \        echo 11\n    elif [[ $1 -eq 6 ]]; then\n        echo 14\n    elif [[\
    \ $1 -eq 7 ]]; then\n        echo 19\n    elif [[ $1 -eq 8 ]]; then\n        echo\
    \ 27\n    elif [[ $1 -eq 9 ]]; then\n        echo 38\n    elif [[ $1 -eq 10 ]];\
    \ then\n        echo 53\n    elif [[ $1 -eq 11 ]]; then\n        echo 74\n   \
    \ elif [[ $1 -eq 12 ]]; then\n        echo 103\n    elif [[ $1 -eq 13 ]]; then\n\
    \        echo 143\n    elif [[ $1 -eq 14 ]]; then\n        echo 198\n    elif\
    \ [[ $1 -eq 15 ]]; then\n        echo 275\n    elif [[ $1 -eq 16 ]]; then\n  \
    \      echo 382\n    elif [[ $1 -eq 17 ]]; then\n        echo 531\n    elif [[\
    \ $1 -eq 18 ]]; then\n        echo 736\n    elif [[ $1 -eq 19 ]]; then\n     \
    \   echo 1023\n    elif [[ $1 -eq 20 ]]; then\n        echo 1418\n    elif [[\
    \ $1 -eq 21 ]]; then\n        echo 1959\n    elif [[ $1 -eq 22 ]]; then\n    \
    \    echo 2726\n    elif [[ $1 -eq 23 ]]; then\n        echo 3777\n    elif [[\
    \ $1 -eq 24 ]]; then\n        echo 5233\n    elif [[ $1 -eq 25 ]]; then\n    \
    \    echo 7302\n    elif [[ $1 -eq 26 ]]; then\n        echo 10135\n    elif [[\
    \ $1 -eq 27 ]]; then\n        echo 14168\n    elif [[ $1 -eq 28 ]]; then\n   \
    \     echo 19701\n    elif [[ $1 -eq 29 ]]; then\n        echo 27270\n    elif\
    \ [[ $1\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0ebozjxh.sh: line 77: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmp0ebozjxh.sh: line 77: syntax error near `$1''

    /tmp/tmp0ebozjxh.sh: line 77: `    elif [[ $1''

    '
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local -a arr\n    arr[0]=3\n    arr[1]=3\n\
    \    arr[2]=8\n    for ((i=3; i<=n; i++)); do\n        if ((i%2==0)); then\n \
    \           arr[i]=1+i/2\n        else\n            arr[i]=${arr[i-1]}+${arr[i-2]}+${arr[i+1]}\n\
    \        fi\n    done\n    echo ${arr[@]}\n}\n\ncandidate() {\n    tri \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[\
    \ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8\
    \ 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local i=0\n    local a=3\n    local b=2\n\
    \    local c=1\n    local d=0\n    local result=\"\"\n    while [ $i -le $n ];\
    \ do\n        if [ $i -eq 0 ]; then\n            result=\"$result$a\"\n      \
    \  elif [ $i -eq 1 ]; then\n            result=\"$result $b\"\n        elif [\
    \ $i -eq 2 ]; then\n            result=\"$result $c\"\n        else\n        \
    \    d=$((a + b + c))\n            a=$b\n            b=$c\n            c=$d\n\
    \            result=\"$result $d\"\n        fi\n        i=$((i + 1))\n    done\n\
    \    echo $result\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    else\n        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $((\
    \ 1 + $1 / 2 ))\n        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri\
    \ $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    elif [[ $1 -eq 4 ]]; then\n        echo 3\n    elif [[ $1 -eq 5 ]]; then\n\
    \        echo 11\n    elif [[ $1 -eq 6 ]]; then\n        echo 14\n    elif [[\
    \ $1 -eq 7 ]]; then\n        echo 19\n    elif [[ $1 -eq 8 ]]; then\n        echo\
    \ 27\n    elif [[ $1 -eq 9 ]]; then\n        echo 39\n    elif [[ $1 -eq 10 ]];\
    \ then\n        echo 55\n    elif [[ $1 -eq 11 ]]; then\n        echo 78\n   \
    \ elif [[ $1 -eq 12 ]]; then\n        echo 109\n    elif [[ $1 -eq 13 ]]; then\n\
    \        echo 154\n    elif [[ $1 -eq 14 ]]; then\n        echo 215\n    elif\
    \ [[ $1 -eq 15 ]]; then\n        echo 302\n    elif [[ $1 -eq 16 ]]; then\n  \
    \      echo 427\n    elif [[ $1 -eq 17 ]]; then\n        echo 604\n    elif [[\
    \ $1 -eq 18 ]]; then\n        echo 847\n    elif [[ $1 -eq 19 ]]; then\n     \
    \   echo 1191\n    elif [[ $1 -eq 20 ]]; then\n        echo 1674\n    elif [[\
    \ $1 -eq 21 ]]; then\n        echo 2347\n    elif [[ $1 -eq 22 ]]; then\n    \
    \    echo 3303\n    elif [[ $1 -eq 23 ]]; then\n        echo 4684\n    elif [[\
    \ $1 -eq 24 ]]; then\n        echo 6652\n    elif [[ $1 -eq 25 ]]; then\n    \
    \    echo 9395\n    elif [[ $1 -eq 26 ]]; then\n        echo 13227\n    elif [[\
    \ $1 -eq 27 ]]; then\n        echo 18794\n    elif [[ $1 -eq 28 ]]; then\n   \
    \     echo 26683\n    elif [[ $1 -eq 29 ]]; then\n        echo 37912\n    elif\
    \ [[ $1\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo01jpky8.sh: line 77: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmpo01jpky8.sh: line 77: syntax error near `$1''

    /tmp/tmpo01jpky8.sh: line 77: `    elif [[ $1''

    '
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local i=0\n  local a=3\n  local b=2\n  local\
    \ c=1\n  local d=0\n  local result=\"\"\n  while [ $i -le $n ]; do\n    if [ $i\
    \ -eq 0 ]; then\n      result=\"$result $a\"\n    elif [ $i -eq 1 ]; then\n  \
    \    result=\"$result $b\"\n    elif [ $i -eq 2 ]; then\n      result=\"$result\
    \ $c\"\n    else\n      d=$((a + b + c))\n      a=$b\n      b=$c\n      c=$d\n\
    \      result=\"$result $d\"\n    fi\n    i=$((i + 1))\n  done\n  echo $result\n\
    }\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local -a arr=(3)\n  if [[ $n -eq 0 ]]; then\n\
    \    echo ${arr[@]}\n    return\n  fi\n  for ((i=1; i<=n; i++)); do\n    if [[\
    \ $((i % 2)) -eq 0 ]]; then\n      arr[$i]=$((1 + i / 2))\n    else\n      arr[$i]=$((arr[$((i\
    \ - 1))] + arr[$((i - 2))] + arr[$((i + 1))]))\n    fi\n  done\n  echo ${arr[@]}\n\
    }\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    else\n        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $((\
    \ 1 + $1 / 2 ))\n        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri\
    \ $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local -i n=$1\n    local -a tri\n    tri[0]=3\n    tri[1]=3\n\
    \    tri[2]=8\n    for ((i=3; i<=n; i++)); do\n        if ((i % 2 == 0)); then\n\
    \            tri[i]=$((i / 2 + 1))\n        else\n            tri[i]=$((tri[i-1]\
    \ + tri[i-2] + tri[i+1]))\n        fi\n    done\n    echo ${tri[@]}\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local i=0\n  local tri_arr=()\n  while [ $i\
    \ -le $n ]; do\n    if [ $i -eq 0 ]; then\n      tri_arr[$i]=0\n    elif [ $i\
    \ -eq 1 ]; then\n      tri_arr[$i]=1\n    elif [ $i -eq 2 ]; then\n      tri_arr[$i]=1\n\
    \    else\n      tri_arr[$i]=$(( ${tri_arr[$((i-1))]} + ${tri_arr[$((i-2))]} +\
    \ ${tri_arr[$((i-3))]} ))\n    fi\n    i=$((i+1))\n  done\n  echo ${tri_arr[@]}\n\
    }\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    else\n        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $((\
    \ 1 + $1 / 2 ))\n        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri\
    \ $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [[ $1 -eq 1 ]]; then\n    echo 3\n  elif [[ $1 -eq 2\
    \ ]]; then\n    echo 2\n  elif [[ $1 -eq 3 ]]; then\n    echo 8\n  else\n    if\
    \ [[ $(( $1 % 2 )) -eq 0 ]]; then\n      echo $(( 1 + $1 / 2 ))\n    else\n  \
    \    echo $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 )))\
    \ ))\n    fi\n  fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local a=3\n    local b=2\n    local c=1\n\
    \    local d=0\n    local i=0\n    local result=\"\"\n    while [ $i -le $n ];\
    \ do\n        if [ $i -eq 0 ]; then\n            result=\"$a\"\n        elif [\
    \ $i -eq 1 ]; then\n            result=\"$result $b\"\n        elif [ $i -eq 2\
    \ ]; then\n            result=\"$result $c\"\n        else\n            if [ $((i\
    \ % 2)) -eq 0 ]; then\n                d=$((i / 2))\n            else\n      \
    \          d=$((a + b + c))\n            fi\n            result=\"$result $d\"\
    \n            a=$b\n            b=$c\n            c=$d\n        fi\n        i=$((i\
    \ + 1))\n    done\n    echo $result\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    else\n        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $((\
    \ 1 + $1 / 2 ))\n        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri\
    \ $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    else\n        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $((\
    \ 1 + $1 / 2 ))\n        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri\
    \ $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    elif [[ $1 -eq 4 ]]; then\n        echo 3\n    else\n        if [[ $((\
    \ $1 % 2 )) -eq 0 ]]; then\n            echo $(( 1 + $1 / 2 ))\n        else\n\
    \            echo $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $((\
    \ $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local tri_list=()\n    local i=0\n   \
    \ while [[ $i -le $n ]]; do\n        if [[ $i -eq 0 ]]; then\n            tri_list+=(3)\n\
    \        elif [[ $i -eq 1 ]]; then\n            tri_list+=(3)\n        elif [[\
    \ $i -eq 2 ]]; then\n            tri_list+=(3)\n        elif [[ $((i % 2)) -eq\
    \ 0 ]]; then\n            tri_list+=($((1 + i / 2)))\n        else\n         \
    \   tri_list+=($((tri_list[$((i - 1))] + tri_list[$((i - 2))] + tri_list[$((i\
    \ + 1))])))\n        fi\n        ((i++))\n    done\n    echo ${tri_list[@]}\n\
    }\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local a=3\n  local b=2\n  local c=1\n  local\
    \ d=0\n  local i=0\n  local result=\"\"\n  while [ $i -lt $n ]; do\n    if [ $((i\
    \ % 2)) -eq 0 ]; then\n      d=$((a + (i / 2)))\n    else\n      d=$((a + b +\
    \ c))\n    fi\n    result=\"$result $d\"\n    a=$b\n    b=$c\n    c=$d\n    i=$((i\
    \ + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [[ $1 -eq 1 ]]; then\n    echo 3\n  elif [[ $1 -eq 2\
    \ ]]; then\n    echo 2\n  elif [[ $1 -eq 3 ]]; then\n    echo 8\n  else\n    if\
    \ [[ $(( $1 % 2 )) -eq 0 ]]; then\n      echo $(( 1 + $1 / 2 ))\n    else\n  \
    \    echo $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 )))\
    \ ))\n    fi\n  fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    else\n        if [[ $(( $1 % 2 )) -eq 0 ]]; then\n            echo $((\
    \ $1 / 2 + 1 ))\n        else\n            echo $(( $(tri $(( $1 - 1 ))) + $(tri\
    \ $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo \"3\"\n  elif [ $(( $1 %\
    \ 2 )) -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $((\
    \ $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local -a arr\n  arr[0]=3\n  arr[1]=3\n  arr[2]=8\n\
    \  for ((i=3; i<=n; i++)); do\n    if ((i%2==0)); then\n      arr[i]=1+i/2\n \
    \   else\n      arr[i]=${arr[i-1]}+${arr[i-2]}+${arr[i+1]}\n    fi\n  done\n \
    \ echo ${arr[@]}\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local tri_arr=()\n  local i=0\n  while [[\
    \ $i -le $n ]]; do\n    if [[ $i -eq 0 ]]; then\n      tri_arr[$i]=0\n    elif\
    \ [[ $i -eq 1 ]]; then\n      tri_arr[$i]=1\n    elif [[ $i -eq 2 ]]; then\n \
    \     tri_arr[$i]=1\n    else\n      tri_arr[$i]=$((tri_arr[$((i-1))] + tri_arr[$((i-2))]\
    \ + tri_arr[$((i-3))]))\n    fi\n    i=$((i+1))\n  done\n  echo ${tri_arr[@]}\n\
    }\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local i=1\n  local tri_list=()\n  while [\
    \ $i -le $n ]; do\n    if [ $i -eq 1 ]; then\n      tri_list+=(3)\n    elif [\
    \ $((i % 2)) -eq 0 ]; then\n      tri_list+=($((1 + i / 2)))\n    else\n     \
    \ tri_list+=($((tri_list[$((i - 2))] + tri_list[$((i - 1))] + tri_list[$((i +\
    \ 1))])))\n    fi\n    i=$((i + 1))\n  done\n  echo ${tri_list[@]}\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local i=0\n    local a=3\n    local b=0\n\
    \    local c=0\n    local d=0\n    local arr=()\n    while [ $i -le $n ]; do\n\
    \        if [ $i -eq 0 ]; then\n            arr[$i]=$a\n        elif [ $i -eq\
    \ 1 ]; then\n            arr[$i]=$b\n        elif [ $i -eq 2 ]; then\n       \
    \     arr[$i]=$c\n        else\n            d=$((a + b + c))\n            a=$b\n\
    \            b=$c\n            c=$d\n            arr[$i]=$d\n        fi\n    \
    \    i=$((i + 1))\n    done\n    echo ${arr[@]}\n}\n\ncandidate() {\n    tri \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [ $1 -eq 1 ]; then\n    echo 3\n  elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n    echo $(( 1 + $1 / 2 ))\n  else\n    echo $(( $(tri $(( $1\
    \ - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    # Write your code here\n    # To print results to the\
    \ standard output you can use echo\n    # Example: echo \"Hello world\"\n    echo\
    \ \"Hello world\"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local a=3\n    local b=2\n    local c=1\n\
    \    local d=0\n    local i=0\n    local result=\"\"\n    while [ $i -lt $n ];\
    \ do\n        if [ $((i % 2)) -eq 0 ]; then\n            d=$((a + (i / 2)))\n\
    \        else\n            d=$((a + b + c))\n        fi\n        result=\"$result\
    \ $d\"\n        a=$b\n        b=$c\n        c=$d\n        i=$((i + 1))\n    done\n\
    \    echo $result\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local i=1\n  local result=3\n  local a=3\n\
    \  local b=3\n  local c=3\n  while [ $i -lt $n ]; do\n    if [ $((i % 2)) -eq\
    \ 0 ]; then\n      result=$((1 + i / 2))\n    else\n      result=$((a + b + c))\n\
    \      a=$b\n      b=$c\n      c=$result\n    fi\n    i=$((i + 1))\n  done\n \
    \ echo $result\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3\
    \ 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local tri_seq=()\n    local i=0\n    local\
    \ tri_n=0\n    while [ $i -le $n ]; do\n        if [ $i -eq 0 ]; then\n      \
    \      tri_n=3\n        elif [ $i -eq 1 ]; then\n            tri_n=1\n       \
    \ elif [ $i -eq 2 ]; then\n            tri_n=2\n        else\n            if [\
    \ $((i % 2)) -eq 0 ]; then\n                tri_n=$((i / 2))\n            else\n\
    \                tri_n=$((tri_seq[i - 1] + tri_seq[i - 2] + tri_seq[i - 3]))\n\
    \            fi\n        fi\n        tri_seq[$i]=$tri_n\n        i=$((i + 1))\n\
    \    done\n    echo \"${tri_seq[@]}\"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local i=1\n    local a=3\n    local b=2\n\
    \    local c=1\n    local d=0\n    while [ $i -le $n ]; do\n        if [ $((i\
    \ % 2)) -eq 0 ]; then\n            d=$((a + (i / 2)))\n        else\n        \
    \    d=$((a + b + c))\n        fi\n        echo -n \"$d \"\n        a=$b\n   \
    \     b=$c\n        c=$d\n        i=$((i + 1))\n    done\n    echo\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local i=0\n  local result=()\n  while [ $i\
    \ -le $n ]; do\n    if [ $i -eq 0 ]; then\n      result[$i]=3\n    elif [ $i -eq\
    \ 1 ]; then\n      result[$i]=3\n    elif [ $i -eq 2 ]; then\n      result[$i]=3\n\
    \    elif [ $((i % 2)) -eq 0 ]; then\n      result[$i]=$((1 + i / 2))\n    else\n\
    \      result[$i]=$((result[$((i - 1))] + result[$((i - 2))] + result[$((i + 1))]))\n\
    \    fi\n    i=$((i + 1))\n  done\n  echo ${result[@]}\n}\n\ncandidate() {\n \
    \   tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2\
    \ 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"\
    5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n\
    \    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  local n=$1\n  local i=0\n  local tri_list=()\n  while [\
    \ $i -le $n ]; do\n    if [ $i -eq 0 ]; then\n      tri_list[$i]=0\n    elif [\
    \ $i -eq 1 ]; then\n      tri_list[$i]=1\n    elif [ $i -eq 2 ]; then\n      tri_list[$i]=1\n\
    \    else\n      tri_list[$i]=$(( ${tri_list[$((i-1))]} + ${tri_list[$((i-2))]}\
    \ + ${tri_list[$((i-3))]} ))\n    fi\n    i=$((i+1))\n  done\n  echo ${tri_list[@]}\n\
    }\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n  if [[ $1 -eq 1 ]]; then\n    echo 3\n  elif [[ $1 -eq 2\
    \ ]]; then\n    echo 2\n  elif [[ $1 -eq 3 ]]; then\n    echo 8\n  else\n    if\
    \ [[ $(( $1 % 2 )) -eq 0 ]]; then\n      echo $(( $1 / 2 + 1 ))\n    else\n  \
    \    echo $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 )))\
    \ ))\n    fi\n  fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [ $1 -eq 1 ]; then\n        echo 3\n    elif [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n        echo $(( 1 + $1 / 2 ))\n    else\n        echo\
    \ $(( $(tri $(( $1 - 1 ))) + $(tri $(( $1 - 2 ))) + $(tri $(( $1 + 1 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    local n=$1\n    local i=0\n    local tri=()\n    while\
    \ [ $i -le $n ]; do\n        if [ $i -eq 0 ]; then\n            tri[$i]=3\n  \
    \      elif [ $i -eq 1 ]; then\n            tri[$i]=3\n        elif [ $i -eq 2\
    \ ]; then\n            tri[$i]=3\n        elif [ $((i % 2)) -eq 0 ]; then\n  \
    \          tri[$i]=$((1 + i / 2))\n        else\n            tri[$i]=$((tri[$((i\
    \ - 1))] + tri[$((i - 2))] + tri[$((i + 1))]))\n        fi\n        i=$((i + 1))\n\
    \    done\n    echo ${tri[@]}\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004640
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n#\n# $1 is an\
    \ integer\ntri() {\n    if [[ $1 -eq 1 ]]; then\n        echo 3\n    elif [[ $1\
    \ -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo\
    \ 8\n    elif [[ $1 -eq 4 ]]; then\n        echo 3\n    elif [[ $1 -eq 5 ]]; then\n\
    \        echo 11\n    elif [[ $1 -eq 6 ]]; then\n        echo 14\n    elif [[\
    \ $1 -eq 7 ]]; then\n        echo 19\n    elif [[ $1 -eq 8 ]]; then\n        echo\
    \ 27\n    elif [[ $1 -eq 9 ]]; then\n        echo 39\n    elif [[ $1 -eq 10 ]];\
    \ then\n        echo 55\n    elif [[ $1 -eq 11 ]]; then\n        echo 78\n   \
    \ elif [[ $1 -eq 12 ]]; then\n        echo 109\n    elif [[ $1 -eq 13 ]]; then\n\
    \        echo 154\n    elif [[ $1 -eq 14 ]]; then\n        echo 215\n    elif\
    \ [[ $1 -eq 15 ]]; then\n        echo 303\n    elif [[ $1 -eq 16 ]]; then\n  \
    \      echo 433\n    elif [[ $1 -eq 17 ]]; then\n        echo 614\n    elif [[\
    \ $1 -eq 18 ]]; then\n        echo 871\n    elif [[ $1 -eq 19 ]]; then\n     \
    \   echo 1228\n    elif [[ $1 -eq 20 ]]; then\n        echo 1742\n    elif [[\
    \ $1 -eq 21 ]]; then\n        echo 2470\n    elif [[ $1 -eq 22 ]]; then\n    \
    \    echo 3506\n    elif [[ $1 -eq 23 ]]; then\n        echo 4959\n    elif [[\
    \ $1 -eq 24 ]]; then\n        echo 7061\n    elif [[ $1 -eq 25 ]]; then\n    \
    \    echo 9970\n    elif [[ $1 -eq 26 ]]; then\n        echo 14130\n    elif [[\
    \ $1 -eq 27 ]]; then\n        echo 19845\n    elif [[ $1 -eq 28 ]]; then\n   \
    \     echo 28095\n    elif [[ $1 -eq 29 ]]; then\n        echo 39741\n    elif\
    \ [[\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9_on_1nh.sh: line 78: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmp9_on_1nh.sh: line 78: syntax error near `}''

    /tmp/tmp9_on_1nh.sh: line 78: `}''

    '
  stdout: ''
  timestamp: 1660004640
