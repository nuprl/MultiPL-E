language: sh
name: HumanEval_61_correct_bracketing
results:
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        if [[ ${brackets:$i:1} == \"\
    (\" ]]; then\n            stack+=\"(\"\n        elif [[ ${brackets:$i:1} == \"\
    )\" ]]; then\n            if [[ -z $stack ]]; then\n                return 1\n\
    \            fi\n            stack=${stack:0:-1}\n        fi\n    done\n    if\
    \ [[ -z $stack ]]; then\n        return 0\n    else\n        return 1\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n\
    \    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_count=0\n\
    \    local close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n       \
    \ if [[ ${brackets:$i:1} == \"(\" ]]; then\n            (( open_count++ ))\n \
    \       elif [[ ${brackets:$i:1} == \")\" ]]; then\n            (( close_count++\
    \ ))\n        fi\n        if (( close_count > open_count )); then\n          \
    \  return 1\n        fi\n    done\n    if (( open_count == close_count )); then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    local top\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]];\
    \ then\n            stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \"\
    )\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                return\
    \ 1\n            fi\n            top=\"${stack[-1]}\"\n            if [[ \"$top\"\
    \ == \"(\" ]]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n\
    \            else\n                return 1\n            fi\n        else\n  \
    \          return 1\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i=0\n    local len=${#brackets}\n    local c\n    while [ $i -lt $len\
    \ ]; do\n        c=${brackets:$i:1}\n        if [ \"$c\" == \"(\" ]; then\n  \
    \          stack+=($c)\n        elif [ \"$c\" == \")\" ]; then\n            if\
    \ [ ${#stack[@]} -eq 0 ]; then\n                return 1\n            fi\n   \
    \         unset stack[${#stack[@]}-1]\n        fi\n        i=$((i+1))\n    done\n\
    \    if [ ${#stack[@]} -eq 0 ]; then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n\
    \    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"(\" ]]; then\n            count=$((count + 1))\n        elif [[ \"${brackets:$i:1}\"\
    \ == \")\" ]]; then\n            count=$((count - 1))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            return 1\n        fi\n    done\n    if\
    \ [[ $count -eq 0 ]]; then\n        return 0\n    else\n        return 1\n   \
    \ fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local -i i=0\n    local -i len=${#brackets}\n    local -i top=0\n    local\
    \ -i count=0\n    local -i result=0\n    local -i index=0\n    local -i flag=0\n\
    \    local -i flag1=0\n    local -i flag2=0\n    local -i flag3=0\n    local -i\
    \ flag4=0\n    local -i flag5=0\n    local -i flag6=0\n    local -i flag7=0\n\
    \    local -i flag8=0\n    local -i flag9=0\n    local -i flag10=0\n    local\
    \ -i flag11=0\n    local -i flag12=0\n    local -i flag13=0\n    local -i flag14=0\n\
    \    local -i flag15=0\n    local -i flag16=0\n    local -i flag17=0\n    local\
    \ -i flag18=0\n    local -i flag19=0\n    local -i flag20=0\n    local -i flag21=0\n\
    \    local -i flag22=0\n    local -i flag23=0\n    local -i flag24=0\n    local\
    \ -i flag25=0\n    local -i flag26=0\n    local -i flag27=0\n    local -i flag28=0\n\
    \    local -i flag29=0\n    local -i flag30=0\n    local -i flag31=0\n    local\
    \ -i flag32=0\n    local -i flag33=0\n    local -i flag34=0\n    local -i flag35=0\n\
    \    local -i flag36=0\n    local -i flag37=0\n    local -i flag38=0\n    local\
    \ -i flag39=0\n    local -i flag40=0\n    local -i flag41=0\n    local -i flag42=0\n\
    \    local -i flag43=0\n    local -i flag44=0\n    local -i flag45=0\n    local\
    \ -i flag46=0\n    local -i flag47=0\n    local -i flag48=0\n    local -i flag\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local stack_top=0\n    local i=0\n    local len=${#brackets}\n    local bracket\n\
    \    local top_bracket\n\n    while [ $i -lt $len ]; do\n        bracket=\"${brackets:$i:1}\"\
    \n        if [ \"$bracket\" == \"(\" ]; then\n            stack[$stack_top]=\"\
    $bracket\"\n            stack_top=$((stack_top + 1))\n        elif [ \"$bracket\"\
    \ == \")\" ]; then\n            if [ $stack_top -eq 0 ]; then\n              \
    \  return 1\n            fi\n            stack_top=$((stack_top - 1))\n      \
    \      top_bracket=\"${stack[$stack_top]}\"\n            if [ \"$top_bracket\"\
    \ != \"(\" ]; then\n                return 1\n            fi\n        else\n \
    \           return 1\n        fi\n        i=$((i + 1))\n    done\n\n    if [ $stack_top\
    \ -ne 0 ]; then\n        return 1\n    fi\n\n    return 0\n}\n\ncandidate() {\n\
    \    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n\
    \    local close_count=0\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            ((open_count++))\n\
    \        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            ((close_count++))\n\
    \        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n     \
    \   return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local open_brackets=(\"(\" \"[\" \"{\")\n    local close_brackets=(\")\"\
    \ \"]\" \"}\")\n    local open_bracket\n    local close_bracket\n    local i\n\
    \    local j\n    local stack_top\n\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        for ((j=0; j<${#open_brackets[@]}; j++)); do\n            open_bracket=\"\
    ${open_brackets[$j]}\"\n            close_bracket=\"${close_brackets[$j]}\"\n\
    \            if [[ \"${brackets:$i:1}\" == \"$open_bracket\" ]]; then\n      \
    \          stack+=(\"$open_bracket\")\n            elif [[ \"${brackets:$i:1}\"\
    \ == \"$close_bracket\" ]]; then\n                stack_top=\"${stack[${#stack[@]}-1]}\"\
    \n                if [[ \"$stack_top\" == \"$open_bracket\" ]]; then\n       \
    \             unset stack[${#stack[@]}-1]\n                else\n            \
    \        return 1\n                fi\n            fi\n        done\n    done\n\
    \n    if [[ ${#stack[@]} -gt 0 ]]; then\n        return 1\n    fi\n\n    return\
    \ 0\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=''\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\
    \n        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"$stack$char\"\
    \n        elif [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                return 1\n            fi\n            stack=\"${stack%?}\"\
    \n        fi\n    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=(\"$bracket\")\n\
    \        elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq\
    \ 0 ]]; then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    [[ ${#stack[@]} -eq 0 ]]\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n\
    \    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open=0\n\
    \    local close=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[\
    \ \"${brackets:$i:1}\" == \"(\" ]]; then\n            open=$(( open + 1 ))\n \
    \       elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            close=$((\
    \ close + 1 ))\n        fi\n        if [[ $close -gt $open ]]; then\n        \
    \    return 1\n        fi\n    done\n    if [[ $open -eq $close ]]; then\n   \
    \     return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local i=0\n    local len=${#brackets}\n    local bracket\n    local top\n\
    \    while [ $i -lt $len ]; do\n        bracket=${brackets:$i:1}\n        if [\
    \ \"$bracket\" == \"(\" ]; then\n            stack+=($bracket)\n        elif [\
    \ \"$bracket\" == \")\" ]; then\n            if [ ${#stack[@]} -eq 0 ]; then\n\
    \                return 1\n            fi\n            top=${stack[${#stack[@]}-1]}\n\
    \            if [ \"$top\" == \"(\" ]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\"\
    )\n            else\n                return 1\n            fi\n        else\n\
    \            return 1\n        fi\n        i=$((i+1))\n    done\n    if [ ${#stack[@]}\
    \ -eq 0 ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i=0\n    local len=${#brackets}\n    while [ $i -lt $len ]; do\n  \
    \      local bracket=${brackets:$i:1}\n        if [ \"$bracket\" == \"(\" ]; then\n\
    \            stack+=($bracket)\n        elif [ \"$bracket\" == \")\" ]; then\n\
    \            if [ ${#stack[@]} -eq 0 ]; then\n                return 1\n     \
    \       fi\n            unset stack[${#stack[@]}-1]\n        fi\n        i=$((i+1))\n\
    \    done\n    if [ ${#stack[@]} -eq 0 ]; then\n        return 0\n    else\n \
    \       return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=\"\
    ${brackets:$i:1}\"\n        if [[ \"$c\" == \"(\" ]]; then\n            stack=\"\
    $stack(\"\n        elif [[ \"$c\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                return 1\n            fi\n            stack=\"${stack:0:-1}\"\
    \n        fi\n    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n        fi\n \
    \   done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local -i open_count=0\n\
    \    local -i close_count=0\n    local -i i=0\n    local -i len=${#brackets}\n\
    \    local -i open_pos\n    local -i close_pos\n\n    while [ $i -lt $len ]; do\n\
    \        if [ \"${brackets:$i:1}\" == \"(\" ]; then\n            open_count=$((open_count\
    \ + 1))\n            open_pos=$i\n        elif [ \"${brackets:$i:1}\" == \")\"\
    \ ]; then\n            close_count=$((close_count + 1))\n            close_pos=$i\n\
    \        fi\n        i=$((i + 1))\n    done\n\n    if [ $open_count -ne $close_count\
    \ ]; then\n        return 1\n    fi\n\n    if [ $open_pos -gt $close_pos ]; then\n\
    \        return 1\n    fi\n\n    return 0\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=$1\n  local stack=()\n  local\
    \ bracket\n  for ((i=0; i<${#brackets}; i++)); do\n    bracket=${brackets:$i:1}\n\
    \    if [[ $bracket == \"(\" ]]; then\n      stack+=($bracket)\n    elif [[ $bracket\
    \ == \")\" ]]; then\n      if [[ ${#stack[@]} -eq 0 ]]; then\n        return 1\n\
    \      fi\n      stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n    fi\n  done\n  if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\
    \ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local i\n    local c\n    for ((i=0; i<${#brackets}; i++)); do\n        c=${brackets:$i:1}\n\
    \        if [[ \"$c\" == \"(\" ]]; then\n            stack+=(\"$c\")\n       \
    \ elif [[ \"$c\" == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack:0:-1}\"\n        fi\n    done\n    [[ -z \"$stack\"\
    \ ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i=0\n    local len=${#brackets}\n    while [ $i -lt $len ]; do\n\
    \        local c=${brackets:$i:1}\n        if [ \"$c\" == \"(\" ]; then\n    \
    \        stack=\"$stack$c\"\n        elif [ \"$c\" == \")\" ]; then\n        \
    \    if [ -z \"$stack\" ]; then\n                return 1\n            fi\n  \
    \          stack=${stack%?}\n        fi\n        i=$((i+1))\n    done\n    if\
    \ [ -z \"$stack\" ]; then\n        return 0\n    else\n        return 1\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    local top\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]];\
    \ then\n            stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \"\
    )\" ]]; then\n            top=\"${stack[-1]}\"\n            if [[ \"$top\" ==\
    \ \"(\" ]]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n \
    \           else\n                return 1\n            fi\n        fi\n    done\n\
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    local top\n\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]];\
    \ then\n            stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \"\
    )\" ]]; then\n            top=\"${stack[-1]}\"\n            if [[ \"$top\" ==\
    \ \"(\" ]]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n \
    \           else\n                return 1\n            fi\n        fi\n    done\n\
    \n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n\
    \    local close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n       \
    \ if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            open_count=$(( open_count\
    \ + 1 ))\n        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n           \
    \ close_count=$(( close_count + 1 ))\n        fi\n    done\n    if [[ $open_count\
    \ -eq $close_count ]]; then\n        echo \"True\"\n    else\n        echo \"\
    False\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_brackets=0\n\
    \    local close_brackets=0\n    for (( i=0; i<${#brackets}; i++ )); do\n    \
    \    if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            (( open_brackets++\
    \ ))\n        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            (( close_brackets++\
    \ ))\n        fi\n        if [[ $close_brackets -gt $open_brackets ]]; then\n\
    \            return 1\n        fi\n    done\n    if [[ $open_brackets -eq $close_brackets\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    [[ -z \"$stack\"\
    \ ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n\
    \    local close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n       \
    \ if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            open_count=$(( open_count\
    \ + 1 ))\n        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n           \
    \ close_count=$(( close_count + 1 ))\n        fi\n    done\n    if [[ $open_count\
    \ -eq $close_count ]]; then\n        return 0\n    else\n        return 1\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local char=\"${brackets:$i:1}\"\
    \n        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"$stack(\"\n \
    \       elif [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"$stack\" ]];\
    \ then\n                return 1\n            fi\n            stack=\"${stack%?}\"\
    \n        fi\n    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    local top\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]];\
    \ then\n            stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \"\
    )\" ]]; then\n            top=\"${stack[-1]}\"\n            if [[ \"$top\" ==\
    \ \"(\" ]]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n \
    \           else\n                return 1\n            fi\n        fi\n    done\n\
    \    if [[ \"${#stack[@]}\" -eq 0 ]]; then\n        return 0\n    else\n     \
    \   return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ $c == \"(\" ]]; then\n            stack+=($c)\n        elif [[\
    \ $c == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n      \
    \          return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open=0\n\
    \    local close=0\n    local i=0\n    local len=${#brackets}\n    while [ $i\
    \ -lt $len ]; do\n        if [ \"${brackets:$i:1}\" == \"(\" ]; then\n       \
    \     ((open++))\n        elif [ \"${brackets:$i:1}\" == \")\" ]; then\n     \
    \       ((close++))\n        fi\n        ((i++))\n    done\n    if [ $open -eq\
    \ $close ]; then\n        echo \"True\"\n    else\n        echo \"False\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_brackets=0\n\
    \    local close_brackets=0\n    local i=0\n    local len=${#brackets}\n    while\
    \ [ $i -lt $len ]; do\n        local bracket=${brackets:$i:1}\n        if [ \"\
    $bracket\" == \"(\" ]; then\n            open_brackets=$((open_brackets + 1))\n\
    \        elif [ \"$bracket\" == \")\" ]; then\n            close_brackets=$((close_brackets\
    \ + 1))\n        fi\n        if [ $close_brackets -gt $open_brackets ]; then\n\
    \            return 1\n        fi\n        i=$((i + 1))\n    done\n    if [ $open_brackets\
    \ -eq $close_brackets ]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for (( i=0; i<${#brackets}; i++ )); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ \"${#stack[@]}\" -eq 0 ]]; then\n                return 1\n   \
    \         fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n\n\
    \    if [[ \"${#stack[@]}\" -eq 0 ]]; then\n        return 0\n    else\n     \
    \   return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    local top\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]];\
    \ then\n            stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \"\
    )\" ]]; then\n            top=\"${stack[-1]}\"\n            if [[ \"$top\" ==\
    \ \"(\" ]]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n \
    \           else\n                return 1\n            fi\n        fi\n    done\n\
    \    if [[ \"${#stack[@]}\" -gt 0 ]]; then\n        return 1\n    fi\n    return\
    \ 0\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n        fi\n    done\n    [[ ${#stack[@]} -eq 0 ]]\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    local top\n\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]];\
    \ then\n            stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \"\
    )\" ]]; then\n            top=\"${stack[-1]}\"\n            if [[ \"$top\" ==\
    \ \"(\" ]]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n \
    \           else\n                return 1\n            fi\n        fi\n    done\n\
    \n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n\
    \    local close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n       \
    \ if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            open_count=$(( open_count\
    \ + 1 ))\n        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n           \
    \ close_count=$(( close_count + 1 ))\n        fi\n    done\n    if [[ $open_count\
    \ -eq $close_count ]]; then\n        echo \"True\"\n    else\n        echo \"\
    False\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ \"$bracket\" == \"(\" ]]; then\n            stack+=(\"$bracket\"\
    )\n        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ \"${#stack[@]}\"\
    \ -eq 0 ]]; then\n                return 1\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ \"${#stack[@]}\" -eq\
    \ 0 ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i=0\n    local c\n    for ((i=0; i<${#brackets}; i++)); do\n      \
    \  c=${brackets:$i:1}\n        if [[ \"$c\" == \"(\" ]]; then\n            stack+=($c)\n\
    \        elif [[ \"$c\" == \")\" ]]; then\n            if [[ ${#stack[@]} -eq\
    \ 0 ]]; then\n                return 1\n            fi\n            stack=(\"\
    ${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n\
    \    local i=0\n    local len=${#brackets}\n    while [ $i -lt $len ]; do\n  \
    \      local c=${brackets:$i:1}\n        if [ \"$c\" == \"(\" ]; then\n      \
    \      stack=\"$stack$c\"\n        elif [ \"$c\" == \")\" ]; then\n          \
    \  if [ -z \"$stack\" ]; then\n                return 1\n            fi\n    \
    \        stack=${stack%?}\n        fi\n        i=$((i+1))\n    done\n    if [\
    \ -z \"$stack\" ]; then\n        return 0\n    else\n        return 1\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    local top\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]];\
    \ then\n            stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \"\
    )\" ]]; then\n            top=\"${stack[-1]}\"\n            if [[ \"$top\" ==\
    \ \"(\" ]]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n \
    \           else\n                return 1\n            fi\n        fi\n    done\n\
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n\
    \    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local stack_size=0\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        if [[ ${brackets:$i:1} == \"(\" ]]; then\n            stack[$stack_size]=\"\
    (\"\n            ((stack_size++))\n        elif [[ ${brackets:$i:1} == \")\" ]];\
    \ then\n            if [[ $stack_size -eq 0 ]]; then\n                return 1\n\
    \            fi\n            ((stack_size--))\n        fi\n    done\n    if [[\
    \ $stack_size -eq 0 ]]; then\n        return 0\n    else\n        return 1\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i=0\n    local c\n    for ((i=0; i<${#brackets}; i++)); do\n      \
    \  c=${brackets:$i:1}\n        if [[ $c == \"(\" ]]; then\n            stack+=($c)\n\
    \        elif [[ $c == \")\" ]]; then\n            if [[ ${#stack[@]} == 0 ]];\
    \ then\n                return 1\n            fi\n            stack=(\"${stack[@]:0:${#stack[@]}-1}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} == 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i=0\n    local len=${#brackets}\n    while [ $i -lt $len ]; do\n  \
    \      local char=${brackets:$i:1}\n        if [ \"$char\" == \"(\" ]; then\n\
    \            stack+=($char)\n        elif [ \"$char\" == \")\" ]; then\n     \
    \       if [ ${#stack[@]} -eq 0 ]; then\n                return 1\n          \
    \  fi\n            unset stack[${#stack[@]}-1]\n        fi\n        i=$((i+1))\n\
    \    done\n    if [ ${#stack[@]} -eq 0 ]; then\n        return 0\n    else\n \
    \       return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    brackets=$1\n    # remove all \"(\"\n  \
    \  brackets=${brackets//(/}\n    # remove all \")\"\n    brackets=${brackets//)/}\n\
    \    # if brackets is empty, then all brackets are correctly paired\n    [ -z\
    \ \"$brackets\" ]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ \"$bracket\" == \"(\" ]]; then\n            stack+=($bracket)\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n                return 1\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ $c == \"(\" ]]; then\n            stack+=(\"$c\")\n        elif\
    \ [[ $c == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n   \
    \             return 1\n            fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local stack_top=0\n    local i=0\n    local len=${#brackets}\n    local bracket\n\
    \n    while [ $i -lt $len ]; do\n        bracket=${brackets:$i:1}\n        if\
    \ [ \"$bracket\" == \"(\" ]; then\n            stack[$stack_top]=$bracket\n  \
    \          stack_top=$((stack_top + 1))\n        elif [ \"$bracket\" == \")\"\
    \ ]; then\n            if [ $stack_top -eq 0 ]; then\n                return 1\n\
    \            fi\n            stack_top=$((stack_top - 1))\n        fi\n      \
    \  i=$((i + 1))\n    done\n\n    if [ $stack_top -eq 0 ]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ \"${#stack[@]}\" -eq 0 ]]; then\n                return 1\n   \
    \         fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n\
    \    [[ \"${#stack[@]}\" -eq 0 ]]\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local i=0\n    local len=${#brackets}\n    local c\n    for ((i=0; i<len;\
    \ i++)); do\n        c=${brackets:i:1}\n        if [[ \"$c\" == \"(\" ]]; then\n\
    \            stack+=($c)\n        elif [[ \"$c\" == \")\" ]]; then\n         \
    \   if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n            fi\n\
    \            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n    done\n\
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    [[ -z \"$stack\"\
    \ ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack$bracket\"\
    \n        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                return 1\n            fi\n            stack=\"${stack%?}\"\
    \n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        return 0\n \
    \   else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local stack_top=0\n    local i=0\n    local c\n    local top\n    while [\
    \ $i -lt ${#brackets} ]; do\n        c=${brackets:$i:1}\n        if [ \"$c\" ==\
    \ \"(\" ]; then\n            stack[$stack_top]=$c\n            stack_top=$((stack_top+1))\n\
    \        elif [ \"$c\" == \")\" ]; then\n            if [ $stack_top -eq 0 ];\
    \ then\n                return 1\n            fi\n            stack_top=$((stack_top-1))\n\
    \            top=${stack[$stack_top]}\n            if [ \"$top\" != \"(\" ]; then\n\
    \                return 1\n            fi\n        fi\n        i=$((i+1))\n  \
    \  done\n    if [ $stack_top -ne 0 ]; then\n        return 1\n    fi\n    return\
    \ 0\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            stack+=($i)\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n         \
    \       return 1\n            fi\n            unset stack[${#stack[@]}-1]\n  \
    \      fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack$bracket\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n \
    \           if [[ -z \"$stack\" ]]; then\n                return 1\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i=0\n    local len=${#brackets}\n    local c\n    while [ $i -lt $len\
    \ ]; do\n        c=${brackets:$i:1}\n        if [ \"$c\" == \"(\" ]; then\n  \
    \          stack+=($c)\n        elif [ \"$c\" == \")\" ]; then\n            if\
    \ [ ${#stack[@]} -eq 0 ]; then\n                return 1\n            fi\n   \
    \         stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n        i=$(($i+1))\n\
    \    done\n    if [ ${#stack[@]} -eq 0 ]; then\n        return 0\n    else\n \
    \       return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for (( i=0; i<${#brackets}; i++ )); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ \"$bracket\" == \"(\" ]]; then\n            stack+=($bracket)\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n                return 1\n            fi\n            stack=(\"\
    ${stack[@]:0:${#stack[@]}-1}\")\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local stack=()\n\
    \  local bracket\n  for ((i=0; i<${#brackets}; i++)); do\n    bracket=\"${brackets:$i:1}\"\
    \n    if [[ \"$bracket\" == \"(\" ]]; then\n      stack+=(\"$bracket\")\n    elif\
    \ [[ \"$bracket\" == \")\" ]]; then\n      if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \        return 1\n      fi\n      unset stack[${#stack[@]}-1]\n    fi\n  done\n\
    \  if [[ ${#stack[@]} -eq 0 ]]; then\n    return 0\n  else\n    return 1\n  fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i=0\n    local len=${#brackets}\n    while [ $i -lt $len ]; do\n  \
    \      local c=${brackets:$i:1}\n        if [ \"$c\" == \"(\" ]; then\n      \
    \      stack+=($c)\n        elif [ \"$c\" == \")\" ]; then\n            if [ ${#stack[@]}\
    \ -eq 0 ]; then\n                return 1\n            fi\n            stack=(\"\
    ${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n        i=$(($i+1))\n    done\n\
    \    if [ ${#stack[@]} -eq 0 ]; then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local open_count=0\n\
    \  local close_count=0\n  local i=0\n  local c=''\n  local len=${#brackets}\n\
    \  while [ $i -lt $len ]; do\n    c=${brackets:$i:1}\n    if [ \"$c\" == \"(\"\
    \ ]; then\n      open_count=$((open_count + 1))\n    elif [ \"$c\" == \")\" ];\
    \ then\n      close_count=$((close_count + 1))\n    fi\n    if [ $close_count\
    \ -gt $open_count ]; then\n      return 1\n    fi\n    i=$((i + 1))\n  done\n\
    \  if [ $open_count -eq $close_count ]; then\n    return 0\n  else\n    return\
    \ 1\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local open_brackets=('(')\n    local close_brackets=(')')\n    local i=0\n\
    \    local j=0\n    local stack_top=0\n    local stack_size=0\n    local open_bracket=''\n\
    \    local close_bracket=''\n    local is_correct=true\n\n    while [ $i -lt ${#brackets}\
    \ ]; do\n        open_bracket=${brackets:$i:1}\n        for j in ${!open_brackets[@]};\
    \ do\n            if [ \"$open_bracket\" == \"${open_brackets[$j]}\" ]; then\n\
    \                stack+=($j)\n                break\n            fi\n        done\n\
    \        i=$((i+1))\n    done\n\n    stack_size=${#stack[@]}\n    i=0\n    while\
    \ [ $i -lt ${#brackets} ]; do\n        close_bracket=${brackets:$i:1}\n      \
    \  for j in ${!close_brackets[@]}; do\n            if [ \"$close_bracket\" ==\
    \ \"${close_brackets[$j]}\" ]; then\n                if [ $stack_size -eq 0 ];\
    \ then\n                    is_correct=false\n                    break\n    \
    \            fi\n                stack_top=${stack[$((stack_size-1))]}\n     \
    \           if [ $j -ne $stack_top ]; then\n                    is_correct=false\n\
    \                    break\n                fi\n                stack=(\"${stack[@]:0:$((stack_size-1))}\"\
    )\n                stack_size=$((stack_size-1))\n                break\n     \
    \       fi\n        done\n        i=$((i+1))\n    done\n\n    if [ $stack_size\
    \ -ne 0 ]; then\n        is_correct=false\n    fi\n\n    echo $is_correct\n}\n\
    \ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local open_bracket=\"(\"\n    local close_bracket=\")\"\n    local i\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"$open_bracket\" ]]; then\n            stack=\"\
    $stack$open_bracket\"\n        elif [[ \"$bracket\" == \"$close_bracket\" ]];\
    \ then\n            if [[ -z \"$stack\" ]]; then\n                return 1\n \
    \           fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if\
    \ [[ -z \"$stack\" ]]; then\n        return 0\n    fi\n    return 1\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n\
    \    local close_count=0\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            open_count=$((open_count\
    \ + 1))\n        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            close_count=$((close_count\
    \ + 1))\n        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local -i open=0\n\
    \    local -i close=0\n    local -i i=0\n    local -i len=${#brackets}\n    for\
    \ ((i=0; i<len; i++)); do\n        if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n\
    \            ((open++))\n        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n\
    \            ((close++))\n        fi\n        if ((close > open)); then\n    \
    \        return 1\n        fi\n    done\n    if ((open == close)); then\n    \
    \    return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n\
    \    local close_count=0\n    for ((i=0; i<${#brackets}; i++)); do\n        if\
    \ [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            ((open_count++))\n  \
    \      elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            ((close_count++))\n\
    \        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n     \
    \   return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_count=0\n\
    \    local close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n       \
    \ if [[ ${brackets:$i:1} == \"(\" ]]; then\n            open_count=$((open_count+1))\n\
    \        elif [[ ${brackets:$i:1} == \")\" ]]; then\n            close_count=$((close_count+1))\n\
    \        fi\n        if [[ $close_count -gt $open_count ]]; then\n           \
    \ return 1\n        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n\
    \    local close_count=0\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            open_count=$((open_count\
    \ + 1))\n        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            close_count=$((close_count\
    \ + 1))\n        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=$1\n  local stack=\"\"\n  local\
    \ i=0\n  local length=${#brackets}\n  while [ $i -lt $length ]; do\n    local\
    \ char=${brackets:$i:1}\n    if [ \"$char\" == \"(\" ]; then\n      stack=\"$stack$char\"\
    \n    elif [ \"$char\" == \")\" ]; then\n      if [ -z \"$stack\" ]; then\n  \
    \      return 1\n      else\n        stack=${stack%?}\n      fi\n    fi\n    i=$((i+1))\n\
    \  done\n  if [ -z \"$stack\" ]; then\n    return 0\n  else\n    return 1\n  fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local open_bracket=\"(\"\n    local close_bracket=\")\"\n    local i=0\n\
    \    local len=${#brackets}\n    local bracket\n    local top_of_stack\n\n   \
    \ while [ $i -lt $len ]; do\n        bracket=${brackets:$i:1}\n        if [ \"\
    $bracket\" == \"$open_bracket\" ]; then\n            stack=\"$stack$bracket\"\n\
    \        elif [ \"$bracket\" == \"$close_bracket\" ]; then\n            top_of_stack=${stack:\
    \ -1}\n            if [ \"$top_of_stack\" == \"$open_bracket\" ]; then\n     \
    \           stack=${stack:0:-1}\n            else\n                return 1\n\
    \            fi\n        else\n            return 1\n        fi\n        i=$((i+1))\n\
    \    done\n\n    if [ -z \"$stack\" ]; then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ \"$bracket\" == \"(\" ]]; then\n            stack+=($bracket)\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n                return 1\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n\
    \    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=$1\n  local stack=()\n  local\
    \ i\n  for ((i=0; i<${#brackets}; i++)); do\n    if [[ ${brackets:$i:1} == \"\
    (\" ]]; then\n      stack+=($i)\n    elif [[ ${brackets:$i:1} == \")\" ]]; then\n\
    \      if [[ ${#stack[@]} -eq 0 ]]; then\n        return 1\n      fi\n      unset\
    \ stack[${#stack[@]}-1]\n    fi\n  done\n  if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_brackets=0\n\
    \    local close_brackets=0\n    for (( i=0; i<${#brackets}; i++ )); do\n    \
    \    if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            open_brackets=$((open_brackets+1))\n\
    \        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            close_brackets=$((close_brackets+1))\n\
    \        fi\n        if [[ $close_brackets -gt $open_brackets ]]; then\n     \
    \       return 1\n        fi\n    done\n    if [[ $open_brackets -eq $close_brackets\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n\
    \    local close_count=0\n    local i=0\n    local ch\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        ch=\"${brackets:$i:1}\"\n        if [[ \"$ch\" == \"(\" ]];\
    \ then\n            ((open_count++))\n        elif [[ \"$ch\" == \")\" ]]; then\n\
    \            ((close_count++))\n        fi\n        if ((close_count > open_count));\
    \ then\n            return 1\n        fi\n    done\n    if ((open_count != close_count));\
    \ then\n        return 1\n    fi\n    return 0\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    [[ -z \"$stack\"\
    \ ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n\
    \    local close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n       \
    \ local char=\"${brackets:$i:1}\"\n        if [[ \"$char\" == \"(\" ]]; then\n\
    \            open_count=$((open_count+1))\n        elif [[ \"$char\" == \")\"\
    \ ]]; then\n            close_count=$((close_count+1))\n        fi\n        if\
    \ [[ $close_count -gt $open_count ]]; then\n            return 1\n        fi\n\
    \    done\n    if [[ $open_count -eq $close_count ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    [[ -z \"$stack\"\
    \ ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for (( i=0; i<${#brackets}; i++ )); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ \"${#stack[@]}\" -eq 0 ]]; then\n                return 1\n   \
    \         fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n    \
    \    fi\n    done\n    if [[ \"${#stack[@]}\" -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open=0\n\
    \    local close=0\n    local i=0\n    local len=${#brackets}\n    while [ $i\
    \ -lt $len ]; do\n        if [ \"${brackets:$i:1}\" == \"(\" ]; then\n       \
    \     open=$((open+1))\n        elif [ \"${brackets:$i:1}\" == \")\" ]; then\n\
    \            close=$((close+1))\n        fi\n        i=$((i+1))\n    done\n  \
    \  if [ $open -eq $close ]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            stack=(\"${stack[@]:0:${#stack[@]}-1}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open=0\n\
    \    local close=0\n    local i=0\n    local len=${#brackets}\n    while [ $i\
    \ -lt $len ]; do\n        if [ \"${brackets:$i:1}\" == \"(\" ]; then\n       \
    \     open=$((open + 1))\n        elif [ \"${brackets:$i:1}\" == \")\" ]; then\n\
    \            close=$((close + 1))\n        fi\n        if [ $close -gt $open ];\
    \ then\n            return 1\n        fi\n        i=$((i + 1))\n    done\n   \
    \ if [ $open -eq $close ]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            stack=(\"${stack[@]:0:${#stack[@]}-1}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n\
    \  local bracket\n  for ((i=0; i<${#brackets}; i++)); do\n    bracket=\"${brackets:$i:1}\"\
    \n    if [[ \"$bracket\" == \"(\" ]]; then\n      stack=\"$stack(\"\n    elif\
    \ [[ \"$bracket\" == \")\" ]]; then\n      if [[ \"$stack\" == \"\" ]]; then\n\
    \        return 1\n      fi\n      stack=\"${stack%?}\"\n    fi\n  done\n  [[\
    \ \"$stack\" == \"\" ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ \"${#stack[@]}\" -eq 0 ]]; then\n                return 1\n   \
    \         fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n\
    \    if [[ \"${#stack[@]}\" -eq 0 ]]; then\n        return 0\n    else\n     \
    \   return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open=0\n\
    \    local close=0\n    local i=0\n    local c=''\n    while [ $i -lt ${#brackets}\
    \ ]; do\n        c=${brackets:$i:1}\n        if [ \"$c\" == \"(\" ]; then\n  \
    \          open=$((open + 1))\n        elif [ \"$c\" == \")\" ]; then\n      \
    \      close=$((close + 1))\n        fi\n        if [ $close -gt $open ]; then\n\
    \            return 1\n        fi\n        i=$((i + 1))\n    done\n    if [ $open\
    \ -eq $close ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\
    \ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n\
    \    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open=0\n\
    \    local close=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[\
    \ \"${brackets:$i:1}\" == \"(\" ]]; then\n            open=$(( open + 1 ))\n \
    \       elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            close=$((\
    \ close + 1 ))\n        fi\n        if [[ $close -gt $open ]]; then\n        \
    \    return 1\n        fi\n    done\n    if [[ $open -eq $close ]]; then\n   \
    \     return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack$bracket\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n \
    \           if [[ -z \"$stack\" ]]; then\n                return 1\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ \"$bracket\" == \"(\" ]]; then\n            stack+=($bracket)\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n                return 1\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ \"${#stack[@]}\" -eq 0 ]]; then\n                return 1\n   \
    \         fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n\
    \    if [[ \"${#stack[@]}\" -eq 0 ]]; then\n        return 0\n    else\n     \
    \   return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open=0\n\
    \    local close=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[\
    \ \"${brackets:$i:1}\" == \"(\" ]]; then\n            (( open++ ))\n        elif\
    \ [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            (( close++ ))\n     \
    \   fi\n        if (( close > open )); then\n            return 1\n        fi\n\
    \    done\n    if (( open == close )); then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=\"\
    ${brackets:$i:1}\"\n        if [[ \"$c\" == \"(\" ]]; then\n            stack=\"\
    $stack(\"\n        elif [[ \"$c\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                return 1\n            fi\n            stack=\"${stack%?}\"\
    \n        fi\n    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i=0\n    local len=${#brackets}\n    local bracket\n    while [ $i\
    \ -lt $len ]; do\n        bracket=${brackets:$i:1}\n        if [ \"$bracket\"\
    \ == \"(\" ]; then\n            stack+=($bracket)\n        elif [ \"$bracket\"\
    \ == \")\" ]; then\n            if [ ${#stack[@]} -eq 0 ]; then\n            \
    \    return 1\n            fi\n            unset stack[${#stack[@]}-1]\n     \
    \   fi\n        i=$((i+1))\n    done\n    if [ ${#stack[@]} -eq 0 ]; then\n  \
    \      return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_brackets=0\n\
    \    local close_brackets=0\n    for (( i=0; i<${#brackets}; i++ )); do\n    \
    \    if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            (( open_brackets++\
    \ ))\n        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            (( close_brackets++\
    \ ))\n        fi\n        if (( close_brackets > open_brackets )); then\n    \
    \        return 1\n        fi\n    done\n    if (( open_brackets == close_brackets\
    \ )); then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n\
    \    local close_count=0\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            open_count=$((open_count\
    \ + 1))\n        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            close_count=$((close_count\
    \ + 1))\n        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local bracket_stack=()\n\
    \    local bracket_stack_size=0\n    local bracket_stack_top=0\n    local bracket_stack_bottom=0\n\
    \    local bracket_stack_max_size=0\n    local bracket_stack_max_size_at=0\n \
    \   local i=0\n    local bracket=''\n    local bracket_top=''\n    local bracket_bottom=''\n\
    \    local bracket_pair=''\n    local bracket_pair_top=''\n    local bracket_pair_bottom=''\n\
    \    local bracket_pair_top_index=0\n    local bracket_pair_bottom_index=0\n \
    \   local bracket_pair_top_index_max=0\n    local bracket_pair_bottom_index_max=0\n\
    \    local bracket_pair_top_index_max_at=0\n    local bracket_pair_bottom_index_max_at=0\n\
    \    local bracket_pair_top_index_min=0\n    local bracket_pair_bottom_index_min=0\n\
    \    local bracket_pair_top_index_min_at=0\n    local bracket_pair_bottom_index_min_at=0\n\
    \    local bracket_pair_top_index_min_at_max=0\n    local bracket_pair_bottom_index_min_at_max=0\n\
    \    local bracket_pair_top_index_min_at_max_at=0\n    local bracket_pair_bottom_index_min_at_max_at=0\n\
    \    local bracket_pair_top_index_min_at_min=0\n    local bracket_pair_bottom_index_min_at_min=0\n\
    \    local bracket_pair_top_index_min_at_min_at=0\n    local bracket_pair_bottom_index_min_at_min_at=0\n\
    \    local bracket_pair_top_index_min_at_min_at_max=0\n    local bracket_pair_bottom_index_min_at_min_at_max=0\n\
    \    local bracket_pair_top_index_min_at_min_at_max_at=0\n    local bracket_pair_bottom_index_min_at_min_at_max\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local char\n    for ((i=0; i<${#brackets}; i++)); do\n        char=\"\
    ${brackets:$i:1}\"\n        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"\
    $stack$char\"\n        elif [[ \"$char\" == \")\" ]]; then\n            if [[\
    \ -z \"$stack\" ]]; then\n                return 1\n            fi\n         \
    \   stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack$bracket\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n \
    \           if [[ -z \"$stack\" ]]; then\n                return 1\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for (( i=0; i<${#brackets}; i++ )); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n        \
    \    if [[ \"$stack\" == \"\" ]]; then\n                return 1\n           \
    \ fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ \"\
    $stack\" == \"\" ]]; then\n        return 0\n    else\n        return 1\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n\
    \    local close_count=0\n    local i=0\n    local c\n\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        c=${brackets:$i:1}\n        if [[ $c == \"(\" ]]; then\n\
    \            open_count=$((open_count + 1))\n        elif [[ $c == \")\" ]]; then\n\
    \            close_count=$((close_count + 1))\n        fi\n        if [[ $close_count\
    \ -gt $open_count ]]; then\n            return 1\n        fi\n    done\n    if\
    \ [[ $open_count -eq $close_count ]]; then\n        return 0\n    else\n     \
    \   return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} ==\
    \ \"(\" ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            (( count-- ))\n        fi\n        if (( count\
    \ < 0 )); then\n            return 1\n        fi\n    done\n    if (( count ==\
    \ 0 )); then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for (( i=0; i<${#brackets}; i++ )); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ \"${#stack[@]}\" -eq 0 ]]; then\n                return 1\n   \
    \         fi\n            unset stack[-1]\n        fi\n    done\n    if [[ \"\
    ${#stack[@]}\" -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    local top\n\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        bracket=${brackets:$i:1}\n        if [[ $bracket == \"(\" ]]; then\n\
    \            stack+=($bracket)\n        elif [[ $bracket == \")\" ]]; then\n \
    \           top=${stack[-1]}\n            if [[ $top == \"(\" ]]; then\n     \
    \           stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n            else\n     \
    \           return 1\n            fi\n        fi\n    done\n\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i=0\n    local len=${#brackets}\n    while [ $i -lt $len ]; do\n  \
    \      local c=${brackets:$i:1}\n        if [ \"$c\" == \"(\" ]; then\n      \
    \      stack+=(\"$c\")\n        elif [ \"$c\" == \")\" ]; then\n            if\
    \ [ ${#stack[@]} -eq 0 ]; then\n                return 1\n            fi\n   \
    \         unset stack[${#stack[@]}-1]\n        fi\n        i=$((i+1))\n    done\n\
    \    if [ ${#stack[@]} -eq 0 ]; then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for (( i=0; i<${#brackets}; i++ )); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    local top\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]];\
    \ then\n            stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \"\
    )\" ]]; then\n            top=\"${stack[-1]}\"\n            if [[ \"$top\" ==\
    \ \"(\" ]]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n \
    \           else\n                return 1\n            fi\n        fi\n    done\n\
    \    if [[ \"${#stack[@]}\" == 0 ]]; then\n        return 0\n    else\n      \
    \  return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_brackets=0\n\
    \    local close_brackets=0\n    local i=0\n    while [ $i -lt ${#brackets} ];\
    \ do\n        if [ \"${brackets:$i:1}\" == \"(\" ]; then\n            open_brackets=$((open_brackets\
    \ + 1))\n        elif [ \"${brackets:$i:1}\" == \")\" ]; then\n            close_brackets=$((close_brackets\
    \ + 1))\n        fi\n        if [ $close_brackets -gt $open_brackets ]; then\n\
    \            return 1\n        fi\n        i=$((i + 1))\n    done\n    if [ $open_brackets\
    \ -eq $close_brackets ]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    local top\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]];\
    \ then\n            stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \"\
    )\" ]]; then\n            top=\"${stack[-1]}\"\n            if [[ \"$top\" ==\
    \ \"(\" ]]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n \
    \           else\n                return 1\n            fi\n        fi\n    done\n\
    \    if [[ \"${#stack[@]}\" -eq 0 ]]; then\n        return 0\n    else\n     \
    \   return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            stack=(\"${stack[@]:0:${#stack[@]}-1}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open=0\n\
    \    local close=0\n    local i=0\n    local len=${#brackets}\n    while [ $i\
    \ -lt $len ]; do\n        if [ \"${brackets:$i:1}\" == \"(\" ]; then\n       \
    \     open=$((open + 1))\n        else\n            close=$((close + 1))\n   \
    \     fi\n        if [ $close -gt $open ]; then\n            return 1\n      \
    \  fi\n        i=$((i + 1))\n    done\n    if [ $open -eq $close ]; then\n   \
    \     return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local top=\"\"\n    local c=\"\"\n    for ((i=0; i<${#brackets}; i++));\
    \ do\n        c=\"${brackets:$i:1}\"\n        if [[ \"$c\" == \"(\" ]]; then\n\
    \            stack=\"$stack$c\"\n        elif [[ \"$c\" == \")\" ]]; then\n  \
    \          top=\"${stack: -1}\"\n            if [[ \"$top\" == \"(\" ]]; then\n\
    \                stack=\"${stack:0:-1}\"\n            else\n                return\
    \ 1\n            fi\n        fi\n    done\n    if [[ \"$stack\" == \"\" ]]; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=\"\
    ${brackets:$i:1}\"\n        if [[ \"$c\" == \"(\" ]]; then\n            stack=\"\
    $stack(\"\n        elif [[ \"$c\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                return 1\n            fi\n            stack=\"${stack%?}\"\
    \n        fi\n    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=$1\n  local stack=()\n  local\
    \ bracket\n  for ((i=0; i<${#brackets}; i++)); do\n    bracket=${brackets:$i:1}\n\
    \    if [[ \"$bracket\" == \"(\" ]]; then\n      stack+=($bracket)\n    elif [[\
    \ \"$bracket\" == \")\" ]]; then\n      if [[ ${#stack[@]} -eq 0 ]]; then\n  \
    \      return 1\n      fi\n      unset stack[${#stack[@]}-1]\n    fi\n  done\n\
    \  if [[ ${#stack[@]} -eq 0 ]]; then\n    return 0\n  else\n    return 1\n  fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local len=${#brackets}\n\
    \  local i=0\n  local count=0\n  while [ $i -lt $len ]; do\n    if [ \"${brackets:$i:1}\"\
    \ == \"(\" ]; then\n      count=$((count+1))\n    elif [ \"${brackets:$i:1}\"\
    \ == \")\" ]; then\n      count=$((count-1))\n    fi\n    if [ $count -lt 0 ];\
    \ then\n      return 1\n    fi\n    i=$((i+1))\n  done\n  if [ $count -eq 0 ];\
    \ then\n    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    local top\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        bracket=${brackets:$i:1}\n        if [[ $bracket == \"(\" ]]; then\n\
    \            stack+=($bracket)\n        elif [[ $bracket == \")\" ]]; then\n \
    \           top=${stack[-1]}\n            if [[ $top == \"(\" ]]; then\n     \
    \           stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n            else\n     \
    \           return 1\n            fi\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ \"${#stack[@]}\" -eq 0 ]]; then\n                return 1\n   \
    \         fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n\
    \    if [[ \"${#stack[@]}\" -eq 0 ]]; then\n        return 0\n    else\n     \
    \   return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} ==\
    \ \"(\" ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            (( count-- ))\n        fi\n        if (( count\
    \ < 0 )); then\n            return 1\n        fi\n    done\n    if (( count ==\
    \ 0 )); then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ $c == \"(\" ]]; then\n            stack+=($c)\n        elif [[\
    \ $c == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n      \
    \          return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n\
    \    local close_count=0\n    local i=0\n    local char=''\n    local len=${#brackets}\n\
    \    while [ $i -lt $len ]; do\n        char=${brackets:$i:1}\n        if [ \"\
    $char\" == \"(\" ]; then\n            open_count=$((open_count + 1))\n       \
    \ elif [ \"$char\" == \")\" ]; then\n            close_count=$((close_count +\
    \ 1))\n        fi\n        if [ $close_count -gt $open_count ]; then\n       \
    \     return 1\n        fi\n        i=$((i + 1))\n    done\n    if [ $open_count\
    \ -eq $close_count ]; then\n        return 0\n    else\n        return 1\n   \
    \ fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local -i i=0\n    local -i len=${#brackets}\n    local -i open_count=0\n\
    \    local -i close_count=0\n    while [ $i -lt $len ]; do\n        local char=\"\
    ${brackets:$i:1}\"\n        if [ \"$char\" == \"(\" ]; then\n            stack+=($char)\n\
    \            ((open_count++))\n        elif [ \"$char\" == \")\" ]; then\n   \
    \         if [ ${#stack[@]} -eq 0 ]; then\n                return 1\n        \
    \    fi\n            unset stack[${#stack[@]}-1]\n            ((close_count++))\n\
    \        fi\n        ((i++))\n    done\n    if [ $open_count -ne $close_count\
    \ ]; then\n        return 1\n    fi\n    return 0\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=$1\n  local stack=()\n  local\
    \ bracket\n  for ((i=0; i<${#brackets}; i++)); do\n    bracket=${brackets:$i:1}\n\
    \    if [[ $bracket == \"(\" ]]; then\n      stack+=($bracket)\n    elif [[ $bracket\
    \ == \")\" ]]; then\n      if [[ ${#stack[@]} -eq 0 ]]; then\n        return 1\n\
    \      fi\n      unset stack[${#stack[@]}-1]\n    fi\n  done\n  if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n\
    \    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open=0\n\
    \    local close=0\n    for ((i=0; i<${#brackets}; i++)); do\n        if [[ \"\
    ${brackets:$i:1}\" == \"(\" ]]; then\n            open=$((open+1))\n        elif\
    \ [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            close=$((close+1))\n\
    \        fi\n        if [[ $close -gt $open ]]; then\n            return 1\n \
    \       fi\n    done\n    if [[ $open -eq $close ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n\
    \    local close_count=0\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            ((open_count++))\n\
    \        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            ((close_count++))\n\
    \        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n     \
    \   return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n\
    \    local close_count=0\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            open_count=$((open_count\
    \ + 1))\n        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            close_count=$((close_count\
    \ + 1))\n        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    local top\n    local -i i\n\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\"\
    \ == \"(\" ]]; then\n            stack+=(\"$bracket\")\n        elif [[ \"$bracket\"\
    \ == \")\" ]]; then\n            top=\"${stack[-1]}\"\n            if [[ \"$top\"\
    \ == \"(\" ]]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n\
    \            else\n                return 1\n            fi\n        fi\n    done\n\
    \n    if [[ \"${#stack[@]}\" -eq 0 ]]; then\n        return 0\n    else\n    \
    \    return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n\
    \    local close_count=0\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            ((open_count++))\n\
    \        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            ((close_count++))\n\
    \        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n     \
    \   echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local stack_top\n    local bracket\n    for ((i=0; i<${#brackets}; i++));\
    \ do\n        bracket=${brackets:$i:1}\n        if [[ \"$bracket\" == \"(\" ]];\
    \ then\n            stack+=($bracket)\n        elif [[ \"$bracket\" == \")\" ]];\
    \ then\n            stack_top=${stack[-1]}\n            if [[ \"$stack_top\" ==\
    \ \"(\" ]]; then\n                unset stack[-1]\n                stack=(${stack[@]})\n\
    \            else\n                return 1\n            fi\n        fi\n    done\n\
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local stack_size=0\n    local i=0\n    local c\n    while [ $i -lt ${#brackets}\
    \ ]; do\n        c=${brackets:$i:1}\n        if [ \"$c\" == \"(\" ]; then\n  \
    \          stack[$stack_size]=\"$c\"\n            stack_size=$((stack_size + 1))\n\
    \        elif [ \"$c\" == \")\" ]; then\n            if [ $stack_size -eq 0 ];\
    \ then\n                return 1\n            fi\n            stack_size=$((stack_size\
    \ - 1))\n        fi\n        i=$((i + 1))\n    done\n    if [ $stack_size -ne\
    \ 0 ]; then\n        return 1\n    fi\n    return 0\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    local top\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        bracket=${brackets:$i:1}\n        if [[ $bracket == \"(\" ]]; then\n\
    \            stack+=($bracket)\n        elif [[ $bracket == \")\" ]]; then\n \
    \           top=${stack[-1]}\n            if [[ $top == \"(\" ]]; then\n     \
    \           stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n            else\n     \
    \           return 1\n            fi\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack$bracket\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n \
    \           if [[ -z \"$stack\" ]]; then\n                return 1\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=''\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open=0\n\
    \    local close=0\n    for ((i=0; i<${#brackets}; i++)); do\n        if [[ \"\
    ${brackets:$i:1}\" == \"(\" ]]; then\n            open=$((open+1))\n        elif\
    \ [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            close=$((close+1))\n\
    \        fi\n        if [[ $close -gt $open ]]; then\n            return 1\n \
    \       fi\n    done\n    if [[ $open -eq $close ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=0\n\
    \    local close_brackets=0\n    for (( i=0; i<${#brackets}; i++ )); do\n    \
    \    if [[ ${brackets:$i:1} == \"(\" ]]; then\n            open_brackets=$(( open_brackets\
    \ + 1 ))\n        elif [[ ${brackets:$i:1} == \")\" ]]; then\n            close_brackets=$((\
    \ close_brackets + 1 ))\n        fi\n        if [[ $close_brackets -gt $open_brackets\
    \ ]]; then\n            return 1\n        fi\n    done\n    if [[ $open_brackets\
    \ -eq $close_brackets ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n        \
    \    if [[ \"$stack\" == \"\" ]]; then\n                return 1\n           \
    \ fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ \"\
    $stack\" == \"\" ]]; then\n        return 0\n    else\n        return 1\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=''\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == '(' ]]; then\n            stack+=$bracket\n       \
    \ elif [[ $bracket == ')' ]]; then\n            if [[ -z $stack ]]; then\n   \
    \             return 1\n            fi\n            stack=${stack%?}\n       \
    \ fi\n    done\n    if [[ -z $stack ]]; then\n        return 0\n    else\n   \
    \     return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local c\n    for ((i=0; i<${#brackets}; i++)); do\n        c=${brackets:$i:1}\n\
    \        if [[ \"$c\" == \"(\" ]]; then\n            stack=\"$stack$c\"\n    \
    \    elif [[ \"$c\" == \")\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n\
    \                return 1\n            fi\n            stack=${stack%?}\n    \
    \    fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        return 0\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=\"\
    ${brackets:$i:1}\"\n        if [[ \"$c\" == \"(\" ]]; then\n            stack=\"\
    $stack(\"\n        elif [[ \"$c\" == \")\" ]]; then\n            if [[ \"$stack\"\
    \ == \"\" ]]; then\n                return 1\n            fi\n            stack=\"\
    ${stack:0:-1}\"\n        fi\n    done\n    if [[ \"$stack\" == \"\" ]]; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i=0\n    local c=''\n    local top=''\n    local n=${#brackets}\n \
    \   while (( i < n )); do\n        c=${brackets:$i:1}\n        if [[ $c == '('\
    \ ]]; then\n            stack+=($c)\n        elif [[ $c == ')' ]]; then\n    \
    \        top=${stack[-1]}\n            if [[ $top == '(' ]]; then\n          \
    \      stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n            else\n          \
    \      return 1\n            fi\n        fi\n        (( i++ ))\n    done\n   \
    \ if (( ${#stack[@]} == 0 )); then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    [[\
    \ ${#stack[@]} -eq 0 ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local char\n    for ((i=0; i<${#brackets}; i++)); do\n        char=\"\
    ${brackets:$i:1}\"\n        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"\
    $stack(\"\n        elif [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"\
    $stack\" ]]; then\n                return 1\n            fi\n            stack=\"\
    ${stack%?}\"\n        fi\n    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local open_brackets=0\n    local close_brackets=0\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        if [[ ${brackets:$i:1} == \"(\" ]]; then\n            stack+=($i)\n\
    \            open_brackets=$((open_brackets+1))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            close_brackets=$((close_brackets+1))\n      \
    \      if [[ $open_brackets -eq $close_brackets ]]; then\n                return\
    \ 1\n            fi\n            unset 'stack[${#stack[@]}-1]'\n            stack=(\"\
    ${stack[@]}\")\n        fi\n    done\n    if [[ $open_brackets -eq $close_brackets\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_brackets=0\n\
    \    local close_brackets=0\n    for ((i=0; i<${#brackets}; i++)); do\n      \
    \  if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            open_brackets=$((open_brackets\
    \ + 1))\n        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            close_brackets=$((close_brackets\
    \ + 1))\n        fi\n        if [[ $close_brackets -gt $open_brackets ]]; then\n\
    \            return 1\n        fi\n    done\n    if [[ $open_brackets -eq $close_brackets\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    local top\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]];\
    \ then\n            stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \"\
    )\" ]]; then\n            top=\"${stack[-1]}\"\n            if [[ \"$top\" ==\
    \ \"(\" ]]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n \
    \           else\n                return 1\n            fi\n        fi\n    done\n\
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    [[ -z \"$stack\"\
    \ ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    local top\n    local i\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        bracket=${brackets:$i:1}\n        if [[ $bracket == \"(\"\
    \ ]]; then\n            stack+=($bracket)\n        elif [[ $bracket == \")\" ]];\
    \ then\n            top=${stack[-1]}\n            if [[ $top == \"(\" ]]; then\n\
    \                stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n            else\n\
    \                return 1\n            fi\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=$1\n  local stack=()\n  local\
    \ bracket\n  for ((i=0; i<${#brackets}; i++)); do\n    bracket=${brackets:$i:1}\n\
    \    if [[ $bracket == \"(\" ]]; then\n      stack+=($bracket)\n    elif [[ $bracket\
    \ == \")\" ]]; then\n      if [[ ${#stack[@]} -eq 0 ]]; then\n        return 1\n\
    \      fi\n      unset stack[${#stack[@]}-1]\n    fi\n  done\n  if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n\
    \    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        case ${brackets:$i:1}\
    \ in\n            \"(\")\n                stack+=(\"$i\")\n                ;;\n\
    \            \")\")\n                if ((${#stack[@]} == 0)); then\n        \
    \            return 1\n                fi\n                unset stack[${#stack[@]}-1]\n\
    \                ;;\n        esac\n    done\n    if ((${#stack[@]} == 0)); then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ \"${#stack[@]}\" -eq 0 ]]; then\n                return 1\n   \
    \         fi\n            unset stack[-1]\n        fi\n    done\n    if [[ \"\
    ${#stack[@]}\" -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ \"$bracket\" == \"(\" ]]; then\n            stack+=(\"$bracket\"\
    )\n        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n                return 1\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ \"$bracket\" == \"(\" ]]; then\n            stack+=($bracket)\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n                return 1\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n        \
    \    if [[ \"$stack\" == \"\" ]]; then\n                return 1\n           \
    \ fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ \"$stack\"\
    \ == \"\" ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ \"$bracket\" == \"(\" ]]; then\n            stack+=($bracket)\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n                return 1\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n\
    \  local i=0\n  local len=${#brackets}\n  while [ $i -lt $len ]; do\n    local\
    \ char=${brackets:$i:1}\n    if [ \"$char\" == \"(\" ]; then\n      stack=\"$stack(\"\
    \n    elif [ \"$char\" == \")\" ]; then\n      if [ -z \"$stack\" ]; then\n  \
    \      return 1\n      fi\n      stack=${stack%?}\n    fi\n    i=$((i+1))\n  done\n\
    \  if [ -z \"$stack\" ]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local i=0\n    local len=${#brackets}\n    while [ $i -lt $len ]; do\n  \
    \      local char=${brackets:$i:1}\n        if [ \"$char\" == \"(\" ]; then\n\
    \            stack+=($char)\n        elif [ \"$char\" == \")\" ]; then\n     \
    \       if [ ${#stack[@]} -eq 0 ]; then\n                return 1\n          \
    \  fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n\
    \        i=$(($i+1))\n    done\n    if [ ${#stack[@]} -eq 0 ]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n\
    \    local close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n       \
    \ if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            (( open_count++ ))\n\
    \        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            (( close_count++\
    \ ))\n        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local bracket\n    for (( i=0; i<${#brackets}; i++ )); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                return 1\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    [[\
    \ ${#stack[@]} -eq 0 ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=()\n\
    \    local stack_size=0\n    local i=0\n    local len=${#brackets}\n    local\
    \ c\n    for ((i=0; i<len; i++)); do\n        c=${brackets:$i:1}\n        if [[\
    \ \"$c\" == \"(\" ]]; then\n            stack[$stack_size]=\"$c\"\n          \
    \  stack_size=$((stack_size+1))\n        elif [[ \"$c\" == \")\" ]]; then\n  \
    \          if [[ $stack_size -eq 0 ]]; then\n                return 1\n      \
    \      fi\n            stack_size=$((stack_size-1))\n        fi\n    done\n  \
    \  if [[ $stack_size -eq 0 ]]; then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                return 1\n            fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return\
    \ 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} ==\
    \ \"(\" ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            (( count-- ))\n        fi\n        if (( count\
    \ < 0 )); then\n            return 1\n        fi\n    done\n    if (( count ==\
    \ 0 )); then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n        \
    \    if [[ \"$stack\" == \"\" ]]; then\n                return 1\n           \
    \ fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ \"\
    $stack\" == \"\" ]]; then\n        return 0\n    else\n        return 1\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open=0\n\
    \    local close=0\n    local i=0\n    local len=${#brackets}\n    while [ $i\
    \ -lt $len ]; do\n        if [ \"${brackets:$i:1}\" == \"(\" ]; then\n       \
    \     open=$((open+1))\n        elif [ \"${brackets:$i:1}\" == \")\" ]; then\n\
    \            close=$((close+1))\n        fi\n        if [ $close -gt $open ];\
    \ then\n            return 1\n        fi\n        i=$((i+1))\n    done\n    if\
    \ [ $open -eq $close ]; then\n        return 0\n    else\n        return 1\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open=0\n\
    \    local close=0\n    local i=0\n    local len=${#brackets}\n    while [ $i\
    \ -lt $len ]; do\n        if [ \"${brackets:$i:1}\" == \"(\" ]; then\n       \
    \     open=$((open+1))\n        elif [ \"${brackets:$i:1}\" == \")\" ]; then\n\
    \            close=$((close+1))\n        fi\n        if [ $close -gt $open ];\
    \ then\n            return 1\n        fi\n        i=$((i+1))\n    done\n    if\
    \ [ $open -eq $close ]; then\n        return 0\n    else\n        return 1\n \
    \   fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\
    \"\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\
    \n        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"$stack$char\"\
    \n        elif [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                return 1\n            fi\n            stack=\"${stack%?}\"\
    \n        fi\n    done\n    [[ -z \"$stack\" ]]\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n#\n# $1 is a\
    \ string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local open=0\n\
    \    local close=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[\
    \ \"${brackets:$i:1}\" == \"(\" ]]; then\n            open=$(( open + 1 ))\n \
    \       elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            close=$((\
    \ close + 1 ))\n        fi\n        if [[ $close -gt $open ]]; then\n        \
    \    return 1\n        fi\n    done\n    if [[ $open -eq $close ]]; then\n   \
    \     return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001859
