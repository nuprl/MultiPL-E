language: sh
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local text=\"$1\"\n  if [[\
    \ \"$text\" =~ \" \" ]]; then\n    echo \"$text\" | tr ' ' '\\n'\n  elif [[ \"\
    $text\" =~ \",\" ]]; then\n    echo \"$text\" | tr ',' '\\n'\n  else\n    echo\
    \ \"$text\" | grep -o '[a-z]' | awk '{print NR%2}' | grep -c '1'\n  fi\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [[:space:]] ]];\
    \ then\n    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ , ]]; then\n    echo $1 |\
    \ tr ',' '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | awk '{print NR%2}' | grep\
    \ -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ [,] ]]; then\n    echo $1 | tr ','\
    \ '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | wc -l\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [^a-zA-Z] ]];\
    \ then\n    echo $1 | tr -s ' ' '\\n'\n  elif [[ $1 =~ [^,] ]]; then\n    echo\
    \ $1 | tr -s ',' '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | wc -l\n  fi\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local -r str=\"$1\"\n  local\
    \ -r whitespace_regex='\\s+'\n  local -r comma_regex=','\n  local -r lower_case_regex='[a-z]'\n\
    \  if [[ \"$str\" =~ $whitespace_regex ]]; then\n    echo \"$str\" | tr ' ' '\\\
    n'\n  elif [[ \"$str\" =~ $comma_regex ]]; then\n    echo \"$str\" | tr ',' '\\\
    n'\n  else\n    echo \"$str\" | grep -o \"$lower_case_regex\" | awk '{print NR\
    \ % 2}' | grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ \" \" ]]; then\n\
    \    echo $1 | tr \" \" \"\\n\"\n  elif [[ $1 =~ \",\" ]]; then\n    echo $1 |\
    \ tr \",\" \"\\n\"\n  else\n    echo $1 | grep -o \"[a-z]\" | awk '{print NR %\
    \ 2}' | grep -c \"1\"\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [,] ]]; then\n\
    \        echo $1 | tr ',' ' '\n    elif [[ $1 =~ [ ] ]]; then\n        echo $1\n\
    \    else\n        echo $1 | grep -o '[a-z]' | awk '{print NR % 2}' | grep -c\
    \ 1\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpezbc6brx.sh: line 11: syntax error in conditional expression

    /tmp/tmpezbc6brx.sh: line 11: syntax error near `]''

    /tmp/tmpezbc6brx.sh: line 11: `    elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [,] ]]; then\n\
    \    echo $1 | tr ',' ' '\n  elif [[ $1 =~ [ ] ]]; then\n    echo $1\n  else\n\
    \    echo $1 | grep -o '[a-z]' | awk '{print NR % 2}' | grep -c 1\n  fi\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoph7thw0.sh: line 11: syntax error in conditional expression

    /tmp/tmpoph7thw0.sh: line 11: syntax error near `]''

    /tmp/tmpoph7thw0.sh: line 11: `  elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [^a-zA-Z, ] ]];\
    \ then\n    echo \"Invalid input\"\n    exit 1\n  fi\n  if [[ $1 =~ [,] ]]; then\n\
    \    echo $1 | tr ',' ' '\n  elif [[ $1 =~ [ ] ]]; then\n    echo $1\n  else\n\
    \    echo $1 | grep -o '[a-z]' | awk '{print NR%2}' | grep -c 1\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2hmvwvpj.sh: line 9: syntax error in conditional expression

    /tmp/tmp2hmvwvpj.sh: line 9: syntax error near `]''

    /tmp/tmp2hmvwvpj.sh: line 9: `  if [[ $1 =~ [^a-zA-Z, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [, ] ]]; then\n\
    \        echo $1 | tr -s ' ' '\\n'\n    else\n        echo $1 | grep -o . | awk\
    \ '{print NR%2}' | grep 1 | wc -l\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpatc12j2r.sh: line 9: syntax error in conditional expression

    /tmp/tmpatc12j2r.sh: line 9: syntax error near `]''

    /tmp/tmpatc12j2r.sh: line 9: `    if [[ $1 =~ [, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local string=\"$1\"\n  if\
    \ [[ \"$string\" =~ \\s ]]; then\n    echo \"$string\" | tr ' ' '\\n'\n  elif\
    \ [[ \"$string\" =~ , ]]; then\n    echo \"$string\" | tr ',' '\\n'\n  else\n\
    \    local -i sum=0\n    for (( i=0; i<${#string}; i++ )); do\n      local -i\
    \ ord=$(printf '%d' \"'${string:$i:1}\")\n      if (( (ord % 2) == 0 )); then\n\
    \        (( sum += ord ))\n      fi\n    done\n    echo \"$sum\"\n  fi\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [[:space:]]\
    \ ]]; then\n        echo $1 | tr ' ' '\\n'\n    elif [[ $1 =~ , ]]; then\n   \
    \     echo $1 | tr ',' '\\n'\n    else\n        echo $1 | grep -o '[a-z]' | awk\
    \ '{print NR % 2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ \" \" ]]; then\n\
    \        echo $1 | tr \" \" \"\\n\"\n    elif [[ $1 =~ \",\" ]]; then\n      \
    \  echo $1 | tr \",\" \"\\n\"\n    else\n        echo $1 | grep -o \"[a-z]\" |\
    \ awk '{print NR%2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ \" \" ]]; then\n\
    \    echo $1 | tr \" \" \"\\n\"\n  elif [[ $1 =~ \",\" ]]; then\n    echo $1 |\
    \ tr \",\" \"\\n\"\n  else\n    echo $(echo $1 | grep -o . | awk '{print NR %\
    \ 2}' | grep -c 1)\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [,] ]]; then\n\
    \    echo $1 | tr ',' ' '\n  elif [[ $1 =~ [ ] ]]; then\n    echo $1\n  else\n\
    \    echo $1 | grep -o '[a-z]' | awk '{print NR % 2}' | grep -c 1\n  fi\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoph7thw0.sh: line 11: syntax error in conditional expression

    /tmp/tmpoph7thw0.sh: line 11: syntax error near `]''

    /tmp/tmpoph7thw0.sh: line 11: `  elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local str=\"$1\"\n  if [[\
    \ \"$str\" =~ [a-zA-Z] ]]; then\n    if [[ \"$str\" =~ [,] ]]; then\n      echo\
    \ \"$str\" | tr ',' '\\n'\n    else\n      echo \"$str\" | grep -o '[a-z]' | awk\
    \ '{print NR%2}' | grep -c 1\n    fi\n  else\n    echo \"$str\" | tr ' ' '\\n'\n\
    \  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ \\s ]]; then\n\
    \        echo $1 | tr ' ' '\\n'\n    elif [[ $1 =~ , ]]; then\n        echo $1\
    \ | tr ',' '\\n'\n    else\n        echo $1 | grep -o '[a-z]' | awk '{print NR\
    \ % 2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [,] ]]; then\n\
    \    echo $1 | tr ',' ' '\n  elif [[ $1 =~ [ ] ]]; then\n    echo $1\n  else\n\
    \    echo $1 | grep -o '[a-z]' | awk '{print NR % 2}' | grep -c 1\n  fi\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoph7thw0.sh: line 11: syntax error in conditional expression

    /tmp/tmpoph7thw0.sh: line 11: syntax error near `]''

    /tmp/tmpoph7thw0.sh: line 11: `  elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \    echo \"$1\" | tr ' ' '\\n'\n  elif [[ $1 =~ [,] ]]; then\n    echo \"$1\"\
    \ | tr ',' '\\n'\n  else\n    echo \"$1\" | grep -o '[a-z]' | wc -l\n  fi\n}\n\
    \ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [[:space:]] ]];\
    \ then\n    echo \"$1\" | tr ' ' '\\n'\n  elif [[ $1 =~ , ]]; then\n    echo \"\
    $1\" | tr ',' '\\n'\n  else\n    echo \"$1\" | grep -o '[a-z]' | awk '{print NR\
    \ % 2}' | grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    local string=$1\n    if\
    \ [[ $string =~ [[:space:]] ]]; then\n        echo $string | tr ' ' '\\n'\n  \
    \  elif [[ $string =~ , ]]; then\n        echo $string | tr ',' '\\n'\n    else\n\
    \        echo $string | grep -o '[a-z]' | awk '{print NR % 2}' | grep -c 1\n \
    \   fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [[:space:]] ]];\
    \ then\n    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ , ]]; then\n    echo $1 |\
    \ tr ',' '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | awk '{print NR % 2}' |\
    \ grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \    echo $1 | tr -s ' ' '\\n'\n  elif [[ $1 =~ [,] ]]; then\n    echo $1 | tr\
    \ -s ',' '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | wc -l\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \    if [[ $1 =~ [,] ]]; then\n      echo \"$1\" | tr ',' '\\n'\n    else\n  \
    \    echo \"$1\" | tr ' ' '\\n'\n    fi\n  else\n    echo \"$1\" | grep -o '[a-z]'\
    \ | wc -l\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [,] ]]; then\n\
    \    echo $1 | tr ',' ' '\n  elif [[ $1 =~ [ ] ]]; then\n    echo $1\n  else\n\
    \    echo $1 | grep -o '[a-z]' | awk '{print NR % 2}' | grep -c 1\n  fi\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoph7thw0.sh: line 11: syntax error in conditional expression

    /tmp/tmpoph7thw0.sh: line 11: syntax error near `]''

    /tmp/tmpoph7thw0.sh: line 11: `  elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [^a-zA-Z, ] ]];\
    \ then\n    echo \"Invalid input\"\n    exit 1\n  fi\n  if [[ $1 =~ [ ] ]]; then\n\
    \    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ [,] ]]; then\n    echo $1 | tr ','\
    \ '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | awk '{print NR%2}' | grep -c\
    \ 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpljvure6k.sh: line 9: syntax error in conditional expression

    /tmp/tmpljvure6k.sh: line 9: syntax error near `]''

    /tmp/tmpljvure6k.sh: line 9: `  if [[ $1 =~ [^a-zA-Z, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ ' ' ]]; then\n\
    \    echo \"$1\" | tr ' ' '\\n'\n  elif [[ $1 =~ ',' ]]; then\n    echo \"$1\"\
    \ | tr ',' '\\n'\n  else\n    echo \"$1\" | grep -o '[a-z]' | awk '{print NR %\
    \ 2}' | grep -c '1'\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [,] ]]; then\n\
    \        echo \"$1\" | tr ',' '\\n'\n    elif [[ $1 =~ [ ] ]]; then\n        echo\
    \ \"$1\" | tr ' ' '\\n'\n    else\n        echo \"$1\" | grep -o '[a-z]' | awk\
    \ '{print NR%2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8yls5l4j.sh: line 11: syntax error in conditional expression

    /tmp/tmp8yls5l4j.sh: line 11: syntax error near `]''

    /tmp/tmp8yls5l4j.sh: line 11: `    elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ \"$1\" =~ [\\ ] ]];\
    \ then\n        echo \"$1\" | tr ' ' '\\n'\n    elif [[ \"$1\" =~ [,] ]]; then\n\
    \        echo \"$1\" | tr ',' '\\n'\n    else\n        echo \"$1\" | grep -o '[a-z]'\
    \ | awk '{print NR % 2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [,] ]]; then\n\
    \    echo $1 | tr ',' ' '\n  elif [[ $1 =~ [ ] ]]; then\n    echo $1\n  else\n\
    \    echo $1 | grep -o . | awk '{print NR%2}' | grep -c 1\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq3he5w_q.sh: line 11: syntax error in conditional expression

    /tmp/tmpq3he5w_q.sh: line 11: syntax error near `]''

    /tmp/tmpq3he5w_q.sh: line 11: `  elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  # Write your code here\n \
    \ if [[ $1 =~ [^a-zA-Z, ] ]]; then\n    echo \"Invalid input\"\n    exit 1\n \
    \ fi\n  if [[ $1 =~ [ ] ]]; then\n    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~\
    \ [,] ]]; then\n    echo $1 | tr ',' '\\n'\n  else\n    for (( i=0; i<${#1}; i++\
    \ )); do\n      if [[ $(( $i % 2 )) -eq 1 ]]; then\n        echo -n \"${1:$i:1}\"\
    \n      fi\n    done\n    echo\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm2nl4noe.sh: line 10: syntax error in conditional expression

    /tmp/tmpm2nl4noe.sh: line 10: syntax error near `]''

    /tmp/tmpm2nl4noe.sh: line 10: `  if [[ $1 =~ [^a-zA-Z, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [[:space:]] ]];\
    \ then\n    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ , ]]; then\n    echo $1 |\
    \ tr ',' '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | awk 'NR % 2 == 1' | wc\
    \ -l\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local str=\"$1\"\n  local\
    \ result=\"\"\n  local i=0\n  local len=${#str}\n  local c=\"\"\n  local is_space=0\n\
    \  local is_comma=0\n  local is_letter=0\n  local is_odd=0\n  local is_first=1\n\
    \  local is_last=0\n  local is_result=0\n  local is_result_first=1\n  local is_result_last=0\n\
    \  local is_result_odd=0\n  local is_result_letter=0\n  local is_result_comma=0\n\
    \  local is_result_space=0\n  local is_result_number=0\n  local is_result_number_first=1\n\
    \  local is_result_number_last=0\n  local is_result_number_odd=0\n  local is_result_number_letter=0\n\
    \  local is_result_number_comma=0\n  local is_result_number_space=0\n  local is_result_number_number=0\n\
    \  local is_result_number_number_first=1\n  local is_result_number_number_last=0\n\
    \  local is_result_number_number_odd=0\n  local is_result_number_number_letter=0\n\
    \  local is_result_number_number_comma=0\n  local is_result_number_number_space=0\n\
    \  local is_result_number_number_number=0\n  local is_result_number_number_number_first=1\n\
    \  local is_result_number_number_number_last=0\n  local is_result_number_number_number_odd=0\n\
    \  local is_result_number_number_number_letter=0\n  local is_result_number_number_number_comma=0\n\
    \  local is_result_number_number_number_space=0\n  local is_result_number_number_number_number=0\n\
    \  local is_result_number_number_number_number_first=1\n  local is_result_number_number_number_number_last=0\n\
    \  local is_result_number_number_number_number_odd=0\n}\n\ncandidate() {\n   \
    \ split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\"\
    \ ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local string=$1\n  if [[ \"\
    $string\" =~ \" \" ]]; then\n    echo \"$string\" | tr ' ' '\\n'\n  elif [[ \"\
    $string\" =~ \",\" ]]; then\n    echo \"$string\" | tr ',' '\\n'\n  else\n   \
    \ echo \"${#string}\"\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ \\s ]]; then\n\
    \        echo $1 | tr ' ' '\\n'\n    elif [[ $1 =~ , ]]; then\n        echo $1\
    \ | tr ',' '\\n'\n    else\n        echo $1 | grep -o '[a-z]' | awk '{print NR\
    \ % 2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [,] ]]; then\n\
    \        echo $1 | tr ',' ' '\n    elif [[ $1 =~ [ ] ]]; then\n        echo $1\n\
    \    else\n        echo $1 | grep -o '[a-z]' | awk '{print NR%2}' | grep -c 1\n\
    \    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq9rohgdz.sh: line 11: syntax error in conditional expression

    /tmp/tmpq9rohgdz.sh: line 11: syntax error near `]''

    /tmp/tmpq9rohgdz.sh: line 11: `    elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ \"$1\" =~ [[:space:]]\
    \ ]]; then\n        echo \"$1\" | tr ' ' '\\n'\n    elif [[ \"$1\" =~ , ]]; then\n\
    \        echo \"$1\" | tr ',' '\\n'\n    else\n        echo \"$1\" | grep -o '[a-z]'\
    \ | awk '{print NR%2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [,] ]]; then\n\
    \    echo $1 | tr ',' ' '\n  elif [[ $1 =~ [ ] ]]; then\n    echo $1\n  else\n\
    \    echo $1 | grep -o '[a-z]' | awk '{print NR % 2}' | grep -c 1\n  fi\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoph7thw0.sh: line 11: syntax error in conditional expression

    /tmp/tmpoph7thw0.sh: line 11: syntax error near `]''

    /tmp/tmpoph7thw0.sh: line 11: `  elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \    echo $1 | tr -s ' ' '\\n'\n  elif [[ $1 =~ [,] ]]; then\n    echo $1 | tr\
    \ -s ',' '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | wc -l\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [,] ]]; then\n\
    \        echo $1 | tr ',' ' '\n    elif [[ $1 =~ [ ] ]]; then\n        echo $1\n\
    \    else\n        echo $(( $(echo $1 | grep -o '[a-z]' | wc -l) % 2 ))\n    fi\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6ow85gin.sh: line 11: syntax error in conditional expression

    /tmp/tmp6ow85gin.sh: line 11: syntax error near `]''

    /tmp/tmp6ow85gin.sh: line 11: `    elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ \"$1\" =~ [,] ]]; then\n\
    \    echo \"$1\" | tr ',' '\\n'\n  elif [[ \"$1\" =~ [ ] ]]; then\n    echo \"\
    $1\" | tr ' ' '\\n'\n  else\n    echo \"$1\" | grep -o '[a-z]' | awk 'NR % 2 ==\
    \ 1' | wc -l\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuw30vfpe.sh: line 11: syntax error in conditional expression

    /tmp/tmpuw30vfpe.sh: line 11: syntax error near `]''

    /tmp/tmpuw30vfpe.sh: line 11: `  elif [[ "$1" =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [,] ]]; then\n\
    \    echo $1 | tr ',' ' '\n  elif [[ $1 =~ [ ] ]]; then\n    echo $1\n  else\n\
    \    echo $1 | grep -o . | awk '{print NR % 2}' | grep -c 1\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpg0d98r01.sh: line 11: syntax error in conditional expression

    /tmp/tmpg0d98r01.sh: line 11: syntax error near `]''

    /tmp/tmpg0d98r01.sh: line 11: `  elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [,] ]]; then\n\
    \    echo $1 | tr ',' ' '\n  elif [[ $1 =~ [ ] ]]; then\n    echo $1\n  else\n\
    \    echo $1 | grep -o . | awk '{print NR%2}' | grep -o [0-9] | wc -l\n  fi\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppjy5bx6f.sh: line 11: syntax error in conditional expression

    /tmp/tmppjy5bx6f.sh: line 11: syntax error near `]''

    /tmp/tmppjy5bx6f.sh: line 11: `  elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ \\s ]]; then\n\
    \    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ , ]]; then\n    echo $1 | tr ','\
    \ '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | awk '{print NR % 2}' | grep -c\
    \ 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [^[:space:]] ]];\
    \ then\n    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ [^[:space:]] ]]; then\n  \
    \  echo $1 | tr ',' '\\n'\n  else\n    echo $1 | tr -d -c 'a-z' | wc -m\n  fi\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  # your code here\n  if [[\
    \ $1 =~ [a-z] ]]; then\n    echo $(echo $1 | tr -cd [a-z] | grep -o . | awk '{print\
    \ NR%2}' | grep -c 1)\n  elif [[ $1 =~ [,] ]]; then\n    echo $(echo $1 | tr -cd\
    \ [,] | wc -c)\n  else\n    echo $(echo $1 | tr -cd [ ] | wc -c)\n  fi\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \    if [[ $1 =~ [,] ]]; then\n      echo $1 | tr ',' ' '\n    else\n      echo\
    \ $1 | grep -o '[a-z]' | wc -l\n    fi\n  else\n    echo $1\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ [,] ]]; then\n    echo $1 | tr ','\
    \ '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | wc -l\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [a-zA-Z] ]];\
    \ then\n        echo $1 | tr ' ' '\\n'\n    elif [[ $1 =~ [,] ]]; then\n     \
    \   echo $1 | tr ',' '\\n'\n    else\n        echo $1 | grep -o '[a-z]' | wc -l\n\
    \    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [[:space:]]\
    \ ]]; then\n        echo $1 | tr ' ' '\\n'\n    elif [[ $1 =~ , ]]; then\n   \
    \     echo $1 | tr ',' '\\n'\n    else\n        echo $1 | grep -o '[a-z]' | awk\
    \ '{print NR % 2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [^a-zA-Z, ] ]];\
    \ then\n    echo \"Invalid input\"\n    exit 1\n  fi\n  if [[ $1 =~ [,] ]]; then\n\
    \    echo $1 | tr ',' ' '\n  elif [[ $1 =~ [ ] ]]; then\n    echo $1\n  else\n\
    \    echo $1 | grep -o '[a-z]' | awk '{print NR % 2}' | grep -c 1\n  fi\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3sfukh3b.sh: line 9: syntax error in conditional expression

    /tmp/tmp3sfukh3b.sh: line 9: syntax error near `]''

    /tmp/tmp3sfukh3b.sh: line 9: `  if [[ $1 =~ [^a-zA-Z, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [,] ]]; then\n\
    \    echo $1 | tr ',' ' '\n  elif [[ $1 =~ [ ] ]]; then\n    echo $1\n  else\n\
    \    echo $1 | grep -o . | awk '{print tolower($0)}' | awk '{print ord($0)-97}'\
    \ | awk '{if ($0 % 2 == 1) print $0}' | wc -l\n  fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps49iu3qf.sh: line 11: syntax error in conditional expression

    /tmp/tmps49iu3qf.sh: line 11: syntax error near `]''

    /tmp/tmps49iu3qf.sh: line 11: `  elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ \"$1\" =~ [,] ]]; then\n\
    \    echo \"$1\" | tr ',' '\\n'\n  elif [[ \"$1\" =~ [ ] ]]; then\n    echo \"\
    $1\" | tr ' ' '\\n'\n  else\n    echo \"$1\" | grep -o '[a-z]' | awk '{print NR%2}'\
    \ | grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnxl5wwjg.sh: line 11: syntax error in conditional expression

    /tmp/tmpnxl5wwjg.sh: line 11: syntax error near `]''

    /tmp/tmpnxl5wwjg.sh: line 11: `  elif [[ "$1" =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ \"$1\" == *\" \"* ]];\
    \ then\n    echo \"$1\" | tr ' ' '\\n'\n  elif [[ \"$1\" == *\",\"* ]]; then\n\
    \    echo \"$1\" | tr ',' '\\n'\n  else\n    echo \"$1\" | grep -o '[a-z]' | awk\
    \ '{print NR%2}' | grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ \"$1\" =~ [,] ]]; then\n\
    \    echo \"$1\" | tr ',' '\\n'\n  elif [[ \"$1\" =~ [ ] ]]; then\n    echo \"\
    $1\" | tr ' ' '\\n'\n  else\n    echo \"$1\" | grep -o '[a-z]' | awk '{print NR%2}'\
    \ | grep -c '1'\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0o3ovu75.sh: line 11: syntax error in conditional expression

    /tmp/tmp0o3ovu75.sh: line 11: syntax error near `]''

    /tmp/tmp0o3ovu75.sh: line 11: `  elif [[ "$1" =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [,] ]]; then\n\
    \    echo $1 | tr ',' ' '\n  elif [[ $1 =~ [ ] ]]; then\n    echo $1\n  else\n\
    \    echo $(( $(echo $1 | tr -d -c 'a-z' | wc -c) % 2 ))\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdp77zta3.sh: line 11: syntax error in conditional expression

    /tmp/tmpdp77zta3.sh: line 11: syntax error near `]''

    /tmp/tmpdp77zta3.sh: line 11: `  elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ \"$1\" =~ [^a-zA-Z,]\
    \ ]]; then\n    echo \"$1\" | tr ' ' '\\n'\n  elif [[ \"$1\" =~ [^a-zA-Z] ]];\
    \ then\n    echo \"$1\" | tr ',' '\\n'\n  else\n    echo \"$1\" | grep -o '[a-z]'\
    \ | awk '{print NR % 2}' | grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [^a-z, ] ]];\
    \ then\n        echo \"Invalid input\"\n        return 1\n    fi\n    if [[ $1\
    \ =~ [ ] ]]; then\n        echo $1 | tr ' ' '\\n'\n    elif [[ $1 =~ [,] ]]; then\n\
    \        echo $1 | tr ',' '\\n'\n    else\n        echo $1 | grep -o '[a-z]' |\
    \ awk '{print NR % 2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb929uic1.sh: line 9: syntax error in conditional expression

    /tmp/tmpb929uic1.sh: line 9: syntax error near `]''

    /tmp/tmpb929uic1.sh: line 9: `    if [[ $1 =~ [^a-z, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local text=$1\n  if [[ $text\
    \ =~ [[:space:]] ]]; then\n    echo $text | tr ' ' '\\n'\n  elif [[ $text =~ ,\
    \ ]]; then\n    echo $text | tr ',' '\\n'\n  else\n    local -i count=0\n    for\
    \ (( i=0; i<${#text}; i++ )); do\n      if [[ ${text:$i:1} =~ [a-z] ]]; then\n\
    \        if (( $i % 2 == 0 )); then\n          (( count++ ))\n        fi\n   \
    \   fi\n    done\n    echo $count\n  fi\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [[:space:]] ]];\
    \ then\n    echo \"$1\" | tr ' ' '\\n'\n  elif [[ $1 =~ , ]]; then\n    echo \"\
    $1\" | tr ',' '\\n'\n  else\n    echo \"$1\" | grep -o '[a-z]' | awk '{print NR\
    \ % 2}' | grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [,] ]]; then\n\
    \    echo \"$1\" | tr ',' '\\n'\n  elif [[ $1 =~ [ ] ]]; then\n    echo \"$1\"\
    \ | tr ' ' '\\n'\n  else\n    echo \"$1\" | grep -o '[a-z]' | awk '{print NR %\
    \ 2}' | grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnyaot0j9.sh: line 11: syntax error in conditional expression

    /tmp/tmpnyaot0j9.sh: line 11: syntax error near `]''

    /tmp/tmpnyaot0j9.sh: line 11: `  elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [^a-zA-Z, ] ]];\
    \ then\n    echo \"Invalid input\"\n    exit 1\n  fi\n  if [[ $1 =~ [a-zA-Z] ]];\
    \ then\n    if [[ $1 =~ [a-zA-Z, ] ]]; then\n      echo $1 | tr -s ',' ' '\n \
    \   else\n      echo $1 | grep -o '[a-z]' | grep -v -e '[aeiou]' | wc -l\n   \
    \ fi\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpejyzv_vy.sh: line 9: syntax error in conditional expression

    /tmp/tmpejyzv_vy.sh: line 9: syntax error near `]''

    /tmp/tmpejyzv_vy.sh: line 9: `  if [[ $1 =~ [^a-zA-Z, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local string=$1\n  local result=()\n\
    \  if [[ $string =~ [[:space:]] ]]; then\n    result=($string)\n  elif [[ $string\
    \ =~ , ]]; then\n    result=(${string//,/ })\n  else\n    result=($(echo ${string,,}\
    \ | grep -o . | sort -n | uniq -c | awk '{if($1%2==1) print $2}'))\n  fi\n  echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [,] ]]; then\n\
    \    echo $1 | tr ',' ' '\n  elif [[ $1 =~ [ ] ]]; then\n    echo $1\n  else\n\
    \    echo $1 | grep -o '[a-z]' | awk '{print NR%2}' | grep -c 1\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps7ymre9g.sh: line 11: syntax error in conditional expression

    /tmp/tmps7ymre9g.sh: line 11: syntax error near `]''

    /tmp/tmps7ymre9g.sh: line 11: `  elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local text=\"$1\"\n  local\
    \ result=\"\"\n  local i=0\n  local j=0\n  local len=${#text}\n  local c=\"\"\n\
    \  local is_space=0\n  local is_comma=0\n  local is_letter=0\n  local is_odd=0\n\
    \  local is_even=0\n  local is_first=0\n  local is_last=0\n  local is_first_letter=0\n\
    \  local is_last_letter=0\n  local is_first_comma=0\n  local is_last_comma=0\n\
    \  local is_first_space=0\n  local is_last_space=0\n  local is_first_odd=0\n \
    \ local is_last_odd=0\n  local is_first_even=0\n  local is_last_even=0\n  local\
    \ is_first_word=0\n  local is_last_word=0\n  local is_first_word_letter=0\n  local\
    \ is_last_word_letter=0\n  local is_first_word_comma=0\n  local is_last_word_comma=0\n\
    \  local is_first_word_space=0\n  local is_last_word_space=0\n  local is_first_word_odd=0\n\
    \  local is_last_word_odd=0\n  local is_first_word_even=0\n  local is_last_word_even=0\n\
    \  local is_first_word_letter_odd=0\n  local is_last_word_letter_odd=0\n  local\
    \ is_first_word_letter_even=0\n  local is_last_word_letter_even=0\n  local is_first_word_comma_odd=0\n\
    \  local is_last_word_comma_odd=0\n  local is_first_word_comma_even=0\n  local\
    \ is_last_word_comma_even=0\n  local is_first_word_space_odd=0\n  local is_last_word_space_odd=0\n\
    \  local is_first_word_space_even=0\n  local is_last_word_space_even=0\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [[:space:]]\
    \ ]]; then\n        echo $1 | tr ' ' '\\n'\n    elif [[ $1 =~ , ]]; then\n   \
    \     echo $1 | tr ',' '\\n'\n    else\n        echo $1 | grep -o '[a-z]' | awk\
    \ '{print NR % 2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [[:space:]] ]];\
    \ then\n    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ , ]]; then\n    echo $1 |\
    \ tr ',' '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | awk '{print NR % 2}' |\
    \ grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local text=\"$1\"\n  local\
    \ result=\"\"\n  if [[ \"$text\" =~ [[:space:]] ]]; then\n    result=\"$(echo\
    \ \"$text\" | tr ' ' '\\n')\"\n  elif [[ \"$text\" =~ , ]]; then\n    result=\"\
    $(echo \"$text\" | tr ',' '\\n')\"\n  else\n    local count=0\n    for (( i=0;\
    \ i<${#text}; i++ )); do\n      local c=\"${text:$i:1}\"\n      if [[ \"$c\" =~\
    \ [a-z] ]]; then\n        local ord=$(printf '%d' \"'$c\")\n        if (( $ord\
    \ % 2 == 1 )); then\n          (( count++ ))\n        fi\n      fi\n    done\n\
    \    result=\"$count\"\n  fi\n  echo \"$result\"\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  # your code here\n  if [[\
    \ $1 =~ [,] ]]; then\n    echo $1 | tr ',' ' '\n  elif [[ $1 =~ [ ] ]]; then\n\
    \    echo $1\n  else\n    echo $1 | grep -o '[a-z]' | wc -l\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpianbywhu.sh: line 12: syntax error in conditional expression

    /tmp/tmpianbywhu.sh: line 12: syntax error near `]''

    /tmp/tmpianbywhu.sh: line 12: `  elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [^a-zA-Z,] ]];\
    \ then\n    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ [^a-zA-Z] ]]; then\n    echo\
    \ $1 | tr ',' '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | awk '{print NR%2}'\
    \ | grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [[:space:]] ]];\
    \ then\n    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ , ]]; then\n    echo $1 |\
    \ tr ',' '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | awk '{print NR % 2}' |\
    \ grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ \" \" ]]; then\n\
    \    echo $1 | tr \" \" \"\\n\"\n  elif [[ $1 =~ \",\" ]]; then\n    echo $1 |\
    \ tr \",\" \"\\n\"\n  else\n    echo $1 | grep -o \"[a-z]\" | awk '{print NR %\
    \ 2}' | grep -c \"1\"\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ [,] ]]; then\n    echo $1 | tr ','\
    \ '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | wc -l\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ [0-9] ]]; then\n    echo $1 | tr\
    \ ',' '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | wc -l\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [[:space:]]\
    \ ]]; then\n        echo $1 | tr ' ' '\\n'\n    elif [[ $1 =~ , ]]; then\n   \
    \     echo $1 | tr ',' '\\n'\n    else\n        echo $1 | grep -o '[a-z]' | awk\
    \ '{print NR%2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [a-zA-Z] ]];\
    \ then\n        if [[ $1 =~ [,] ]]; then\n            echo $1 | tr ',' ' '\n \
    \       else\n            echo $1 | grep -o '[a-z]' | awk '{print NR % 2}' | grep\
    \ -c 1\n        fi\n    else\n        echo $1 | tr ' ' ','\n    fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [[:space:]]\
    \ ]]; then\n        echo $1 | tr ' ' '\\n'\n    elif [[ $1 =~ , ]]; then\n   \
    \     echo $1 | tr ',' '\\n'\n    else\n        echo $1 | grep -o '[a-z]' | awk\
    \ '{print NR % 2}' | grep -c '1'\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \    if [[ $1 =~ [,] ]]; then\n      echo $1 | tr ',' ' '\n    else\n      echo\
    \ $1 | grep -o '[a-z]' | awk '{print length}'\n    fi\n  else\n    echo $1\n \
    \ fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [[:space:]]\
    \ ]]; then\n        echo \"$1\" | tr -s ' ' '\\n'\n    elif [[ $1 =~ , ]]; then\n\
    \        echo \"$1\" | tr -s ',' '\\n'\n    else\n        echo \"$1\" | grep -o\
    \ '[a-z]' | awk '{print NR % 2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n   \
    \ split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\"\
    \ ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local input=$1\n  if [[ $input\
    \ =~ \\s ]]; then\n    echo $input | tr ' ' '\\n'\n  elif [[ $input =~ , ]]; then\n\
    \    echo $input | tr ',' '\\n'\n  else\n    echo $input | grep -o . | awk '{print\
    \ NR % 2}' | grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ [,] ]]; then\n    echo $1 | tr ','\
    \ '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | wc -l\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ \"$1\" =~ [a-zA-Z] ]];\
    \ then\n    echo \"$1\" | tr -s '[:blank:]' '\\n'\n  elif [[ \"$1\" =~ [,] ]];\
    \ then\n    echo \"$1\" | tr -s '[,]' '\\n'\n  else\n    echo \"$1\" | grep -o\
    \ '[a-z]' | wc -l\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    local text=\"$1\"\n    local\
    \ result=\"\"\n    local i=0\n    local len=${#text}\n    local char=\"\"\n  \
    \  local char_ord=0\n    local odd_count=0\n    local odd_index=0\n    local odd_char=\"\
    \"\n    local odd_char_ord=0\n    local is_odd=0\n    local is_comma=0\n    local\
    \ is_space=0\n    local is_alpha=0\n    local is_lower=0\n    local is_upper=0\n\
    \    local is_digit=0\n    local is_alnum=0\n    local is_punct=0\n    local is_print=0\n\
    \    local is_graph=0\n    local is_cntrl=0\n    local is_xdigit=0\n    local\
    \ is_blank=0\n    local is_ascii=0\n    local is_space=0\n    local is_word=0\n\
    \    local is_newline=0\n    local is_whitespace=0\n    local is_blank=0\n   \
    \ local is_tab=0\n    local is_return=0\n    local is_backspace=0\n    local is_feed=0\n\
    \    local is_vtab=0\n    local is_page=0\n    local is_escape=0\n    local is_del=0\n\
    \    local is_null=0\n    local is_eof=0\n    local is_eol=0\n    local is_eos=0\n\
    \    local is_file_sep=0\n    local is_path_sep=0\n    local is_quote_beg=0\n\
    \    local is_quote_end=0\n    local is_bracket_beg=0\n    local is_bracket_end=0\n\
    \    local is_brace_beg=0\n    local is_brace_end=0\n    local is_parenthesis_beg=0\n\
    \    local is_parenthesis_end=0\n    local is_greater_than=0\n    local is_less_than=0\n\
    \    local is_equal=0\n    local is_plus=0\n    local is_minus=0\n    local is_asterisk=0\n\
    \   \n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [,] ]]; then\n\
    \    echo $1 | tr ',' ' '\n  elif [[ $1 =~ [ ] ]]; then\n    echo $1\n  else\n\
    \    echo $1 | grep -o [a-z] | awk '{print NR % 2}' | grep -c 1\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmperzgpunv.sh: line 11: syntax error in conditional expression

    /tmp/tmperzgpunv.sh: line 11: syntax error near `]''

    /tmp/tmperzgpunv.sh: line 11: `  elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [^a-zA-Z0-9, ]\
    \ ]]; then\n    echo \"Invalid input\"\n    exit 1\n  fi\n  if [[ $1 =~ [a-zA-Z]\
    \ ]]; then\n    if [[ $1 =~ [,] ]]; then\n      echo $1 | tr ',' ' '\n    else\n\
    \      echo $1 | grep -o '[a-z]' | awk '{print NR % 2}' | grep -c '1'\n    fi\n\
    \  else\n    echo $1 | tr ',' ' '\n  fi\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpukc6ys77.sh: line 9: syntax error in conditional expression

    /tmp/tmpukc6ys77.sh: line 9: syntax error near `]''

    /tmp/tmpukc6ys77.sh: line 9: `  if [[ $1 =~ [^a-zA-Z0-9, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  echo $1 | tr -s '[:space:]'\
    \ '\\n'\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local str=\"$1\"\n  if [[\
    \ \"$str\" == *\" \"* ]]; then\n    echo \"$str\" | tr ' ' '\\n'\n  elif [[ \"\
    $str\" == *\",\"* ]]; then\n    echo \"$str\" | tr ',' '\\n'\n  else\n    echo\
    \ \"${#str}\"\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [a-zA-Z] ]];\
    \ then\n        echo $1 | tr ' ' '\\n'\n    elif [[ $1 =~ [,] ]]; then\n     \
    \   echo $1 | tr ',' '\\n'\n    else\n        echo $1 | grep -o '[a-z]' | wc -l\n\
    \    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [a-zA-Z] ]];\
    \ then\n        if [[ $1 =~ [,] ]]; then\n            echo $1 | tr ',' '\\n'\n\
    \        else\n            echo $1 | grep -o '[a-z]' | wc -l\n        fi\n   \
    \ else\n        echo $1 | tr ' ' '\\n'\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ \"$1\" =~ [,] ]]; then\n\
    \    echo \"$1\" | tr ',' '\\n'\n  elif [[ \"$1\" =~ [ ] ]]; then\n    echo \"\
    $1\" | tr ' ' '\\n'\n  else\n    echo \"$1\" | grep -o '[a-z]' | awk '{print NR\
    \ % 2}' | grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6tqvsobs.sh: line 11: syntax error in conditional expression

    /tmp/tmp6tqvsobs.sh: line 11: syntax error near `]''

    /tmp/tmp6tqvsobs.sh: line 11: `  elif [[ "$1" =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ \" \" ]]; then\n\
    \    echo $1 | tr \" \" \"\\n\"\n  elif [[ $1 =~ \",\" ]]; then\n    echo $1 |\
    \ tr \",\" \"\\n\"\n  else\n    echo $1 | grep -o . | awk '{print NR%2}' | grep\
    \ -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [,] ]]; then\n\
    \    echo $1 | tr \",\" \"\\n\"\n  elif [[ $1 =~ [ ] ]]; then\n    echo $1 | tr\
    \ \" \" \"\\n\"\n  else\n    echo $1 | grep -o . | awk '{print NR%2}' | grep -c\
    \ 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpttptl3y5.sh: line 11: syntax error in conditional expression

    /tmp/tmpttptl3y5.sh: line 11: syntax error near `]''

    /tmp/tmpttptl3y5.sh: line 11: `  elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \    if [[ $1 =~ [,] ]]; then\n      echo $1 | tr ',' ' '\n    else\n      echo\
    \ $1 | tr -cd '[:lower:]' | grep -o . | awk '{print NR%2}' | grep -c 1\n    fi\n\
    \  else\n    echo $1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [,] ]]; then\n\
    \    echo $1 | tr ',' ' '\n  elif [[ $1 =~ [ ] ]]; then\n    echo $1\n  else\n\
    \    echo $1 | grep -o . | awk '{print NR%2}' | grep -c 1\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq3he5w_q.sh: line 11: syntax error in conditional expression

    /tmp/tmpq3he5w_q.sh: line 11: syntax error near `]''

    /tmp/tmpq3he5w_q.sh: line 11: `  elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local str=$1\n  if [[ \"$str\"\
    \ =~ \" \" ]]; then\n    echo \"$str\" | tr ' ' '\\n'\n  elif [[ \"$str\" =~ \"\
    ,\" ]]; then\n    echo \"$str\" | tr ',' '\\n'\n  else\n    local len=${#str}\n\
    \    local res=0\n    for (( i=0; i<$len; i++ )); do\n      local c=${str:$i:1}\n\
    \      local ord=$(printf '%d' \"'$c\")\n      if (( $ord % 2 == 0 )); then\n\
    \        (( res += $ord ))\n      fi\n    done\n    echo $res\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [,] ]]; then\n\
    \    echo $1 | tr ',' ' '\n  elif [[ $1 =~ [ ] ]]; then\n    echo $1\n  else\n\
    \    echo $1 | grep -o . | awk '{print NR % 2}' | grep -c 1\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpg0d98r01.sh: line 11: syntax error in conditional expression

    /tmp/tmpg0d98r01.sh: line 11: syntax error near `]''

    /tmp/tmpg0d98r01.sh: line 11: `  elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [[:space:]]\
    \ ]]; then\n        echo $1 | tr ' ' '\\n'\n    elif [[ $1 =~ , ]]; then\n   \
    \     echo $1 | tr ',' '\\n'\n    else\n        echo $1 | grep -o '[a-z]' | awk\
    \ '{print NR % 2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local input=$1\n  if [[ \"\
    $input\" =~ \" \" ]]; then\n    echo \"$input\" | tr ' ' '\\n'\n  elif [[ \"$input\"\
    \ =~ \",\" ]]; then\n    echo \"$input\" | tr ',' '\\n'\n  else\n    local -i\
    \ count=0\n    for (( i=0; i<${#input}; i++ )); do\n      local -i ord=$(printf\
    \ '%d' \"'${input:$i:1}\")\n      if (( (ord % 2) == 0 )); then\n        (( count++\
    \ ))\n      fi\n    done\n    echo \"$count\"\n  fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local str=\"$1\"\n  if [[\
    \ \"$str\" =~ [[:space:]] ]]; then\n    echo \"$str\" | tr ' ' '\\n'\n  elif [[\
    \ \"$str\" =~ , ]]; then\n    echo \"$str\" | tr ',' '\\n'\n  else\n    echo \"\
    ${#str}\"\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ \" \" ]]; then\n\
    \        echo $1 | tr \" \" \"\\n\"\n    elif [[ $1 =~ \",\" ]]; then\n      \
    \  echo $1 | tr \",\" \"\\n\"\n    else\n        echo $1 | grep -o \"[a-z]\" |\
    \ awk '{print NR % 2}' | grep -c \"1\"\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [[:space:]] ]];\
    \ then\n    echo \"$1\" | tr ' ' '\\n'\n  elif [[ $1 =~ , ]]; then\n    echo \"\
    $1\" | tr ',' '\\n'\n  else\n    echo $(echo \"$1\" | grep -o '[a-z]' | awk 'NR\
    \ % 2 == 1' | wc -l)\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ \"$1\" =~ \\s ]]; then\n\
    \    echo \"$1\" | tr ' ' '\\n'\n  elif [[ \"$1\" =~ , ]]; then\n    echo \"$1\"\
    \ | tr ',' '\\n'\n  else\n    echo \"$1\" | grep -o '[a-z]' | awk '{print NR %\
    \ 2}' | grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local input=$1\n  if [[ $input\
    \ =~ [[:space:]] ]]; then\n    echo $input | tr ' ' '\\n'\n  elif [[ $input =~\
    \ , ]]; then\n    echo $input | tr ',' '\\n'\n  else\n    echo $input | grep -o\
    \ '[a-z]' | awk '{print NR%2}' | grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [[:space:]] ]];\
    \ then\n    echo \"$1\" | tr ' ' '\\n'\n  elif [[ $1 =~ , ]]; then\n    echo \"\
    $1\" | tr ',' '\\n'\n  else\n    echo \"$1\" | grep -o '[a-z]' | awk '{print NR\
    \ % 2}' | grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local input=$1\n  local output=()\n\
    \  if [[ $input =~ [a-zA-Z] ]]; then\n    if [[ $input =~ [,] ]]; then\n     \
    \ IFS=',' read -r -a output <<< \"$input\"\n    else\n      IFS=' ' read -r -a\
    \ output <<< \"$input\"\n    fi\n  else\n    output=($(echo \"$input\" | grep\
    \ -o . | awk '{print tolower($0)}' | awk '{print ord($0)}' | awk '{if ($0 % 2\
    \ == 1) print $0}' | wc -l))\n  fi\n  echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [[:space:]] ]];\
    \ then\n    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ , ]]; then\n    echo $1 |\
    \ tr ',' '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | awk '{print NR%2}' | grep\
    \ -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [[:space:]] ]];\
    \ then\n    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ , ]]; then\n    echo $1 |\
    \ tr ',' '\\n'\n  else\n    echo $(echo $1 | grep -o '[a-z]' | awk '{print NR\
    \ % 2}' | grep -c 1)\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [[:space:]] ]];\
    \ then\n    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ , ]]; then\n    echo $1 |\
    \ tr ',' '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | awk 'NR % 2 == 1' | wc\
    \ -l\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [^a-zA-Z0-9, ]\
    \ ]]; then\n    echo \"Invalid input\"\n    exit 1\n  fi\n  if [[ $1 =~ [ ] ]];\
    \ then\n    echo \"$1\" | tr ' ' '\\n'\n  elif [[ $1 =~ [,] ]]; then\n    echo\
    \ \"$1\" | tr ',' '\\n'\n  else\n    echo \"$1\" | grep -o '[a-z]' | awk '{print\
    \ NR % 2}' | grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqo5zddnl.sh: line 9: syntax error in conditional expression

    /tmp/tmpqo5zddnl.sh: line 9: syntax error near `]''

    /tmp/tmpqo5zddnl.sh: line 9: `  if [[ $1 =~ [^a-zA-Z0-9, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [^a-zA-Z, ] ]];\
    \ then\n    echo \"Invalid input\"\n    exit 1\n  fi\n  if [[ $1 =~ [ ] ]]; then\n\
    \    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ [,] ]]; then\n    echo $1 | tr ','\
    \ '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | awk '{print NR % 2}' | grep -c\
    \ 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpot276oj2.sh: line 9: syntax error in conditional expression

    /tmp/tmpot276oj2.sh: line 9: syntax error near `]''

    /tmp/tmpot276oj2.sh: line 9: `  if [[ $1 =~ [^a-zA-Z, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [^a-zA-Z, ] ]];\
    \ then\n    echo \"Invalid input\"\n    exit 1\n  fi\n  if [[ $1 =~ [ ] ]]; then\n\
    \    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ [,] ]]; then\n    echo $1 | tr ','\
    \ '\\n'\n  else\n    for (( i=0; i<${#1}; i++ )); do\n      if [[ $(( $i % 2 ))\
    \ -eq 1 ]]; then\n        echo -n \"${1:$i:1}\"\n      fi\n    done\n    echo\n\
    \  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6wymsypz.sh: line 9: syntax error in conditional expression

    /tmp/tmp6wymsypz.sh: line 9: syntax error near `]''

    /tmp/tmp6wymsypz.sh: line 9: `  if [[ $1 =~ [^a-zA-Z, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ \" \" ]]; then\n\
    \        echo $1 | tr \" \" \"\\n\"\n    elif [[ $1 =~ \",\" ]]; then\n      \
    \  echo $1 | tr \",\" \"\\n\"\n    else\n        echo $1 | grep -o . | awk '{print\
    \ NR%2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    local string=\"$1\"\n  \
    \  if [[ \"$string\" =~ \\s ]]; then\n        echo \"$string\" | tr ' ' '\\n'\n\
    \    elif [[ \"$string\" =~ , ]]; then\n        echo \"$string\" | tr ',' '\\\
    n'\n    else\n        echo \"$(echo \"$string\" | grep -o '[a-z]' | wc -l)\"\n\
    \    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [,] ]]; then\n\
    \    echo \"$1\" | tr ',' '\\n'\n  elif [[ $1 =~ [ ] ]]; then\n    echo \"$1\"\
    \ | tr ' ' '\\n'\n  else\n    echo \"$1\" | grep -o '[a-z]' | awk '{print NR %\
    \ 2}' | grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnyaot0j9.sh: line 11: syntax error in conditional expression

    /tmp/tmpnyaot0j9.sh: line 11: syntax error near `]''

    /tmp/tmpnyaot0j9.sh: line 11: `  elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [^a-zA-Z, ] ]];\
    \ then\n    echo \"Invalid input\"\n    exit 1\n  fi\n  if [[ $1 =~ [a-zA-Z] ]];\
    \ then\n    if [[ $1 =~ [,] ]]; then\n      echo $1 | tr ',' ' '\n    else\n \
    \     echo $1 | grep -o '[a-z]' | awk '{print NR%2}' | grep -c 1\n    fi\n  else\n\
    \    echo \"Invalid input\"\n    exit 1\n  fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2ay8b8et.sh: line 9: syntax error in conditional expression

    /tmp/tmp2ay8b8et.sh: line 9: syntax error near `]''

    /tmp/tmp2ay8b8et.sh: line 9: `  if [[ $1 =~ [^a-zA-Z, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local input=$1\n  local output=''\n\
    \  if [[ $input =~ [,] ]]; then\n    output=$(echo $input | tr ',' ' ')\n  elif\
    \ [[ $input =~ [ ] ]]; then\n    output=$input\n  else\n    for (( i=0; i<${#input};\
    \ i++ )); do\n      if (( $i % 2 == 0 )); then\n        output+=\"${input:$i:1}\
    \ \"\n      fi\n    done\n  fi\n  echo $output\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxg8tazdy.sh: line 13: syntax error in conditional expression

    /tmp/tmpxg8tazdy.sh: line 13: syntax error near `]''

    /tmp/tmpxg8tazdy.sh: line 13: `  elif [[ $input =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [[:space:]]\
    \ ]]; then\n        echo $1 | tr ' ' '\\n'\n    elif [[ $1 =~ , ]]; then\n   \
    \     echo $1 | tr ',' '\\n'\n    else\n        echo $1 | grep -o '[a-z]' | awk\
    \ '{print NR % 2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [a-zA-Z] ]];\
    \ then\n        if [[ $1 =~ [,] ]]; then\n            echo $1 | tr ',' ' '\n \
    \       else\n            echo $1 | grep -o '[a-z]' | awk '{print NR%2}' | grep\
    \ -c '1'\n        fi\n    else\n        echo $1\n    fi\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ \"$1\" =~ \" \" ]];\
    \ then\n        echo \"$1\" | tr ' ' '\\n'\n    elif [[ \"$1\" =~ \",\" ]]; then\n\
    \        echo \"$1\" | tr ',' '\\n'\n    else\n        echo \"$1\" | grep -o '[a-z]'\
    \ | awk 'NR % 2 == 1' | wc -l\n    fi\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [,] ]]; then\n\
    \    echo $1 | tr ',' ' '\n  elif [[ $1 =~ [ ] ]]; then\n    echo $1\n  else\n\
    \    echo $1 | grep -o '[a-z]' | awk '{print NR % 2}' | grep -c 1\n  fi\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoph7thw0.sh: line 11: syntax error in conditional expression

    /tmp/tmpoph7thw0.sh: line 11: syntax error near `]''

    /tmp/tmpoph7thw0.sh: line 11: `  elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [,] ]]; then\n\
    \        echo $1 | tr ',' ' '\n    elif [[ $1 =~ [ ] ]]; then\n        echo $1\n\
    \    else\n        echo $1 | grep -o . | awk '{print NR%2}' | grep -o 1 | wc -l\n\
    \    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7irmt0k6.sh: line 11: syntax error in conditional expression

    /tmp/tmp7irmt0k6.sh: line 11: syntax error near `]''

    /tmp/tmp7irmt0k6.sh: line 11: `    elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [^a-zA-Z,] ]];\
    \ then\n    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ [^a-zA-Z] ]]; then\n    echo\
    \ $1 | tr ',' '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | awk '{print NR%2}'\
    \ | grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [[:space:]] ]];\
    \ then\n    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ , ]]; then\n    echo $1 |\
    \ tr ',' '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | awk '{print NR%2}' | grep\
    \ -c '1'\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \    if [[ $1 =~ [,] ]]; then\n      echo $1 | tr ',' '\\n'\n    else\n      echo\
    \ $1 | grep -o '[a-z]' | wc -l\n    fi\n  else\n    echo $1 | tr ' ' '\\n'\n \
    \ fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \    if [[ $1 =~ [,] ]]; then\n      echo \"$1\" | tr ',' '\\n'\n    else\n  \
    \    echo \"$1\" | grep -o '[a-z]' | awk '{print NR%2}' | grep -c '1'\n    fi\n\
    \  else\n    echo \"$1\" | tr ' ' '\\n'\n  fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [,] ]]; then\n\
    \    echo $1 | tr ',' ' '\n  elif [[ $1 =~ [ ] ]]; then\n    echo $1\n  else\n\
    \    echo $1 | grep -o '[a-z]' | awk '{print NR%2}' | grep -c 1\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps7ymre9g.sh: line 11: syntax error in conditional expression

    /tmp/tmps7ymre9g.sh: line 11: syntax error near `]''

    /tmp/tmps7ymre9g.sh: line 11: `  elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [[:space:]] ]];\
    \ then\n    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ , ]]; then\n    echo $1 |\
    \ tr ',' '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | awk '{print NR % 2}' |\
    \ grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [^a-zA-Z,] ]];\
    \ then\n    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ [^a-zA-Z] ]]; then\n    echo\
    \ $1 | tr ',' '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | awk '{print NR%2}'\
    \ | grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local input=$1\n  if [[ $input\
    \ =~ [a-zA-Z] ]]; then\n    if [[ $input =~ [,] ]]; then\n      echo $input |\
    \ tr ',' '\\n'\n    else\n      local count=0\n      for ((i=0; i<${#input}; i++));\
    \ do\n        if [[ ${input:$i:1} =~ [a-z] ]]; then\n          if [[ $((i % 2))\
    \ -eq 0 ]]; then\n            count=$((count + 1))\n          fi\n        fi\n\
    \      done\n      echo $count\n    fi\n  else\n    echo $input | tr ' ' '\\n'\n\
    \  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [[:space:]] ]];\
    \ then\n    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ , ]]; then\n    echo $1 |\
    \ tr ',' '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | awk '{print NR % 2}' |\
    \ grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [^a-zA-Z,] ]];\
    \ then\n        echo $1 | tr ' ' '\\n'\n    elif [[ $1 =~ [^a-zA-Z] ]]; then\n\
    \        echo $1 | tr ',' '\\n'\n    else\n        echo $1 | grep -o '[a-z]' |\
    \ awk '{print NR % 2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [[:space:]]\
    \ ]]; then\n        echo $1 | tr ' ' '\\n'\n    elif [[ $1 =~ , ]]; then\n   \
    \     echo $1 | tr ',' '\\n'\n    else\n        echo $1 | grep -o '[a-z]' | awk\
    \ '{print NR%2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [,] ]]; then\n\
    \    echo $1 | tr , '\\n'\n  elif [[ $1 =~ [ ] ]]; then\n    echo $1\n  else\n\
    \    echo $1 | grep -o . | awk '{print NR%2}' | grep -c 1\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpumpv2mei.sh: line 11: syntax error in conditional expression

    /tmp/tmpumpv2mei.sh: line 11: syntax error near `]''

    /tmp/tmpumpv2mei.sh: line 11: `  elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [^a-zA-Z] ]];\
    \ then\n        echo $1 | tr -s '[:space:]' '\\n'\n    elif [[ $1 =~ [^a-zA-Z,]\
    \ ]]; then\n        echo $1 | tr -s '[:space:]' '\\n'\n    else\n        echo\
    \ $1 | tr -d -c '[:lower:]' | wc -c\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [[:space:]]\
    \ ]]; then\n        echo $1 | tr ' ' '\\n'\n    elif [[ $1 =~ , ]]; then\n   \
    \     echo $1 | tr ',' '\\n'\n    else\n        echo $1 | grep -o '[a-z]' | awk\
    \ '{print NR%2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    local input=\"$1\"\n   \
    \ local output=\"\"\n    if [[ \"$input\" =~ [[:space:]] ]]; then\n        output=\"\
    $(echo \"$input\" | tr ' ' '\\n')\"\n    elif [[ \"$input\" =~ , ]]; then\n  \
    \      output=\"$(echo \"$input\" | tr ',' '\\n')\"\n    else\n        output=\"\
    $(echo \"$input\" | grep -o '[a-z]' | wc -l)\"\n    fi\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [a-z] ]]; then\n\
    \        echo \"$1\" | grep -o [a-z] | grep -v -e '[02468ace]' | wc -l\n    elif\
    \ [[ $1 =~ , ]]; then\n        echo \"$1\" | tr ',' '\\n'\n    else\n        echo\
    \ \"$1\" | tr ' ' '\\n'\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ \\s ]]; then\n\
    \        echo $1 | tr -s ' ' '\\n'\n    elif [[ $1 =~ , ]]; then\n        echo\
    \ $1 | tr -s ',' '\\n'\n    else\n        echo $1 | grep -o '[a-z]' | awk '{print\
    \ NR % 2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [^a-z, ] ]]; then\n\
    \    echo \"Invalid input\"\n    return 1\n  fi\n  if [[ $1 =~ [a-z] ]]; then\n\
    \    if [[ $1 =~ [ ] ]]; then\n      echo $1 | tr ' ' '\\n'\n    else\n      if\
    \ [[ $1 =~ [,] ]]; then\n        echo $1 | tr ',' '\\n'\n      else\n        echo\
    \ $1 | grep -o '[a-z]' | wc -l\n      fi\n    fi\n  fi\n}\n\ncandidate() {\n \
    \   split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4jkubuyu.sh: line 9: syntax error in conditional expression

    /tmp/tmp4jkubuyu.sh: line 9: syntax error near `]''

    /tmp/tmp4jkubuyu.sh: line 9: `  if [[ $1 =~ [^a-z, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ \" \" ]]; then\n\
    \        echo $1 | tr \" \" \"\\n\"\n    elif [[ $1 =~ \",\" ]]; then\n      \
    \  echo $1 | tr \",\" \"\\n\"\n    else\n        echo $1 | grep -o \"[a-z]\" |\
    \ awk '{print NR%2}' | grep -c \"1\"\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local str=\"$1\"\n  if [[\
    \ \"$str\" =~ [^[:space:],] ]]; then\n    echo \"$str\" | tr -s '[:space:]' '\\\
    n'\n  elif [[ \"$str\" =~ [^[:space:]] ]]; then\n    echo \"$str\" | tr -s ','\
    \ '\\n'\n  else\n    echo \"$str\" | grep -o '[a-z]' | wc -l\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [[:space:]]\
    \ ]]; then\n        echo $1 | tr ' ' '\\n'\n    elif [[ $1 =~ , ]]; then\n   \
    \     echo $1 | tr ',' '\\n'\n    else\n        echo $1 | grep -o '[a-z]' | awk\
    \ '{print NR%2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [[:space:]]\
    \ ]]; then\n        echo $1 | tr ' ' '\\n'\n    elif [[ $1 =~ ',' ]]; then\n \
    \       echo $1 | tr ',' '\\n'\n    else\n        echo $1 | grep -o '[a-z]' |\
    \ awk 'NR % 2 == 1' | wc -l\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [[:space:]] ]];\
    \ then\n    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ , ]]; then\n    echo $1 |\
    \ tr ',' '\\n'\n  else\n    echo $(echo $1 | grep -o . | awk '{print NR%2}' |\
    \ grep -c 1)\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local text=\"$1\"\n  if [[\
    \ \"$text\" =~ [a-zA-Z] ]]; then\n    if [[ \"$text\" =~ [,] ]]; then\n      echo\
    \ \"$text\" | tr ',' '\\n'\n    else\n      echo \"$text\" | grep -o '[a-z]' |\
    \ awk '{print NR % 2}' | grep -c '1'\n    fi\n  else\n    echo \"$text\" | tr\
    \ ' ' '\\n'\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [[:space:]] ]];\
    \ then\n    echo \"$1\" | tr ' ' '\\n'\n  elif [[ $1 =~ , ]]; then\n    echo \"\
    $1\" | tr ',' '\\n'\n  else\n    echo \"$1\" | grep -o '[a-z]' | awk '{print NR\
    \ % 2}' | grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  # your code here\n  if [[\
    \ $1 =~ [[:space:]] ]]; then\n    echo $1 | tr \" \" \"\\n\"\n  elif [[ $1 =~\
    \ , ]]; then\n    echo $1 | tr \",\" \"\\n\"\n  else\n    echo $(echo $1 | grep\
    \ -o . | sort | uniq -c | grep -v \"2 \" | wc -l)\n  fi\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [^a-zA-Z0-9, ]\
    \ ]]; then\n    echo \"Invalid input\"\n    exit 1\n  fi\n  if [[ $1 =~ [a-zA-Z]\
    \ ]]; then\n    if [[ $1 =~ [,] ]]; then\n      echo $1 | tr ',' ' '\n    else\n\
    \      echo $1 | grep -o '[a-z]' | awk '{print NR%2}' | grep -c 1\n    fi\n  else\n\
    \    echo $1 | grep -o '[0-9]' | awk '{print NR%2}' | grep -c 1\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpebzh8b4j.sh: line 9: syntax error in conditional expression

    /tmp/tmpebzh8b4j.sh: line 9: syntax error near `]''

    /tmp/tmpebzh8b4j.sh: line 9: `  if [[ $1 =~ [^a-zA-Z0-9, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local str=$1\n  if [[ $str\
    \ =~ [[:space:]] ]]; then\n    echo $str | tr ' ' '\\n'\n  elif [[ $str =~ , ]];\
    \ then\n    echo $str | tr ',' '\\n'\n  else\n    echo $str | grep -o '[a-z]'\
    \ | awk '{print NR%2}' | grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [^a-zA-Z, ] ]];\
    \ then\n    echo \"Invalid input\"\n    exit 1\n  fi\n  if [[ $1 =~ [ ] ]]; then\n\
    \    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ [,] ]]; then\n    echo $1 | tr ','\
    \ '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | awk '{print NR%2}' | grep -c\
    \ 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpljvure6k.sh: line 9: syntax error in conditional expression

    /tmp/tmpljvure6k.sh: line 9: syntax error near `]''

    /tmp/tmpljvure6k.sh: line 9: `  if [[ $1 =~ [^a-zA-Z, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ \"$1\" =~ [^[:space:]]\
    \ ]]; then\n    if [[ \"$1\" =~ [^,] ]]; then\n      echo \"$1\" | grep -o '[a-z]'\
    \ | awk '{print NR%2}' | grep -c 1\n    else\n      echo \"$1\" | tr ',' '\\n'\n\
    \    fi\n  else\n    echo \"$1\"\n  fi\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ \" \" ]]; then\n\
    \        echo $1 | tr \" \" \"\\n\"\n    elif [[ $1 =~ \",\" ]]; then\n      \
    \  echo $1 | tr \",\" \"\\n\"\n    else\n        echo $1 | grep -o '[a-z]' | awk\
    \ '{print NR%2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local str=\"$1\"\n  local\
    \ result=\"\"\n  local i=0\n  local len=${#str}\n  local char=\"\"\n  local prev_char=\"\
    \"\n  local prev_char_is_space=false\n  local prev_char_is_comma=false\n  local\
    \ prev_char_is_letter=false\n  local char_is_space=false\n  local char_is_comma=false\n\
    \  local char_is_letter=false\n  local char_is_odd=false\n  local odd_count=0\n\
    \n  while [ $i -lt $len ]; do\n    char=\"${str:$i:1}\"\n    char_is_space=\"\
    $(is_space \"$char\")\"\n    char_is_comma=\"$(is_comma \"$char\")\"\n    char_is_letter=\"\
    $(is_letter \"$char\")\"\n    char_is_odd=\"$(is_odd \"$char\")\"\n\n    if [\
    \ \"$prev_char_is_space\" = true ] && [ \"$char_is_space\" = true ]; then\n  \
    \    # skip\n      :\n    elif [ \"$prev_char_is_comma\" = true ] && [ \"$char_is_comma\"\
    \ = true ]; then\n      # skip\n      :\n    elif [ \"$prev_char_is_letter\" =\
    \ true ] && [ \"$char_is_letter\" = true ]; then\n      result=\"$result$char\"\
    \n    elif [ \"$char_is_space\" = true ]; then\n      result=\"$result,\"\n  \
    \  elif [ \"$char_is_comma\" = true ]; then\n      result=\"$result,\"\n    elif\
    \ [ \"$char_is_letter\" = true ]; then\n      result=\"$result$char\"\n    elif\
    \ [ \"$char_is_odd\" = true ]; then\n      odd_count=$((odd_count + 1))\n    fi\n\
    \n    prev_char_is_space=\"$char_is_space\"\n    prev_char_is_comma=\"$char_is_comma\"\
    \n    prev_char_is_letter=\"$char_is_letter\"\n    prev_char=\"$char\"\n    i=$((i\
    \ + 1))\n  done\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgox3d0q2.sh: line 26: is_space: command not found

    /tmp/tmpgox3d0q2.sh: line 27: is_comma: command not found

    /tmp/tmpgox3d0q2.sh: line 28: is_letter: command not found

    /tmp/tmpgox3d0q2.sh: line 29: is_odd: command not found

    /tmp/tmpgox3d0q2.sh: line 26: is_space: command not found

    /tmp/tmpgox3d0q2.sh: line 27: is_comma: command not found

    /tmp/tmpgox3d0q2.sh: line 28: is_letter: command not found

    /tmp/tmpgox3d0q2.sh: line 29: is_odd: command not found

    /tmp/tmpgox3d0q2.sh: line 26: is_space: command not found

    /tmp/tmpgox3d0q2.sh: line 27: is_comma: command not found

    /tmp/tmpgox3d0q2.sh: line 28: is_letter: command not found

    /tmp/tmpgox3d0q2.sh: line 29: is_odd: command not found

    /tmp/tmpgox3d0q2.sh: line 26: is_space: command not found

    /tmp/tmpgox3d0q2.sh: line 27: is_comma: command not found

    /tmp/tmpgox3d0q2.sh: line 28: is_letter: command not found

    /tmp/tmpgox3d0q2.sh: line 29: is_odd: command not found

    /tmp/tmpgox3d0q2.sh: line 26: is_space: command not found

    /tmp/tmpgox3d0q2.sh: line 27: is_comma: command not found

    /tmp/tmpgox3d0q2.sh: line 28: is_letter: command not found

    /tmp/tmpgox3d0q2.sh: line 29: is_odd: command not found

    /tmp/tmpgox3d0q2.sh: line 26: is_space: command not found

    /tmp/tmpgox3d0q2.sh: line 27: is_comma: command not found

    /tmp/tmpgox3d0q2.sh: line 28: is_letter: command not found

    /tmp/tmpgox3d0q2.sh: line 29: is_odd: command not found

    /tmp/tmpgox3d0q2.sh: line 26: is_space: command not found

    /tmp/tmpgox3d0q2.sh: line 27: is_comma: command not found

    /tmp/tmpgox3d0q2.sh: line 28: is_letter: command not found

    /tmp/tmpgox3d0q2.sh: line 29: is_odd: command not found

    /tmp/tmpgox3d0q2.sh: line 26: is_space: command not found

    /tmp/tmpgox3d0q2.sh: line 27: is_comma: command not found

    /tmp/tmpgox3d0q2.sh: line 28: is_letter: command not found

    /tmp/tmpgox3d0q2.sh: line 29: is_odd: command not found

    /tmp/tmpgox3d0q2.sh: line 26: is_space: command not found

    /tmp/tmpgox3d0q2.sh: line 27: is_comma: command not found

    /tmp/tmpgox3d0q2.sh: line 28: is_letter: command not found

    /tmp/tmpgox3d0q2.sh: line'
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local str=\"$1\"\n  local\
    \ -a words\n  local -a chars\n  local -a nums\n  local -a result\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\n}\n\
    \ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ \" \" ]]; then\n\
    \        echo $1 | tr \" \" \"\\n\"\n    elif [[ $1 =~ \",\" ]]; then\n      \
    \  echo $1 | tr \",\" \"\\n\"\n    else\n        echo $(echo $1 | grep -o . |\
    \ awk '{print NR%2}' | grep -c 1)\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ \\s ]]; then\n\
    \    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ , ]]; then\n    echo $1 | tr ','\
    \ '\\n'\n  else\n    echo $(echo $1 | grep -o . | awk '{print tolower($0)}' |\
    \ awk '{print NR%2}' | grep -c 1)\n  fi\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [a-zA-Z] ]];\
    \ then\n        echo $1 | tr -s '[:blank:]' '\\n'\n    elif [[ $1 =~ [,] ]]; then\n\
    \        echo $1 | tr -s '[,]' '\\n'\n    else\n        echo $1 | grep -o '[a-z]'\
    \ | wc -l\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [[:space:]] ]];\
    \ then\n    echo \"$1\" | tr ' ' '\\n'\n  elif [[ $1 =~ , ]]; then\n    echo \"\
    $1\" | tr ',' '\\n'\n  else\n    echo \"$1\" | grep -o '[a-z]' | awk '{print NR\
    \ % 2}' | grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [[:space:]] ]];\
    \ then\n    echo \"$1\" | tr ' ' '\\n'\n  elif [[ $1 =~ , ]]; then\n    echo \"\
    $1\" | tr ',' '\\n'\n  else\n    echo \"$1\" | grep -o '[a-z]' | awk 'NR % 2 ==\
    \ 1' | wc -l\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [,] ]]; then\n\
    \        echo $1 | tr ',' ' '\n    elif [[ $1 =~ [ ] ]]; then\n        echo $1\n\
    \    else\n        echo $(( $(echo $1 | tr -d -c 'a-z' | wc -c) % 2 ))\n    fi\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnsud_s8j.sh: line 11: syntax error in conditional expression

    /tmp/tmpnsud_s8j.sh: line 11: syntax error near `]''

    /tmp/tmpnsud_s8j.sh: line 11: `    elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [[:space:]] ]];\
    \ then\n    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ , ]]; then\n    echo $1 |\
    \ tr ',' '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | awk '{print NR % 2}' |\
    \ grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [a-zA-Z] ]];\
    \ then\n        if [[ $1 =~ [,] ]]; then\n            echo $1 | tr ',' ' '\n \
    \       else\n            echo $1 | grep -o '[a-z]' | awk '{print NR%2}' | grep\
    \ -c 1\n        fi\n    else\n        echo $1 | tr ' ' ','\n    fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [^a-zA-Z,] ]];\
    \ then\n    echo $1 | tr -s ' ' '\\n'\n  elif [[ $1 =~ [^a-zA-Z] ]]; then\n  \
    \  echo $1 | tr -s ',' '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | awk '{print\
    \ NR % 2}' | grep -c '1'\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [, ] ]]; then\n\
    \        echo \"$1\" | tr ',' ' '\n    else\n        echo \"$1\" | grep -o '[a-z]'\
    \ | awk '{print NR%2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl2miy0zj.sh: line 9: syntax error in conditional expression

    /tmp/tmpl2miy0zj.sh: line 9: syntax error near `]''

    /tmp/tmpl2miy0zj.sh: line 9: `    if [[ $1 =~ [, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \    if [[ $1 =~ [,] ]]; then\n      echo $1 | tr \",\" \"\\n\"\n    else\n  \
    \    echo $1 | grep -o '[a-z]' | wc -l\n    fi\n  else\n    echo $1 | tr \" \"\
    \ \"\\n\"\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local text=\"$1\"\n  local\
    \ result=\"\"\n  if [[ \"$text\" =~ [[:space:]] ]]; then\n    result=\"$(echo\
    \ \"$text\" | tr ' ' '\\n')\"\n  elif [[ \"$text\" =~ , ]]; then\n    result=\"\
    $(echo \"$text\" | tr ',' '\\n')\"\n  else\n    result=\"$(echo \"$text\" | grep\
    \ -o '[a-z]' | wc -l)\"\n  fi\n  echo \"$result\"\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \    if [[ $1 =~ [,] ]]; then\n      echo $1 | tr ',' ' '\n    else\n      echo\
    \ $1 | grep -o '[a-z]' | wc -l\n    fi\n  else\n    echo $1\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ \"$1\" =~ [, ] ]];\
    \ then\n        echo \"$1\" | tr -s ' ' '\\n'\n    else\n        echo \"$1\" |\
    \ grep -o '[a-z]' | awk '{print NR % 2}' | grep -c 1\n    fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpno25flte.sh: line 9: syntax error in conditional expression

    /tmp/tmpno25flte.sh: line 9: syntax error near `]''

    /tmp/tmpno25flte.sh: line 9: `    if [[ "$1" =~ [, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [,] ]]; then\n\
    \    echo $1 | tr ',' ' '\n  elif [[ $1 =~ [ ] ]]; then\n    echo $1\n  else\n\
    \    echo $1 | grep -o . | awk '{print NR%2}' | grep -o 1 | wc -l\n  fi\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppd4j6buy.sh: line 11: syntax error in conditional expression

    /tmp/tmppd4j6buy.sh: line 11: syntax error near `]''

    /tmp/tmppd4j6buy.sh: line 11: `  elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [^a-zA-Z, ]\
    \ ]]; then\n        echo \"Invalid input\"\n        return 1\n    fi\n    if [[\
    \ $1 =~ [, ] ]]; then\n        echo $1 | tr -s ' ' '\\n'\n    else\n        echo\
    \ $1 | grep -o '[a-z]' | awk '{print NR%2}' | grep -c 1\n    fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7tpr36s3.sh: line 9: syntax error in conditional expression

    /tmp/tmp7tpr36s3.sh: line 9: syntax error near `]''

    /tmp/tmp7tpr36s3.sh: line 9: `    if [[ $1 =~ [^a-zA-Z, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [a-zA-Z] ]];\
    \ then\n        echo $1 | tr ',' '\\n'\n    else\n        echo $1 | tr -cd '[:lower:]'\
    \ | grep -o . | awk 'NR % 2 == 1' | wc -l\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [a-zA-Z] ]];\
    \ then\n        echo $1 | tr -s ' ' '\\n'\n    elif [[ $1 =~ [,] ]]; then\n  \
    \      echo $1 | tr -s ',' '\\n'\n    else\n        echo $1 | grep -o '[a-z]'\
    \ | wc -l\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ \" \" ]]; then\n\
    \        echo $1 | tr \" \" \"\\n\"\n    elif [[ $1 =~ \",\" ]]; then\n      \
    \  echo $1 | tr \",\" \"\\n\"\n    else\n        echo $1 | grep -o . | awk '{print\
    \ NR % 2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [[:space:]]\
    \ ]]; then\n        echo $1 | tr ' ' '\\n'\n    elif [[ $1 =~ , ]]; then\n   \
    \     echo $1 | tr ',' '\\n'\n    else\n        echo $1 | grep -o '[a-z]' | awk\
    \ '{print NR % 2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  echo \"split_words $1\"\n\
    \  local words=$(echo \"$1\" | tr -d ' ')\n  if [ \"$words\" == \"$1\" ]; then\n\
    \    words=$(echo \"$1\" | tr -d ',')\n    if [ \"$words\" == \"$1\" ]; then\n\
    \      words=$(echo \"$1\" | grep -o '[a-z]' | wc -l)\n    fi\n  fi\n  echo \"\
    $words\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local str=$1\n  local words=()\n\
    \  local word=''\n  local c\n  for ((i=0; i<${#str}; i++)); do\n    c=${str:$i:1}\n\
    \    if [[ $c == ' ' ]]; then\n      words+=(\"$word\")\n      word=''\n    elif\
    \ [[ $c == ',' ]]; then\n      words+=(\"$word\")\n      word=''\n    else\n \
    \     word+=$c\n    fi\n  done\n  if [[ $word != '' ]]; then\n    words+=(\"$word\"\
    )\n  fi\n  if [[ ${#words[@]} -eq 0 ]]; then\n    local count=0\n    for ((i=0;\
    \ i<${#str}; i++)); do\n      c=${str:$i:1}\n      if [[ $((i % 2)) -eq 1 ]];\
    \ then\n        if [[ $c == [[:lower:]] ]]; then\n          count=$((count + 1))\n\
    \        fi\n      fi\n    done\n    words+=(\"$count\")\n  fi\n  echo \"${words[@]}\"\
    \n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  # your code here\n  if [[\
    \ $1 =~ [a-zA-Z] ]]; then\n    echo $1 | tr -s ' ' '\\n'\n  elif [[ $1 =~ [,]\
    \ ]]; then\n    echo $1 | tr -s ',' '\\n'\n  else\n    echo $1 | grep -o [a-z]\
    \ | wc -l\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local text=$1\n  if [[ $text\
    \ =~ \" \" ]]; then\n    echo $text | tr ' ' '\\n'\n  elif [[ $text =~ \",\" ]];\
    \ then\n    echo $text | tr ',' '\\n'\n  else\n    echo $text | grep -o . | awk\
    \ '{print NR % 2}' | grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \    if [[ $1 =~ [,] ]]; then\n      echo $1 | tr ',' ' '\n    else\n      echo\
    \ $1 | grep -o '[a-z]' | wc -l\n    fi\n  else\n    echo $1\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \    echo $1 | tr ',' '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | grep -v -n\
    \ -e '[02468]' | cut -d ':' -f 1\n  fi\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    echo $1 | tr -s ' ' '\\\
    n' | sort -u\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local text=\"$1\"\n  local\
    \ result=\"\"\n  if [[ \"$text\" =~ [[:space:]] ]]; then\n    result=\"$(echo\
    \ \"$text\" | tr ' ' '\\n')\"\n  elif [[ \"$text\" =~ , ]]; then\n    result=\"\
    $(echo \"$text\" | tr ',' '\\n')\"\n  else\n    result=\"$(echo \"$text\" | grep\
    \ -o '[a-z]' | wc -l)\"\n  fi\n  echo \"$result\"\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ \" \" ]]; then\n\
    \    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ \",\" ]]; then\n    echo $1 | tr\
    \ ',' '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | awk 'NR % 2 == 1' | wc -l\n\
    \  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \    echo \"$1\" | tr -s ' ' '\\n'\n  elif [[ $1 =~ [,] ]]; then\n    echo \"\
    $1\" | tr -s ',' '\\n'\n  else\n    echo \"$1\" | grep -o '[a-z]' | wc -l\n  fi\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local str=\"$1\"\n  if [[\
    \ \"$str\" =~ \\s ]]; then\n    echo \"$str\" | tr ' ' '\\n'\n  elif [[ \"$str\"\
    \ =~ , ]]; then\n    echo \"$str\" | tr ',' '\\n'\n  else\n    echo \"${#str}\"\
    \n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ \"$1\" =~ [,] ]];\
    \ then\n        echo \"$1\" | tr ',' '\\n'\n    elif [[ \"$1\" =~ [ ] ]]; then\n\
    \        echo \"$1\" | tr ' ' '\\n'\n    else\n        echo \"$1\" | grep -o .\
    \ | awk '{print NR%2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwnatue7d.sh: line 11: syntax error in conditional expression

    /tmp/tmpwnatue7d.sh: line 11: syntax error near `]''

    /tmp/tmpwnatue7d.sh: line 11: `    elif [[ "$1" =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ [,] ]]; then\n    echo $1 | tr ','\
    \ '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | wc -l\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ \"$1\" =~ [,] ]]; then\n\
    \    echo \"$1\" | tr ',' '\\n'\n  elif [[ \"$1\" =~ [ ] ]]; then\n    echo \"\
    $1\" | tr ' ' '\\n'\n  else\n    echo \"$1\" | grep -o '[a-z]' | awk '{print NR%2}'\
    \ | grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnxl5wwjg.sh: line 11: syntax error in conditional expression

    /tmp/tmpnxl5wwjg.sh: line 11: syntax error near `]''

    /tmp/tmpnxl5wwjg.sh: line 11: `  elif [[ "$1" =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local string=$1\n  if [[ $string\
    \ =~ \\s ]]; then\n    echo $string | tr ' ' '\\n'\n  elif [[ $string =~ , ]];\
    \ then\n    echo $string | tr ',' '\\n'\n  else\n    local count=0\n    for ((\
    \ i=0; i<${#string}; i++ )); do\n      local char=${string:$i:1}\n      local\
    \ char_ord=$(printf '%d' \"'$char\")\n      if (( $char_ord % 2 == 1 )); then\n\
    \        (( count++ ))\n      fi\n    done\n    echo $count\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [,] ]]; then\n\
    \    echo $1 | tr ',' ' '\n  elif [[ $1 =~ [ ] ]]; then\n    echo $1\n  else\n\
    \    echo $1 | grep -o . | awk '{print NR % 2}' | grep -c 1\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpg0d98r01.sh: line 11: syntax error in conditional expression

    /tmp/tmpg0d98r01.sh: line 11: syntax error near `]''

    /tmp/tmpg0d98r01.sh: line 11: `  elif [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ \"$1\" =~ [^a-zA-Z0-9,\
    \ ] ]]; then\n        echo \"Invalid input\"\n        return 1\n    fi\n    if\
    \ [[ \"$1\" =~ [, ] ]]; then\n        echo \"$1\" | tr ',' '\\n'\n    else\n \
    \       echo \"$1\" | grep -o '[a-z]' | awk 'NR % 2 == 1' | wc -l\n    fi\n}\n\
    \ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxxmsd00v.sh: line 9: syntax error in conditional expression

    /tmp/tmpxxmsd00v.sh: line 9: syntax error near `]''

    /tmp/tmpxxmsd00v.sh: line 9: `    if [[ "$1" =~ [^a-zA-Z0-9, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [[:space:]] ]];\
    \ then\n    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ , ]]; then\n    echo $1 |\
    \ tr ',' '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | awk '{print NR % 2}' |\
    \ grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [^a-zA-Z] ]];\
    \ then\n        echo $1 | tr -s ' ' '\\n'\n    elif [[ $1 =~ [^,] ]]; then\n \
    \       echo $1 | tr -s ',' '\\n'\n    else\n        echo $1 | grep -o '[a-z]'\
    \ | wc -l\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [^a-zA-Z0-9, ]\
    \ ]]; then\n    echo \"Invalid input\"\n    exit 1\n  fi\n  if [[ $1 =~ [ ] ]];\
    \ then\n    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ [,] ]]; then\n    echo $1\
    \ | tr ',' '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | awk '{print NR%2}' |\
    \ grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmw21e46y.sh: line 9: syntax error in conditional expression

    /tmp/tmpmw21e46y.sh: line 9: syntax error near `]''

    /tmp/tmpmw21e46y.sh: line 9: `  if [[ $1 =~ [^a-zA-Z0-9, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [^a-zA-Z,] ]];\
    \ then\n        echo $1 | tr ' ' '\\n'\n    elif [[ $1 =~ [^a-zA-Z] ]]; then\n\
    \        echo $1 | tr ',' '\\n'\n    else\n        echo $(echo $1 | grep -o [a-z]\
    \ | grep -v -E '([a-z])\\1' | wc -l)\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  local str=\"$1\"\n  if [[\
    \ \"$str\" =~ [[:space:]] ]]; then\n    echo \"$str\" | tr ' ' '\\n'\n  elif [[\
    \ \"$str\" =~ , ]]; then\n    echo \"$str\" | tr ',' '\\n'\n  else\n    local\
    \ count=0\n    for ((i=0; i<${#str}; i++)); do\n      if [[ $((i % 2)) -eq 0 ]];\
    \ then\n        if [[ \"${str:$i:1}\" =~ [a-z] ]]; then\n          count=$((count\
    \ + 1))\n        fi\n      fi\n    done\n    echo \"$count\"\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [^a-zA-Z, ] ]];\
    \ then\n    echo \"Invalid input\"\n    exit 1\n  fi\n  if [[ $1 =~ [ ] ]]; then\n\
    \    echo $1 | tr ' ' '\\n'\n  elif [[ $1 =~ [,] ]]; then\n    echo $1 | tr ','\
    \ '\\n'\n  else\n    echo $1 | grep -o '[a-z]' | awk '{print NR%2}' | grep -c\
    \ 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpljvure6k.sh: line 9: syntax error in conditional expression

    /tmp/tmpljvure6k.sh: line 9: syntax error near `]''

    /tmp/tmpljvure6k.sh: line 9: `  if [[ $1 =~ [^a-zA-Z, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001005
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [^a-zA-Z0-9,\
    \ ] ]]; then\n        echo \"Invalid input\"\n        return 1\n    fi\n    if\
    \ [[ $1 =~ [a-zA-Z] ]]; then\n        if [[ $1 =~ [ ] ]]; then\n            echo\
    \ $1 | tr ' ' '\\n'\n        else\n            if [[ $1 =~ [,] ]]; then\n    \
    \            echo $1 | tr ',' '\\n'\n            else\n                echo $1\
    \ | grep -o '[a-z]' | wc -l\n            fi\n        fi\n    else\n        echo\
    \ \"Invalid input\"\n        return 1\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpir2xwdgu.sh: line 9: syntax error in conditional expression

    /tmp/tmpir2xwdgu.sh: line 9: syntax error near `]''

    /tmp/tmpir2xwdgu.sh: line 9: `    if [[ $1 =~ [^a-zA-Z0-9, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \    if [[ $1 =~ [,] ]]; then\n      echo $1 | tr ',' ' '\n    else\n      echo\
    \ $1 | tr -cd [a-z] | grep -o . | awk '{print NR % 2}' | grep -c 1\n    fi\n \
    \ else\n    echo $1 | tr -cd [0-9] | grep -o . | awk '{print NR % 2}' | grep -c\
    \ 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001006
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n#\n# $1 is a string\nsplit_words() {\n    if [[ $1 =~ [[:space:]]\
    \ ]]; then\n        echo $1 | tr ' ' '\\n'\n    elif [[ $1 =~ , ]]; then\n   \
    \     echo $1 | tr ',' '\\n'\n    else\n        echo $1 | grep -o '[a-z]' | awk\
    \ '{print NR % 2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001005
