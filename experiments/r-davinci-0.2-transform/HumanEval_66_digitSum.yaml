name: HumanEval_66_digitSum
language: r
prompt: "# Task\n# Write a function that takes a string as input and returns the sum\
  \ of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum('')\n\
  # 0\n# >>> digitSum('abAB')\n# 131\n# >>> digitSum('abcCd')\n# 67\n# >>> digitSum('helloE')\n\
  # 69\n# >>> digitSum('woArBld')\n# 131\n# >>> digitSum('aAaaaXa')\n# 153\ndigitSum\
  \ <- function(s) {"
tests: "test_humaneval <- function() {\ncandidate <- digitSum\n    if(!identical(candidate(''),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate('abAB'), 131)){quit('no', 1)}\n\
  \    if(!identical(candidate('abcCd'), 67)){quit('no', 1)}\n    if(!identical(candidate('helloE'),\
  \ 69)){quit('no', 1)}\n    if(!identical(candidate('woArBld'), 131)){quit('no',\
  \ 1)}\n    if(!identical(candidate('aAaaaXa'), 153)){quit('no', 1)}\n    if(!identical(candidate('\
  \ How are yOu?'), 151)){quit('no', 1)}\n    if(!identical(candidate('You arE Very\
  \ Smart'), 327)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  sum(as.numeric(gsub(\"[^A-Z]\", \"\", s)))\n}\n", "\n  sum(as.numeric(gsub(\"\
    [^A-Z]\", \"\", s)))\n}\n", "\n  sum(as.numeric(gsub(\"[^A-Z]\", \"\", s)))\n\
    }\n", "\n  sum(sapply(strsplit(s, \"\")[[1]], function(x) {\n    if (x %in% LETTERS)\
    \ {\n      return(as.numeric(x))\n    } else {\n      return(0)\n    }\n  }))\n\
    }\ndigitSum(\"\")\ndigitSum(\"abAB\")\ndigitSum(\"abcCd\")\ndigitSum(\"helloE\"\
    )\ndigitSum(\"woArBld\")\ndigitSum(\"aAaaaXa\")\n", "\n  sum(as.numeric(gsub(\"\
    [^A-Z]\", \"\", s)))\n}\n", "\n  sum(as.numeric(s[s >= 'A' & s <= 'Z']))\n}\n",
  "\n  sum(as.numeric(gsub(\"[^[:upper:]]\", \"\", s)))\n}\n", "\n    sum(sapply(strsplit(s,\
    \ \"\")[[1]], function(x) {\n        if (x %in% LETTERS) {\n            return(as.numeric(x))\n\
    \        } else {\n            return(0)\n        }\n    }))\n}\n", "\n  sum(as.numeric(gsub(\"\
    [^A-Z]\", \"\", s)))\n}\n", "\n  sum(as.numeric(gsub(\"[^A-Z]\", \"\", s)))\n\
    }\ndigitSum(\"woArBld\")\n", "\n  sum(as.numeric(gsub(\"[^A-Z]\", \"\", s)))\n\
    }\n", "\n  sum(as.numeric(gsub(\"[^A-Z]\", \"\", s)))\n}\n\ndigitSum(\"\")\ndigitSum(\"\
    abAB\")\ndigitSum(\"abcCd\")\ndigitSum(\"helloE\")\ndigitSum(\"woArBld\")\ndigitSum(\"\
    aAaaaXa\")\n", "\n  sum(as.numeric(gsub(\"[^A-Z]\", \"\", s)))\n}\ndigitSum(\"\
    woArBld\")\n", "\n  sum(as.numeric(gsub(\"[^A-Z]\", \"\", s)))\n}\n", "\n  sum(as.numeric(gsub(\"\
    [^A-Z]\", \"\", s)))\n}\ndigitSum(\"woArBld\")\n", "\n  sum(as.numeric(gsub(\"\
    [^A-Z]\", \"\", s)))\n}\n", "\n  sum(as.numeric(gsub(\"[^A-Z]\", \"\", s)))\n\
    }\n", "\n    sum(as.numeric(s[s >= 'A' & s <= 'Z']))\n}\n", "\n  sum(as.numeric(gsub(\"\
    [^A-Z]\", \"\", s)))\n}\n", "\n  sum(as.numeric(gsub(\"[^A-Z]\", \"\", s)))\n\
    }\n"]
stop_tokens:
- "\n#"
- "\n```"
