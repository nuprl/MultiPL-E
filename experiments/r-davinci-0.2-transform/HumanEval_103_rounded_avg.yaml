name: HumanEval_103_rounded_avg
language: r
prompt: "# You are given two positive integers n and m, and your task is to compute\
  \ the\n# average of the integers from n through m (including n and m). \n# Round\
  \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
  \ than m, return -1.\n# Example:\n# >>> rounded_avg(1, 5)\n# '0b11'\n# >>> rounded_avg(7,\
  \ 5)\n# -1\n# >>> rounded_avg(10, 20)\n# '0b1111'\n# >>> rounded_avg(20, 33)\n#\
  \ '0b11010'\nrounded_avg <- function(n, m) {"
tests: "test_humaneval <- function() {\ncandidate <- rounded_avg\n    if(!identical(candidate(1,\
  \ 5), '0b11')){quit('no', 1)}\n    if(!identical(candidate(7, 13), '0b1010')){quit('no',\
  \ 1)}\n    if(!identical(candidate(964, 977), '0b1111001010')){quit('no', 1)}\n\
  \    if(!identical(candidate(996, 997), '0b1111100100')){quit('no', 1)}\n    if(!identical(candidate(560,\
  \ 851), '0b1011000010')){quit('no', 1)}\n    if(!identical(candidate(185, 546),\
  \ '0b101101110')){quit('no', 1)}\n    if(!identical(candidate(362, 496), '0b110101101')){quit('no',\
  \ 1)}\n    if(!identical(candidate(350, 902), '0b1001110010')){quit('no', 1)}\n\
  \    if(!identical(candidate(197, 233), '0b11010111')){quit('no', 1)}\n    if(!identical(candidate(7,\
  \ 5), -1)){quit('no', 1)}\n    if(!identical(candidate(5, 1), -1)){quit('no', 1)}\n\
  \    if(!identical(candidate(5, 5), '0b101')){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  if (n > m) {\n    return(-1)\n  }\n  else {\n    return(paste0('0b',\
    \ as.integer(round(mean(n:m)))))\n  }\n}\n", "\n  if (n > m) {\n    return(-1)\n\
    \  }\n  else {\n    return(paste0(\"0b\", dec2bin(round(mean(n:m)))))\n  }\n}\n",
  "\n  # YOUR CODE HERE\n  if (n > m) {\n    return(-1)\n  }\n  else {\n    return(paste0(\"\
    0b\", intToBits(round(mean(n:m)))))\n  }\n}\nrounded_avg(1, 5)\nrounded_avg(7,\
    \ 5)\nrounded_avg(10, 20)\nrounded_avg(20, 33)\n", "\n  if (n > m) {\n    return(-1)\n\
    \  }\n  else {\n    return(paste0(\"0b\", intToBits(round(mean(n:m)))))\n  }\n\
    }\n", "\n  if (n > m) {\n    return(-1)\n  }\n  avg <- round(mean(n:m))\n  return(paste0(\"\
    0b\", as.binary(avg)))\n}\n", "\n  if (n > m) {\n    return(-1)\n  }\n  else {\n\
    \    return(paste0(\"0b\", as.integer(round(mean(n:m)))))\n  }\n}\n", "\n  if\
    \ (n > m) {\n    return(-1)\n  } else {\n    return(paste0(\"0b\", as.integer(round(mean(n:m)))))\n\
    \  }\n}\n", "\n  if (n > m) {\n    return(-1)\n  }\n  avg <- round(mean(n:m))\n\
    \  return(paste0(\"0b\", as.integer(avg, 2)))\n}\nrounded_avg(1, 5)\nrounded_avg(7,\
    \ 5)\nrounded_avg(10, 20)\nrounded_avg(20, 33)\n", "\n  if (n > m) {\n    return(-1)\n\
    \  }\n  avg <- round(mean(n:m))\n  return(paste0(\"0b\", as.binary(avg)))\n}\n",
  "\n  if (n > m) {\n    return(-1)\n  }\n  avg <- round(mean(n:m))\n  return(paste0(\"\
    0b\", as.binary(avg)))\n}\n", "\n  if (n > m) {\n    return(-1)\n  }\n  else {\n\
    \    avg <- round(mean(n:m))\n    return(paste0(\"0b\", as.binary(avg)))\n  }\n\
    }\nrounded_avg(1, 5)\nrounded_avg(7, 5)\nrounded_avg(10, 20)\nrounded_avg(20,\
    \ 33)\n", "\n  if (n > m) {\n    return(-1)\n  }\n  avg <- round(mean(n:m))\n\
    \  return(paste0(\"0b\", as.binary(avg)))\n}\nrounded_avg(1, 5)\nrounded_avg(7,\
    \ 5)\nrounded_avg(10, 20)\nrounded_avg(20, 33)\n", "\n  if (n > m) {\n    return(-1)\n\
    \  }\n  avg <- round(mean(n:m))\n  return(paste0(\"0b\", as.binary(avg)))\n}\n",
  "\n  if (n > m) {\n    return(-1)\n  }\n  avg <- round(mean(n:m))\n  return(paste0(\"\
    0b\", as.binary(avg)))\n}\n", "\n  if (n > m) {\n    return(-1)\n  }\n  else {\n\
    \    return(paste0(\"0b\", as.integer(round(mean(n:m)))))\n  }\n}\n", "\n  if\
    \ (n > m) {\n    return(-1)\n  }\n  avg <- round(mean(n:m))\n  return(paste0(\"\
    0b\", as.binary(avg)))\n}\n", "\n  if (n > m) {\n    return(-1)\n  }\n  avg <-\
    \ round(mean(n:m))\n  return(paste0(\"0b\", as.binary(avg)))\n}\n", "\n  if (n\
    \ > m) {\n    return(-1)\n  }\n  avg <- round(mean(n:m))\n  return(paste0(\"0b\"\
    , as.binary(avg)))\n}\n", "\n  if (n > m) {\n    return(-1)\n  }\n  avg <- round(mean(n:m))\n\
    \  return(paste0(\"0b\", as.binary(avg)))\n}\n", "\n  if (n > m) {\n    return(-1)\n\
    \  }\n  avg <- round(mean(n:m))\n  paste0(\"0b\", as.binary(avg))\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
