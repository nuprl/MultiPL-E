name: HumanEval_9_rolling_max
language: r
prompt: "# From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n# in the sequence.\n# >>> rolling_max(c(1, 2, 3, 2,\
  \ 3, 4, 2))\n# list(1, 2, 3, 3, 3, 4, 4)\nrolling_max <- function(numbers) {"
tests: "test_humaneval <- function() {\ncandidate <- rolling_max\n    if(!identical(candidate(c()),\
  \ list())){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, 4)), list(1, 2,\
  \ 3, 4))){quit('no', 1)}\n    if(!identical(candidate(c(4, 3, 2, 1)), list(4, 4,\
  \ 4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(3, 2, 3, 100, 3)), list(3,\
  \ 3, 3, 100, 100))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  # TODO: implement this function\n  return(NULL)\n}\n", "\n  max\
    \ <- numbers[1]\n  result <- list()\n  for (number in numbers) {\n    if (number\
    \ > max) {\n      max <- number\n    }\n    result <- c(result, max)\n  }\n  return(result)\n\
    }\n", "\n  result <- list()\n  max <- numbers[[1]]\n  result[[1]] <- max\n  for\
    \ (i in 2:length(numbers)) {\n    if (numbers[[i]] > max) {\n      max <- numbers[[i]]\n\
    \    }\n    result[[i]] <- max\n  }\n  return(result)\n}\n", "\n  result <- c()\n\
    \  for (i in seq_along(numbers)) {\n    result <- c(result, max(numbers[1:i]))\n\
    \  }\n  return(result)\n}\n", "\n  max <- numbers[1]\n  result <- list()\n  for\
    \ (number in numbers) {\n    if (number > max) {\n      max <- number\n    }\n\
    \    result <- c(result, max)\n  }\n  return(result)\n}\n", "\n    max <- numbers[1]\n\
    \    result <- list()\n    for (i in 1:length(numbers)) {\n        if (numbers[i]\
    \ > max) {\n            max <- numbers[i]\n        }\n        result[[i]] <- max\n\
    \    }\n    return(result)\n}\n", "\n  result <- list()\n  max_so_far <- numbers[[1]]\n\
    \  result[[1]] <- max_so_far\n  for (i in 2:length(numbers)) {\n    if (numbers[[i]]\
    \ > max_so_far) {\n      max_so_far <- numbers[[i]]\n    }\n    result[[i]] <-\
    \ max_so_far\n  }\n  return(result)\n}\n", "\n    max_so_far <- numbers[1]\n \
    \   result <- list()\n    for (number in numbers) {\n        if (number > max_so_far)\
    \ {\n            max_so_far <- number\n        }\n        result <- c(result,\
    \ max_so_far)\n    }\n    return(result)\n}\n", "\n    # TODO: implement\n   \
    \ return(numbers)\n}\n", "\n  # TODO: implement me\n  return(numbers)\n}\n", "\n\
    \    result <- list()\n    for (i in 1:length(numbers)) {\n        result[[i]]\
    \ <- max(numbers[1:i])\n    }\n    return(result)\n}\n", "\n  result <- list()\n\
    \  for (i in 1:length(numbers)) {\n    result[[i]] <- max(numbers[1:i])\n  }\n\
    \  return(result)\n}\n", "\n  result <- list()\n  max <- numbers[[1]]\n  result[[1]]\
    \ <- max\n  for (i in 2:length(numbers)) {\n    if (numbers[[i]] > max) {\n  \
    \    max <- numbers[[i]]\n    }\n    result[[i]] <- max\n  }\n  return(result)\n\
    }\n", "\n  max_so_far <- numbers[1]\n  rolling_max <- list()\n  for (number in\
    \ numbers) {\n    if (number > max_so_far) {\n      max_so_far <- number\n   \
    \ }\n    rolling_max <- c(rolling_max, max_so_far)\n  }\n  return(rolling_max)\n\
    }\n", "\n    result <- list()\n    max <- numbers[1]\n    result[[1]] <- max\n\
    \    for (i in 2:length(numbers)) {\n        if (numbers[i] > max) {\n       \
    \     max <- numbers[i]\n        }\n        result[[i]] <- max\n    }\n    return(result)\n\
    }\n", "\n  max_so_far <- numbers[1]\n  result <- list()\n  for (number in numbers)\
    \ {\n    if (number > max_so_far) {\n      max_so_far <- number\n    }\n    result\
    \ <- c(result, max_so_far)\n  }\n  return(result)\n}\n", "\n    max <- numbers[1]\n\
    \    result <- list()\n    for (number in numbers) {\n        if (number > max)\
    \ {\n            max <- number\n        }\n        result <- c(result, max)\n\
    \    }\n    return(result)\n}\n", "\n    max <- numbers[1]\n    result <- list()\n\
    \    for (i in 1:length(numbers)) {\n        if (numbers[i] > max) {\n       \
    \     max <- numbers[i]\n        }\n        result[[i]] <- max\n    }\n    return(result)\n\
    }\n", "\n  result <- list()\n  max <- numbers[[1]]\n  result[[1]] <- max\n  for\
    \ (i in 2:length(numbers)) {\n    if (numbers[[i]] > max) {\n      max <- numbers[[i]]\n\
    \    }\n    result[[i]] <- max\n  }\n  return(result)\n}\n", "\n  if (length(numbers)\
    \ == 0) {\n    return(numeric(0))\n  }\n  result <- numeric(length(numbers))\n\
    \  result[1] <- numbers[1]\n  for (i in 2:length(numbers)) {\n    result[i] <-\
    \ max(result[i - 1], numbers[i])\n  }\n  return(result)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
