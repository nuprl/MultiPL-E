name: HumanEval_145_order_by_points
language: r
prompt: "# Write a function which sorts the given list of integers\n# in ascending\
  \ order according to the sum of their digits.\n# Note: if there are several items\
  \ with similar sum of their digits,\n# order them based on their index in original\
  \ list.\n# For example:\n# >>> order_by_points(c(1, 11, -1, -11, -12))\n# list(-1,\
  \ -11, 1, -12, 11)\n# >>> order_by_points(c())\n# list()\norder_by_points <- function(nums)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- order_by_points\n    if(!identical(candidate(c(1,\
  \ 11, -1, -11, -12)), list(-1, -11, 1, -12, 11))){quit('no', 1)}\n    if(!identical(candidate(c(1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)), list(0, 2, 3, 6,\
  \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457))){quit('no', 1)}\n    if(!identical(candidate(c()),\
  \ list())){quit('no', 1)}\n    if(!identical(candidate(c(1, -11, -32, 43, 54, -98,\
  \ 2, -3)), list(-3, -32, -98, -11, 1, 2, 43, 54))){quit('no', 1)}\n    if(!identical(candidate(c(1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)), list(1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9))){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(0, 6, 6, -76, -21, 23, 4)), list(-76, -21,\
  \ 0, 4, 23, 6, 6))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  # your code here\n}\n", "\n  # YOUR CODE HERE\n  return(nums)\n\
    }\n", "\n  # your code here\n}\n", "\n  if (length(nums) == 0) {\n    return(list())\n\
    \  }\n  sums <- sapply(nums, function(x) sum(as.integer(strsplit(as.character(x),\
    \ \"\")[[1]])))\n  return(nums[order(sums, nums)])\n}\n", "\n    nums_sum <- sapply(nums,\
    \ function(x) sum(as.integer(strsplit(as.character(x), \"\")[[1]])))\n    nums_sum\
    \ <- nums_sum[order(nums_sum, decreasing = FALSE)]\n    nums[match(nums_sum, nums_sum)]\n\
    }\n", "\n  if (length(nums) == 0) {\n    return(list())\n  }\n  sums <- sapply(nums,\
    \ function(x) {\n    sum(as.integer(strsplit(as.character(x), \"\")[[1]]))\n \
    \ })\n  nums[order(sums, nums)]\n}\n", "\n  if (length(nums) == 0) {\n    return(list())\n\
    \  }\n  sums <- sapply(nums, function(x) sum(as.integer(unlist(strsplit(as.character(x),\
    \ \"\")))))\n  return(nums[order(sums, nums)])\n}\n", "\n  if (length(nums) ==\
    \ 0) {\n    return(list())\n  }\n  sums <- sapply(nums, function(x) {\n    sum(as.integer(strsplit(as.character(x),\
    \ \"\")[[1]]))\n  })\n  return(nums[order(sums, nums)])\n}\n", "\n  # YOUR CODE\
    \ HERE\n}\n", "\n  # YOUR CODE HERE\n  if(length(nums)==0){\n    return(list())\n\
    \  }\n  else{\n    nums_sum <- sum(abs(nums))\n    nums_index <- 1:length(nums)\n\
    \    nums_index_sorted <- order(nums_sum)\n    nums_sorted <- nums[nums_index_sorted]\n\
    \    return(nums_sorted)\n  }\n}\n", "\n  if (length(nums) == 0) {\n    return(list())\n\
    \  }\n  sums <- sapply(nums, function(x) sum(as.integer(strsplit(as.character(x),\
    \ \"\")[[1]])))\n  order <- order(sums, nums)\n  return(nums[order])\n}\n", "\n\
    \  if (length(nums) == 0) {\n    return(list())\n  }\n  sums <- list()\n  for\
    \ (i in 1:length(nums)) {\n    sums[[i]] <- sum(as.integer(strsplit(as.character(nums[i]),\
    \ \"\")[[1]]))\n  }\n  return(nums[order(sums)])\n}\n", "\n  # YOUR CODE HERE\n\
    \  if (length(nums) == 0) {\n    return(list())\n  }\n  sums <- sapply(nums, function(x)\
    \ {\n    sum(as.integer(strsplit(as.character(x), \"\")[[1]]))\n  })\n  return(nums[order(sums,\
    \ nums)])\n}\n", "\n  if (length(nums) == 0) {\n    return(list())\n  }\n  sums\
    \ <- sapply(nums, function(num) {\n    sum(as.integer(strsplit(as.character(num),\
    \ \"\")[[1]]))\n  })\n  return(nums[order(sums, nums)])\n}\n", "\n  if (length(nums)\
    \ == 0) {\n    return(list())\n  }\n  sums <- list()\n  for (i in 1:length(nums))\
    \ {\n    sums[[i]] <- sum(as.integer(strsplit(as.character(nums[i]), \"\")[[1]]))\n\
    \  }\n  sums <- as.integer(sums)\n  nums <- nums[order(sums, nums)]\n  return(nums)\n\
    }\n", "\n  if (length(nums) == 0) {\n    return(list())\n  }\n  sums <- sapply(nums,\
    \ function(x) {\n    sum(as.integer(strsplit(as.character(x), \"\")[[1]]))\n \
    \ })\n  return(nums[order(sums, nums)])\n}\n", "\n  # YOUR CODE HERE\n  if(length(nums)\
    \ == 0) {\n    return(list())\n  }\n  sums <- sapply(nums, function(x) sum(as.integer(unlist(strsplit(as.character(x),\
    \ \"\")))))\n  return(nums[order(sums, nums)])\n}\n", "\n  # YOUR CODE HERE\n\
    \  nums <- nums[order(sapply(nums, function(x) sum(as.integer(strsplit(as.character(x),\
    \ \"\")[[1]]))), nums)]\n  return(nums)\n}\n", "\n  if (length(nums) == 0) {\n\
    \    return(list())\n  }\n  sums <- sapply(nums, function(x) {\n    sum(as.integer(strsplit(as.character(x),\
    \ \"\")[[1]]))\n  })\n  order(sums, nums)\n}\n", "\n  if (length(nums) == 0) {\n\
    \    return(list())\n  }\n  sums <- sapply(nums, sum)\n  indices <- order(sums,\
    \ nums)\n  return(nums[indices])\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
