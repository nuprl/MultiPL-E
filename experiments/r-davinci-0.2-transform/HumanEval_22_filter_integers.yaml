name: HumanEval_22_filter_integers
language: r
prompt: "# Filter given list of any python values only for integers\n# >>> filter_integers(list('a',\
  \ 3.14, 5))\n# list(5)\n# >>> filter_integers(list(1, 2, 3, 'abc', list(), list()))\n\
  # list(1, 2, 3)\nfilter_integers <- function(values) {"
tests: "test_humaneval <- function() {\ncandidate <- filter_integers\n    if(!identical(candidate(list()),\
  \ list())){quit('no', 1)}\n    if(!identical(candidate(list(4, list(), list(), 23.2,\
  \ 9, 'adasd')), list(4, 9))){quit('no', 1)}\n    if(!identical(candidate(list(3,\
  \ 'c', 3, 3, 'a', 'b')), list(3, 3, 3))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  # TODO: implement me\n}\n", "\n    return(lapply(values, function(x)\
    \ {\n        if (is.integer(x)) {\n            return(x)\n        }\n    }))\n\
    }\n", "\n  # TODO: implement this function\n  return(list())\n}\n", "\n  # your\
    \ code here\n}\n", "\n    return(values[sapply(values, function(x) is.integer(x))])\n\
    }\n", "\n  # TODO: implement me\n}\n", "\n  # TODO: implement me\n}\n", "\n  \
    \  return(list(values[sapply(values, is.integer)]))\n}\n", "\n    return(lapply(values,\
    \ function(x) {\n        if (is.integer(x)) {\n            return(x)\n       \
    \ }\n    }))\n}\n", "\n  # TODO: implement me\n}\n", "\n    return(list(values[sapply(values,\
    \ is.integer)]))\n}\n", "\n  return(list(values[sapply(values, is.integer)]))\n\
    }\n", "\n    return (lapply(values, function(x) {\n        if (is.integer(x))\
    \ {\n            return (x)\n        }\n    }))\n}\n", "\n    return(list(values[sapply(values,\
    \ is.integer)]))\n}\n", "\n  values[sapply(values, is.integer)]\n}\n", "\n   \
    \ return(list(filter(values, is.integer)))\n}\n", "\n  filtered <- list()\n  for\
    \ (value in values) {\n    if (is.integer(value)) {\n      filtered <- c(filtered,\
    \ value)\n    }\n  }\n  return(filtered)\n}\n", "\n    # TODO: implement this\
    \ function\n    return(values)\n}\n", "\n    return(values[sapply(values, is.integer)])\n\
    }\n", "\n  return(values[sapply(values, is.integer)])\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
