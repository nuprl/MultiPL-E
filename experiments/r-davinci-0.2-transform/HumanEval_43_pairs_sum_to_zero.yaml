name: HumanEval_43_pairs_sum_to_zero
language: r
prompt: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns True\
  \ if there are two distinct elements in the list that\n# sum to zero, and False\
  \ otherwise.\n# >>> pairs_sum_to_zero(c(1, 3, 5, 0))\n# FALSE\n# >>> pairs_sum_to_zero(c(1,\
  \ 3, -2, 1))\n# FALSE\n# >>> pairs_sum_to_zero(c(1, 2, 3, 7))\n# FALSE\n# >>> pairs_sum_to_zero(c(2,\
  \ 4, -5, 3, 5, 7))\n# TRUE\n# >>> pairs_sum_to_zero(c(1))\n# FALSE\npairs_sum_to_zero\
  \ <- function(l) {"
tests: "test_humaneval <- function() {\ncandidate <- pairs_sum_to_zero\n    if(!identical(candidate(c(1,\
  \ 3, 5, 0)), FALSE)){quit('no', 1)}\n    if(!identical(candidate(c(1, 3, -2, 1)),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, 7)), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(2, 4, -5, 3, 5, 7)), TRUE)){quit('no', 1)}\n\
  \    if(!identical(candidate(c(1)), FALSE)){quit('no', 1)}\n    if(!identical(candidate(c(-3,\
  \ 9, -1, 3, 2, 30)), TRUE)){quit('no', 1)}\n    if(!identical(candidate(c(-3, 9,\
  \ -1, 3, 2, 31)), TRUE)){quit('no', 1)}\n    if(!identical(candidate(c(-3, 9, -1,\
  \ 4, 2, 30)), FALSE)){quit('no', 1)}\n    if(!identical(candidate(c(-3, 9, -1, 4,\
  \ 2, 31)), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n    if (length(l) < 2) {\n        return(FALSE)\n    }\n    for (i\
    \ in 1:(length(l) - 1)) {\n        for (j in (i + 1):length(l)) {\n          \
    \  if (l[i] + l[j] == 0) {\n                return(TRUE)\n            }\n    \
    \    }\n    }\n    return(FALSE)\n}\n", "\n  # your code here\n  if (length(l)\
    \ == 1) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - 1)) {\n    for (j\
    \ in (i + 1):length(l)) {\n      if (l[i] + l[j] == 0) {\n        return(TRUE)\n\
    \      }\n    }\n  }\n  return(FALSE)\n}\n", "\n  # YOUR CODE HERE\n  for (i in\
    \ 1:length(l)) {\n    for (j in 1:length(l)) {\n      if (l[i] + l[j] == 0) {\n\
    \        return(TRUE)\n      }\n    }\n  }\n  return(FALSE)\n}\n", "\n  # YOUR\
    \ CODE HERE\n  if(length(l) < 2) {\n    return(FALSE)\n  }\n  for(i in 1:(length(l)-1))\
    \ {\n    for(j in (i+1):length(l)) {\n      if(l[i] + l[j] == 0) {\n        return(TRUE)\n\
    \      }\n    }\n  }\n  return(FALSE)\n}\n", "\n    # YOUR CODE HERE\n    for\
    \ (i in 1:(length(l)-1)){\n        for (j in (i+1):length(l)){\n            if\
    \ (l[i] + l[j] == 0){\n                return(TRUE)\n            }\n        }\n\
    \    }\n    return(FALSE)\n}\n", "\n  if (length(l) == 1) {\n    return(FALSE)\n\
    \  }\n  for (i in 1:(length(l) - 1)) {\n    for (j in (i + 1):length(l)) {\n \
    \     if (l[i] + l[j] == 0) {\n        return(TRUE)\n      }\n    }\n  }\n  return(FALSE)\n\
    }\n", "\n  # your code here\n  for (i in 1:(length(l)-1)) {\n    for (j in (i+1):length(l))\
    \ {\n      if (l[i] + l[j] == 0) {\n        return(TRUE)\n      }\n    }\n  }\n\
    \  return(FALSE)\n}\n", "\n    # your code here\n    for (i in 1:(length(l)-1))\
    \ {\n        for (j in (i+1):length(l)) {\n            if (l[i] + l[j] == 0) {\n\
    \                return(TRUE)\n            }\n        }\n    }\n    return(FALSE)\n\
    }\n", "\n    # YOUR CODE HERE\n    for (i in 1:(length(l)-1)){\n        for (j\
    \ in (i+1):length(l)){\n            if (l[i] + l[j] == 0){\n                return(TRUE)\n\
    \            }\n        }\n    }\n    return(FALSE)\n}\n", "\n  # your code here\n\
    \  if (length(l) < 2) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l)-1))\
    \ {\n    for (j in (i+1):length(l)) {\n      if (l[i] + l[j] == 0) {\n       \
    \ return(TRUE)\n      }\n    }\n  }\n  return(FALSE)\n}\n", "\n    if (length(l)\
    \ < 2) {\n        return(FALSE)\n    }\n    for (i in 1:(length(l) - 1)) {\n \
    \       for (j in (i + 1):length(l)) {\n            if (l[i] + l[j] == 0) {\n\
    \                return(TRUE)\n            }\n        }\n    }\n    return(FALSE)\n\
    }\n", "\n  # your code here\n}\n", "\n    # YOUR CODE HERE\n    for (i in 1:(length(l)-1))\
    \ {\n        for (j in (i+1):length(l)) {\n            if (l[i] + l[j] == 0) {\n\
    \                return(TRUE)\n            }\n        }\n    }\n    return(FALSE)\n\
    }\n", "\n  # your code here\n}\n", "\n  # your code here\n}\n", "\n  if (length(l)\
    \ < 2) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - 1)) {\n    for (j\
    \ in (i + 1):length(l)) {\n      if (l[i] + l[j] == 0) {\n        return(TRUE)\n\
    \      }\n    }\n  }\n  return(FALSE)\n}\n", "\n  # your code here\n  for (i in\
    \ 1:(length(l)-1)) {\n    for (j in (i+1):length(l)) {\n      if (l[i] + l[j]\
    \ == 0) {\n        return(TRUE)\n      }\n    }\n  }\n  return(FALSE)\n}\n", "\n\
    \    # your code here\n    n <- length(l)\n    for (i in 1:n) {\n        for (j\
    \ in 1:n) {\n            if (i != j && l[i] + l[j] == 0) {\n                return(TRUE)\n\
    \            }\n        }\n    }\n    return(FALSE)\n}\n", "\n  # your code here\n\
    }\n", "\n    if (length(l) < 2) {\n        return(FALSE)\n    }\n    for (i in\
    \ 1:(length(l) - 1)) {\n        for (j in (i + 1):length(l)) {\n            if\
    \ (l[i] + l[j] == 0) {\n                return(TRUE)\n            }\n        }\n\
    \    }\n    return(FALSE)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
