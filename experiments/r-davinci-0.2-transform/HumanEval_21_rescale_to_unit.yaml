name: HumanEval_21_rescale_to_unit
language: r
prompt: "# Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n# such that the smallest number will become 0 and the largest will\
  \ become 1\n# >>> rescale_to_unit(c(1.0, 2.0, 3.0, 4.0, 5.0))\n# list(0.0, 0.25,\
  \ 0.5, 0.75, 1.0)\nrescale_to_unit <- function(numbers) {"
tests: "test_humaneval <- function() {\ncandidate <- rescale_to_unit\n    if(!identical(candidate(c(2.0,\
  \ 49.9)), list(0.0, 1.0))){quit('no', 1)}\n    if(!identical(candidate(c(100.0,\
  \ 49.9)), list(1.0, 0.0))){quit('no', 1)}\n    if(!identical(candidate(c(1.0, 2.0,\
  \ 3.0, 4.0, 5.0)), list(0.0, 0.25, 0.5, 0.75, 1.0))){quit('no', 1)}\n    if(!identical(candidate(c(2.0,\
  \ 1.0, 5.0, 3.0, 4.0)), list(0.25, 0.0, 1.0, 0.5, 0.75))){quit('no', 1)}\n    if(!identical(candidate(c(12.0,\
  \ 11.0, 15.0, 13.0, 14.0)), list(0.25, 0.0, 1.0, 0.5, 0.75))){quit('no', 1)}\n}\n\
  test_humaneval()"
completions: ["\n  min_number <- min(numbers)\n  max_number <- max(numbers)\n  numbers\
    \ <- (numbers - min_number) / (max_number - min_number)\n  return(numbers)\n}\n",
  "\n  min_number <- min(numbers)\n  max_number <- max(numbers)\n  return(lapply(numbers,\
    \ function(number) (number - min_number) / (max_number - min_number)))\n}\n",
  "\n    min_number <- min(numbers)\n    max_number <- max(numbers)\n    numbers -\
    \ min_number / (max_number - min_number)\n}\n", "\n  # TODO: implement this function\n\
    \  # Hint: you can use the built-in functions min() and max()\n  # Hint: you can\
    \ use the built-in function seq()\n  # Hint: you can use the built-in function\
    \ length()\n  # Hint: you can use the built-in function rep()\n  # Hint: you can\
    \ use the built-in function sort()\n  # Hint: you can use the built-in function\
    \ diff()\n  # Hint: you can use the built-in function cumsum()\n  # Hint: you\
    \ can use the built-in function round()\n  # Hint: you can use the built-in function\
    \ sum()\n  # Hint: you can use the built-in function mean()\n  # Hint: you can\
    \ use the built-in function sd()\n  # Hint: you can use the built-in function\
    \ which.min()\n  # Hint: you can use the built-in function which.max()\n  # Hint:\
    \ you can use the built-in function which.max()\n  # Hint: you can use the built-in\
    \ function which.max()\n  # Hint: you can use the built-in function which.max()\n\
    \  # Hint: you can use the built-in function which.max()\n  # Hint: you can use\
    \ the built-in function which.max()\n  # Hint: you can use the built-in function\
    \ which.max()\n  # Hint: you can use the built-in function which.max()\n  # Hint:\
    \ you can use the built-in function which.max()\n  # Hint: you can use the built-in\
    \ function which.max()\n  # Hint: you can use the built-in function which.max()\n\
    \  # Hint: you can use the built-in function which.max()\n  # Hint: you can use\
    \ the built-in function which.max()\n  # Hint: you can use the built-in function\
    \ which.max()\n  # Hint: you can use the built-in function which.max()\n  # Hint:\
    \ you can use the built-in function which.max()\n  # Hint: you can use the built-in\
    \ function which", "\n    min_number <- min(numbers)\n    max_number <- max(numbers)\n\
    \    numbers <- (numbers - min_number) / (max_number - min_number)\n    return(numbers)\n\
    }\n", "\n  # TODO: implement this function\n  # Hint: you can use min() and max()\
    \ to get the smallest and largest number\n  # Hint: you can use length() to get\
    \ the number of elements in the list\n  # Hint: you can use rep() to create a\
    \ list of a given length, filled with a given value\n  # Hint: you can use seq()\
    \ to create a list of numbers in a given range\n  # Hint: you can use sum() to\
    \ sum the elements of a list\n  # Hint: you can use c() to concatenate two lists\n\
    \  # Hint: you can use append() to append an element to a list\n  # Hint: you\
    \ can use sort() to sort a list\n  # Hint: you can use which.min() and which.max()\
    \ to get the indices of the smallest and largest number\n  # Hint: you can use\
    \ unlist() to convert a list to a vector\n  # Hint: you can use as.list() to convert\
    \ a vector to a list\n  # Hint: you can use as.numeric() to convert a vector to\
    \ a numeric value\n  # Hint: you can use as.integer() to convert a vector to an\
    \ integer value\n  # Hint: you can use as.character() to convert a vector to a\
    \ character value\n  # Hint: you can use as.logical() to convert a vector to a\
    \ logical value\n  # Hint: you can use as.factor() to convert a vector to a factor\n\
    \  # Hint: you can use as.data.frame() to convert a vector to a data frame\n \
    \ # Hint: you can use as.matrix() to convert a vector to a matrix\n  # Hint: you\
    \ can use as.array() to convert a vector to an array\n  # Hint: you can use as.complex()\
    \ to convert a vector to a complex number\n  # Hint: you can use as.raw() to convert\
    \ a vector to a raw vector\n  # Hint: you can use as.list() to convert a vector\
    \ to a list\n  # Hint: you can use as.expression() to convert a vector to an expression\n\
    \  # Hint: you can use as.call() to convert a vector to a call\n  # Hint: you\
    \ can", "\n  min_val <- min(numbers)\n  max_val <- max(numbers)\n  numbers <-\
    \ (numbers - min_val) / (max_val - min_val)\n  return(numbers)\n}\n", "\n  min_number\
    \ <- min(numbers)\n  max_number <- max(numbers)\n  numbers <- (numbers - min_number)\
    \ / (max_number - min_number)\n  return(numbers)\n}\n", "\n  # TODO: implement\
    \ this function\n  # Hint: you can use the min() and max() functions to find the\
    \ minimum and maximum values in a vector\n  # Hint: you can use the seq() function\
    \ to create a sequence of numbers\n  # Hint: you can use the length() function\
    \ to get the length of a vector\n  # Hint: you can use the rep() function to create\
    \ a vector of repeated values\n  # Hint: you can use the c() function to combine\
    \ vectors\n  # Hint: you can use the round() function to round a number to a specified\
    \ number of decimal places\n  # Hint: you can use the sort() function to sort\
    \ a vector\n  # Hint: you can use the which.min() and which.max() functions to\
    \ find the indices of the minimum and maximum values in a vector\n  # Hint: you\
    \ can use the diff() function to find the difference between adjacent elements\
    \ in a vector\n  # Hint: you can use the which() function to find the indices\
    \ of elements that satisfy a condition\n  # Hint: you can use the %in% operator\
    \ to check if an element is in a vector\n  # Hint: you can use the ifelse() function\
    \ to apply a condition to a vector\n  # Hint: you can use the sum() function to\
    \ sum the elements of a vector\n  # Hint: you can use the prod() function to multiply\
    \ the elements of a vector\n  # Hint: you can use the mean() function to find\
    \ the mean of the elements of a vector\n  # Hint: you can use the median() function\
    \ to find the median of the elements of a vector\n  # Hint: you can use the var()\
    \ function to find the variance of the elements of a vector\n  # Hint: you can\
    \ use the sd() function to find the standard deviation of the elements of a vector\n\
    \  # Hint: you can use the cor() function to find the correlation between two\
    \ vectors\n  # Hint: you can use the cov() function to find the covariance between\
    \ two vectors\n  # Hint: you can use the which.max() function to find the index\
    \ of the maximum value in a vector\n  # Hint: you can use the which.min() function\
    \ to find the index of the minimum value in a vector\n  # Hint: you can use the\
    \ which", "\n    min_number <- min(numbers)\n    max_number <- max(numbers)\n\
    \    return(lapply(numbers, function(x) (x - min_number) / (max_number - min_number)))\n\
    }\n", "\n  min_number <- min(numbers)\n  max_number <- max(numbers)\n  return(lapply(numbers,\
    \ function(x) (x - min_number) / (max_number - min_number)))\n}\n", "\n    # TODO\n\
    }\n", "\n    min_number <- min(numbers)\n    max_number <- max(numbers)\n    return(lapply(numbers,\
    \ function(x) (x - min_number) / (max_number - min_number)))\n}\n", "\n  # TODO:\
    \ implement this function\n  # Hint: use the min() and max() functions\n  # Hint:\
    \ use the map() function\n  # Hint: use the / operator\n  # Hint: use the - operator\n\
    \  # Hint: use the + operator\n  # Hint: use the * operator\n  # Hint: use the\
    \ list() function\n  # Hint: use the length() function\n  # Hint: use the seq()\
    \ function\n  # Hint: use the rep() function\n  # Hint: use the sum() function\n\
    \  # Hint: use the cumsum() function\n  # Hint: use the which.min() function\n\
    \  # Hint: use the which.max() function\n  # Hint: use the sort() function\n \
    \ # Hint: use the unique() function\n  # Hint: use the diff() function\n  # Hint:\
    \ use the which() function\n  # Hint: use the ifelse() function\n  # Hint: use\
    \ the abs() function\n  # Hint: use the all() function\n  # Hint: use the any()\
    \ function\n  # Hint: use the round() function\n  # Hint: use the ceiling() function\n\
    \  # Hint: use the floor() function\n  # Hint: use the trunc() function\n  # Hint:\
    \ use the signif() function\n  # Hint: use the log() function\n  # Hint: use the\
    \ exp() function\n  # Hint: use the sqrt() function\n  # Hint: use the ceiling()\
    \ function\n  # Hint: use the floor() function\n  # Hint: use the trunc() function\n\
    \  # Hint: use the signif() function\n  # Hint: use the log() function\n  # Hint:\
    \ use the exp() function\n  # Hint: use the sqrt() function\n  # Hint: use the\
    \ ceiling() function\n  # Hint: use the floor() function\n  # Hint: use the trunc()\
    \ function\n  # Hint: use the signif() function\n  # Hint: use the log() function\n\
    \  # Hint: use the exp() function\n  # Hint: use the sqrt() function\n  # Hint:",
  "\n    # your code here\n    return(numbers)\n}\n", "\n  min_number <- min(numbers)\n\
    \  max_number <- max(numbers)\n  return(lapply(numbers, function(x) (x - min_number)\
    \ / (max_number - min_number)))\n}\n", "\n    # TODO: implement this function\n\
    \    return(numbers)\n}\n", "\n  min_number <- min(numbers)\n  max_number <- max(numbers)\n\
    \  return(lapply(numbers, function(x) (x - min_number) / (max_number - min_number)))\n\
    }\n", "\n  # TODO: implement this function\n  return(NULL)\n}\n", "\n  min_number\
    \ <- min(numbers)\n  max_number <- max(numbers)\n  numbers <- (numbers - min_number)\
    \ / (max_number - min_number)\n  return(numbers)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
