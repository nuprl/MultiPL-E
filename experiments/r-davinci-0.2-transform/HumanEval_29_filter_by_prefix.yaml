name: HumanEval_29_filter_by_prefix
language: r
prompt: "# Filter an input list of strings only for ones that start with a given prefix.\n\
  # >>> filter_by_prefix(c(), 'a')\n# list()\n# >>> filter_by_prefix(c('abc', 'bcd',\
  \ 'cde', 'array'), 'a')\n# list('abc', 'array')\nfilter_by_prefix <- function(strings,\
  \ prefix) {"
tests: "test_humaneval <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
  \ 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd',\
  \ 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
  \ 1)}\n}\ntest_humaneval()"
completions: ["\n  strings[startsWith(strings, prefix)]\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n    strings[startsWith(strings, prefix)]\n}\n", "\n    return(strings[startsWith(strings,\
    \ prefix)])\n}\n", "\n    return(strings[startsWith(strings, prefix)])\n}\n",
  "\n  strings[startsWith(strings, prefix)]\n}\n", "\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n  return(strings[startsWith(strings, prefix)])\n}\n", "\n\
    \  strings[startsWith(strings, prefix)]\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n    return(strings[startsWith(strings, prefix)])\n}\n", "\n\
    \  strings[startsWith(strings, prefix)]\n}\n", "\n    strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n    return(strings[startsWith(strings, prefix)])\n}\n", "\n\
    \  strings[startsWith(strings, prefix)]\n}\n", "\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n    return(strings[startsWith(strings,\
    \ prefix)])\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n    strings[startsWith(strings, prefix)]\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n  return(strings[startsWith(strings, prefix)])\n}\n", "\n\
    \    strings[startsWith(strings, prefix)]\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n    strings[startsWith(strings, prefix)]\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n    strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n  strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n    return(strings[startsWith(strings, prefix)])\n}\n", "\n\
    \  strings[startsWith(strings, prefix)]\n}\n", "\n    return(strings[startsWith(strings,\
    \ prefix)])\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n    return(strings[startsWith(strings,\
    \ prefix)])\n}\n", "\n    return(strings[startsWith(strings, prefix)])\n}\n",
  "\n    return(strings[startsWith(strings, prefix)])\n}\n", "\n    strings[startsWith(strings,\
    \ prefix)]\n}\n", "\n  strings[startsWith(strings, prefix)]\n}\n", "\n  strings[grepl(paste0('^',\
    \ prefix), strings)]\n}\n", "\n    return(strings[startsWith(strings, prefix)])\n\
    }\n", "\n    return(strings[startsWith(strings, prefix)])\n}\n", "\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
