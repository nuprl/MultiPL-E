name: HumanEval_95_check_dict_case
language: r
prompt: "# Given a dictionary, return True if all keys are strings in lower \n# case\
  \ or all keys are strings in upper case, else return False.\n# The function should\
  \ return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case(list('a'\
  \ = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple',\
  \ 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple',\
  \ 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John',\
  \ 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE'\
  \ = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {"
tests: "test_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
  \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
  \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
  \ = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
  \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
  \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
  \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
  \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  # Check if the dictionary is empty\n  if (length(dict) == 0) {\n\
    \    return(FALSE)\n  }\n  \n  # Check if all keys are strings in lower case\n\
    \  if (all(sapply(names(dict), function(x) {\n    return(x == tolower(x))\n  })))\
    \ {\n    return(TRUE)\n  }\n  \n  # Check if all keys are strings in upper case\n\
    \  if (all(sapply(names(dict), function(x) {\n    return(x == toupper(x))\n  })))\
    \ {\n    return(TRUE)\n  }\n  \n  # Return FALSE if all keys are not strings in\
    \ lower case or upper case\n  return(FALSE)\n}\n", "\n  if (length(dict) == 0)\
    \ {\n    return(FALSE)\n  }\n  else {\n    if (all(sapply(names(dict), function(x)\
    \ {\n      is.upper(x)\n    }))) {\n      return(TRUE)\n    }\n    else if (all(sapply(names(dict),\
    \ function(x) {\n      is.lower(x)\n    }))) {\n      return(TRUE)\n    }\n  \
    \  else {\n      return(FALSE)\n    }\n  }\n}\n", "\n    if (length(dict) == 0)\
    \ {\n        return(FALSE)\n    }\n    if (all(sapply(dict, is.character))) {\n\
    \        if (all(sapply(dict, function(x) {\n            return(x == tolower(x))\n\
    \        }))) {\n            return(TRUE)\n        } else if (all(sapply(dict,\
    \ function(x) {\n            return(x == toupper(x))\n        }))) {\n       \
    \     return(TRUE)\n        } else {\n            return(FALSE)\n        }\n \
    \   } else {\n        return(FALSE)\n    }\n}\n", "\n  if (length(dict) == 0)\
    \ {\n    return(FALSE)\n  }\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n\
    \  if (is.character(dict)) {\n    return(FALSE)\n  }\n  if (is.numeric(dict))\
    \ {\n    return(FALSE)\n  }\n  if (is.logical(dict)) {\n    return(FALSE)\n  }\n\
    \  if (is.complex(dict)) {\n    return(FALSE)\n  }\n  if (is.raw(dict)) {\n  \
    \  return(FALSE)\n  }\n  if (is.list(dict)) {\n    return(FALSE)\n  }\n  if (is.matrix(dict))\
    \ {\n    return(FALSE)\n  }\n  if (is.array(dict)) {\n    return(FALSE)\n  }\n\
    \  if (is.data.frame(dict)) {\n    return(FALSE)\n  }\n  if (is.table(dict)) {\n\
    \    return(FALSE)\n  }\n  if (is.function(dict)) {\n    return(FALSE)\n  }\n\
    \  if (is.environment(dict)) {\n    return(FALSE)\n  }\n  if (is.expression(dict))\
    \ {\n    return(FALSE)\n  }\n  if (is.language(dict)) {\n    return(FALSE)\n \
    \ }\n  if (is.single(dict)) {\n    return(FALSE)\n  }\n  if (is.double(dict))\
    \ {\n    return(FALSE)\n  }\n  if (is.integer(dict)) {\n    return(FALSE)\n  }\n\
    \  if (is.numeric(dict)) {\n    return(FALSE)\n  }\n  if (is.complex(dict)) {\n\
    \    return(FALSE)\n  }\n  if (is.character(dict)) {\n    return(FALSE)\n  }\n\
    \  if (is.raw(dict)) {\n    return(FALSE)\n  }\n  if (is.logical(dict)) {\n  \
    \  return(FALSE)\n ", "\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n\
    \  keys <- names(dict)\n  if (all(tolower(keys) == keys)) {\n    return(TRUE)\n\
    \  }\n  if (all(toupper(keys) == keys)) {\n    return(TRUE)\n  }\n  return(FALSE)\n\
    }\n", "\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  keys <- names(dict)\n\
    \  if (all(is.na(grep(\"[A-Z]\", keys)))) {\n    return(TRUE)\n  }\n  if (all(is.na(grep(\"\
    [a-z]\", keys)))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n", "\n    if(length(dict)\
    \ == 0) {\n        return(FALSE)\n    }\n    if(all(sapply(dict, is.character)))\
    \ {\n        if(all(sapply(dict, function(x) {\n            all(str_detect(x,\
    \ \"[[:lower:]]\"))\n        }))) {\n            return(TRUE)\n        } else\
    \ if(all(sapply(dict, function(x) {\n            all(str_detect(x, \"[[:upper:]]\"\
    ))\n        }))) {\n            return(TRUE)\n        } else {\n            return(FALSE)\n\
    \        }\n    } else {\n        return(FALSE)\n    }\n}\n", "\n  if (length(dict)\
    \ == 0) {\n    return(FALSE)\n  }\n  keys <- names(dict)\n  if (all(tolower(keys)\
    \ == keys)) {\n    return(TRUE)\n  }\n  if (all(toupper(keys) == keys)) {\n  \
    \  return(TRUE)\n  }\n  return(FALSE)\n}\n", "\n  if (length(dict) == 0) {\n \
    \   return(FALSE)\n  }\n  keys <- names(dict)\n  if (all(str_detect(keys, \"[[:lower:]]\"\
    ))) {\n    return(TRUE)\n  } else if (all(str_detect(keys, \"[[:upper:]]\")))\
    \ {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  if (length(dict)\
    \ == 0) {\n    return(FALSE)\n  }\n  if (is.null(dict)) {\n    return(FALSE)\n\
    \  }\n  if (is.numeric(dict)) {\n    return(FALSE)\n  }\n  if (is.character(dict))\
    \ {\n    return(FALSE)\n  }\n  if (is.logical(dict)) {\n    return(FALSE)\n  }\n\
    \  if (is.complex(dict)) {\n    return(FALSE)\n  }\n  if (is.raw(dict)) {\n  \
    \  return(FALSE)\n  }\n  if (is.list(dict)) {\n    return(FALSE)\n  }\n  if (is.matrix(dict))\
    \ {\n    return(FALSE)\n  }\n  if (is.array(dict)) {\n    return(FALSE)\n  }\n\
    \  if (is.data.frame(dict)) {\n    return(FALSE)\n  }\n  if (is.factor(dict))\
    \ {\n    return(FALSE)\n  }\n  if (is.table(dict)) {\n    return(FALSE)\n  }\n\
    \  if (is.ts(dict)) {\n    return(FALSE)\n  }\n  if (is.ts(dict)) {\n    return(FALSE)\n\
    \  }\n  if (is.ts(dict)) {\n    return(FALSE)\n  }\n  if (is.ts(dict)) {\n   \
    \ return(FALSE)\n  }\n  if (is.ts(dict)) {\n    return(FALSE)\n  }\n  if (is.ts(dict))\
    \ {\n    return(FALSE)\n  }\n  if (is.ts(dict)) {\n    return(FALSE)\n  }\n  if\
    \ (is.ts(dict)) {\n    return(FALSE)\n  }\n  if (is.ts(dict)) {\n    return(FALSE)\n\
    \  }\n  if (is.ts(dict)) {\n    return(FALSE)\n  }\n  if (is.ts(dict)) {\n   \
    \ return(FALSE)\n  }\n", "\n  # check if dict is empty\n  if (length(dict) ==\
    \ 0) {\n    return(FALSE)\n  }\n  # check if all keys are strings\n  if (any(!is.character(names(dict))))\
    \ {\n    return(FALSE)\n  }\n  # check if all keys are lower case\n  if (all(tolower(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  # check if all keys are upper case\n\
    \  if (all(toupper(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  #\
    \ if none of the above, return FALSE\n  return(FALSE)\n}\n", "\n  if (length(dict)\
    \ == 0) {\n    return(FALSE)\n  }\n  if (all(sapply(names(dict), function(x) {\n\
    \    is.character(x) && x == tolower(x)\n  }))) {\n    return(TRUE)\n  }\n  if\
    \ (all(sapply(names(dict), function(x) {\n    is.character(x) && x == toupper(x)\n\
    \  }))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n", "\n  if (length(dict)\
    \ == 0) {\n    return(FALSE)\n  }\n  if (all(sapply(names(dict), function(x) {\n\
    \    is.character(x) && (x == tolower(x) || x == toupper(x))\n  }))) {\n    return(TRUE)\n\
    \  }\n  return(FALSE)\n}\n", "\n    if (length(dict) == 0) {\n        return(FALSE)\n\
    \    }\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    if (is.na(dict))\
    \ {\n        return(FALSE)\n    }\n    if (is.na(names(dict))) {\n        return(FALSE)\n\
    \    }\n    if (is.na(unlist(dict))) {\n        return(FALSE)\n    }\n    if (is.null(names(dict)))\
    \ {\n        return(FALSE)\n    }\n    if (is.null(unlist(dict))) {\n        return(FALSE)\n\
    \    }\n    if (is.na(names(dict))) {\n        return(FALSE)\n    }\n    if (is.na(unlist(dict)))\
    \ {\n        return(FALSE)\n    }\n    if (is.na(names(dict))) {\n        return(FALSE)\n\
    \    }\n    if (is.na(unlist(dict))) {\n        return(FALSE)\n    }\n    if (is.na(names(dict)))\
    \ {\n        return(FALSE)\n    }\n    if (is.na(unlist(dict))) {\n        return(FALSE)\n\
    \    }\n    if (is.na(names(dict))) {\n        return(FALSE)\n    }\n    if (is.na(unlist(dict)))\
    \ {\n        return(FALSE)\n    }\n    if (is.na(names(dict))) {\n        return(FALSE)\n\
    \    }\n    if (is.na(unlist(dict))) {\n        return(FALSE)\n    }\n    if (is.na(names(dict)))\
    \ {\n        return(FALSE)\n    }\n    if (is.na(unlist(dict))) {\n        return(FALSE)\n\
    \    }\n    if (is.na(names(dict))) {\n        return(FALSE)\n    }\n    if (is.na(unlist(dict)))\
    \ {\n        return(FALSE)\n    }\n    if (is.na(names(dict))) {\n        return(FALSE)\n\
    \    }\n", "\n    if (length(dict) == 0) {\n        return(FALSE)\n    }\n   \
    \ if (all(sapply(names(dict), function(x) {\n        is.character(x) && (x ==\
    \ tolower(x) || x == toupper(x))\n    }))) {\n        return(TRUE)\n    }\n  \
    \  return(FALSE)\n}\n", "\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n\
    \  else {\n    keys <- names(dict)\n    if (all(str_detect(keys, \"[[:lower:]]\"\
    )) | all(str_detect(keys, \"[[:upper:]]\"))) {\n      return(TRUE)\n    }\n  \
    \  else {\n      return(FALSE)\n    }\n  }\n}\n", "\n  if (length(dict) == 0)\
    \ {\n    return(FALSE)\n  }\n  if (all(sapply(dict, is.character))) {\n    if\
    \ (all(sapply(dict, function(x) {\n      all(strsplit(x, \"\")[[1]] %in% c(LETTERS,\
    \ letters))\n    }))) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
  "\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  keys <- names(dict)\n \
    \ if (all(str_detect(keys, \"[[:lower:]]\"))) {\n    return(TRUE)\n  } else if\
    \ (all(str_detect(keys, \"[[:upper:]]\"))) {\n    return(TRUE)\n  } else {\n \
    \   return(FALSE)\n  }\n}\n", "\n  if (length(dict) == 0) {\n    return(FALSE)\n\
    \  }\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  if (is.character(dict))\
    \ {\n    return(FALSE)\n  }\n  if (is.numeric(dict)) {\n    return(FALSE)\n  }\n\
    \  if (is.logical(dict)) {\n    return(FALSE)\n  }\n  if (is.complex(dict)) {\n\
    \    return(FALSE)\n  }\n  if (is.raw(dict)) {\n    return(FALSE)\n  }\n  if (is.list(dict))\
    \ {\n    return(FALSE)\n  }\n  if (is.function(dict)) {\n    return(FALSE)\n \
    \ }\n  if (is.environment(dict)) {\n    return(FALSE)\n  }\n  if (is.null(dict))\
    \ {\n    return(FALSE)\n  }\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n\
    \  if (is.null(dict)) {\n    return(FALSE)\n  }\n  if (is.null(dict)) {\n    return(FALSE)\n\
    \  }\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  if (is.null(dict)) {\n\
    \    return(FALSE)\n  }\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  if\
    \ (is.null(dict)) {\n    return(FALSE)\n  }\n  if (is.null(dict)) {\n    return(FALSE)\n\
    \  }\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  if (is.null(dict)) {\n\
    \    return(FALSE)\n  }\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  if\
    \ (is.null(dict)) {\n    return(FALSE)\n  }\n  if (is.null(dict)) {\n    return(FALSE)\n\
    \  }\n  if (", "\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if (is.null(dict))\
    \ {\n    return(FALSE)\n  }\n  if (length(dict) == 1) {\n    return(TRUE)\n  }\n\
    \  if (is.character(names(dict)[1])) {\n    if (is.character(names(dict)[2]))\
    \ {\n      if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \      } else if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \      } else {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n\
    \    }\n  } else {\n    return(FALSE)\n  }\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
