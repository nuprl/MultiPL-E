name: HumanEval_56_correct_bracketing
language: r
prompt: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
  \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing('<')\n\
  # FALSE\n# >>> correct_bracketing('<>')\n# TRUE\n# >>> correct_bracketing('<<><>>')\n\
  # TRUE\n# >>> correct_bracketing('><<>')\n# FALSE\ncorrect_bracketing <- function(brackets)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- correct_bracketing\n    if(!identical(candidate('<>'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('<<><>>'), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('<><><<><>><>'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('<><><<<><><>><>><<><><<>>>'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('<<<><>>>>'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('><<>'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('<'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('<<<<'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('>'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('<<>'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('<><><<><>><>><<>'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('<><><<><>><>>><>'), FALSE)){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n\
    \  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  return(FALSE)\n}\n", "\n  # YOUR\
    \ CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n",
  "\n  if (nchar(brackets) == 0) {\n    return(TRUE)\n  }\n  if (substr(brackets,\
    \ 1, 1) == '<') {\n    if (substr(brackets, nchar(brackets), nchar(brackets))\
    \ == '>') {\n      return(correct_bracketing(substr(brackets, 2, nchar(brackets)\
    \ - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  if (brackets == '<') {\n    return(FALSE)\n  }\n  else if (brackets\
    \ == '<>') {\n    return(TRUE)\n  }\n  else if (brackets == '<<><>>') {\n    return(TRUE)\n\
    \  }\n  else if (brackets == '><<>') {\n    return(FALSE)\n  }\n}\n", "\n  if\
    \ (brackets == \"\") {\n    return(TRUE)\n  } else if (substr(brackets, 1, 1)\
    \ == \"<\") {\n    if (substr(brackets, 2, 2) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n    } else {\n      return(FALSE)\n    }\n  } else {\n\
    \    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  bracket_stack <- c()\n\
    \  for (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == '<') {\n\
    \      bracket_stack <- c(bracket_stack, '<')\n    } else {\n      if (length(bracket_stack)\
    \ == 0) {\n        return(FALSE)\n      } else {\n        bracket_stack <- bracket_stack[-length(bracket_stack)]\n\
    \      }\n    }\n  }\n  if (length(bracket_stack) == 0) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n\
    }\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n\
    }\n", "\n  # YOUR CODE HERE\n  count = 0\n  for (i in 1:nchar(brackets)) {\n \
    \   if (substr(brackets, i, i) == '<') {\n      count = count + 1\n    } else\
    \ {\n      count = count - 1\n    }\n    if (count < 0) {\n      return(FALSE)\n\
    \    }\n  }\n  if (count == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  # check if brackets is a string\n  if(!is.character(brackets))\
    \ {\n    stop(\"brackets must be a string\")\n  }\n  # check if brackets is only\
    \ made up of \"<\" and \">\"\n  if(!all(brackets %in% c(\"<\", \">\"))) {\n  \
    \  stop(\"brackets must only contain '<' and '>'\")\n  }\n  # check if brackets\
    \ is empty\n  if(length(brackets) == 0) {\n    return(TRUE)\n  }\n  # check if\
    \ brackets is a single \"<\" or \">\"\n  if(length(brackets) == 1) {\n    return(FALSE)\n\
    \  }\n  # check if brackets is a string of \"<\" and \">\"\n  if(all(brackets\
    \ == \"<\")) {\n    return(TRUE)\n  }\n  if(all(brackets == \">\")) {\n    return(TRUE)\n\
    \  }\n  # check if brackets is a string of \"<\" and \">\"\n  if(all(brackets\
    \ == \"><\")) {\n    return(TRUE)\n  }\n  # check if brackets is a string of \"\
    <\" and \">\"\n  if(all(brackets == \"<>\")) {\n    return(TRUE)\n  }\n  # check\
    \ if brackets is a string of \"<\" and \">\"\n  if(all(brackets == \"<<>>\"))\
    \ {\n    return(TRUE)\n  }\n  # check if brackets is a string of \"<\" and \"\
    >\"\n  if(all(brackets == \"<<><>>\")) {\n    return(TRUE)\n  }\n  # check if\
    \ brackets is a string of \"<\" and \">\"\n  if(all(brackets == \"><<>>\")) {\n\
    \    return(TRUE)\n  }\n  # check if brackets is a string of \"<\" and \">\"\n\
    \  if(all(brackets == \"<<><><>>\")) {\n    return(TRUE)\n  }\n  # check if brackets\
    \ is a string of \"<\" and \">\"\n  if(all(brackets == \"<<><<><>>\")) {\n   \
    \ return(TRUE)\n  }\n  # check if brackets is", "\n  # YOUR CODE HERE\n}\n", "\n\
    \  # YOUR CODE HERE\n  if (brackets == \"\") {\n    return(TRUE)\n  }\n  if (substr(brackets,\
    \ 1, 1) == \">\") {\n    return(FALSE)\n  }\n  if (substr(brackets, 1, 1) == \"\
    <\") {\n    if (substr(brackets, 2, 2) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n    }\n    else {\n      return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n\
    }\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  if\
    \ (brackets == \"\") {\n    return(TRUE)\n  } else if (substr(brackets, 1, 1)\
    \ == \">\") {\n    return(FALSE)\n  } else if (substr(brackets, 1, 1) == \"<\"\
    ) {\n    if (substr(brackets, 2, 2) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n    } else {\n      return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  n <- nchar(brackets)\n\
    \  if (n %% 2 != 0) {\n    return(FALSE)\n  }\n  for (i in 1:n) {\n    if (substr(brackets,\
    \ i, i) == '<') {\n      for (j in i:n) {\n        if (substr(brackets, j, j)\
    \ == '>') {\n          brackets <- substr(brackets, 1, j-1)\n          brackets\
    \ <- substr(brackets, i+1, n)\n          break\n        }\n      }\n    }\n  }\n\
    \  if (nchar(brackets) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  if (brackets == \"\") {\n    return(TRUE)\n  } else if (substr(brackets,\
    \ 1, 1) == \">\") {\n    return(FALSE)\n  } else if (substr(brackets, 1, 1) ==\
    \ \"<\") {\n    return(correct_bracketing(substr(brackets, 2, nchar(brackets))))\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  # if brackets is empty, return TRUE\n  if\
    \ (nchar(brackets) == 0) {\n    return(TRUE)\n  }\n  # if brackets is not empty,\
    \ check if the first character is '<'\n  else if (substr(brackets, 1, 1) == '<')\
    \ {\n    # if the first character is '<', check if the last character is '>'\n\
    \    if (substr(brackets, nchar(brackets), nchar(brackets)) == '>') {\n      #\
    \ if the last character is '>', return TRUE\n      return(TRUE)\n    }\n    #\
    \ if the last character is not '>', return FALSE\n    else {\n      return(FALSE)\n\
    \    }\n  }\n  # if the first character is not '<', return FALSE\n  else {\n \
    \   return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  count = 0\n  for (i in\
    \ 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == '<') {\n      count\
    \ = count + 1\n    } else {\n      count = count - 1\n    }\n    if (count < 0)\
    \ {\n      return(FALSE)\n    }\n  }\n  if (count == 0) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n\
    }\n", "\n  # YOUR CODE HERE\n  if(brackets == \"\"){\n    return(TRUE)\n  }\n\
    \  if(substr(brackets, 1, 1) == \"<\"){\n    if(substr(brackets, length(brackets),\
    \ length(brackets)) == \">\"){\n      return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets) - 1)))\n    }\n    else{\n      return(FALSE)\n    }\n \
    \ }\n  else{\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  if(brackets\
    \ == \"\"){\n    return(TRUE)\n  }\n  if(substr(brackets,1,1) == \">\"){\n   \
    \ return(FALSE)\n  }\n  if(substr(brackets,1,1) == \"<\"){\n    return(correct_bracketing(substr(brackets,2,nchar(brackets))))\n\
    \  }\n  if(substr(brackets,1,1) == \">\"){\n    return(correct_bracketing(substr(brackets,2,nchar(brackets))))\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n\
    \  # check if the length of brackets is odd\n  if(length(brackets) %% 2 != 0)\
    \ {\n    return(FALSE)\n  }\n  # check if the first character is not '<'\n  if(substr(brackets,\
    \ 1, 1) != '<') {\n    return(FALSE)\n  }\n  # check if the last character is\
    \ not '>'\n  if(substr(brackets, length(brackets), length(brackets)) != '>') {\n\
    \    return(FALSE)\n  }\n  # check if the number of '<' is not equal to the number\
    \ of '>'\n  if(sum(substr(brackets, 1, length(brackets)) == '<') != sum(substr(brackets,\
    \ 1, length(brackets)) == '>')) {\n    return(FALSE)\n  }\n  return(TRUE)\n}\n",
  "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n ", "\n  # YOUR CODE HERE\n  return(TRUE)\n\
    }\n", "\n  # YOUR CODE HERE\n  if(brackets == \"\"){\n    return(TRUE)\n  }\n\
    \  if(substr(brackets, 1, 1) == \">\"){\n    return(FALSE)\n  }\n  if(substr(brackets,\
    \ 1, 1) == \"<\"){\n    return(correct_bracketing(substr(brackets, 2, nchar(brackets))))\n\
    \  }\n}\n", "\n    # YOUR CODE HERE\n    return(FALSE)\n}\n", "\n  # YOUR CODE\
    \ HERE\n  if (brackets == \"\") {\n    return(TRUE)\n  } else if (substr(brackets,\
    \ 1, 1) == \"<\") {\n    if (substr(brackets, 2, 2) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n    } else {\n      return(FALSE)\n    }\n  } else {\n\
    \    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n\
    \  # YOUR CODE HERE\n}\n", "\n    # YOUR CODE HERE\n    return(TRUE)\n}\n", "\n\
    \    # YOUR CODE HERE\n    return(TRUE)\n}\n", "\n    if (brackets == \"\") {\n\
    \        return(TRUE)\n    }\n    if (substr(brackets, 1, 1) == \"<\") {\n   \
    \     if (substr(brackets, 2, 2) == \">\") {\n            return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n        }\n        else {\n            return(FALSE)\n\
    \        }\n    }\n    else {\n        return(FALSE)\n    }\n}\n", "\n  # YOUR\
    \ CODE HERE\n  count = 0\n  for (i in 1:nchar(brackets)){\n    if (substr(brackets,\
    \ i, i) == \"<\"){\n      count = count + 1\n    }\n    if (substr(brackets, i,\
    \ i) == \">\"){\n      count = count - 1\n    }\n    if (count < 0){\n      return(FALSE)\n\
    \    }\n  }\n  if (count == 0){\n    return(TRUE)\n  }\n  else{\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  if (brackets == \"\") {\n    return(TRUE)\n\
    \  }\n  if (substr(brackets, 1, 1) == \">\") {\n    return(FALSE)\n  }\n  if (substr(brackets,\
    \ 1, 1) == \"<\") {\n    if (substr(brackets, 2, 2) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n    }\n    else {\n      return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n\
    }\n", "\n    # YOUR CODE HERE\n    count = 0\n    for (i in 1:nchar(brackets)){\n\
    \        if (substr(brackets, i, i) == '<'){\n            count = count + 1\n\
    \        }\n        if (substr(brackets, i, i) == '>'){\n            count = count\
    \ - 1\n        }\n        if (count < 0){\n            return(FALSE)\n       \
    \ }\n    }\n    if (count == 0){\n        return(TRUE)\n    }\n    else{\n   \
    \     return(FALSE)\n    }\n}\n", "\n    # YOUR CODE HERE\n    return(TRUE)\n\
    }\n", "\n  # YOUR CODE HERE\n  if (brackets == \"\") {\n    return(TRUE)\n  }\
    \ else if (substr(brackets, 1, 1) == \"<\") {\n    if (substr(brackets, 2, 2)\
    \ == \">\") {\n      return(correct_bracketing(substr(brackets, 3, nchar(brackets))))\n\
    \    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n  }\n\
    }\n", "\n    # YOUR CODE HERE\n    count = 0\n    for (i in 1:nchar(brackets))\
    \ {\n        if (substr(brackets, i, i) == '<') {\n            count = count +\
    \ 1\n        } else {\n            count = count - 1\n        }\n        if (count\
    \ < 0) {\n            return(FALSE)\n        }\n    }\n    if (count == 0) {\n\
    \        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n", "\n \
    \ # YOUR CODE HERE\n  # check if the length of brackets is even\n  if (length(brackets)\
    \ %% 2 != 0) {\n    return(FALSE)\n  }\n  # check if the first character is <\n\
    \  if (substr(brackets, 1, 1) != \"<\") {\n    return(FALSE)\n  }\n  # check if\
    \ the last character is >\n  if (substr(brackets, length(brackets), length(brackets))\
    \ != \">\") {\n    return(FALSE)\n  }\n  # check if the number of < is equal to\
    \ the number of >\n  if (sum(strsplit(brackets, \"\")[[1]] == \"<\") != sum(strsplit(brackets,\
    \ \"\")[[1]] == \">\")) {\n    return(FALSE)\n  }\n  return(TRUE)\n}\n", "\n \
    \ # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n    # YOUR CODE HERE\n    if (brackets\
    \ == \"\") {\n        return(TRUE)\n    }\n    if (brackets[1] == \">\") {\n \
    \       return(FALSE)\n    }\n    if (brackets[1] == \"<\") {\n        return(correct_bracketing(brackets[-1]))\n\
    \    }\n}\n", "\n  # YOUR CODE HERE\n  # check if the length of brackets is even\n\
    \  if(length(brackets) %% 2 != 0) {\n    return(FALSE)\n  }\n  # check if the\
    \ first character is \">\"\n  if(substr(brackets, 1, 1) == \">\") {\n    return(FALSE)\n\
    \  }\n  # check if the last character is \"<\"\n  if(substr(brackets, length(brackets),\
    \ length(brackets)) == \"<\") {\n    return(FALSE)\n  }\n  # check if there are\
    \ more \">\" than \"<\"\n  if(sum(strsplit(brackets, \"\")[[1]] == \">\") > sum(strsplit(brackets,\
    \ \"\")[[1]] == \"<\")) {\n    return(FALSE)\n  }\n  # check if there are more\
    \ \"<\" than \">\"\n  if(sum(strsplit(brackets, \"\")[[1]] == \"<\") > sum(strsplit(brackets,\
    \ \"\")[[1]] == \">\")) {\n    return(FALSE)\n  }\n  # check if there are any\
    \ \"><\"\n  if(sum(strsplit(brackets, \"\")[[1]] == \"><\") > 0) {\n    return(FALSE)\n\
    \  }\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  # hint: use a stack\n  stack\
    \ <- list()\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i)\
    \ == '<') {\n      stack <- c(stack, '<')\n    } else {\n      if (length(stack)\
    \ == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  if (brackets == \"\
    \") {\n    return(TRUE)\n  }\n  if (substr(brackets, 1, 1) == \">\") {\n    return(FALSE)\n\
    \  }\n  if (substr(brackets, 1, 1) == \"<\") {\n    if (substr(brackets, 2, 2)\
    \ == \">\") {\n      return(correct_bracketing(substr(brackets, 3, nchar(brackets))))\n\
    \    }\n    else {\n      return(correct_bracketing(substr(brackets, 2, nchar(brackets))))\n\
    \    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  # check if brackets is empty\n  if\
    \ (nchar(brackets) == 0) {\n    return(TRUE)\n  }\n  # check if brackets is only\
    \ one character\n  if (nchar(brackets) == 1) {\n    return(FALSE)\n  }\n  # check\
    \ if brackets is only one character\n  if (nchar(brackets) == 2) {\n    if (substr(brackets,\
    \ 1, 1) == '<' & substr(brackets, 2, 2) == '>') {\n      return(TRUE)\n    } else\
    \ {\n      return(FALSE)\n    }\n  }\n  # check if brackets is only one character\n\
    \  if (nchar(brackets) == 3) {\n    if (substr(brackets, 1, 1) == '<' & substr(brackets,\
    \ 3, 3) == '>') {\n      return(TRUE)\n    } else {\n      return(FALSE)\n   \
    \ }\n  }\n  # check if brackets is only one character\n  if (nchar(brackets) ==\
    \ 4) {\n    if (substr(brackets, 1, 1) == '<' & substr(brackets, 4, 4) == '>')\
    \ {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  # check\
    \ if brackets is only one character\n  if (nchar(brackets) == 5) {\n    if (substr(brackets,\
    \ 1, 1) == '<' & substr(brackets, 5, 5) == '>') {\n      return(TRUE)\n    } else\
    \ {\n      return(FALSE)\n    }\n  }\n  # check if brackets is only one character\n\
    \  if (nchar(brackets) == 6) {\n    if (substr(brackets, 1, 1) == '<' & substr(brackets,\
    \ 6, 6) == '>') {\n      return(TRUE)\n    } else {\n      return(FALSE)\n   \
    \ }\n  }\n  # check if brackets is only one character\n  if (nchar(brackets) ==\
    \ 7) {\n    if (sub", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR\
    \ CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  brackets_list <- strsplit(brackets,\
    \ \"\")[[1]]\n  counter <- 0\n  for (i in 1:length(brackets_list)) {\n    if (brackets_list[i]\
    \ == \"<\") {\n      counter <- counter + 1\n    } else {\n      counter <- counter\
    \ - 1\n    }\n    if (counter < 0) {\n      return(FALSE)\n    }\n  }\n  if (counter\
    \ == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  #\
    \ YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets,\
    \ i, i) == '<') {\n      stack <- c(stack, '<')\n    } else {\n      if (length(stack)\
    \ == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  # check if the length\
    \ of brackets is even\n  if (length(brackets) %% 2 != 0) {\n    return(FALSE)\n\
    \  }\n  # check if the first character is '<'\n  if (substr(brackets, 1, 1) !=\
    \ '<') {\n    return(FALSE)\n  }\n  # check if the last character is '>'\n  if\
    \ (substr(brackets, length(brackets), length(brackets)) != '>') {\n    return(FALSE)\n\
    \  }\n  # check if there is a '>' before a '<'\n  for (i in 1:(length(brackets)\
    \ - 1)) {\n    if (substr(brackets, i, i) == '>' & substr(brackets, i + 1, i +\
    \ 1) == '<') {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n", "\n  #\
    \ YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  if(brackets ==\
    \ \"\"){\n    return(TRUE)\n  }\n  if(substr(brackets,1,1) == \"<\"){\n    if(substr(brackets,length(brackets),length(brackets))\
    \ == \">\"){\n      return(correct_bracketing(substr(brackets,2,length(brackets)-1)))\n\
    \    }else{\n      return(FALSE)\n    }\n  }else{\n    return(FALSE)\n  }\n}\n",
  "\n  # YOUR CODE HERE\n}\n", "\n  # YOUR CODE HERE\n  if(brackets == \"\"){\n  \
    \  return(TRUE)\n  }\n  if(substr(brackets, 1, 1) == \"<\"){\n    if(substr(brackets,\
    \ 2, 2) == \">\"){\n      return(correct_bracketing(substr(brackets, 3, nchar(brackets))))\n\
    \    }\n    else{\n      return(FALSE)\n    }\n  }\n  else{\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  return(FALSE)\n}\n", "\n  if (length(brackets)\
    \ == 0) {\n    return(TRUE)\n  }\n  if (substr(brackets, 1, 1) == '<') {\n   \
    \ if (substr(brackets, length(brackets), length(brackets)) == '>') {\n      return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets) - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  count = 0\n  for (i\
    \ in 1:nchar(brackets)){\n    if (substr(brackets, i, i) == \"<\"){\n      count\
    \ = count + 1\n    }\n    if (substr(brackets, i, i) == \">\"){\n      count =\
    \ count - 1\n    }\n    if (count < 0){\n      return(FALSE)\n    }\n  }\n  if\
    \ (count == 0){\n    return(TRUE)\n  }\n  else{\n    return(FALSE)\n  }\n}\n",
  "\n  # YOUR CODE HERE\n  # check if the length of brackets is even\n  if (length(brackets)\
    \ %% 2 != 0) {\n    return(FALSE)\n  }\n  # check if the first bracket is \"<\"\
    \n  if (substr(brackets, 1, 1) != \"<\") {\n    return(FALSE)\n  }\n  # check\
    \ if the last bracket is \">\"\n  if (substr(brackets, length(brackets), length(brackets))\
    \ != \">\") {\n    return(FALSE)\n  }\n  # check if the number of \"<\" is equal\
    \ to the number of \">\"\n  if (sum(substr(brackets, 1, length(brackets)) == \"\
    <\") != sum(substr(brackets, 1, length(brackets)) == \">\")) {\n    return(FALSE)\n\
    \  }\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n \
    \ # YOUR CODE HERE\n  # use a stack to store the opening brackets\n  # if the\
    \ current character is a closing bracket, check if the stack is empty\n  # if\
    \ the stack is empty, return FALSE\n  # if the stack is not empty, pop the top\
    \ element from the stack\n  # if the top element is not the corresponding opening\
    \ bracket, return FALSE\n  # if the current character is an opening bracket, push\
    \ it to the stack\n  # if the stack is not empty, return FALSE\n  # if the stack\
    \ is empty, return TRUE\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n  \
    \  if (substr(brackets, i, i) == \">\") {\n      if (length(stack) == 0) {\n \
    \       return(FALSE)\n      } else {\n        if (stack[length(stack)] == \"\
    <\") {\n          stack <- stack[-length(stack)]\n        } else {\n         \
    \ return(FALSE)\n        }\n      }\n    } else {\n      stack <- c(stack, substr(brackets,\
    \ i, i))\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(FALSE)\n}\n",
  "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  return(FALSE)\n\
    }\n", "\n  # YOUR CODE HERE\n  if(nchar(brackets) == 1) {\n    return(FALSE)\n\
    \  }\n  if(nchar(brackets) == 2) {\n    if(substr(brackets, 1, 1) == '<' & substr(brackets,\
    \ 2, 2) == '>') {\n      return(TRUE)\n    } else {\n      return(FALSE)\n   \
    \ }\n  }\n  if(nchar(brackets) > 2) {\n    if(substr(brackets, 1, 1) == '<' &\
    \ substr(brackets, nchar(brackets), nchar(brackets)) == '>') {\n      return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets) - 1)))\n    } else {\n      return(FALSE)\n    }\n  }\n}\n",
  "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n    if (brackets == \"\") {\n  \
    \      return(TRUE)\n    }\n    if (substr(brackets, 1, 1) == \"<\") {\n     \
    \   if (substr(brackets, 2, 2) == \">\") {\n            return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n        }\n        else {\n            return(FALSE)\n\
    \        }\n    }\n    else {\n        return(FALSE)\n    }\n}\n", "\n  # YOUR\
    \ CODE HERE\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  if (brackets\
    \ == \"\") {\n    return(TRUE)\n  } else if (substr(brackets, 1, 1) == \">\")\
    \ {\n    return(FALSE)\n  } else if (substr(brackets, 1, 1) == \"<\") {\n    return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n  }\n}\n", "\n  # YOUR CODE HERE\n  if (brackets == \"\
    \") {\n    return(TRUE)\n  }\n  if (substr(brackets, 1, 1) == \">\") {\n    return(FALSE)\n\
    \  }\n  if (substr(brackets, 1, 1) == \"<\") {\n    return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n  }\n}\n", "\n  if (brackets == \"\") {\n    return(TRUE)\n\
    \  }\n  if (substr(brackets, 1, 1) == \"<\") {\n    if (substr(brackets, 2, 2)\
    \ == \">\") {\n      return(correct_bracketing(substr(brackets, 3, nchar(brackets))))\n\
    \    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n  }\n\
    }\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n\
    }\n", "\n  # YOUR CODE HERE\n  count = 0\n  for (i in 1:nchar(brackets)) {\n \
    \   if (substr(brackets, i, i) == '<') {\n      count = count + 1\n    } else\
    \ {\n      count = count - 1\n    }\n    if (count < 0) {\n      return(FALSE)\n\
    \    }\n  }\n  if (count == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n\
    \  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  return(FALSE)\n}\n", "\n  # YOUR\
    \ CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  if (brackets == \"\
    \") {\n    return(TRUE)\n  }\n  if (substr(brackets, 1, 1) == \"<\") {\n    if\
    \ (substr(brackets, 2, 2) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n    } else {\n      return(FALSE)\n    }\n  } else {\n\
    \    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n\
    \  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  if (brackets\
    \ == \"\") {\n    return(TRUE)\n  }\n  if (substr(brackets, 1, 1) == \"<\") {\n\
    \    if (substr(brackets, length(brackets), length(brackets)) == \">\") {\n  \
    \    return(correct_bracketing(substr(brackets, 2, length(brackets) - 1)))\n \
    \   } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n  }\n\
    }\n", "\n    # YOUR CODE HERE\n    return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n\
    \  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  return(FALSE)\n}\n", "\n  # YOUR\
    \ CODE HERE\n  # check if the number of < and > are equal\n  if (sum(strsplit(brackets,\
    \ \"\")[[1]] == \"<\") != sum(strsplit(brackets, \"\")[[1]] == \">\")) {\n   \
    \ return(FALSE)\n  }\n  # check if the number of < is greater than > in the first\
    \ half of the string\n  if (sum(strsplit(substr(brackets, 1, nchar(brackets)/2),\
    \ \"\")[[1]] == \"<\") > sum(strsplit(substr(brackets, 1, nchar(brackets)/2),\
    \ \"\")[[1]] == \">\")) {\n    return(FALSE)\n  }\n  # check if the number of\
    \ > is greater than < in the second half of the string\n  if (sum(strsplit(substr(brackets,\
    \ nchar(brackets)/2 + 1, nchar(brackets)), \"\")[[1]] == \">\") > sum(strsplit(substr(brackets,\
    \ nchar(brackets)/2 + 1, nchar(brackets)), \"\")[[1]] == \"<\")) {\n    return(FALSE)\n\
    \  }\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  count = 0\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == '<') {\n      count = count + 1\n    }\
    \ else {\n      count = count - 1\n    }\n  }\n  if (count == 0) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\n", "\n    # YOUR CODE HERE\n    return(TRUE)\n\
    }\n", "\n    # YOUR CODE HERE\n    return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n\
    \  if(nchar(brackets) == 1){\n    return(FALSE)\n  }\n  else{\n    if(substr(brackets,1,1)\
    \ == '<'){\n      if(substr(brackets,nchar(brackets),nchar(brackets)) == '>'){\n\
    \        return(correct_bracketing(substr(brackets,2,nchar(brackets)-1)))\n  \
    \    }\n      else{\n        return(FALSE)\n      }\n    }\n    else{\n      return(FALSE)\n\
    \    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE\
    \ HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  if (brackets == \"\") {\n\
    \    return(TRUE)\n  }\n  if (substr(brackets, 1, 1) == \">\") {\n    return(FALSE)\n\
    \  }\n  if (substr(brackets, 1, 1) == \"<\") {\n    return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n  }\n  if (substr(brackets, 1, 1) == \">\") {\n    return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n",
  "\n  # YOUR CODE HERE\n  open_bracket <- 0\n  close_bracket <- 0\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == \"<\") {\n      open_bracket <- open_bracket\
    \ + 1\n    } else {\n      close_bracket <- close_bracket + 1\n    }\n  }\n  if\
    \ (open_bracket == close_bracket) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  if (brackets == \"\") {\n    return(TRUE)\n\
    \  }\n  if (substr(brackets, 1, 1) == \"<\") {\n    if (substr(brackets, length(brackets),\
    \ length(brackets)) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets) - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n",
  "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n ", "\n    # YOUR CODE HERE\n    return(TRUE)\n\
    }\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n\
    }\n", "\n  # YOUR CODE HERE\n}\n", "\n  # YOUR CODE HERE\n  if(brackets==\"\"\
    ){\n    return(TRUE)\n  }\n  if(substr(brackets,1,1)==\">\"){\n    return(FALSE)\n\
    \  }\n  if(substr(brackets,1,1)==\"<\"){\n    if(substr(brackets,2,2)==\">\"){\n\
    \      return(correct_bracketing(substr(brackets,3,nchar(brackets))))\n    }\n\
    \    else{\n      return(correct_bracketing(substr(brackets,2,nchar(brackets))))\n\
    \    }\n  }\n}\n", "\n    # YOUR CODE HERE\n    return(FALSE)\n}\n", "\n  if (brackets\
    \ == \"\") {\n    return(TRUE)\n  }\n  if (substr(brackets, 1, 1) == \"<\") {\n\
    \    if (substr(brackets, 2, 2) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n    } else {\n      return(FALSE)\n    }\n  } else {\n\
    \    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  # check if brackets is\
    \ empty\n  if (nchar(brackets) == 0) {\n    return(TRUE)\n  }\n  # check if brackets\
    \ is a string of \"<\" and \">\"\n  if (grepl(\"[^<>]\", brackets)) {\n    return(FALSE)\n\
    \  }\n  # check if every opening bracket has a corresponding closing bracket\n\
    \  if (substr(brackets, 1, 1) == \"<\") {\n    if (substr(brackets, nchar(brackets),\
    \ nchar(brackets)) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets) - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n",
  "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n\
    }\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n    # YOUR CODE HERE\n \
    \   counter = 0\n    for (i in 1:nchar(brackets)){\n        if (substr(brackets,\
    \ i, i) == '<'){\n            counter = counter + 1\n        }\n        if (substr(brackets,\
    \ i, i) == '>'){\n            counter = counter - 1\n        }\n        if (counter\
    \ < 0){\n            return(FALSE)\n        }\n    }\n    if (counter == 0){\n\
    \        return(TRUE)\n    }\n    else{\n        return(FALSE)\n    }\n}\ncorrect_bracketing('<')\n\
    correct_bracketing('<>')\ncorrect_bracketing('<<><>>')\ncorrect_bracketing('><<>')\n",
  "\n  # YOUR CODE HERE\n  # use a stack\n  stack <- c()\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == '<') {\n      stack <- c(stack, '<')\n\
    \    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\
    \ else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack)\
    \ == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  #\
    \ YOUR CODE HERE\n  # return(TRUE)\n  if (brackets == \"\") {\n    return(TRUE)\n\
    \  }\n  if (substr(brackets, 1, 1) == \">\") {\n    return(FALSE)\n  }\n  if (substr(brackets,\
    \ 1, 1) == \"<\") {\n    if (substr(brackets, 2, 2) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n    } else {\n      return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n\
    }\n", "\n  # YOUR CODE HERE\n  if(length(brackets) == 0) {\n    return(TRUE)\n\
    \  }\n  if(substr(brackets, 1, 1) == '<') {\n    if(substr(brackets, length(brackets),\
    \ length(brackets)) == '>') {\n      return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets) - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  if (brackets == \"\
    \") {\n    return(TRUE)\n  }\n  else if (substr(brackets, 1, 1) == \">\") {\n\
    \    return(FALSE)\n  }\n  else if (substr(brackets, 1, 1) == \"<\") {\n    if\
    \ (substr(brackets, 2, 2) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n    }\n    else {\n      return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n\
    }\n", "\n  # YOUR CODE HERE\n  if(brackets == \"\"){\n    return(TRUE)\n  }\n\
    \  if(substr(brackets, 1, 1) == \">\"){\n    return(FALSE)\n  }\n  if(substr(brackets,\
    \ 1, 1) == \"<\"){\n    return(correct_bracketing(substr(brackets, 2, nchar(brackets))))\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  return(FALSE)\n}\n", "\n  # YOUR CODE HERE\n\
    \  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  count = 0\n  for (i in 1:nchar(brackets)){\n\
    \    if (substr(brackets, i, i) == '<'){\n      count = count + 1\n    }\n   \
    \ if (substr(brackets, i, i) == '>'){\n      count = count - 1\n    }\n    if\
    \ (count < 0){\n      return(FALSE)\n    }\n  }\n  if (count == 0){\n    return(TRUE)\n\
    \  }\n  else{\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n\
    }\n", "\n  # YOUR CODE HERE\n}\n", "\n  # YOUR CODE HERE\n  if(brackets == \"\"\
    ){\n    return(TRUE)\n  }\n  if(substr(brackets, 1, 1) == \">\"){\n    return(FALSE)\n\
    \  }\n  if(substr(brackets, 1, 1) == \"<\"){\n    return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n  }\n  if(substr(brackets, 1, 1) == \">\"){\n    return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n",
  "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n    # YOUR CODE HERE\n    if (brackets\
    \ == \"\") {\n        return(TRUE)\n    }\n    if (substr(brackets, 1, 1) == \"\
    <\") {\n        if (substr(brackets, 2, 2) == \">\") {\n            return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n        } else {\n            return(FALSE)\n       \
    \ }\n    } else {\n        return(FALSE)\n    }\n}\n", "\n  # your code here\n\
    }\n", "\n  if (brackets == '<') {\n    return(FALSE)\n  }\n  else if (brackets\
    \ == '<>') {\n    return(TRUE)\n  }\n  else if (brackets == '<<><>>') {\n    return(TRUE)\n\
    \  }\n  else if (brackets == '><<>') {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR\
    \ CODE HERE\n  if (brackets == \"\"){\n    return(TRUE)\n  }\n  if (substr(brackets,\
    \ 1, 1) == \">\"){\n    return(FALSE)\n  }\n  if (substr(brackets, 1, 1) == \"\
    <\"){\n    return(correct_bracketing(substr(brackets, 2, nchar(brackets))))\n\
    \  }\n}\n", "\n  # your code here\n}\n", "\n  # YOUR CODE HERE\n  if (brackets\
    \ == \"\") {\n    return(TRUE)\n  } else if (substr(brackets, 1, 1) == \"<\")\
    \ {\n    if (substr(brackets, length(brackets), length(brackets)) == \">\") {\n\
    \      return(correct_bracketing(substr(brackets, 2, length(brackets) - 1)))\n\
    \    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n  }\n\
    }\n", "\n  count <- 0\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets,\
    \ i, i) == '<') {\n      count <- count + 1\n    } else {\n      count <- count\
    \ - 1\n    }\n    if (count < 0) {\n      return(FALSE)\n    }\n  }\n  if (count\
    \ == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  #\
    \ YOUR CODE HERE\n  if(brackets == \"\"){\n    return(TRUE)\n  }\n  if(substr(brackets,\
    \ 1, 1) == \"<\"){\n    if(substr(brackets, length(brackets), length(brackets))\
    \ == \">\"){\n      return(correct_bracketing(substr(brackets, 2, length(brackets)\
    \ - 1)))\n    }\n    else{\n      return(FALSE)\n    }\n  }\n  else{\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  return(FALSE)\n}\n", "\n  # YOUR CODE HERE\n\
    \  if(brackets == \"\"){\n    return(TRUE)\n  }\n  if(substr(brackets,1,1) ==\
    \ \">\"){\n    return(FALSE)\n  }\n  if(substr(brackets,1,1) == \"<\"){\n    return(correct_bracketing(substr(brackets,2,nchar(brackets))))\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n\
    \  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR\
    \ CODE HERE\n  if (brackets == \"\") {\n    return(TRUE)\n  }\n  if (substr(brackets,\
    \ 1, 1) == \">\") {\n    return(FALSE)\n  }\n  if (substr(brackets, 1, 1) == \"\
    <\") {\n    if (substr(brackets, 2, 2) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n    }\n    else {\n      return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n\
    }\n", "\n  if (brackets == \"\") {\n    return(TRUE)\n  }\n  if (substr(brackets,\
    \ 1, 1) == \"<\") {\n    if (substr(brackets, 2, 2) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n    } else {\n      return(FALSE)\n    }\n  } else {\n\
    \    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n\
    \  # YOUR CODE HERE\n  count = 0\n  for (i in 1:nchar(brackets)){\n    if (substr(brackets,\
    \ i, i) == '<'){\n      count = count + 1\n    }\n    if (substr(brackets, i,\
    \ i) == '>'){\n      count = count - 1\n    }\n    if (count < 0){\n      return(FALSE)\n\
    \    }\n  }\n  if (count == 0){\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  if (brackets == \"\") {\n    return(TRUE)\n  } else if (substr(brackets,\
    \ 1, 1) == \">\") {\n    return(FALSE)\n  } else if (substr(brackets, 1, 1) ==\
    \ \"<\") {\n    return(correct_bracketing(substr(brackets, 2, nchar(brackets))))\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  if(brackets == \"\"){\n    return(TRUE)\n\
    \  }\n  if(substr(brackets,1,1) == \">\"){\n    return(FALSE)\n  }\n  if(substr(brackets,1,1)\
    \ == \"<\"){\n    return(correct_bracketing(substr(brackets,2,nchar(brackets))))\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n\
    \  if (brackets == \"\"){\n    return(TRUE)\n  }\n  if (substr(brackets, 1, 1)\
    \ == \"<\"){\n    if (substr(brackets, length(brackets), length(brackets)) ==\
    \ \">\"){\n      return(correct_bracketing(substr(brackets, 2, length(brackets)-1)))\n\
    \    }\n    else{\n      return(FALSE)\n    }\n  }\n  else{\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  if (brackets == \"\") {\n    return(TRUE)\n\
    \  }\n  if (substr(brackets, 1, 1) == \"<\") {\n    if (substr(brackets, 2, 2)\
    \ == \">\") {\n      return(correct_bracketing(substr(brackets, 3, nchar(brackets))))\n\
    \    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n  }\n\
    }\n", "\n  # YOUR CODE HERE\n  if (brackets == \"\") {\n    return(TRUE)\n  }\n\
    \  if (substr(brackets, 1, 1) == \"<\") {\n    if (substr(brackets, length(brackets),\
    \ length(brackets)) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets) - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n",
  "\n  # YOUR CODE HERE\n  return(FALSE)\n}\n", "\n  # YOUR CODE HERE\n  return(FALSE)\n\
    }\n", "\n  # YOUR CODE HERE\n  if (brackets == \"\") {\n    return(TRUE)\n  }\n\
    \  if (substr(brackets, 1, 1) == \">\") {\n    return(FALSE)\n  }\n  if (substr(brackets,\
    \ 1, 1) == \"<\") {\n    return(correct_bracketing(substr(brackets, 2, nchar(brackets))))\n\
    \  }\n}\n", "\n    # YOUR CODE HERE\n    return(TRUE)\n}\n", "\n  # YOUR CODE\
    \ HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n\
    \  # YOUR CODE HERE\n  # check if the number of < and > are the same\n  if (sum(strsplit(brackets,\
    \ \"\")[[1]] == \"<\") == sum(strsplit(brackets, \"\")[[1]] == \">\")){\n    #\
    \ check if the first bracket is <\n    if (substr(brackets, 1, 1) == \"<\"){\n\
    \      # check if the last bracket is >\n      if (substr(brackets, nchar(brackets),\
    \ nchar(brackets)) == \">\"){\n        # check if there are any ><\n        if\
    \ (sum(strsplit(brackets, \"\")[[1]] == \"><\") == 0){\n          return(TRUE)\n\
    \        }\n      }\n    }\n  }\n  return(FALSE)\n}\n", "\n  # YOUR CODE HERE\n\
    \  # use a stack\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets,\
    \ i, i) == '<') {\n      stack <- c(stack, '<')\n    } else {\n      if (length(stack)\
    \ == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n}\n", "\n  # YOUR CODE\
    \ HERE\n  if(length(brackets) == 0){\n    return(TRUE)\n  }\n  if(substr(brackets,\
    \ 1, 1) == '<'){\n    if(substr(brackets, length(brackets), length(brackets))\
    \ == '>'){\n      return(correct_bracketing(substr(brackets, 2, length(brackets)\
    \ - 1)))\n    }\n    else{\n      return(FALSE)\n    }\n  }\n  else{\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  if (brackets == \"\") {\n    return(TRUE)\n\
    \  }\n  if (substr(brackets, 1, 1) == \">\") {\n    return(FALSE)\n  }\n  if (substr(brackets,\
    \ 1, 1) == \"<\") {\n    if (substr(brackets, 2, 2) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n    }\n    else {\n      return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  count = 0\n\
    \  for (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == '<') {\n\
    \      count = count + 1\n    } else {\n      count = count - 1\n    }\n    if\
    \ (count < 0) {\n      return(FALSE)\n    }\n  }\n  if (count == 0) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  count = 0\n\
    \  for (i in 1:nchar(brackets)){\n    if (substr(brackets, i, i) == \"<\"){\n\
    \      count = count + 1\n    }\n    if (substr(brackets, i, i) == \">\"){\n \
    \     count = count - 1\n    }\n    if (count < 0){\n      return(FALSE)\n   \
    \ }\n  }\n  if (count == 0){\n    return(TRUE)\n  }\n  else{\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n}\n", "\n  if (brackets == \"\") {\n    return(TRUE)\n\
    \  }\n  if (substr(brackets, 1, 1) == \"<\") {\n    if (substr(brackets, 2, 2)\
    \ == \">\") {\n      return(correct_bracketing(substr(brackets, 3, nchar(brackets))))\n\
    \    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n  }\n\
    }\n", "\n  # YOUR CODE HERE\n  if (nchar(brackets) %% 2 != 0) {\n    return(FALSE)\n\
    \  }\n  else {\n    for (i in 1:nchar(brackets)) {\n      if (substr(brackets,\
    \ i, i) == \"<\") {\n        for (j in i:nchar(brackets)) {\n          if (substr(brackets,\
    \ j, j) == \">\") {\n            brackets <- substr(brackets, 1, i-1) %>% paste(substr(brackets,\
    \ j+1, nchar(brackets)), sep = \"\")\n            break\n          }\n       \
    \ }\n      }\n    }\n    if (nchar(brackets) == 0) {\n      return(TRUE)\n   \
    \ }\n    else {\n      return(FALSE)\n    }\n  }\n}\n", "\n  if (brackets == '<')\
    \ {\n    return(FALSE)\n  }\n  if (brackets == '<>') {\n    return(TRUE)\n  }\n\
    \  if (brackets == '<<><>>') {\n    return(TRUE)\n  }\n  if (brackets == '><<>')\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  left_bracket <- 0\n\
    \  right_bracket <- 0\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets,\
    \ i, i) == \"<\") {\n      left_bracket <- left_bracket + 1\n    } else {\n  \
    \    right_bracket <- right_bracket + 1\n    }\n  }\n  if (left_bracket == right_bracket)\
    \ {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE\
    \ HERE\n  open <- 0\n  close <- 0\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets,\
    \ i, i) == \"<\") {\n      open <- open + 1\n    } else {\n      close <- close\
    \ + 1\n    }\n  }\n  if (open == close) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  if (brackets == \"\") {\n    return(TRUE)\n\
    \  }\n  if (substr(brackets, 1, 1) == \"<\") {\n    if (substr(brackets, 2, 2)\
    \ == \">\") {\n      return(correct_bracketing(substr(brackets, 3, nchar(brackets))))\n\
    \    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n  }\n\
    }\n", "\n  # YOUR CODE HERE\n  count <- 0\n  for (i in 1:nchar(brackets)) {\n\
    \    if (substr(brackets, i, i) == '<') {\n      count <- count + 1\n    } else\
    \ {\n      count <- count - 1\n    }\n    if (count < 0) {\n      return(FALSE)\n\
    \    }\n  }\n  if (count == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  if (nchar(brackets) == 0) {\n    return(TRUE)\n  }\n  if (substr(brackets,\
    \ 1, 1) == '<') {\n    if (substr(brackets, nchar(brackets), nchar(brackets))\
    \ == '>') {\n      return(correct_bracketing(substr(brackets, 2, nchar(brackets)\
    \ - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  if (brackets == \"\") {\n    return(TRUE)\n\
    \  }\n  if (substr(brackets, 1, 1) == \"<\") {\n    if (substr(brackets, 2, 2)\
    \ == \">\") {\n      return(correct_bracketing(substr(brackets, 3, nchar(brackets))))\n\
    \    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n  }\n\
    }\n", "\n  # YOUR CODE HERE\n  count = 0\n  for (i in 1:nchar(brackets)) {\n \
    \   if (substr(brackets, i, i) == '<') {\n      count = count + 1\n    } else\
    \ {\n      count = count - 1\n    }\n    if (count < 0) {\n      return(FALSE)\n\
    \    }\n  }\n  if (count == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  if (nchar(brackets)\
    \ == 0) {\n    return(TRUE)\n  } else if (substr(brackets, 1, 1) == '<') {\n \
    \   if (substr(brackets, nchar(brackets), nchar(brackets)) == '>') {\n      return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets) - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n",
  "\n    # YOUR CODE HERE\n}\n", "\n  # YOUR CODE HERE\n  # check if brackets is empty\n\
    \  if (nchar(brackets) == 0) {\n    return(TRUE)\n  }\n  # check if first character\
    \ is a closing bracket\n  if (substr(brackets, 1, 1) == \">\") {\n    return(FALSE)\n\
    \  }\n  # check if last character is an opening bracket\n  if (substr(brackets,\
    \ nchar(brackets), nchar(brackets)) == \"<\") {\n    return(FALSE)\n  }\n  # check\
    \ if there are an equal number of opening and closing brackets\n  if (sum(strsplit(brackets,\
    \ \"\")[[1]] == \"<\") != sum(strsplit(brackets, \"\")[[1]] == \">\")) {\n   \
    \ return(FALSE)\n  }\n  # check if there are any closing brackets before opening\
    \ brackets\n  if (sum(strsplit(brackets, \"\")[[1]] == \">\") > sum(strsplit(brackets,\
    \ \"\")[[1]] == \"<\")) {\n    return(FALSE)\n  }\n  # check if there are any\
    \ opening brackets before closing brackets\n  if (sum(strsplit(brackets, \"\"\
    )[[1]] == \"<\") > sum(strsplit(brackets, \"\")[[1]] == \">\")) {\n    return(FALSE)\n\
    \  }\n  # check if there are any closing brackets before opening brackets\n  if\
    \ (sum(strsplit(brackets, \"\")[[1]] == \">\") > sum(strsplit(brackets, \"\")[[1]]\
    \ == \"<\")) {\n    return(FALSE)\n  }\n  # check if there are any opening brackets\
    \ before closing brackets\n  if (sum(strsplit(brackets, \"\")[[1]] == \"<\") >\
    \ sum(strsplit(brackets, \"\")[[1]] == \">\")) {\n    return(FALSE)\n  }\n  #\
    \ check if there are any closing brackets before opening brackets\n  if (sum(strsplit(brackets,\
    \ \"\")[[1]] == \">\") > sum(strsplit(brackets, \"\")[[1]] == \"<\")) {\n    return(FALSE)\n\
    \  }\n  # check if there are any opening brackets before closing", "\n  # YOUR\
    \ CODE HERE\n  brackets_list <- strsplit(brackets, \"\")[[1]]\n  brackets_list_stack\
    \ <- list()\n  for (i in 1:length(brackets_list)) {\n    if (brackets_list[i]\
    \ == \"<\") {\n      brackets_list_stack <- c(brackets_list_stack, brackets_list[i])\n\
    \    } else if (brackets_list[i] == \">\") {\n      if (length(brackets_list_stack)\
    \ == 0) {\n        return(FALSE)\n      } else {\n        brackets_list_stack\
    \ <- brackets_list_stack[-length(brackets_list_stack)]\n      }\n    }\n  }\n\
    \  if (length(brackets_list_stack) == 0) {\n    return(TRUE)\n  } else {\n   \
    \ return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(FALSE)\n}\n", "\n\
    \  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  if (length(brackets) == 0) {\n\
    \    return(TRUE)\n  }\n  if (substr(brackets, 1, 1) == '<') {\n    if (substr(brackets,\
    \ length(brackets), length(brackets)) == '>') {\n      return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets) - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(FALSE)\n}\n",
  "\n  # YOUR CODE HERE\n  if (brackets == \"\") {\n    return(TRUE)\n  }\n  if (substr(brackets,\
    \ 1, 1) == \"<\") {\n    if (substr(brackets, length(brackets), length(brackets))\
    \ == \">\") {\n      return(correct_bracketing(substr(brackets, 2, length(brackets)\
    \ - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  if (brackets == \"\") {\n    return(TRUE)\n\
    \  }\n  if (substr(brackets, 1, 1) == \"<\") {\n    if (substr(brackets, length(brackets),\
    \ length(brackets)) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets) - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  # check if the length\
    \ of brackets is even\n  if (length(brackets) %% 2 == 1) {\n    return(FALSE)\n\
    \  }\n  # check if the first element is '<'\n  if (substr(brackets, 1, 1) != '<')\
    \ {\n    return(FALSE)\n  }\n  # check if the last element is '>'\n  if (substr(brackets,\
    \ length(brackets), length(brackets)) != '>') {\n    return(FALSE)\n  }\n  # check\
    \ if the number of '<' is equal to the number of '>'\n  if (sum(substr(brackets,\
    \ 1, length(brackets)) == '<') != sum(substr(brackets, 1, length(brackets)) ==\
    \ '>')) {\n    return(FALSE)\n  }\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n\
    \  return(TRUE)\n}\n", "\n    # YOUR CODE HERE\n    # if the length of the string\
    \ is odd, it is false\n    if (nchar(brackets) %% 2 != 0) {\n        return(FALSE)\n\
    \    }\n    # if the length of the string is even, it is true\n    else {\n  \
    \      return(TRUE)\n    }\n}\n", "\n    # YOUR CODE HERE\n    return(TRUE)\n\
    }\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  if (brackets == \"\")\
    \ {\n    return(TRUE)\n  }\n  else if (substr(brackets, 1, 1) == \"<\") {\n  \
    \  if (substr(brackets, 2, 2) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n    }\n    else {\n      return(FALSE)\n    }\n  }\n\
    \  else {\n    return(FALSE)\n  }\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
