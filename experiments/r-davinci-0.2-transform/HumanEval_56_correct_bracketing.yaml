name: HumanEval_56_correct_bracketing
language: r
prompt: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
  \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing('<')\n\
  # FALSE\n# >>> correct_bracketing('<>')\n# TRUE\n# >>> correct_bracketing('<<><>>')\n\
  # TRUE\n# >>> correct_bracketing('><<>')\n# FALSE\ncorrect_bracketing <- function(brackets)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- correct_bracketing\n    if(!identical(candidate('<>'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('<<><>>'), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('<><><<><>><>'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('<><><<<><><>><>><<><><<>>>'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('<<<><>>>>'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('><<>'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('<'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('<<<<'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('>'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('<<>'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('<><><<><>><>><<>'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('<><><<><>><>>><>'), FALSE)){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n\
    \  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  return(FALSE)\n}\n", "\n  # YOUR\
    \ CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n",
  "\n  if (nchar(brackets) == 0) {\n    return(TRUE)\n  }\n  if (substr(brackets,\
    \ 1, 1) == '<') {\n    if (substr(brackets, nchar(brackets), nchar(brackets))\
    \ == '>') {\n      return(correct_bracketing(substr(brackets, 2, nchar(brackets)\
    \ - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  if (brackets == '<') {\n    return(FALSE)\n  }\n  else if (brackets\
    \ == '<>') {\n    return(TRUE)\n  }\n  else if (brackets == '<<><>>') {\n    return(TRUE)\n\
    \  }\n  else if (brackets == '><<>') {\n    return(FALSE)\n  }\n}\n", "\n  if\
    \ (brackets == \"\") {\n    return(TRUE)\n  } else if (substr(brackets, 1, 1)\
    \ == \"<\") {\n    if (substr(brackets, 2, 2) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n    } else {\n      return(FALSE)\n    }\n  } else {\n\
    \    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  bracket_stack <- c()\n\
    \  for (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == '<') {\n\
    \      bracket_stack <- c(bracket_stack, '<')\n    } else {\n      if (length(bracket_stack)\
    \ == 0) {\n        return(FALSE)\n      } else {\n        bracket_stack <- bracket_stack[-length(bracket_stack)]\n\
    \      }\n    }\n  }\n  if (length(bracket_stack) == 0) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n\
    }\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n\
    }\n", "\n  # YOUR CODE HERE\n  count = 0\n  for (i in 1:nchar(brackets)) {\n \
    \   if (substr(brackets, i, i) == '<') {\n      count = count + 1\n    } else\
    \ {\n      count = count - 1\n    }\n    if (count < 0) {\n      return(FALSE)\n\
    \    }\n  }\n  if (count == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  # check if brackets is a string\n  if(!is.character(brackets))\
    \ {\n    stop(\"brackets must be a string\")\n  }\n  # check if brackets is only\
    \ made up of \"<\" and \">\"\n  if(!all(brackets %in% c(\"<\", \">\"))) {\n  \
    \  stop(\"brackets must only contain '<' and '>'\")\n  }\n  # check if brackets\
    \ is empty\n  if(length(brackets) == 0) {\n    return(TRUE)\n  }\n  # check if\
    \ brackets is a single \"<\" or \">\"\n  if(length(brackets) == 1) {\n    return(FALSE)\n\
    \  }\n  # check if brackets is a string of \"<\" and \">\"\n  if(all(brackets\
    \ == \"<\")) {\n    return(TRUE)\n  }\n  if(all(brackets == \">\")) {\n    return(TRUE)\n\
    \  }\n  # check if brackets is a string of \"<\" and \">\"\n  if(all(brackets\
    \ == \"><\")) {\n    return(TRUE)\n  }\n  # check if brackets is a string of \"\
    <\" and \">\"\n  if(all(brackets == \"<>\")) {\n    return(TRUE)\n  }\n  # check\
    \ if brackets is a string of \"<\" and \">\"\n  if(all(brackets == \"<<>>\"))\
    \ {\n    return(TRUE)\n  }\n  # check if brackets is a string of \"<\" and \"\
    >\"\n  if(all(brackets == \"<<><>>\")) {\n    return(TRUE)\n  }\n  # check if\
    \ brackets is a string of \"<\" and \">\"\n  if(all(brackets == \"><<>>\")) {\n\
    \    return(TRUE)\n  }\n  # check if brackets is a string of \"<\" and \">\"\n\
    \  if(all(brackets == \"<<><><>>\")) {\n    return(TRUE)\n  }\n  # check if brackets\
    \ is a string of \"<\" and \">\"\n  if(all(brackets == \"<<><<><>>\")) {\n   \
    \ return(TRUE)\n  }\n  # check if brackets is", "\n  # YOUR CODE HERE\n}\n", "\n\
    \  # YOUR CODE HERE\n  if (brackets == \"\") {\n    return(TRUE)\n  }\n  if (substr(brackets,\
    \ 1, 1) == \">\") {\n    return(FALSE)\n  }\n  if (substr(brackets, 1, 1) == \"\
    <\") {\n    if (substr(brackets, 2, 2) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n    }\n    else {\n      return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n\
    }\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  if\
    \ (brackets == \"\") {\n    return(TRUE)\n  } else if (substr(brackets, 1, 1)\
    \ == \">\") {\n    return(FALSE)\n  } else if (substr(brackets, 1, 1) == \"<\"\
    ) {\n    if (substr(brackets, 2, 2) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n    } else {\n      return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  n <- nchar(brackets)\n\
    \  if (n %% 2 != 0) {\n    return(FALSE)\n  }\n  for (i in 1:n) {\n    if (substr(brackets,\
    \ i, i) == '<') {\n      for (j in i:n) {\n        if (substr(brackets, j, j)\
    \ == '>') {\n          brackets <- substr(brackets, 1, j-1)\n          brackets\
    \ <- substr(brackets, i+1, n)\n          break\n        }\n      }\n    }\n  }\n\
    \  if (nchar(brackets) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
