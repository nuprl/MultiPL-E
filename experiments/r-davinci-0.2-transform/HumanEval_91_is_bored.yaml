name: HumanEval_91_is_bored
language: r
prompt: "# You'll be given a string of words, and your task is to count the number\n\
  # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
  \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored('Hello world')\n\
  # 0\n# >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
  # 1\nis_bored <- function(S) {"
tests: "test_humaneval <- function() {\ncandidate <- is_bored\n    if(!identical(candidate('Hello\
  \ world'), 0)){quit('no', 1)}\n    if(!identical(candidate('Is the sky blue?'),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate('I love It !'), 1)){quit('no',\
  \ 1)}\n    if(!identical(candidate('bIt'), 0)){quit('no', 1)}\n    if(!identical(candidate('I\
  \ feel good today. I will be productive. will kill It'), 2)){quit('no', 1)}\n  \
  \  if(!identical(candidate('You and I are going for a walk'), 0)){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  # Your code here\n  return(0)\n}\n", "\n  # Your code here\n  #\
    \ Split the string into sentences\n  sentences <- strsplit(S, \"\\\\.|\\\\?|\\\
    \\!\")[[1]]\n  # Count the number of sentences that start with \"I\"\n  sum(grepl(\"\
    ^I\", sentences))\n}\n", "\n  # Your code here\n  return(sum(grepl(\"^I\", unlist(strsplit(gsub(\"\
    \\\\.\", \"\", S), \" \")))))\n}\n", "\n  # Your code here\n  return(0)\n}\n",
  "\n  # your code here\n  return(0)\n}\n", "\n  # Your code here\n  count <- 0\n\
    \  for (i in 1:length(strsplit(S, \"\\\\.\")[[1]])){\n    if (substr(strsplit(S,\
    \ \"\\\\.\")[[1]][i], 1, 1) == \"I\"){\n      count <- count + 1\n    }\n  }\n\
    \  return(count)\n}\n", "\n  # your code here\n  return(sum(grepl(\"^I\",unlist(strsplit(S,\"\
    [.?!]\")))))\n}\n", "\n    # Your code here\n    return(0)\n}\n ", "\n  # your\
    \ code here\n  return(sum(grepl(\"^I\", unlist(strsplit(S, split = \"[.?!]\")))))\n\
    }\n", "\n  # your code here\n  return(sum(grepl(\"^I\", unlist(strsplit(S, \"\
    [.?!]\")))))\n}\n", "\n  # Your code here\n  count <- 0\n  for (i in 1:length(strsplit(S,\
    \ \"\\\\.\")[[1]])){\n    if (substr(strsplit(S, \"\\\\.\")[[1]][i], 1, 1) ==\
    \ \"I\"){\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n", "\n  #\
    \ Your code here\n  return(sum(grepl(\"^I\", unlist(strsplit(S, \"[.?!]\")))))\n\
    }\n", "\n  # YOUR CODE HERE\n  return(sum(grepl(\"^I\", unlist(strsplit(S, \"\
    [.?!]\")))))\n}\n", "\n  # Your code here\n  count <- 0\n  for (i in 1:length(strsplit(S,\
    \ \" \")[[1]])) {\n    if (strsplit(S, \" \")[[1]][i] == \"I\") {\n      count\
    \ <- count + 1\n    }\n  }\n  return(count)\n}\n", "\n  # Your code here\n  return(sum(grepl(\"\
    ^I\", unlist(strsplit(S, \"[.?!]\")))))\n}\n", "\n  # your code here\n  return(length(grep(\"\
    ^I\", unlist(strsplit(S, \"\\\\.|\\\\?|\\\\!\")))))\n}\n", "\n  # Your code here\n\
    \  return(sum(grepl(\"^I\", unlist(strsplit(S, \"[.?!]\")))))\n}\n", "\n  # your\
    \ code here\n  count(strsplit(S, \"\\\\.|\\\\?|!\")[[1]], \"I\")\n}\n", "\n  #\
    \ Your code here\n  return(0)\n}\n", "\n  # your code here\n  return(0)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
