name: HumanEval_117_select_words
language: r
prompt: "# Given a string s and a natural number n, you have been tasked to implement\
  \ \n# a function that returns a list of all words from string s that contain exactly\
  \ \n# n consonants, in order these words appear in the string s.\n# If the string\
  \ s is empty then the function should return an empty list.\n# Note: you may assume\
  \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
  \ had a little lamb', 4)\n# list('little')\n# >>> select_words('Mary had a little\
  \ lamb', 3)\n# list('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n\
  # list()\n# >>> select_words('Hello world', 4)\n# list('world')\n# >>> select_words('Uncle\
  \ sam', 3)\n# list('Uncle')\nselect_words <- function(s, n) {"
tests: "test_humaneval <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
  \ had a little lamb', 4), list('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
  \ had a little lamb', 3), list('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
  \ white space', 2), list())){quit('no', 1)}\n    if(!identical(candidate('Hello\
  \ world', 4), list('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle\
  \ sam', 3), list('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4),\
  \ list())){quit('no', 1)}\n    if(!identical(candidate('a b c d e f', 1), list('b',\
  \ 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  # your code here\n  words <- unlist(strsplit(s, \" \"))\n  words\
    \ <- words[nchar(words) > 0]\n  words <- words[nchar(gsub(\"[aeiouAEIOU]\", \"\
    \", words)) == n]\n  return(words)\n}\n", "\n  # your code here\n}\n", "\n  s\
    \ <- strsplit(s, \" \")[[1]]\n  s[sapply(s, function(x) sum(grepl(\"[^aeiou]\"\
    , x)) == n)]\n}\n", "\n  words <- unlist(strsplit(s, \" \"))\n  words <- words[nchar(words)\
    \ > 0]\n  words <- words[nchar(gsub(\"[aeiou]\", \"\", words)) == n]\n  return(words)\n\
    }\n", "\n  # your code here\n}\n ", "\n  words <- unlist(strsplit(s, \" \"))\n\
    \  words <- words[nchar(words) > 0]\n  words <- words[nchar(gsub(\"[aeiou]\",\
    \ \"\", words)) == n]\n  return(words)\n}\n", "\n  # your code here\n}\n ", "\n\
    \  # your code here\n}\n ", "\n  # your code here\n}\n", "\n  words <- strsplit(s,\
    \ \" \")[[1]]\n  words[nchar(gsub(\"[aeiou]\", \"\", words)) == n]\n}\nselect_words('Mary\
    \ had a little lamb', 4)\n", "\n  words <- unlist(strsplit(s, \" \"))\n  words\
    \ <- words[nchar(words) > 0]\n  words <- words[nchar(gsub(\"[aeiou]\", \"\", words))\
    \ == n]\n  return(words)\n}\n", "\n  words <- unlist(strsplit(s, \" \"))\n  words\
    \ <- words[nchar(words) > 0]\n  words <- words[nchar(gsub(\"[aeiou]\", \"\", words))\
    \ == n]\n  return(words)\n}\n", "\n  # your code here\n  s <- strsplit(s, \" \"\
    )[[1]]\n  s <- s[nchar(s) == n]\n  return(s)\n}\n", "\n  # your code here\n}\n",
  "\n  # Your code here\n  # You can create other functions as well\n  # You can use\
    \ any of the string functions from the slides\n  # You can use any of the functions\
    \ from the stringr package\n  # You can use any of the functions from the stringi\
    \ package\n  # You can use any of the functions from the stringdist package\n\
    \  # You can use any of the functions from the stringi package\n  # You can use\
    \ any of the functions from the stringdist package\n  # You can use any of the\
    \ functions from the stringdist package\n  # You can use any of the functions\
    \ from the stringdist package\n  # You can use any of the functions from the stringdist\
    \ package\n  # You can use any of the functions from the stringdist package\n\
    \  # You can use any of the functions from the stringdist package\n  # You can\
    \ use any of the functions from the stringdist package\n  # You can use any of\
    \ the functions from the stringdist package\n  # You can use any of the functions\
    \ from the stringdist package\n  # You can use any of the functions from the stringdist\
    \ package\n  # You can use any of the functions from the stringdist package\n\
    \  # You can use any of the functions from the stringdist package\n  # You can\
    \ use any of the functions from the stringdist package\n  # You can use any of\
    \ the functions from the stringdist package\n  # You can use any of the functions\
    \ from the stringdist package\n  # You can use any of the functions from the stringdist\
    \ package\n  # You can use any of the functions from the stringdist package\n\
    \  # You can use any of the functions from the stringdist package\n  # You can\
    \ use any of the functions from the stringdist package\n  # You can use any of\
    \ the functions from the stringdist package\n  # You can use any of the functions\
    \ from the stringdist package\n  # You can use any of the functions from the stringdist\
    \ package\n  # You can use any of the functions from the stringdist package\n\
    \  # You can use any of the functions from the stringdist package\n  # You can\
    \ use any of the functions from the stringdist package\n  # You can use any of\
    \ the functions from the stringdist package\n  # You can use any of the functions\
    \ from the stringdist package\n  # You can use any of the functions from the stringdist\
    \ package\n", "\n  # your code here\n}\n ", "\n  words <- strsplit(s, \" \")[[1]]\n\
    \  words[sapply(words, function(x) sum(!grepl(\"[aeiou]\", x)) == n)]\n}\n", "\n\
    \  words <- unlist(strsplit(s, \" \"))\n  words[nchar(gsub(\"[aeiouAEIOU]\", \"\
    \", words)) == n]\n}\n", "\n    # Your code here\n    # You may find the following\
    \ functions useful:\n    # strsplit, nchar, grep, tolower\n    # You may also\
    \ find the following regular expression useful:\n    # [^aeiou]\n    # You may\
    \ also find the following function useful:\n    # paste\n}\n ", "\n  # your code\
    \ here\n}\n ", "\n  # Your code here\n}\n ", "\n  words <- strsplit(s, \" \")[[1]]\n\
    \  words[sapply(words, function(x) sum(grepl(\"[^aeiouAEIOU]\", x)) == n)]\n}\n",
  "\n  # your code here\n}\n", "\n  words <- strsplit(s, \" \")[[1]]\n  words[nchar(gsub(\"\
    [aeiou]\", \"\", words)) == n]\n}\n", "\n  # write your code here\n}\n ", "\n\
    \  # Your code here\n  words <- unlist(strsplit(s, \" \"))\n  words <- words[words\
    \ != \"\"]\n  words <- words[nchar(gsub(\"[aeiou]\", \"\", words)) == n]\n  return(words)\n\
    }\n", "\n  s <- unlist(strsplit(s, \" \"))\n  s <- s[nchar(s) == n]\n  return(s)\n\
    }\n", "\n  # your code here\n}\n ", "\n  words <- unlist(strsplit(s, \" \"))\n\
    \  words <- words[nchar(words) > 0]\n  words <- words[nchar(gsub(\"[aeiou]\",\
    \ \"\", words)) == n]\n  return(words)\n}\n", "\n  words <- unlist(strsplit(s,\
    \ \" \"))\n  words <- words[nchar(words) > 0]\n  words <- words[nchar(gsub(\"\
    [aeiouAEIOU]\", \"\", words)) == n]\n  return(words)\n}\n", "\n  words <- strsplit(s,\
    \ \" \")[[1]]\n  words[nchar(gsub(\"[aeiou]\", \"\", words)) == n]\n}\n", "\n\
    \  # your code here\n}\n", "\n  words <- unlist(strsplit(s, \" \"))\n  words <-\
    \ words[nchar(words) > 0]\n  words <- words[nchar(gsub(\"[aeiouAEIOU]\", \"\"\
    , words)) == n]\n  return(words)\n}\n", "\n  if (nchar(s) == 0) {\n    return(list())\n\
    \  }\n  words <- strsplit(s, \" \")[[1]]\n  consonants <- function(x) {\n    x\
    \ <- gsub(\"[aeiou]\", \"\", x, ignore.case = TRUE)\n    return(nchar(x))\n  }\n\
    \  words <- words[consonants(words) == n]\n  return(words)\n}\n", "\n  words <-\
    \ strsplit(s, \" \")[[1]]\n  words[nchar(gsub(\"[aeiouAEIOU]\", \"\", words))\
    \ == n]\n}\n", "\n  words <- unlist(strsplit(s, \" \"))\n  words_with_n_consonants\
    \ <- words[nchar(gsub(\"[aeiouAEIOU]\", \"\", words)) == n]\n  return(words_with_n_consonants)\n\
    }\n", "\n  words <- strsplit(s, \" \")[[1]]\n  words[nchar(gsub(\"[aeiouAEIOU]\"\
    , \"\", words)) == n]\n}\n", "\n  # Your code here\n}\n ", "\n  # your code here\n\
    }\n ", "\n  words <- strsplit(s, \" \")[[1]]\n  words[sapply(words, function(x)\
    \ sum(grepl(\"[^aeiouAEIOU]\", x)) == n)]\n}\n", "\n  # your code here\n}\n",
  "\n  # your code here\n}\n", "\n  # your code here\n}\n ", "\n  # your code here\n\
    }\n ", "\n  words <- unlist(strsplit(s, \" \"))\n  words <- words[nchar(words)\
    \ > 0]\n  words <- words[nchar(gsub(\"[aeiou]\", \"\", words)) == n]\n  return(words)\n\
    }\n", "\n  words <- strsplit(s, \" \")[[1]]\n  words[nchar(gsub(\"[aeiou]\", \"\
    \", words)) == n]\n}\n", "\n  words <- strsplit(s, \" \")[[1]]\n  words <- words[nchar(words)\
    \ == n]\n  return(words)\n}\n", "\n  # your code here\n}\n", "\n  # your code\
    \ here\n}\n", "\n  # your code here\n  words <- unlist(strsplit(s, \" \"))\n \
    \ words <- words[nchar(words) > 0]\n  words <- words[nchar(gsub(\"[aeiou]\", \"\
    \", words)) == n]\n  return(words)\n}\n", "\n  words <- unlist(strsplit(s, \"\
    \ \"))\n  words <- words[nchar(words) > 0]\n  words <- words[nchar(gsub(\"[aeiouAEIOU]\"\
    , \"\", words)) == n]\n  return(words)\n}\n", "\n  words <- strsplit(s, \" \"\
    )[[1]]\n  words[sapply(words, function(x) sum(!grepl(\"[aeiou]\", x)) == n)]\n\
    }\n", "\n  words <- strsplit(s, \" \")[[1]]\n  words[nchar(gsub(\"[aeiouAEIOU]\"\
    , \"\", words)) == n]\n}\n", "\n  words <- unlist(strsplit(s, \" \"))\n  words\
    \ <- words[nchar(words) > 0]\n  words <- words[nchar(gsub(\"[aeiouAEIOU]\", \"\
    \", words)) == n]\n  return(words)\n}\n", "\n  # Your code here\n}\n", "\n  words\
    \ <- strsplit(s, \" \")[[1]]\n  words[nchar(gsub(\"[aeiou]\", \"\", words)) ==\
    \ n]\n}\n", "\n  words <- unlist(strsplit(s, \" \"))\n  words <- words[words !=\
    \ \"\"]\n  consonants <- c(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"y\", \"z\")\n  words <- words[sapply(words, function(word) {\n    word\
    \ <- tolower(word)\n    sum(sapply(word, function(char) {\n      char %in% consonants\n\
    \    })) == n\n  })]\n  return(words)\n}\n", "\n  # Write your code here\n  #\
    \ You can use the function `is_consonant`\n  # that is defined below\n  # You\
    \ can use the function `strsplit`\n  # that is defined in the `base` package\n\
    \  # You can use the function `list`\n  # that is defined in the `base` package\n\
    \  # You can use the function `length`\n  # that is defined in the `base` package\n\
    \  # You can use the function `nchar`\n  # that is defined in the `base` package\n\
    \  # You can use the function `filter`\n  # that is defined in the `purrr` package\n\
    \  # You can use the function `map_int`\n  # that is defined in the `purrr` package\n\
    \  # You can use the function `sum`\n  # that is defined in the `base` package\n\
    \  # You can use the function `is.na`\n  # that is defined in the `base` package\n\
    \  # You can use the function `is.null`\n  # that is defined in the `base` package\n\
    \  # You can use the function `is.empty`\n  # that is defined in the `base` package\n\
    \  # You can use the function `is.character`\n  # that is defined in the `base`\
    \ package\n  # You can use the function `is.vector`\n  # that is defined in the\
    \ `base` package\n  # You can use the function `is.numeric`\n  # that is defined\
    \ in the `base` package\n  # You can use the function `is.integer`\n  # that is\
    \ defined in the `base` package\n  # You can use the function `is.factor`\n  #\
    \ that is defined in the `base` package\n  # You can use the function `is.logical`\n\
    \  # that is defined in the `base` package\n  # You can use the function `is.list`\n\
    \  # that is defined in the `base` package\n  # You can use the function `is.data.frame`\n\
    \  # that is defined in the `base` package\n  # You can use the function `is.matrix`\n\
    \  # that is defined in the `base` package\n  # You can use the function `is",
  "\n  s <- strsplit(s, \" \")[[1]]\n  s <- s[nchar(s) > 0]\n  s <- s[nchar(gsub(\"\
    [aeiouAEIOU]\", \"\", s)) == n]\n  return(s)\n}\n", "\n  # your code here\n}\n\
    \ ", "\n  words <- strsplit(s, \" \")[[1]]\n  words <- words[nchar(words) == n]\n\
    \  return(words)\n}\n", "\n  # your code here\n}\n ", "\n  # your code here\n\
    \  s <- strsplit(s, \" \")[[1]]\n  s <- s[nchar(s) >= n]\n  s <- s[nchar(gsub(\"\
    [aeiou]\", \"\", s)) == n]\n  return(s)\n}\n", "\n  if (nchar(s) == 0) {\n   \
    \ return(list())\n  }\n  words <- strsplit(s, \" \")[[1]]\n  consonants <- c(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n  words <-\
    \ words[sapply(words, function(x) sum(nchar(x) == n && sum(x %in% consonants)\
    \ == n))]\n  return(words)\n}\n", "\n  # your code goes here\n  words <- unlist(strsplit(s,\
    \ \" \"))\n  words <- words[nchar(words) > 0]\n  words <- words[nchar(gsub(\"\
    [aeiouAEIOU]\", \"\", words)) == n]\n  return(words)\n}\n", "\n  words <- unlist(strsplit(s,\
    \ \" \"))\n  words <- words[nchar(words) > 0]\n  words <- words[nchar(gsub(\"\
    [aeiou]\", \"\", words)) == n]\n  return(words)\n}\n", "\n  words <- unlist(strsplit(s,\
    \ \" \"))\n  words <- words[nchar(words) > 0]\n  words <- words[nchar(gsub(\"\
    [aeiou]\", \"\", words)) == n]\n  return(words)\n}\n", "\n  # your code here\n\
    }\n", "\n  words <- strsplit(s, \" \")[[1]]\n  consonants <- function(w) {\n \
    \   sum(grepl(\"[^aeiou]\", w))\n  }\n  words[consonants(words) == n]\n}\n", "\n\
    \  words <- unlist(strsplit(s, \" \"))\n  words <- words[nchar(words) > 0]\n \
    \ words <- words[nchar(gsub(\"[aeiou]\", \"\", words)) == n]\n  return(words)\n\
    }\n", "\n  # your code here\n}\n ", "\n  words <- unlist(strsplit(s, \" \"))\n\
    \  words <- words[nchar(words) > 0]\n  words <- words[nchar(gsub(\"[aeiou]\",\
    \ \"\", words)) == n]\n  return(words)\n}\n", "\n  # your code here\n  words <-\
    \ strsplit(s, \" \")[[1]]\n  consonants <- c(\"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n  words_with_n_consonants <- c()\n  for\
    \ (word in words) {\n    word_consonants <- 0\n    for (letter in word) {\n  \
    \    if (letter %in% consonants) {\n        word_consonants <- word_consonants\
    \ + 1\n      }\n    }\n    if (word_consonants == n) {\n      words_with_n_consonants\
    \ <- c(words_with_n_consonants, word)\n    }\n  }\n  return(words_with_n_consonants)\n\
    }\n", "\n  # your code here\n}\n", "\n  words <- strsplit(s, \" \")[[1]]\n  words\
    \ <- words[nchar(words) > 0]\n  words <- words[nchar(gsub(\"[aeiou]\", \"\", words))\
    \ == n]\n  return(words)\n}\n", "\n  # your code here\n  s <- strsplit(s, \" \"\
    )[[1]]\n  s <- s[nchar(s) == n]\n  return(s)\n}\n", "\n  # Your code here\n  words\
    \ <- unlist(strsplit(s, \" \"))\n  words <- words[words != \"\"]\n  words <- words[nchar(words)\
    \ == n]\n  return(words)\n}\n", "\n    # your code here\n}\n", "\n  if (nchar(s)\
    \ == 0) {\n    return(list())\n  }\n  words <- strsplit(s, \" \")[[1]]\n  consonants\
    \ <- c(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n \
    \ words_with_n_consonants <- c()\n  for (word in words) {\n    if (length(word)\
    \ == n) {\n      if (length(grep(paste(consonants, collapse = \"|\"), word, value\
    \ = TRUE)) == n) {\n        words_with_n_consonants <- c(words_with_n_consonants,\
    \ word)\n      }\n    }\n  }\n  return(words_with_n_consonants)\n}\n", "\n  #\
    \ your code here\n}\n ", "\n  # your code here\n}\n", "\n  # Your code here\n\
    }\n", "\n  # your code here\n}\n", "\n  # your code here\n}\n", "\n  # your code\
    \ here\n}\n", "\n  words <- strsplit(s, \" \")[[1]]\n  words[sapply(words, function(w)\
    \ sum(grepl(\"[^aeiou]\", w)) == n)]\n}\n", "\n  words <- strsplit(s, \" \")[[1]]\n\
    \  words[nchar(gsub(\"[aeiouAEIOU]\", \"\", words)) == n]\n}\n", "\n  # Your code\
    \ here\n}\n", "\n  s <- strsplit(s, \" \")[[1]]\n  s[sapply(s, function(x) sum(!grepl(\"\
    [aeiou]\", x)) == n)]\n}\n", "\n  # your code here\n}\n ", "\n  # your code here\n\
    }\n ", "\n  # your code here\n}\n ", "\n  # your code here\n}\n ", "\n  words\
    \ <- unlist(strsplit(s, \" \"))\n  words <- words[nchar(words) > 0]\n  words <-\
    \ words[nchar(gsub(\"[aeiou]\", \"\", words)) == n]\n  return(words)\n}\n", "\n\
    \  # your code here\n}\n", "\n  # Your code here\n}\n ", "\n  # your code here\n\
    }\n ", "\n  s <- unlist(strsplit(s, \" \"))\n  s <- s[nchar(s) == n]\n  return(s)\n\
    }\n", "\n  # Your code here\n}\n", "\n  s <- unlist(strsplit(s, \" \"))\n  s <-\
    \ s[nchar(s) == n]\n  return(s)\n}\n", "\n  words <- strsplit(s, \" \")[[1]]\n\
    \  words[nchar(gsub(\"[aeiouAEIOU]\", \"\", words)) == n]\n}\n", "\n  words <-\
    \ unlist(strsplit(s, \" \"))\n  words <- words[nchar(words) > 0]\n  words <- words[nchar(gsub(\"\
    [aeiou]\", \"\", words)) == n]\n  return(words)\n}\n", "\n  # your code here\n\
    }\n", "\n  words <- unlist(strsplit(s, \" \"))\n  words <- words[nchar(words)\
    \ > 0]\n  words <- words[nchar(gsub(\"[aeiouAEIOU]\", \"\", words)) == n]\n  return(words)\n\
    }\n"]
stop_tokens:
- "\n#"
- "\n```"
