language: r
name: HumanEval_131_digits
results:
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {\n  if (n ==\
    \ 0) {\n    return(0)\n  }\n  else {\n    if (n %% 2 == 0) {\n      return(digits(floor(n\
    \ / 10)))\n    }\n    else {\n      return(n %% 10 * digits(floor(n / 10)))\n\
    \    }\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- digits\n    if(!identical(candidate(5),\
    \ 5)){quit('no', 1)}\n    if(!identical(candidate(54), 5)){quit('no', 1)}\n  \
    \  if(!identical(candidate(120), 1)){quit('no', 1)}\n    if(!identical(candidate(5014),\
    \ 5)){quit('no', 1)}\n    if(!identical(candidate(98765), 315)){quit('no', 1)}\n\
    \    if(!identical(candidate(5576543), 2625)){quit('no', 1)}\n    if(!identical(candidate(2468),\
    \ 0)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {\n  if (n ==\
    \ 0) {\n    return(0)\n  }\n  return(n %% 10 * digits(n %/% 10))\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- digits\n    if(!identical(candidate(5), 5)){quit('no',\
    \ 1)}\n    if(!identical(candidate(54), 5)){quit('no', 1)}\n    if(!identical(candidate(120),\
    \ 1)){quit('no', 1)}\n    if(!identical(candidate(5014), 5)){quit('no', 1)}\n\
    \    if(!identical(candidate(98765), 315)){quit('no', 1)}\n    if(!identical(candidate(5576543),\
    \ 2625)){quit('no', 1)}\n    if(!identical(candidate(2468), 0)){quit('no', 1)}\n\
    }\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {\n  if(n ==\
    \ 0) return(0)\n  if(n %% 2 == 1) return(n %% 10 * digits(n %/% 10))\n  return(digits(n\
    \ %/% 10))\n}\n\ntest_humaneval <- function() {\ncandidate <- digits\n    if(!identical(candidate(5),\
    \ 5)){quit('no', 1)}\n    if(!identical(candidate(54), 5)){quit('no', 1)}\n  \
    \  if(!identical(candidate(120), 1)){quit('no', 1)}\n    if(!identical(candidate(5014),\
    \ 5)){quit('no', 1)}\n    if(!identical(candidate(98765), 315)){quit('no', 1)}\n\
    \    if(!identical(candidate(5576543), 2625)){quit('no', 1)}\n    if(!identical(candidate(2468),\
    \ 0)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {\n  if (n <\
    \ 0) stop(\"n must be positive\")\n  if (n == 0) return(0)\n  if (n %% 2 == 1)\
    \ return(n * digits(floor(n / 10)))\n  return(digits(floor(n / 10)))\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- digits\n    if(!identical(candidate(5), 5)){quit('no',\
    \ 1)}\n    if(!identical(candidate(54), 5)){quit('no', 1)}\n    if(!identical(candidate(120),\
    \ 1)){quit('no', 1)}\n    if(!identical(candidate(5014), 5)){quit('no', 1)}\n\
    \    if(!identical(candidate(98765), 315)){quit('no', 1)}\n    if(!identical(candidate(5576543),\
    \ 2625)){quit('no', 1)}\n    if(!identical(candidate(2468), 0)){quit('no', 1)}\n\
    }\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 0
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {\n  n <- as.character(n)\n\
    \  n <- strsplit(n, \"\")[[1]]\n  n <- as.numeric(n)\n  n <- n[n %% 2 == 1]\n\
    \  if (length(n) == 0) {\n    return(0)\n  } else {\n    return(prod(n))\n  }\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- digits\n    if(!identical(candidate(5),\
    \ 5)){quit('no', 1)}\n    if(!identical(candidate(54), 5)){quit('no', 1)}\n  \
    \  if(!identical(candidate(120), 1)){quit('no', 1)}\n    if(!identical(candidate(5014),\
    \ 5)){quit('no', 1)}\n    if(!identical(candidate(98765), 315)){quit('no', 1)}\n\
    \    if(!identical(candidate(5576543), 2625)){quit('no', 1)}\n    if(!identical(candidate(2468),\
    \ 0)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {\n  # YOUR CODE\
    \ HERE\n  if (n == 0) {\n    return(0)\n  }\n  else {\n    if (n %% 2 == 0) {\n\
    \      return(digits(floor(n/10)))\n    }\n    else {\n      return(n %% 10 *\
    \ digits(floor(n/10)))\n    }\n  }\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- digits\n    if(!identical(candidate(5), 5)){quit('no', 1)}\n    if(!identical(candidate(54),\
    \ 5)){quit('no', 1)}\n    if(!identical(candidate(120), 1)){quit('no', 1)}\n \
    \   if(!identical(candidate(5014), 5)){quit('no', 1)}\n    if(!identical(candidate(98765),\
    \ 315)){quit('no', 1)}\n    if(!identical(candidate(5576543), 2625)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2468), 0)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 0
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {\n  if (n <\
    \ 10) {\n    if (n %% 2 == 1) {\n      return(n)\n    } else {\n      return(0)\n\
    \    }\n  } else {\n    if (n %% 10 %% 2 == 1) {\n      return(n %% 10 * digits(n\
    \ %/% 10))\n    } else {\n      return(digits(n %/% 10))\n    }\n  }\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- digits\n    if(!identical(candidate(5), 5)){quit('no',\
    \ 1)}\n    if(!identical(candidate(54), 5)){quit('no', 1)}\n    if(!identical(candidate(120),\
    \ 1)){quit('no', 1)}\n    if(!identical(candidate(5014), 5)){quit('no', 1)}\n\
    \    if(!identical(candidate(98765), 315)){quit('no', 1)}\n    if(!identical(candidate(5576543),\
    \ 2625)){quit('no', 1)}\n    if(!identical(candidate(2468), 0)){quit('no', 1)}\n\
    }\ntest_humaneval()"
  status: OK
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {\n  # YOUR CODE\
    \ HERE\n  return(0)\n}\ndigits(1)\ndigits(4)\ndigits(235)\n \ntest_humaneval <-\
    \ function() {\ncandidate <- digits\n    if(!identical(candidate(5), 5)){quit('no',\
    \ 1)}\n    if(!identical(candidate(54), 5)){quit('no', 1)}\n    if(!identical(candidate(120),\
    \ 1)){quit('no', 1)}\n    if(!identical(candidate(5014), 5)){quit('no', 1)}\n\
    \    if(!identical(candidate(98765), 315)){quit('no', 1)}\n    if(!identical(candidate(5576543),\
    \ 2625)){quit('no', 1)}\n    if(!identical(candidate(2468), 0)){quit('no', 1)}\n\
    }\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b'[1] 0\n[1] 0\n[1] 0\n'
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {\n  # YOUR CODE\
    \ HERE\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(digits(n/10))\n  return(n%%10\
    \ * digits(n/10))\n}\n\ntest_humaneval <- function() {\ncandidate <- digits\n\
    \    if(!identical(candidate(5), 5)){quit('no', 1)}\n    if(!identical(candidate(54),\
    \ 5)){quit('no', 1)}\n    if(!identical(candidate(120), 1)){quit('no', 1)}\n \
    \   if(!identical(candidate(5014), 5)){quit('no', 1)}\n    if(!identical(candidate(98765),\
    \ 315)){quit('no', 1)}\n    if(!identical(candidate(5576543), 2625)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2468), 0)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {\n  if (n ==\
    \ 0) {\n    return(0)\n  } else {\n    digit <- n %% 10\n    if (digit %% 2 ==\
    \ 1) {\n      return(digit * digits(n %/% 10))\n    } else {\n      return(digits(n\
    \ %/% 10))\n    }\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- digits\n\
    \    if(!identical(candidate(5), 5)){quit('no', 1)}\n    if(!identical(candidate(54),\
    \ 5)){quit('no', 1)}\n    if(!identical(candidate(120), 1)){quit('no', 1)}\n \
    \   if(!identical(candidate(5014), 5)){quit('no', 1)}\n    if(!identical(candidate(98765),\
    \ 315)){quit('no', 1)}\n    if(!identical(candidate(5576543), 2625)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2468), 0)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {\n  # YOUR CODE\
    \ HERE\n  if(n == 0) return(0)\n  if(n %% 2 == 0) return(digits(n %/% 10))\n \
    \ return(n %% 10 * digits(n %/% 10))\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- digits\n    if(!identical(candidate(5), 5)){quit('no', 1)}\n    if(!identical(candidate(54),\
    \ 5)){quit('no', 1)}\n    if(!identical(candidate(120), 1)){quit('no', 1)}\n \
    \   if(!identical(candidate(5014), 5)){quit('no', 1)}\n    if(!identical(candidate(98765),\
    \ 315)){quit('no', 1)}\n    if(!identical(candidate(5576543), 2625)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2468), 0)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 0
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {\n  if (n <\
    \ 0) {\n    stop(\"n must be a positive integer\")\n  }\n  if (n == 0) {\n   \
    \ return(0)\n  }\n  if (n < 10) {\n    if (n %% 2 == 0) {\n      return(0)\n \
    \   } else {\n      return(n)\n    }\n  }\n  if (n %% 10 %% 2 == 0) {\n    return(digits(n\
    \ %/% 10))\n  } else {\n    return(n %% 10 * digits(n %/% 10))\n  }\n}\ndigits(1)\n\
    digits(4)\ndigits(235)\n\ntest_humaneval <- function() {\ncandidate <- digits\n\
    \    if(!identical(candidate(5), 5)){quit('no', 1)}\n    if(!identical(candidate(54),\
    \ 5)){quit('no', 1)}\n    if(!identical(candidate(120), 1)){quit('no', 1)}\n \
    \   if(!identical(candidate(5014), 5)){quit('no', 1)}\n    if(!identical(candidate(98765),\
    \ 315)){quit('no', 1)}\n    if(!identical(candidate(5576543), 2625)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2468), 0)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b'[1] 1\n[1] 0\n[1] 0\n'
- exit_code: 0
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {\n  n <- as.character(n)\n\
    \  n <- strsplit(n, \"\")[[1]]\n  n <- as.numeric(n)\n  n <- n[n %% 2 == 1]\n\
    \  if (length(n) == 0) {\n    return(0)\n  } else {\n    return(prod(n))\n  }\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- digits\n    if(!identical(candidate(5),\
    \ 5)){quit('no', 1)}\n    if(!identical(candidate(54), 5)){quit('no', 1)}\n  \
    \  if(!identical(candidate(120), 1)){quit('no', 1)}\n    if(!identical(candidate(5014),\
    \ 5)){quit('no', 1)}\n    if(!identical(candidate(98765), 315)){quit('no', 1)}\n\
    \    if(!identical(candidate(5576543), 2625)){quit('no', 1)}\n    if(!identical(candidate(2468),\
    \ 0)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 0
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {\n  if (n <\
    \ 0) {\n    stop(\"n must be positive\")\n  }\n  if (n == 0) {\n    return(0)\n\
    \  }\n  if (n < 10) {\n    if (n %% 2 == 1) {\n      return(n)\n    } else {\n\
    \      return(0)\n    }\n  }\n  if (n %% 10 %% 2 == 1) {\n    return(n %% 10 *\
    \ digits(n %/% 10))\n  } else {\n    return(digits(n %/% 10))\n  }\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- digits\n    if(!identical(candidate(5), 5)){quit('no',\
    \ 1)}\n    if(!identical(candidate(54), 5)){quit('no', 1)}\n    if(!identical(candidate(120),\
    \ 1)){quit('no', 1)}\n    if(!identical(candidate(5014), 5)){quit('no', 1)}\n\
    \    if(!identical(candidate(98765), 315)){quit('no', 1)}\n    if(!identical(candidate(5576543),\
    \ 2625)){quit('no', 1)}\n    if(!identical(candidate(2468), 0)){quit('no', 1)}\n\
    }\ntest_humaneval()"
  status: OK
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {\n  # YOUR CODE\
    \ HERE\n  prod(as.numeric(gsub(\"[^[:digit:]]\", \"\", n)))\n}\ndigits(235)\n\n\
    test_humaneval <- function() {\ncandidate <- digits\n    if(!identical(candidate(5),\
    \ 5)){quit('no', 1)}\n    if(!identical(candidate(54), 5)){quit('no', 1)}\n  \
    \  if(!identical(candidate(120), 1)){quit('no', 1)}\n    if(!identical(candidate(5014),\
    \ 5)){quit('no', 1)}\n    if(!identical(candidate(98765), 315)){quit('no', 1)}\n\
    \    if(!identical(candidate(5576543), 2625)){quit('no', 1)}\n    if(!identical(candidate(2468),\
    \ 0)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b'[1] 235\n'
- exit_code: 0
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {\n  if (n <\
    \ 0) {\n    stop(\"n must be positive\")\n  }\n  if (n == 0) {\n    return(0)\n\
    \  }\n  if (n < 10) {\n    if (n %% 2 == 1) {\n      return(n)\n    } else {\n\
    \      return(0)\n    }\n  }\n  if (n %% 10 %% 2 == 1) {\n    return(n %% 10 *\
    \ digits(n %/% 10))\n  } else {\n    return(digits(n %/% 10))\n  }\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- digits\n    if(!identical(candidate(5), 5)){quit('no',\
    \ 1)}\n    if(!identical(candidate(54), 5)){quit('no', 1)}\n    if(!identical(candidate(120),\
    \ 1)){quit('no', 1)}\n    if(!identical(candidate(5014), 5)){quit('no', 1)}\n\
    \    if(!identical(candidate(98765), 315)){quit('no', 1)}\n    if(!identical(candidate(5576543),\
    \ 2625)){quit('no', 1)}\n    if(!identical(candidate(2468), 0)){quit('no', 1)}\n\
    }\ntest_humaneval()"
  status: OK
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {\n  # YOUR CODE\
    \ HERE\n  if (n == 0) {\n    return(0)\n  }\n  if (n %% 2 == 1) {\n    return(n\
    \ %% 10 * digits(n %/% 10))\n  }\n  return(digits(n %/% 10))\n}\ndigits(1)\ndigits(4)\n\
    digits(235)\n\ntest_humaneval <- function() {\ncandidate <- digits\n    if(!identical(candidate(5),\
    \ 5)){quit('no', 1)}\n    if(!identical(candidate(54), 5)){quit('no', 1)}\n  \
    \  if(!identical(candidate(120), 1)){quit('no', 1)}\n    if(!identical(candidate(5014),\
    \ 5)){quit('no', 1)}\n    if(!identical(candidate(98765), 315)){quit('no', 1)}\n\
    \    if(!identical(candidate(5576543), 2625)){quit('no', 1)}\n    if(!identical(candidate(2468),\
    \ 0)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b'[1] 0\n[1] 0\n[1] 0\n'
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {\n    if (n\
    \ == 0) {\n        return(0)\n    }\n    else {\n        return(n %% 10 * digits(floor(n\
    \ / 10)))\n    }\n}\n\ntest_humaneval <- function() {\ncandidate <- digits\n \
    \   if(!identical(candidate(5), 5)){quit('no', 1)}\n    if(!identical(candidate(54),\
    \ 5)){quit('no', 1)}\n    if(!identical(candidate(120), 1)){quit('no', 1)}\n \
    \   if(!identical(candidate(5014), 5)){quit('no', 1)}\n    if(!identical(candidate(98765),\
    \ 315)){quit('no', 1)}\n    if(!identical(candidate(5576543), 2625)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2468), 0)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 0
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {\n  # YOUR CODE\
    \ HERE\n  n <- as.character(n)\n  n <- strsplit(n, \"\")\n  n <- unlist(n)\n \
    \ n <- as.numeric(n)\n  n <- n[n %% 2 != 0]\n  if (length(n) == 0) {\n    return(0)\n\
    \  } else {\n    return(prod(n))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- digits\n    if(!identical(candidate(5), 5)){quit('no', 1)}\n    if(!identical(candidate(54),\
    \ 5)){quit('no', 1)}\n    if(!identical(candidate(120), 1)){quit('no', 1)}\n \
    \   if(!identical(candidate(5014), 5)){quit('no', 1)}\n    if(!identical(candidate(98765),\
    \ 315)){quit('no', 1)}\n    if(!identical(candidate(5576543), 2625)){quit('no',\
    \ 1)}\n    if(!identical(candidate(2468), 0)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {\n  # YOUR CODE\
    \ HERE\n  if(n == 0) {\n    return(0)\n  }\n  else {\n    if(n %% 2 == 0) {\n\
    \      return(digits(floor(n/10)))\n    }\n    else {\n      return(n %% 10 *\
    \ digits(floor(n/10)))\n    }\n  }\n}\ndigits(1)\ndigits(4)\ndigits(235)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- digits\n    if(!identical(candidate(5), 5)){quit('no',\
    \ 1)}\n    if(!identical(candidate(54), 5)){quit('no', 1)}\n    if(!identical(candidate(120),\
    \ 1)){quit('no', 1)}\n    if(!identical(candidate(5014), 5)){quit('no', 1)}\n\
    \    if(!identical(candidate(98765), 315)){quit('no', 1)}\n    if(!identical(candidate(5576543),\
    \ 2625)){quit('no', 1)}\n    if(!identical(candidate(2468), 0)){quit('no', 1)}\n\
    }\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b'[1] 0\n[1] 0\n[1] 0\n'
