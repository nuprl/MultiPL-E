name: HumanEval_14_all_prefixes
language: r
prompt: "# Return list of all prefixes from shortest to longest of the input string\n\
  # >>> all_prefixes('abc')\n# list('a', 'ab', 'abc')\nall_prefixes <- function(string)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- all_prefixes\n    if(!identical(candidate(''),\
  \ list())){quit('no', 1)}\n    if(!identical(candidate('asdfgh'), list('a', 'as',\
  \ 'asd', 'asdf', 'asdfg', 'asdfgh'))){quit('no', 1)}\n    if(!identical(candidate('WWW'),\
  \ list('W', 'WW', 'WWW'))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  prefixes <- list()\n  for (i in 1:nchar(string)) {\n    prefixes[[i]]\
    \ <- substr(string, 1, i)\n  }\n  return(prefixes)\n}\n", "\n  prefixes <- list()\n\
    \  for (i in 1:nchar(string)) {\n    prefixes[[i]] <- substr(string, 1, i)\n \
    \ }\n  return(prefixes)\n}\n", "\n  prefixes <- c()\n  for (i in 1:nchar(string))\
    \ {\n    prefixes <- c(prefixes, substr(string, 1, i))\n  }\n  return(prefixes)\n\
    }\n", "\n  prefixes <- list()\n  for (i in 1:nchar(string)) {\n    prefixes[[i]]\
    \ <- substr(string, 1, i)\n  }\n  return(prefixes)\n}\n", "\n  prefixes <- list()\n\
    \  for (i in 1:nchar(string)) {\n    prefixes <- c(prefixes, substr(string, 1,\
    \ i))\n  }\n  return(prefixes)\n}\n", "\n  prefixes <- c()\n  for (i in seq_along(string))\
    \ {\n    prefixes <- c(prefixes, substr(string, 1, i))\n  }\n  return(prefixes)\n\
    }\n", "\n  prefixes <- c()\n  for (i in 1:nchar(string)) {\n    prefixes <- c(prefixes,\
    \ substr(string, 1, i))\n  }\n  return(prefixes)\n}\n", "\n  prefixes <- list()\n\
    \  for (i in 1:nchar(string)) {\n    prefixes[[i]] <- substr(string, 1, i)\n \
    \ }\n  return(prefixes)\n}\n", "\n  prefixes <- list()\n  for (i in 1:nchar(string))\
    \ {\n    prefixes[[i]] <- substr(string, 1, i)\n  }\n  return(prefixes)\n}\n",
  "\n  prefixes <- c()\n  for (i in 1:nchar(string)) {\n    prefixes <- c(prefixes,\
    \ substr(string, 1, i))\n  }\n  return(prefixes)\n}\n", "\n  prefixes <- list()\n\
    \  for (i in 1:nchar(string)) {\n    prefixes[[i]] <- substr(string, 1, i)\n \
    \ }\n  return(prefixes)\n}\n", "\n  prefixes <- list()\n  for (i in 1:nchar(string))\
    \ {\n    prefixes[[i]] <- substr(string, 1, i)\n  }\n  return(prefixes)\n}\n",
  "\n  prefixes <- c()\n  for (i in 1:nchar(string)) {\n    prefixes <- c(prefixes,\
    \ substr(string, 1, i))\n  }\n  return(prefixes)\n}\n", "\n  prefixes <- c()\n\
    \  for (i in 1:nchar(string)) {\n    prefixes <- c(prefixes, substr(string, 1,\
    \ i))\n  }\n  return(prefixes)\n}\n", "\n  prefixes <- c()\n  for (i in 1:nchar(string))\
    \ {\n    prefixes <- c(prefixes, substr(string, 1, i))\n  }\n  return(prefixes)\n\
    }\n", "\n  prefixes <- c()\n  for (i in 1:nchar(string)) {\n    prefixes <- c(prefixes,\
    \ substr(string, 1, i))\n  }\n  return(prefixes)\n}\n", "\n  if (string == '')\
    \ {\n    return(list())\n  }\n  else {\n    return(c(list(string), all_prefixes(substr(string,\
    \ 1, nchar(string) - 1))))\n  }\n}\n", "\n  prefixes <- list()\n  for (i in 1:nchar(string))\
    \ {\n    prefixes[[i]] <- substr(string, 1, i)\n  }\n  return(prefixes)\n}\n",
  "\n  prefixes <- c()\n  for (i in seq_along(string)) {\n    prefixes <- c(prefixes,\
    \ substr(string, 1, i))\n  }\n  return(prefixes)\n}\n", "\n  prefixes <- c()\n\
    \  for (i in 1:nchar(string)) {\n    prefixes <- c(prefixes, substr(string, 1,\
    \ i))\n  }\n  return(prefixes)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
