language: r
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# list('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# list('Mary', 'lamb')\n# >>> select_words('simple white space',\
    \ 2)\n# list()\n# >>> select_words('Hello world', 4)\n# list('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# list('Uncle')\nselect_words <- function(s, n) {\n  # your code here\n\
    \  words <- unlist(strsplit(s, \" \"))\n  words <- words[nchar(words) > 0]\n \
    \ words <- words[nchar(gsub(\"[aeiouAEIOU]\", \"\", words)) == n]\n  return(words)\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
    \ had a little lamb', 4), list('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), list('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), list())){quit('no', 1)}\n    if(!identical(candidate('Hello\
    \ world', 4), list('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle\
    \ sam', 3), list('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4),\
    \ list())){quit('no', 1)}\n    if(!identical(candidate('a b c d e f', 1), list('b',\
    \ 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# list('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# list('Mary', 'lamb')\n# >>> select_words('simple white space',\
    \ 2)\n# list()\n# >>> select_words('Hello world', 4)\n# list('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# list('Uncle')\nselect_words <- function(s, n) {\n  # your code here\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
    \ had a little lamb', 4), list('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), list('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), list())){quit('no', 1)}\n    if(!identical(candidate('Hello\
    \ world', 4), list('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle\
    \ sam', 3), list('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4),\
    \ list())){quit('no', 1)}\n    if(!identical(candidate('a b c d e f', 1), list('b',\
    \ 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# list('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# list('Mary', 'lamb')\n# >>> select_words('simple white space',\
    \ 2)\n# list()\n# >>> select_words('Hello world', 4)\n# list('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# list('Uncle')\nselect_words <- function(s, n) {\n  s <- strsplit(s,\
    \ \" \")[[1]]\n  s[sapply(s, function(x) sum(grepl(\"[^aeiou]\", x)) == n)]\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
    \ had a little lamb', 4), list('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), list('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), list())){quit('no', 1)}\n    if(!identical(candidate('Hello\
    \ world', 4), list('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle\
    \ sam', 3), list('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4),\
    \ list())){quit('no', 1)}\n    if(!identical(candidate('a b c d e f', 1), list('b',\
    \ 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# list('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# list('Mary', 'lamb')\n# >>> select_words('simple white space',\
    \ 2)\n# list()\n# >>> select_words('Hello world', 4)\n# list('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# list('Uncle')\nselect_words <- function(s, n) {\n  words <- unlist(strsplit(s,\
    \ \" \"))\n  words <- words[nchar(words) > 0]\n  words <- words[nchar(gsub(\"\
    [aeiou]\", \"\", words)) == n]\n  return(words)\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- select_words\n    if(!identical(candidate('Mary had a little\
    \ lamb', 4), list('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), list('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), list())){quit('no', 1)}\n    if(!identical(candidate('Hello\
    \ world', 4), list('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle\
    \ sam', 3), list('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4),\
    \ list())){quit('no', 1)}\n    if(!identical(candidate('a b c d e f', 1), list('b',\
    \ 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# list('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# list('Mary', 'lamb')\n# >>> select_words('simple white space',\
    \ 2)\n# list()\n# >>> select_words('Hello world', 4)\n# list('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# list('Uncle')\nselect_words <- function(s, n) {\n  # your code here\n\
    }\n \ntest_humaneval <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
    \ had a little lamb', 4), list('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), list('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), list())){quit('no', 1)}\n    if(!identical(candidate('Hello\
    \ world', 4), list('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle\
    \ sam', 3), list('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4),\
    \ list())){quit('no', 1)}\n    if(!identical(candidate('a b c d e f', 1), list('b',\
    \ 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# list('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# list('Mary', 'lamb')\n# >>> select_words('simple white space',\
    \ 2)\n# list()\n# >>> select_words('Hello world', 4)\n# list('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# list('Uncle')\nselect_words <- function(s, n) {\n  words <- unlist(strsplit(s,\
    \ \" \"))\n  words <- words[nchar(words) > 0]\n  words <- words[nchar(gsub(\"\
    [aeiou]\", \"\", words)) == n]\n  return(words)\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- select_words\n    if(!identical(candidate('Mary had a little\
    \ lamb', 4), list('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), list('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), list())){quit('no', 1)}\n    if(!identical(candidate('Hello\
    \ world', 4), list('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle\
    \ sam', 3), list('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4),\
    \ list())){quit('no', 1)}\n    if(!identical(candidate('a b c d e f', 1), list('b',\
    \ 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# list('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# list('Mary', 'lamb')\n# >>> select_words('simple white space',\
    \ 2)\n# list()\n# >>> select_words('Hello world', 4)\n# list('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# list('Uncle')\nselect_words <- function(s, n) {\n  # your code here\n\
    }\n \ntest_humaneval <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
    \ had a little lamb', 4), list('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), list('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), list())){quit('no', 1)}\n    if(!identical(candidate('Hello\
    \ world', 4), list('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle\
    \ sam', 3), list('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4),\
    \ list())){quit('no', 1)}\n    if(!identical(candidate('a b c d e f', 1), list('b',\
    \ 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# list('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# list('Mary', 'lamb')\n# >>> select_words('simple white space',\
    \ 2)\n# list()\n# >>> select_words('Hello world', 4)\n# list('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# list('Uncle')\nselect_words <- function(s, n) {\n  # your code here\n\
    }\n \ntest_humaneval <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
    \ had a little lamb', 4), list('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), list('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), list())){quit('no', 1)}\n    if(!identical(candidate('Hello\
    \ world', 4), list('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle\
    \ sam', 3), list('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4),\
    \ list())){quit('no', 1)}\n    if(!identical(candidate('a b c d e f', 1), list('b',\
    \ 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# list('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# list('Mary', 'lamb')\n# >>> select_words('simple white space',\
    \ 2)\n# list()\n# >>> select_words('Hello world', 4)\n# list('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# list('Uncle')\nselect_words <- function(s, n) {\n  # your code here\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
    \ had a little lamb', 4), list('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), list('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), list())){quit('no', 1)}\n    if(!identical(candidate('Hello\
    \ world', 4), list('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle\
    \ sam', 3), list('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4),\
    \ list())){quit('no', 1)}\n    if(!identical(candidate('a b c d e f', 1), list('b',\
    \ 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# list('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# list('Mary', 'lamb')\n# >>> select_words('simple white space',\
    \ 2)\n# list()\n# >>> select_words('Hello world', 4)\n# list('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# list('Uncle')\nselect_words <- function(s, n) {\n  words <- strsplit(s,\
    \ \" \")[[1]]\n  words[nchar(gsub(\"[aeiou]\", \"\", words)) == n]\n}\nselect_words('Mary\
    \ had a little lamb', 4)\n\ntest_humaneval <- function() {\ncandidate <- select_words\n\
    \    if(!identical(candidate('Mary had a little lamb', 4), list('little'))){quit('no',\
    \ 1)}\n    if(!identical(candidate('Mary had a little lamb', 3), list('Mary',\
    \ 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple white space',\
    \ 2), list())){quit('no', 1)}\n    if(!identical(candidate('Hello world', 4),\
    \ list('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle sam', 3),\
    \ list('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4), list())){quit('no',\
    \ 1)}\n    if(!identical(candidate('a b c d e f', 1), list('b', 'c', 'd', 'f'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b'[1] "little"\n'
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# list('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# list('Mary', 'lamb')\n# >>> select_words('simple white space',\
    \ 2)\n# list()\n# >>> select_words('Hello world', 4)\n# list('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# list('Uncle')\nselect_words <- function(s, n) {\n  words <- unlist(strsplit(s,\
    \ \" \"))\n  words <- words[nchar(words) > 0]\n  words <- words[nchar(gsub(\"\
    [aeiou]\", \"\", words)) == n]\n  return(words)\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- select_words\n    if(!identical(candidate('Mary had a little\
    \ lamb', 4), list('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), list('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), list())){quit('no', 1)}\n    if(!identical(candidate('Hello\
    \ world', 4), list('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle\
    \ sam', 3), list('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4),\
    \ list())){quit('no', 1)}\n    if(!identical(candidate('a b c d e f', 1), list('b',\
    \ 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# list('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# list('Mary', 'lamb')\n# >>> select_words('simple white space',\
    \ 2)\n# list()\n# >>> select_words('Hello world', 4)\n# list('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# list('Uncle')\nselect_words <- function(s, n) {\n  words <- unlist(strsplit(s,\
    \ \" \"))\n  words <- words[nchar(words) > 0]\n  words <- words[nchar(gsub(\"\
    [aeiou]\", \"\", words)) == n]\n  return(words)\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- select_words\n    if(!identical(candidate('Mary had a little\
    \ lamb', 4), list('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), list('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), list())){quit('no', 1)}\n    if(!identical(candidate('Hello\
    \ world', 4), list('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle\
    \ sam', 3), list('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4),\
    \ list())){quit('no', 1)}\n    if(!identical(candidate('a b c d e f', 1), list('b',\
    \ 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# list('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# list('Mary', 'lamb')\n# >>> select_words('simple white space',\
    \ 2)\n# list()\n# >>> select_words('Hello world', 4)\n# list('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# list('Uncle')\nselect_words <- function(s, n) {\n  # your code here\n\
    \  s <- strsplit(s, \" \")[[1]]\n  s <- s[nchar(s) == n]\n  return(s)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
    \ had a little lamb', 4), list('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), list('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), list())){quit('no', 1)}\n    if(!identical(candidate('Hello\
    \ world', 4), list('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle\
    \ sam', 3), list('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4),\
    \ list())){quit('no', 1)}\n    if(!identical(candidate('a b c d e f', 1), list('b',\
    \ 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# list('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# list('Mary', 'lamb')\n# >>> select_words('simple white space',\
    \ 2)\n# list()\n# >>> select_words('Hello world', 4)\n# list('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# list('Uncle')\nselect_words <- function(s, n) {\n  # your code here\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
    \ had a little lamb', 4), list('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), list('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), list())){quit('no', 1)}\n    if(!identical(candidate('Hello\
    \ world', 4), list('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle\
    \ sam', 3), list('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4),\
    \ list())){quit('no', 1)}\n    if(!identical(candidate('a b c d e f', 1), list('b',\
    \ 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# list('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# list('Mary', 'lamb')\n# >>> select_words('simple white space',\
    \ 2)\n# list()\n# >>> select_words('Hello world', 4)\n# list('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# list('Uncle')\nselect_words <- function(s, n) {\n  # Your code here\n\
    \  # You can create other functions as well\n  # You can use any of the string\
    \ functions from the slides\n  # You can use any of the functions from the stringr\
    \ package\n  # You can use any of the functions from the stringi package\n  #\
    \ You can use any of the functions from the stringdist package\n  # You can use\
    \ any of the functions from the stringi package\n  # You can use any of the functions\
    \ from the stringdist package\n  # You can use any of the functions from the stringdist\
    \ package\n  # You can use any of the functions from the stringdist package\n\
    \  # You can use any of the functions from the stringdist package\n  # You can\
    \ use any of the functions from the stringdist package\n  # You can use any of\
    \ the functions from the stringdist package\n  # You can use any of the functions\
    \ from the stringdist package\n  # You can use any of the functions from the stringdist\
    \ package\n  # You can use any of the functions from the stringdist package\n\
    \  # You can use any of the functions from the stringdist package\n  # You can\
    \ use any of the functions from the stringdist package\n  # You can use any of\
    \ the functions from the stringdist package\n  # You can use any of the functions\
    \ from the stringdist package\n  # You can use any of the functions from the stringdist\
    \ package\n  # You can use any of the functions from the stringdist package\n\
    \  # You can use any of the functions from the stringdist package\n  # You can\
    \ use any of the functions from the stringdist package\n  # You can use any of\
    \ the functions from the stringdist package\n  # You can use any of the functions\
    \ from the stringdist package\n  # You can use any of the functions from the stringdist\
    \ package\n  # You can use any of the functions from the stringdist package\n\
    \  # You can use any of the functions from the stringdist package\n  # You can\
    \ use any of the functions from the stringdist package\n  # You can use any of\
    \ the functions from the stringdist package\n  # You can use any of the functions\
    \ from the stringdist package\n  # You can use any of the functions from the stringdist\
    \ package\n  # You can use any of the functions from the stringdist package\n\
    \  # You can use any of the functions from the stringdist package\n\ntest_humaneval\
    \ <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
    \ had a little lamb', 4), list('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), list('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), list())){quit('no', 1)}\n    if(!identical(candidate('Hello\
    \ world', 4), list('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle\
    \ sam', 3), list('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4),\
    \ list())){quit('no', 1)}\n    if(!identical(candidate('a b c d e f', 1), list('b',\
    \ 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: SyntaxError
  stderr: 'b''During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \nError: unexpected end of input\nExecution halted\n'''
  stdout: b''
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# list('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# list('Mary', 'lamb')\n# >>> select_words('simple white space',\
    \ 2)\n# list()\n# >>> select_words('Hello world', 4)\n# list('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# list('Uncle')\nselect_words <- function(s, n) {\n  # your code here\n\
    }\n \ntest_humaneval <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
    \ had a little lamb', 4), list('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), list('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), list())){quit('no', 1)}\n    if(!identical(candidate('Hello\
    \ world', 4), list('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle\
    \ sam', 3), list('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4),\
    \ list())){quit('no', 1)}\n    if(!identical(candidate('a b c d e f', 1), list('b',\
    \ 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# list('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# list('Mary', 'lamb')\n# >>> select_words('simple white space',\
    \ 2)\n# list()\n# >>> select_words('Hello world', 4)\n# list('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# list('Uncle')\nselect_words <- function(s, n) {\n  words <- strsplit(s,\
    \ \" \")[[1]]\n  words[sapply(words, function(x) sum(!grepl(\"[aeiou]\", x)) ==\
    \ n)]\n}\n\ntest_humaneval <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
    \ had a little lamb', 4), list('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), list('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), list())){quit('no', 1)}\n    if(!identical(candidate('Hello\
    \ world', 4), list('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle\
    \ sam', 3), list('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4),\
    \ list())){quit('no', 1)}\n    if(!identical(candidate('a b c d e f', 1), list('b',\
    \ 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# list('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# list('Mary', 'lamb')\n# >>> select_words('simple white space',\
    \ 2)\n# list()\n# >>> select_words('Hello world', 4)\n# list('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# list('Uncle')\nselect_words <- function(s, n) {\n  words <- unlist(strsplit(s,\
    \ \" \"))\n  words[nchar(gsub(\"[aeiouAEIOU]\", \"\", words)) == n]\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
    \ had a little lamb', 4), list('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), list('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), list())){quit('no', 1)}\n    if(!identical(candidate('Hello\
    \ world', 4), list('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle\
    \ sam', 3), list('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4),\
    \ list())){quit('no', 1)}\n    if(!identical(candidate('a b c d e f', 1), list('b',\
    \ 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# list('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# list('Mary', 'lamb')\n# >>> select_words('simple white space',\
    \ 2)\n# list()\n# >>> select_words('Hello world', 4)\n# list('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# list('Uncle')\nselect_words <- function(s, n) {\n    # Your code\
    \ here\n    # You may find the following functions useful:\n    # strsplit, nchar,\
    \ grep, tolower\n    # You may also find the following regular expression useful:\n\
    \    # [^aeiou]\n    # You may also find the following function useful:\n    #\
    \ paste\n}\n \ntest_humaneval <- function() {\ncandidate <- select_words\n   \
    \ if(!identical(candidate('Mary had a little lamb', 4), list('little'))){quit('no',\
    \ 1)}\n    if(!identical(candidate('Mary had a little lamb', 3), list('Mary',\
    \ 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple white space',\
    \ 2), list())){quit('no', 1)}\n    if(!identical(candidate('Hello world', 4),\
    \ list('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle sam', 3),\
    \ list('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4), list())){quit('no',\
    \ 1)}\n    if(!identical(candidate('a b c d e f', 1), list('b', 'c', 'd', 'f'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
    \ had a little lamb', 4)\n# list('little')\n# >>> select_words('Mary had a little\
    \ lamb', 3)\n# list('Mary', 'lamb')\n# >>> select_words('simple white space',\
    \ 2)\n# list()\n# >>> select_words('Hello world', 4)\n# list('world')\n# >>> select_words('Uncle\
    \ sam', 3)\n# list('Uncle')\nselect_words <- function(s, n) {\n  # your code here\n\
    }\n \ntest_humaneval <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
    \ had a little lamb', 4), list('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
    \ had a little lamb', 3), list('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
    \ white space', 2), list())){quit('no', 1)}\n    if(!identical(candidate('Hello\
    \ world', 4), list('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle\
    \ sam', 3), list('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4),\
    \ list())){quit('no', 1)}\n    if(!identical(candidate('a b c d e f', 1), list('b',\
    \ 'c', 'd', 'f'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: b'During startup - Warning message:\nSetting LC_CTYPE failed, using "C"
    \n'
  stdout: b''
