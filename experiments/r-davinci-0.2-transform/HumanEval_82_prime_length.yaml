name: HumanEval_82_prime_length
language: r
prompt: "# Write a function that takes a string and returns True if the string\n#\
  \ length is a prime number or False otherwise\n# Examples\n# >>> prime_length('Hello')\n\
  # TRUE\n# >>> prime_length('abcdcba')\n# TRUE\n# >>> prime_length('kittens')\n#\
  \ TRUE\n# >>> prime_length('orange')\n# FALSE\nprime_length <- function(string)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- prime_length\n    if(!identical(candidate('Hello'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('abcdcba'), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('kittens'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('orange'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('wow'), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('world'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('MadaM'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('Wow'), TRUE)){quit('no', 1)}\n\
  \    if(!identical(candidate(''), FALSE)){quit('no', 1)}\n    if(!identical(candidate('HI'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('go'), TRUE)){quit('no', 1)}\n\
  \    if(!identical(candidate('gogo'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('aaaaaaaaaaaaaaa'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('Madam'), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('M'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('0'),\
  \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n    length(string) %% 2 == 0\n}\n\nprime_length('Hello')\nprime_length('abcdcba')\n\
    prime_length('kittens')\nprime_length('orange')\n", "\n  length(string) %% 2 ==\
    \ 0\n}\n", "\n  length(string) %% 2 == 0\n}\n", "\n  length(string) %% 2 == 1\n\
    }\n", "\n  length(string) %% 2 == 0\n}\nprime_length('Hello')\nprime_length('abcdcba')\n\
    prime_length('kittens')\nprime_length('orange')\n", "\n  length(string) %% 2 ==\
    \ 0\n}\n", "\n  length(string) %% 2 == 0\n}\n\nprime_length('Hello')\nprime_length('abcdcba')\n\
    prime_length('kittens')\nprime_length('orange')\n", "\n  length(string) %% 2 ==\
    \ 0\n}\n\nprime_length('Hello')\nprime_length('abcdcba')\nprime_length('kittens')\n\
    prime_length('orange')\n", "\n  if (is.prime(nchar(string))) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\n", "\n  length(string) %% 2 == 1\n}\n",
  "\n  length(string) %% 2 == 1\n}\n", "\n  length(string) %% 2 == 1\n}\n", "\n  length_string\
    \ <- nchar(string)\n  if (length_string == 2) {\n    return(TRUE)\n  }\n  for\
    \ (i in 2:(length_string - 1)) {\n    if (length_string %% i == 0) {\n      return(FALSE)\n\
    \    }\n  }\n  return(TRUE)\n}\n", "\n    length(string) %% 2 == 0\n}\nprime_length('Hello')\n\
    prime_length('abcdcba')\nprime_length('kittens')\nprime_length('orange')\n", "\n\
    \  length(string) %% 2 == 1\n}\n", "\n  if (is.prime(nchar(string))) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\n", "\n  length(string) %% 2 == 0\n}\n",
  "\n  length(string) %% 2 == 0\n}\n", "\n  length(string) %% 2 == 0\n}\n\nprime_length('Hello')\n\
    prime_length('abcdcba')\nprime_length('kittens')\nprime_length('orange')\n", "\n\
    \  length(string) %% 2 == 0\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
