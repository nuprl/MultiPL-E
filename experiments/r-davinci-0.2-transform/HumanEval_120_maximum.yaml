name: HumanEval_120_maximum
language: r
prompt: "# Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>> maximum(c(-3,\
  \ -4, 5), 3)\n# list(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4, 4), 2)\n#\
  \ list(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n# list(2)\n\
  # Note:\n# 1. The length of the array will be in the range of [1, 1000].\n# 2. The\
  \ elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n\
  maximum <- function(arr, k) {"
tests: "test_humaneval <- function() {\ncandidate <- maximum\n    if(!identical(candidate(c(-3,\
  \ -4, 5), 3), list(-4, -3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
  \ -4, 4), 2), list(4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-3, 2,\
  \ 1, 2, -1, -2, 1), 1), list(2))){quit('no', 1)}\n    if(!identical(candidate(c(123,\
  \ -123, 20, 0, 1, 2, -3), 3), list(2, 20, 123))){quit('no', 1)}\n    if(!identical(candidate(c(-123,\
  \ 20, 0, 1, 2, -3), 4), list(0, 1, 2, 20))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
  \ 15, 0, 3, -13, -8, 0), 7), list(-13, -8, 0, 0, 3, 5, 15))){quit('no', 1)}\n  \
  \  if(!identical(candidate(c(-1, 0, 2, 5, 3, -10), 2), list(3, 5))){quit('no', 1)}\n\
  \    if(!identical(candidate(c(1, 0, 5, -7), 1), list(5))){quit('no', 1)}\n    if(!identical(candidate(c(4,\
  \ -4), 2), list(-4, 4))){quit('no', 1)}\n    if(!identical(candidate(c(-10, 10),\
  \ 2), list(-10, 10))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -23,\
  \ 243, -400, 0), 0), list())){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  # Write your code here\n}\n", "\n  # Write your code here\n  #\
    \ Sort the array in descending order\n  # Return the first k elements\n  sort(arr,\
    \ decreasing = TRUE)[1:k]\n}\n", "\n  return(sort(arr, decreasing = TRUE)[1:k])\n\
    }\n", "\n  # Write your code here\n  # Sort the array in descending order\n  #\
    \ Return the first k elements\n  sort(arr, decreasing = TRUE)[1:k]\n}\n", "\n\
    \  # Your code here\n}", "\n  # TODO: implement this function\n  return(sort(arr,\
    \ decreasing = TRUE)[1:k])\n}\n", "\n  # Your code here\n  # return(arr)\n  return(sort(arr,\
    \ decreasing = TRUE)[1:k])\n}\n", "\n  # Your code here\n}\n", "\n  # Your code\
    \ here\n}", "\n    # Your code here\n}\n ", "\n  # Your code here\n}", "\n  #\
    \ TODO: Write your code here\n  # return(arr)\n  # return(sort(arr, decreasing\
    \ = TRUE)[1:k])\n  return(sort(arr, decreasing = TRUE)[seq_len(k)])\n}\n", "\n\
    \  # Write your code here\n  return(sort(arr, decreasing = TRUE)[1:k])\n}\n",
  "\n  # Your code here\n}", "\n  # Write your code here\n}", "\n    # Write your\
    \ code here\n    return(sort(arr, decreasing = TRUE)[1:k])\n}\n", "\n  # Your\
    \ code here\n  return(sort(arr, decreasing = TRUE)[1:k])\n}\n", "\n  # Your code\
    \ here\n}\n", "\n  # Your code here\n}", "\n  # Write your code here\n  return(sort(arr,\
    \ decreasing = TRUE)[1:k])\n}\n", "\n  return(sort(arr, decreasing = TRUE)[1:k])\n\
    }\n", "\n  # Write your code here\n  arr[order(arr, decreasing = TRUE)][1:k]\n\
    }\n", "\n  arr[order(arr, decreasing = TRUE)[1:k]]\n}\n", "\n  arr[order(arr,\
    \ decreasing = TRUE)][1:k]\n}\n", "\n    sort(arr, decreasing = TRUE)[1:k]\n}\n",
  "\n  # Write your code here\n  sort(arr, decreasing = TRUE)[1:k]\n}\n", "\n  arr[order(arr,\
    \ decreasing = TRUE)][1:k]\n}\n", "\n  if (k == 0) {\n    return(list())\n  }\n\
    \  if (k == 1) {\n    return(list(max(arr)))\n  }\n  if (k == length(arr)) {\n\
    \    return(sort(arr))\n  }\n  if (k > length(arr)) {\n    return(sort(arr))\n\
    \  }\n  if (k < length(arr)) {\n    return(sort(arr)[length(arr):(length(arr)-k+1)])\n\
    \  }\n}\n", "\n  # Write your code here\n}", "\n    # Write your code here\n \
    \   arr[order(arr, decreasing = TRUE)][1:k]\n}\n", "\n  # Write your code here\n\
    \  # Sort the array\n  # Return the first k elements\n  sort(arr, decreasing =\
    \ TRUE)[1:k]\n}\n", "\n  arr[order(arr, decreasing = TRUE)[1:k]]\n}\n", "\n  #\
    \ your code here\n}\n", "\n  # Write your code here\n  # sort(arr, decreasing\
    \ = TRUE)[1:k]\n  sort(arr, decreasing = TRUE)[seq_len(k)]\n}\n", "\n  arr[order(arr,\
    \ decreasing = TRUE)[1:k]]\n}\n", "\n  # Write your code here\n  # Sort the array\n\
    \  # Return the first k elements\n  return(sort(arr, decreasing = TRUE)[1:k])\n\
    }\n", "\n  if (k == 0) {\n    return(list())\n  }\n  arr <- sort(arr, decreasing\
    \ = TRUE)\n  return(arr[1:k])\n}\n", "\n    if (k == 0) return(list())\n    if\
    \ (k == 1) return(list(max(arr)))\n    if (k == length(arr)) return(sort(arr,\
    \ decreasing = TRUE))\n    if (k > length(arr)) return(sort(arr, decreasing =\
    \ TRUE))\n    if (k < length(arr)) {\n        arr <- sort(arr, decreasing = TRUE)\n\
    \        return(arr[1:k])\n    }\n}\n", "\n  arr[order(arr, decreasing = TRUE)][1:k]\n\
    }\n", "\n  # Write your code here\n  # Sort the array in descending order\n  arr\
    \ <- sort(arr, decreasing = TRUE)\n  # Return the first k elements\n  return(arr[1:k])\n\
    }\n", "\n  sort(arr, decreasing = TRUE)[1:k]\n}\n", "\n  # Your code here\n  arr[order(arr,\
    \ decreasing = TRUE)[1:k]]\n}\n", "\n  # Write your code here\n  arr[order(arr,\
    \ decreasing = TRUE)[1:k]]\n}\n", "\n  # Your code here\n}", "\n  # Your code\
    \ here\n}", "\n  sort(arr, decreasing = TRUE)[1:k]\n}\n", "\n  # Write your code\
    \ here\n  # Sort the array in descending order\n  # Return the first k elements\n\
    \  sort(arr, decreasing = TRUE)[1:k]\n}\n", "\n  # Your code here\n  return(sort(arr,\
    \ decreasing = TRUE)[1:k])\n}\n", "\n  arr[order(arr, decreasing = TRUE)][1:k]\n\
    }\n", "\n  # Write your code here\n  return(sort(arr, decreasing = TRUE)[1:k])\n\
    }\n", "\n    sort(arr, decreasing = TRUE)[1:k]\n}\n", "\n    arr[order(arr, decreasing\
    \ = TRUE)][1:k]\n}\n", "\n    # Write your code here\n    arr[order(arr, decreasing\
    \ = TRUE)][1:k]\n}\n", "\n  # Your code here\n}", "\n  # Your code here\n}", "\n\
    \  # Your code here\n  return(sort(arr, decreasing = TRUE)[1:k])\n}\n", "\n  \
    \  sort(arr, decreasing = TRUE)[1:k]\n}\n", "\n  # Your code here\n}\n", "\n \
    \ # Your code here\n  return(sort(arr, decreasing = TRUE)[1:k])\n}\n", "\n  #\
    \ Write your code here\n  # Sort the array in descending order\n  arr <- sort(arr,\
    \ decreasing = TRUE)\n  # Return the first k elements\n  return(arr[1:k])\n}\n",
  "\n  # Your code here\n}", "\n  # Write your code here\n  # sort(arr, decreasing\
    \ = TRUE)[1:k]\n  # sort(arr, decreasing = TRUE)[seq_len(k)]\n  sort(arr, decreasing\
    \ = TRUE)[seq(k)]\n}\n", "\n  # Write your code here\n  return(sort(arr, decreasing\
    \ = TRUE)[1:k])\n}\n", "\n  # Your code here\n}\n", "\n  sort(arr, decreasing\
    \ = TRUE)[1:k]\n}\n", "\n  # Write your code here\n  return(sort(arr, decreasing\
    \ = TRUE)[1:k])\n}\n", "\n  # Write your code here\n  # Sort the array in descending\
    \ order\n  arr <- sort(arr, decreasing = TRUE)\n  # Return the first k elements\n\
    \  return(arr[1:k])\n}\n", "\n  # Write your code here\n  arr[order(arr, decreasing\
    \ = TRUE)][1:k]\n}\n", "\n  # Write your code here\n  # sort(arr, decreasing =\
    \ TRUE)[1:k]\n  # sort(arr, decreasing = TRUE)[seq_len(k)]\n  # sort(arr, decreasing\
    \ = TRUE)[seq(k)]\n  sort(arr, decreasing = TRUE)[seq_len(k)]\n}\n", "\n    arr[order(arr,\
    \ decreasing = TRUE)][1:k]\n}\n", "\n  # Write your code here\n  # Sort the array\
    \ in descending order\n  arr <- sort(arr, decreasing = TRUE)\n  # Return the first\
    \ k elements\n  return(arr[1:k])\n}\n", "\n  # Your code here\n}", "\n  # Your\
    \ code here\n}", "\n  # Write your code here\n  # Sort the array in descending\
    \ order\n  arr <- sort(arr, decreasing = TRUE)\n  # Return the first k elements\n\
    \  return(arr[1:k])\n}\n", "\n  arr[order(arr, decreasing = TRUE)][1:k]\n}\n",
  "\n    if (k == 0) return(list())\n    if (k == 1) return(list(max(arr)))\n    if\
    \ (k == length(arr)) return(sort(arr, decreasing = TRUE))\n    if (k > length(arr))\
    \ return(sort(arr, decreasing = TRUE))\n    if (k < length(arr)) {\n        arr\
    \ <- sort(arr, decreasing = TRUE)\n        return(arr[1:k])\n    }\n}\n", "\n\
    \  # Your code here\n}", "\n  # Your code here\n}", "\n  # Your code here\n}",
  "\n  # Your code here\n}", "\n  # Write your code here\n  # return(sort(arr, decreasing\
    \ = TRUE)[1:k])\n  return(sort(arr, decreasing = TRUE)[seq_len(k)])\n}\nmaximum(c(-3,\
    \ -4, 5), 3)\nmaximum(c(4, -4, 4), 2)\nmaximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n",
  "\n  # Write your code here\n  return(sort(arr, decreasing = TRUE)[1:k])\n}\n",
  "\n  # Your code here\n}", "\n  # TODO\n}\n", "\n  if (k == 1) {\n    return(max(arr))\n\
    \  }\n  else {\n    return(sort(arr, decreasing = TRUE)[1:k])\n  }\n}\n", "\n\
    \  # Write your code here\n  if (k == 0) {\n    return(list())\n  }\n  if (k ==\
    \ 1) {\n    return(list(max(arr)))\n  }\n  if (k == length(arr)) {\n    return(sort(arr))\n\
    \  }\n  if (k > length(arr)) {\n    return(sort(arr, decreasing = TRUE))\n  }\n\
    \  if (k < length(arr)) {\n    return(sort(arr, decreasing = TRUE)[1:k])\n  }\n\
    }\n", "\n  # Your code here\n}", "\n    # Write your code here\n    return(sort(arr,\
    \ decreasing = TRUE)[1:k])\n}\n", "\n    if (length(arr) == 0) {\n        return(NULL)\n\
    \    }\n    if (k > length(arr)) {\n        k <- length(arr)\n    }\n    return(sort(arr,\
    \ decreasing = TRUE)[1:k])\n}\n", "\n  # Your code here\n}", "\n  # Write your\
    \ code here\n  return(sort(arr, decreasing = TRUE)[1:k])\n}\n", "\n  # Your code\
    \ here\n}", "\n  # Your code here\n}", "\n  arr[order(arr, decreasing = TRUE)][1:k]\n\
    }\n", "\n  # Your code here\n}\n", "\n  # Write your code here\n}", "\n  # Write\
    \ your code here\n  # Sort the array in descending order\n  arr <- sort(arr, decreasing\
    \ = TRUE)\n  # Return the first k elements\n  return(arr[1:k])\n}\n", "\n  sort(arr,\
    \ decreasing = TRUE)[1:k]\n}\n", "\n  # Your code here\n}", "\n  # Your code here\n\
    }\n ", "\n  sort(arr, decreasing = TRUE)[1:k]\n}\n", "\n  # Your code here\n}",
  "\n  # Your code here\n}", "\n  # your code here\n}"]
stop_tokens:
- "\n#"
- "\n```"
