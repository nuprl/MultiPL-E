name: HumanEval_16_count_distinct_characters
language: r
prompt: "# Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n# >>> count_distinct_characters('xyzXYZ')\n# 3\n# >>> count_distinct_characters('Jerry')\n\
  # 4\ncount_distinct_characters <- function(string) {"
tests: "test_humaneval <- function() {\ncandidate <- count_distinct_characters\n \
  \   if(!identical(candidate(''), 0)){quit('no', 1)}\n    if(!identical(candidate('abcde'),\
  \ 5)){quit('no', 1)}\n    if(!identical(candidate('abcdecadeCADE'), 5)){quit('no',\
  \ 1)}\n    if(!identical(candidate('aaaaAAAAaaaa'), 1)){quit('no', 1)}\n    if(!identical(candidate('Jerry\
  \ jERRY JeRRRY'), 5)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  # your code here\n}\n", "\n  string <- tolower(string)\n  return(length(unique(string)))\n\
    }\n", "\n  return(length(unique(tolower(string))))\n}\n", "\n  string <- tolower(string)\n\
    \  return(length(unique(string)))\n}\n", "\n  return(length(unique(strsplit(string,\
    \ \"\")[[1]])))\n}\n", "\n  string <- tolower(string)\n  unique(string) %>% length()\n\
    }\n", "\n  return(length(unique(tolower(string))))\n}\n", "\n  return(length(unique(strsplit(string,\
    \ \"\")[[1]])))\n}\n", "\n  string <- tolower(string)\n  return(length(unique(string)))\n\
    }\n", "\n  # your code here\n  return(length(unique(tolower(string))))\n}\n",
  "\n  string <- tolower(string)\n  return(length(unique(string)))\n}\n", "\n  return(length(unique(tolower(string))))\n\
    }\n", "\n  return(length(unique(tolower(string))))\n}\n", "\n  return(length(unique(strsplit(string,\
    \ \"\")[[1]])))\n}\n", "\n  string <- tolower(string)\n  return(length(unique(string)))\n\
    }\n", "\n  # your code here\n}\n", "\n  string <- tolower(string)\n  return(length(unique(string)))\n\
    }\n", "\n    # your code here\n    return(length(unique(tolower(string))))\n}\n",
  "\n  string <- tolower(string)\n  return(length(unique(string)))\n}\n", "\n  return(length(unique(tolower(string))))\n\
    }\n"]
stop_tokens:
- "\n#"
- "\n```"
