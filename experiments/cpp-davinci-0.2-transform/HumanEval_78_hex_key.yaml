name: HumanEval_78_hex_key
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to write\
  \ a function that receives \n// a hexadecimal number as a string and counts the\
  \ number of hexadecimal \n// digits that are primes (prime number, or a prime, is\
  \ a natural number \n// greater than 1 that is not a product of two smaller natural\
  \ numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D,\
  \ E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine\
  \ a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal\
  \ 13).\n// Note: you may assume the input is always correct or empty string, \n\
  // and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key((\"\
  AB\"))\n// (1)\n// >>> hex_key((\"1077E\"))\n// (2)\n// >>> hex_key((\"ABED1A33\"\
  ))\n// (4)\n// >>> hex_key((\"123456789ABCDEF0\"))\n// (6)\n// >>> hex_key((\"2020\"\
  ))\n// (2)\nlong hex_key(std::string num) {\n"
tests: "}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\"\
  )) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
  ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
  123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
  )) == (12));\n}\n"
completions: ["    std::map<char, int> m;\n    m['0'] = 0;\n    m['1'] = 1;\n    m['2']\
    \ = 2;\n    m['3'] = 3;\n    m['4'] = 4;\n    m['5'] = 5;\n    m['6'] = 6;\n \
    \   m['7'] = 7;\n    m['8'] = 8;\n    m['9'] = 9;\n    m['A'] = 10;\n    m['B']\
    \ = 11;\n    m['C'] = 12;\n    m['D'] = 13;\n    m['E'] = 14;\n    m['F'] = 15;\n\
    \    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(m[num[i]]\
    \ == 2 || m[num[i]] == 3 || m[num[i]] == 5 || m[num[i]] == 7 || m[num[i]] == 11\
    \ || m[num[i]] == 13) {\n            count++;\n        }\n    }\n    return count;",
  "    int count = 0;\n    std::string hex = \"2357BDF\";\n    for(int i = 0; i <\
    \ num.length(); i++){\n        for(int j = 0; j < hex.length(); j++){\n      \
    \      if(num[i] == hex[j]){\n                count++;\n            }\n      \
    \  }\n    }\n    return count;", "    std::string hex_digits = \"2357BDF\";\n\
    \    long count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if\
    \ (hex_digits.find(num[i]) != std::string::npos) {\n            count++;\n   \
    \     }\n    }\n    return count;", "    std::map<char, int> hex_map = {\n   \
    \     {'0', 0},\n        {'1', 1},\n        {'2', 2},\n        {'3', 3},\n   \
    \     {'4', 4},\n        {'5', 5},\n        {'6', 6},\n        {'7', 7},\n   \
    \     {'8', 8},\n        {'9', 9},\n        {'A', 10},\n        {'B', 11},\n \
    \       {'C', 12},\n        {'D', 13},\n        {'E', 14},\n        {'F', 15}\n\
    \    };\n    std::set<int> primes = {2, 3, 5, 7, 11, 13};\n    int count = 0;\n\
    \    for (int i = 0; i < num.size(); i++) {\n        if (primes.find(hex_map[num[i]])\
    \ != primes.end()) {\n            count++;\n        }\n    }\n    return count;",
  "    std::string hex = \"0123456789ABCDEF\";\n    std::string prime = \"2357BDF\"\
    ;\n    long count = 0;\n    for(int i = 0; i < num.length(); i++){\n        for(int\
    \ j = 0; j < prime.length(); j++){\n            if(num[i] == prime[j]){\n    \
    \            count++;\n            }\n        }\n    }\n    return count;", " \
    \   int count = 0;\n    for(int i = 0; i < num.length(); i++){\n        if(num[i]\
    \ == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' ||\
    \ num[i] == 'D'){\n            count++;\n        }\n    }\n    return count;",
  "    std::string hex = \"0123456789ABCDEF\";\n    std::string primes = \"2357BD\"\
    ;\n    int count = 0;\n    for(int i = 0; i < num.length(); i++){\n        for(int\
    \ j = 0; j < primes.length(); j++){\n            if(num[i] == primes[j]){\n  \
    \              count++;\n            }\n        }\n    }\n    return count;",
  "  std::string primes = \"2357BD\";\n  std::string hex = \"0123456789ABCDEF\";\n\
    \  long count = 0;\n  for (int i = 0; i < num.length(); i++) {\n    if (primes.find(num[i])\
    \ != std::string::npos) {\n      count++;\n    }\n  }\n  return count;", "   \
    \ std::string primes = \"2357BD\";\n    long count = 0;\n    for (int i = 0; i\
    \ < num.length(); i++) {\n        if (primes.find(num[i]) != std::string::npos)\
    \ {\n            count++;\n        }\n    }\n    return count;", "    // your\
    \ code here\n    long count = 0;\n    for(int i = 0; i < num.length(); i++){\n\
    \        if(num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' ||\
    \ num[i] == 'B' || num[i] == 'D'){\n            count++;\n        }\n    }\n \
    \   return count;", "    std::map<char, int> m;\n    m['2'] = 2;\n    m['3'] =\
    \ 3;\n    m['5'] = 5;\n    m['7'] = 7;\n    m['B'] = 11;\n    m['D'] = 13;\n \
    \   int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(m.find(num[i])\
    \ != m.end()) {\n            count++;\n        }\n    }\n    return count;", " \
    \   std::string hex = \"0123456789ABCDEF\";\n    std::string prime = \"2357BD\"\
    ;\n    int count = 0;\n    for(int i = 0; i < num.length(); i++){\n        for(int\
    \ j = 0; j < prime.length(); j++){\n            if(num[i] == prime[j]){\n    \
    \            count++;\n            }\n        }\n    }\n    return count;", " \
    \   long count = 0;\n    for(int i = 0; i < num.length(); i++){\n        if(num[i]\
    \ == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' ||\
    \ num[i] == 'D'){\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for(int i = 0; i < num.length(); i++){\n        if(num[i]\
    \ == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' ||\
    \ num[i] == 'D'){\n            count++;\n        }\n    }\n    return count;",
  "    int count = 0;\n    for(int i = 0; i < num.length(); i++){\n        if(num[i]\
    \ == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' ||\
    \ num[i] == 'D'){\n            count++;\n        }\n    }\n    return count;",
  "    // your code here\n    long count = 0;\n    std::map<char, int> hex_map;\n\
    \    hex_map['0'] = 0;\n    hex_map['1'] = 1;\n    hex_map['2'] = 2;\n    hex_map['3']\
    \ = 3;\n    hex_map['4'] = 4;\n    hex_map['5'] = 5;\n    hex_map['6'] = 6;\n\
    \    hex_map['7'] = 7;\n    hex_map['8'] = 8;\n    hex_map['9'] = 9;\n    hex_map['A']\
    \ = 10;\n    hex_map['B'] = 11;\n    hex_map['C'] = 12;\n    hex_map['D'] = 13;\n\
    \    hex_map['E'] = 14;\n    hex_map['F'] = 15;\n    for(int i = 0; i < num.length();\
    \ i++){\n        if(hex_map[num[i]] == 2 || hex_map[num[i]] == 3 || hex_map[num[i]]\
    \ == 5 || hex_map[num[i]] == 7 || hex_map[num[i]] == 11 || hex_map[num[i]] ==\
    \ 13){\n            count++;\n        }\n    }\n    return count;", "    std::string\
    \ primes = \"2357BD\";\n    int count = 0;\n    for(int i = 0; i < num.length();\
    \ i++){\n        if(primes.find(num[i]) != std::string::npos){\n            count++;\n\
    \        }\n    }\n    return count;", "  long count = 0;\n  for(int i = 0; i\
    \ < num.length(); i++){\n    if(num[i] == '2' || num[i] == '3' || num[i] == '5'\
    \ || num[i] == '7' || num[i] == 'B' || num[i] == 'D'){\n      count++;\n    }\n\
    \  }\n  return count;", "    // your code here\n    long count = 0;\n    for(int\
    \ i = 0; i < num.length(); i++){\n        if(num[i] == '2' || num[i] == '3' ||\
    \ num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D'){\n       \
    \     count++;\n        }\n    }\n    return count;", "    std::string hex = \"\
    0123456789ABCDEF\";\n    std::string primes = \"2357BDF\";\n    int count = 0;\n\
    \    for(int i = 0; i < num.length(); i++){\n        for(int j = 0; j < primes.length();\
    \ j++){\n            if(num[i] == primes[j]){\n                count++;\n    \
    \        }\n        }\n    }\n    return count;"]
stop_tokens:
- "\n}"
