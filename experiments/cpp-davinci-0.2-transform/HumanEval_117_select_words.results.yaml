language: cpp
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ words;\n    std::string word;\n    for (char c : s) {\n        if (c == ' ')\
    \ {\n            if (word.size() == n) {\n                words.push_back(word);\n\
    \            }\n            word = \"\";\n        } else {\n            word +=\
    \ c;\n        }\n    }\n    if (word.size() == n) {\n        words.push_back(word);\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvscwu9jv.cpp: In function 'std::vector<std::basic_string<char>\
    \ > select_words(std::string, long int)':\n/tmp/tmpvscwu9jv.cpp:22:19: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (char c : s)\
    \ {\n                   ^\n/tmp/tmpvscwu9jv.cpp: In function 'int main()':\n/tmp/tmpvscwu9jv.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvscwu9jv.cpp:2:\n/tmp/tmpvscwu9jv.cpp:39:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpvscwu9jv.cpp:39:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpvscwu9jv.cpp:39:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpvscwu9jv.cpp:39:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpvscwu9jv.cpp:39:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpvscwu9jv.cpp:39:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ words;\n    std::stringstream ss(s);\n    std::string word;\n    while (ss >>\
    \ word) {\n        int count = 0;\n        for (char c : word) {\n           \
    \ if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n          \
    \      count++;\n            }\n        }\n        if (count == n) {\n       \
    \     words.push_back(word);\n        }\n    }\n    return words;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyk3b3re5.cpp: In function 'std::vector<std::basic_string<char>\
    \ > select_words(std::string, long int)':\n/tmp/tmpyk3b3re5.cpp:25:23: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n         for (char c\
    \ : word) {\n                       ^\n/tmp/tmpyk3b3re5.cpp: In function 'int\
    \ main()':\n/tmp/tmpyk3b3re5.cpp:37:10: error: 'candidate' does not name a type\n\
    \     auto candidate = select_words;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyk3b3re5.cpp:2:\n/tmp/tmpyk3b3re5.cpp:38:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpyk3b3re5.cpp:38:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpyk3b3re5.cpp:38:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpyk3b3re5.cpp:38:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpyk3b3re5.cpp:38:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyk3b3re5.cpp:38:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ result;\n    std::string word = \"\";\n    int count = 0;\n    for (int i =\
    \ 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            if (count\
    \ == n) {\n                result.push_back(word);\n            }\n          \
    \  word = \"\";\n            count = 0;\n        } else {\n            word +=\
    \ s[i];\n            if (s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] !=\
    \ 'o' && s[i] != 'u') {\n                count++;\n            }\n        }\n\
    \    }\n    if (count == n) {\n        result.push_back(word);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppfrttog9.cpp: In function 'int main()':\n/tmp/tmppfrttog9.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppfrttog9.cpp:2:\n/tmp/tmppfrttog9.cpp:44:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmppfrttog9.cpp:44:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmppfrttog9.cpp:44:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmppfrttog9.cpp:44:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmppfrttog9.cpp:44:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppfrttog9.cpp:44:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmppfrttog9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ result;\n    std::stringstream ss(s);\n    std::string word;\n    while (ss\
    \ >> word) {\n        long count = 0;\n        for (char c : word) {\n       \
    \     if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n      \
    \          count++;\n            }\n        }\n        if (count == n) {\n   \
    \         result.push_back(word);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3uwf6guk.cpp: In function 'std::vector<std::basic_string<char>\
    \ > select_words(std::string, long int)':\n/tmp/tmp3uwf6guk.cpp:25:23: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n         for (char c\
    \ : word) {\n                       ^\n/tmp/tmp3uwf6guk.cpp: In function 'int\
    \ main()':\n/tmp/tmp3uwf6guk.cpp:37:10: error: 'candidate' does not name a type\n\
    \     auto candidate = select_words;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3uwf6guk.cpp:2:\n/tmp/tmp3uwf6guk.cpp:38:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmp3uwf6guk.cpp:38:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmp3uwf6guk.cpp:38:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmp3uwf6guk.cpp:38:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp3uwf6guk.cpp:38:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp3uwf6guk.cpp:38:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ result;\n    std::stringstream ss(s);\n    std::string word;\n    while (ss\
    \ >> word) {\n        long count = 0;\n        for (char c : word) {\n       \
    \     if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n      \
    \          count++;\n            }\n        }\n        if (count == n) {\n   \
    \         result.push_back(word);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3uwf6guk.cpp: In function 'std::vector<std::basic_string<char>\
    \ > select_words(std::string, long int)':\n/tmp/tmp3uwf6guk.cpp:25:23: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n         for (char c\
    \ : word) {\n                       ^\n/tmp/tmp3uwf6guk.cpp: In function 'int\
    \ main()':\n/tmp/tmp3uwf6guk.cpp:37:10: error: 'candidate' does not name a type\n\
    \     auto candidate = select_words;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3uwf6guk.cpp:2:\n/tmp/tmp3uwf6guk.cpp:38:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmp3uwf6guk.cpp:38:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmp3uwf6guk.cpp:38:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmp3uwf6guk.cpp:38:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp3uwf6guk.cpp:38:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp3uwf6guk.cpp:38:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ res;\n    std::stringstream ss(s);\n    std::string word;\n    while(ss >> word)\
    \ {\n        int count = 0;\n        for(char c : word) {\n            if(c !=\
    \ 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                count++;\n\
    \            }\n        }\n        if(count == n) {\n            res.push_back(word);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdb5h32ib.cpp: In function 'std::vector<std::basic_string<char>\
    \ > select_words(std::string, long int)':\n/tmp/tmpdb5h32ib.cpp:25:22: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n         for(char c :\
    \ word) {\n                      ^\n/tmp/tmpdb5h32ib.cpp: In function 'int main()':\n\
    /tmp/tmpdb5h32ib.cpp:37:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = select_words;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdb5h32ib.cpp:2:\n/tmp/tmpdb5h32ib.cpp:38:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpdb5h32ib.cpp:38:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpdb5h32ib.cpp:38:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpdb5h32ib.cpp:38:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpdb5h32ib.cpp:38:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdb5h32ib.cpp:38:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ result;\n    std::string word = \"\";\n    for (int i = 0; i < s.length(); i++)\
    \ {\n        if (s[i] == ' ') {\n            if (word.length() == n) {\n     \
    \           result.push_back(word);\n            }\n            word = \"\";\n\
    \        } else {\n            word += s[i];\n        }\n    }\n    if (word.length()\
    \ == n) {\n        result.push_back(word);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_39wo0d8.cpp: In function 'int main()':\n/tmp/tmp_39wo0d8.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_39wo0d8.cpp:2:\n/tmp/tmp_39wo0d8.cpp:39:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmp_39wo0d8.cpp:39:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmp_39wo0d8.cpp:39:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmp_39wo0d8.cpp:39:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_39wo0d8.cpp:39:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_39wo0d8.cpp:39:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_39wo0d8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ words;\n    std::string word = \"\";\n    for (int i = 0; i < s.length(); i++)\
    \ {\n        if (s[i] == ' ') {\n            if (word.length() == n) {\n     \
    \           words.push_back(word);\n            }\n            word = \"\";\n\
    \        } else {\n            word += s[i];\n        }\n    }\n    if (word.length()\
    \ == n) {\n        words.push_back(word);\n    }\n    return words;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeojohkbb.cpp: In function 'int main()':\n/tmp/tmpeojohkbb.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpeojohkbb.cpp:2:\n/tmp/tmpeojohkbb.cpp:39:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpeojohkbb.cpp:39:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpeojohkbb.cpp:39:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpeojohkbb.cpp:39:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpeojohkbb.cpp:39:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpeojohkbb.cpp:39:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpeojohkbb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ result;\n    std::stringstream ss(s);\n    std::string word;\n    while (ss\
    \ >> word) {\n        long count = 0;\n        for (char c : word) {\n       \
    \     if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n      \
    \          count++;\n            }\n        }\n        if (word.size() - count\
    \ == n) {\n            result.push_back(word);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp_5zso_h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > select_words(std::string, long int)':\n/tmp/tmpp_5zso_h.cpp:25:23: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n         for (char c\
    \ : word) {\n                       ^\n/tmp/tmpp_5zso_h.cpp: In function 'int\
    \ main()':\n/tmp/tmpp_5zso_h.cpp:37:10: error: 'candidate' does not name a type\n\
    \     auto candidate = select_words;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp_5zso_h.cpp:2:\n/tmp/tmpp_5zso_h.cpp:38:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpp_5zso_h.cpp:38:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpp_5zso_h.cpp:38:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpp_5zso_h.cpp:38:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpp_5zso_h.cpp:38:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpp_5zso_h.cpp:38:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ result;\n    std::stringstream ss(s);\n    std::string word;\n    while (ss\
    \ >> word) {\n        int count = 0;\n        for (char c : word) {\n        \
    \    if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n       \
    \         count++;\n            }\n        }\n        if (count == n) {\n    \
    \        result.push_back(word);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9xl_wh1z.cpp: In function 'std::vector<std::basic_string<char>\
    \ > select_words(std::string, long int)':\n/tmp/tmp9xl_wh1z.cpp:25:23: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n         for (char c\
    \ : word) {\n                       ^\n/tmp/tmp9xl_wh1z.cpp: In function 'int\
    \ main()':\n/tmp/tmp9xl_wh1z.cpp:37:10: error: 'candidate' does not name a type\n\
    \     auto candidate = select_words;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9xl_wh1z.cpp:2:\n/tmp/tmp9xl_wh1z.cpp:38:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmp9xl_wh1z.cpp:38:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmp9xl_wh1z.cpp:38:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmp9xl_wh1z.cpp:38:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp9xl_wh1z.cpp:38:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9xl_wh1z.cpp:38:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ result;\n    std::stringstream ss(s);\n    std::string word;\n    while (ss\
    \ >> word) {\n        int consonants = 0;\n        for (char c : word) {\n   \
    \         if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n  \
    \              consonants++;\n            }\n        }\n        if (consonants\
    \ == n) {\n            result.push_back(word);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprmbkywk4.cpp: In function 'std::vector<std::basic_string<char>\
    \ > select_words(std::string, long int)':\n/tmp/tmprmbkywk4.cpp:25:23: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n         for (char c\
    \ : word) {\n                       ^\n/tmp/tmprmbkywk4.cpp: In function 'int\
    \ main()':\n/tmp/tmprmbkywk4.cpp:37:10: error: 'candidate' does not name a type\n\
    \     auto candidate = select_words;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprmbkywk4.cpp:2:\n/tmp/tmprmbkywk4.cpp:38:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmprmbkywk4.cpp:38:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmprmbkywk4.cpp:38:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmprmbkywk4.cpp:38:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmprmbkywk4.cpp:38:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmprmbkywk4.cpp:38:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ result;\n    std::stringstream ss(s);\n    std::string word;\n    while (ss\
    \ >> word) {\n        int consonants = 0;\n        for (char c : word) {\n   \
    \         if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n  \
    \              consonants++;\n            }\n        }\n        if (consonants\
    \ == n) {\n            result.push_back(word);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprmbkywk4.cpp: In function 'std::vector<std::basic_string<char>\
    \ > select_words(std::string, long int)':\n/tmp/tmprmbkywk4.cpp:25:23: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n         for (char c\
    \ : word) {\n                       ^\n/tmp/tmprmbkywk4.cpp: In function 'int\
    \ main()':\n/tmp/tmprmbkywk4.cpp:37:10: error: 'candidate' does not name a type\n\
    \     auto candidate = select_words;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprmbkywk4.cpp:2:\n/tmp/tmprmbkywk4.cpp:38:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmprmbkywk4.cpp:38:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmprmbkywk4.cpp:38:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmprmbkywk4.cpp:38:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmprmbkywk4.cpp:38:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmprmbkywk4.cpp:38:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ result;\n    std::stringstream ss(s);\n    std::string word;\n    while (ss\
    \ >> word) {\n        int count = 0;\n        for (char c : word) {\n        \
    \    if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n       \
    \         count++;\n            }\n        }\n        if (count == n) {\n    \
    \        result.push_back(word);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9xl_wh1z.cpp: In function 'std::vector<std::basic_string<char>\
    \ > select_words(std::string, long int)':\n/tmp/tmp9xl_wh1z.cpp:25:23: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n         for (char c\
    \ : word) {\n                       ^\n/tmp/tmp9xl_wh1z.cpp: In function 'int\
    \ main()':\n/tmp/tmp9xl_wh1z.cpp:37:10: error: 'candidate' does not name a type\n\
    \     auto candidate = select_words;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9xl_wh1z.cpp:2:\n/tmp/tmp9xl_wh1z.cpp:38:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmp9xl_wh1z.cpp:38:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmp9xl_wh1z.cpp:38:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmp9xl_wh1z.cpp:38:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp9xl_wh1z.cpp:38:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9xl_wh1z.cpp:38:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ result;\n    std::stringstream ss(s);\n    std::string word;\n    while (ss\
    \ >> word) {\n        if (std::count_if(word.begin(), word.end(), [](char c) {\n\
    \            return c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u';\n\
    \        }) == n) {\n            result.push_back(word);\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgsrfra4h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > select_words(std::string, long int)':\n/tmp/tmpgsrfra4h.cpp:26:9: warning:\
    \ lambda expressions only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n         }) == n) {\n         ^\n/tmp/tmpgsrfra4h.cpp:26:10: error:\
    \ no matching function for call to 'count_if(std::basic_string<char>::iterator,\
    \ std::basic_string<char>::iterator, select_words(std::string, long int)::__lambda0)'\n\
    \         }) == n) {\n          ^\n/tmp/tmpgsrfra4h.cpp:26:10: note: candidate\
    \ is:\nIn file included from /usr/include/c++/4.8.2/algorithm:62:0,\n        \
    \         from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmpgsrfra4h.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:4647:5:\
    \ note: template<class _IIter, class _Predicate> typename std::iterator_traits<_Iterator>::difference_type\
    \ std::count_if(_IIter, _IIter, _Predicate)\n     count_if(_InputIterator __first,\
    \ _InputIterator __last, _Predicate __pred)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:4647:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpgsrfra4h.cpp:\
    \ In substitution of 'template<class _IIter, class _Predicate> typename std::iterator_traits<_Iterator>::difference_type\
    \ std::count_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<char*,\
    \ std::basic_string<char> >; _Predicate = select_words(std::string, long int)::__lambda0]':\n\
    /tmp/tmpgsrfra4h.cpp:26:10:   required from here\n/tmp/tmpgsrfra4h.cpp:26:10:\
    \ error: template argument for 'template<class _IIter, class _Predicate> typename\
    \ std::iterator_traits<_Iterator>::difference_type std::count_if(_IIter, _IIter,\
    \ _Predicate)' uses local type 'select_words(std::string, long int)::__lambda0'\n\
    \         }) == n) {\n          ^\n/tmp/tmpgsrfra4h.cpp:26:10: error:   trying\
    \ to instantiate 'template<class _IIter, class _Predicate> typename std::iterator_traits<_Iterator>::difference_type\
    \ std::count_if(_IIter, _IIter, _Predicate)'\n/tmp/tmpgsrfra4h.cpp: In function\
    \ 'int main()':\n/tmp/tmpgsr"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ words;\n    std::string word;\n    for (int i = 0; i < s.length(); i++) {\n\
    \        if (s[i] == ' ') {\n            if (word.length() == n) {\n         \
    \       words.push_back(word);\n            }\n            word = \"\";\n    \
    \    } else {\n            word += s[i];\n        }\n    }\n    if (word.length()\
    \ == n) {\n        words.push_back(word);\n    }\n    return words;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjn305oym.cpp: In function 'int main()':\n/tmp/tmpjn305oym.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjn305oym.cpp:2:\n/tmp/tmpjn305oym.cpp:39:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpjn305oym.cpp:39:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpjn305oym.cpp:39:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpjn305oym.cpp:39:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpjn305oym.cpp:39:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpjn305oym.cpp:39:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpjn305oym.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ result;\n    std::stringstream ss(s);\n    std::string word;\n    while (ss\
    \ >> word) {\n        int count = 0;\n        for (int i = 0; i < word.size();\
    \ i++) {\n            if (word[i] != 'a' && word[i] != 'e' && word[i] != 'i' &&\
    \ word[i] != 'o' && word[i] != 'u') {\n                count++;\n            }\n\
    \        }\n        if (count == n) {\n            result.push_back(word);\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo79hpiwa.cpp: In function 'int main()':\n/tmp/tmpo79hpiwa.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = select_words;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo79hpiwa.cpp:2:\n/tmp/tmpo79hpiwa.cpp:38:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpo79hpiwa.cpp:38:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpo79hpiwa.cpp:38:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpo79hpiwa.cpp:38:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpo79hpiwa.cpp:38:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpo79hpiwa.cpp:38:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpo79hpiwa.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ result;\n    std::stringstream ss(s);\n    std::string word;\n    while (ss\
    \ >> word) {\n        int count = 0;\n        for (auto c : word) {\n        \
    \    if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n       \
    \         count++;\n            }\n        }\n        if (count == n) {\n    \
    \        result.push_back(word);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvidr06tg.cpp: In function 'std::vector<std::basic_string<char>\
    \ > select_words(std::string, long int)':\n/tmp/tmpvidr06tg.cpp:25:19: error:\
    \ 'c' does not name a type\n         for (auto c : word) {\n                 \
    \  ^\n/tmp/tmpvidr06tg.cpp:30:9: error: expected ';' before 'if'\n         if\
    \ (count == n) {\n         ^\n/tmp/tmpvidr06tg.cpp:30:9: error: expected primary-expression\
    \ before 'if'\n/tmp/tmpvidr06tg.cpp:30:9: error: expected ';' before 'if'\n/tmp/tmpvidr06tg.cpp:30:9:\
    \ error: expected primary-expression before 'if'\n/tmp/tmpvidr06tg.cpp:30:9: error:\
    \ expected ')' before 'if'\n/tmp/tmpvidr06tg.cpp: In function 'int main()':\n\
    /tmp/tmpvidr06tg.cpp:37:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = select_words;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvidr06tg.cpp:2:\n/tmp/tmpvidr06tg.cpp:38:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmpvidr06tg.cpp:38:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmpvidr06tg.cpp:38:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmpvidr06tg.cpp:38:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpvidr06tg.cpp:38:107: error: no matching f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ result;\n    std::stringstream ss(s);\n    std::string word;\n    while (ss\
    \ >> word) {\n        int count = 0;\n        for (char c : word) {\n        \
    \    if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n       \
    \         count++;\n            }\n        }\n        if (count == n) {\n    \
    \        result.push_back(word);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9xl_wh1z.cpp: In function 'std::vector<std::basic_string<char>\
    \ > select_words(std::string, long int)':\n/tmp/tmp9xl_wh1z.cpp:25:23: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n         for (char c\
    \ : word) {\n                       ^\n/tmp/tmp9xl_wh1z.cpp: In function 'int\
    \ main()':\n/tmp/tmp9xl_wh1z.cpp:37:10: error: 'candidate' does not name a type\n\
    \     auto candidate = select_words;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9xl_wh1z.cpp:2:\n/tmp/tmp9xl_wh1z.cpp:38:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmp9xl_wh1z.cpp:38:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmp9xl_wh1z.cpp:38:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmp9xl_wh1z.cpp:38:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp9xl_wh1z.cpp:38:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9xl_wh1z.cpp:38:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ result;\n    std::stringstream ss(s);\n    std::string word;\n    while (ss\
    \ >> word) {\n        int consonants = 0;\n        for (char c : word) {\n   \
    \         if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n  \
    \              consonants++;\n            }\n        }\n        if (consonants\
    \ == n) {\n            result.push_back(word);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprmbkywk4.cpp: In function 'std::vector<std::basic_string<char>\
    \ > select_words(std::string, long int)':\n/tmp/tmprmbkywk4.cpp:25:23: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n         for (char c\
    \ : word) {\n                       ^\n/tmp/tmprmbkywk4.cpp: In function 'int\
    \ main()':\n/tmp/tmprmbkywk4.cpp:37:10: error: 'candidate' does not name a type\n\
    \     auto candidate = select_words;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprmbkywk4.cpp:2:\n/tmp/tmprmbkywk4.cpp:38:53: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
    })));\n                                                     ^\n/tmp/tmprmbkywk4.cpp:38:83:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                    ^\n/tmp/tmprmbkywk4.cpp:38:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Mary had a little lamb\"), (4))\
    \ == (std::vector<std::string>({(std::string)\"little\"})));\n               \
    \                                                                            \
    \                ^\n/tmp/tmprmbkywk4.cpp:38:107: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmprmbkywk4.cpp:38:107: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmprmbkywk4.cpp:38:107:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"\
    Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"\
    little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"\
    ), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"\
    ), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
    Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\n\
    std::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string>\
    \ result;\n    std::stringstream ss(s);\n    std::string word;\n    while (ss\
    \ >> word) {\n        if (std::count_if(word.begin(), word.end(), [](char c) {\n\
    \            return (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u');\n\
    \        }) == n) {\n            result.push_back(word);\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
    Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
    ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
    ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
    Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n\
    \    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
    a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
    c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9k3dqk7g.cpp: In function 'std::vector<std::basic_string<char>\
    \ > select_words(std::string, long int)':\n/tmp/tmp9k3dqk7g.cpp:26:9: warning:\
    \ lambda expressions only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n         }) == n) {\n         ^\n/tmp/tmp9k3dqk7g.cpp:26:10: error:\
    \ no matching function for call to 'count_if(std::basic_string<char>::iterator,\
    \ std::basic_string<char>::iterator, select_words(std::string, long int)::__lambda0)'\n\
    \         }) == n) {\n          ^\n/tmp/tmp9k3dqk7g.cpp:26:10: note: candidate\
    \ is:\nIn file included from /usr/include/c++/4.8.2/algorithm:62:0,\n        \
    \         from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp9k3dqk7g.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:4647:5:\
    \ note: template<class _IIter, class _Predicate> typename std::iterator_traits<_Iterator>::difference_type\
    \ std::count_if(_IIter, _IIter, _Predicate)\n     count_if(_InputIterator __first,\
    \ _InputIterator __last, _Predicate __pred)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:4647:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9k3dqk7g.cpp:\
    \ In substitution of 'template<class _IIter, class _Predicate> typename std::iterator_traits<_Iterator>::difference_type\
    \ std::count_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<char*,\
    \ std::basic_string<char> >; _Predicate = select_words(std::string, long int)::__lambda0]':\n\
    /tmp/tmp9k3dqk7g.cpp:26:10:   required from here\n/tmp/tmp9k3dqk7g.cpp:26:10:\
    \ error: template argument for 'template<class _IIter, class _Predicate> typename\
    \ std::iterator_traits<_Iterator>::difference_type std::count_if(_IIter, _IIter,\
    \ _Predicate)' uses local type 'select_words(std::string, long int)::__lambda0'\n\
    \         }) == n) {\n          ^\n/tmp/tmp9k3dqk7g.cpp:26:10: error:   trying\
    \ to instantiate 'template<class _IIter, class _Predicate> typename std::iterator_traits<_Iterator>::difference_type\
    \ std::count_if(_IIter, _IIter, _Predicate)'\n/tmp/tmp9k3dqk7g.cpp: In function\
    \ 'int main()':\n/tmp/tmp9k3"
  stdout: ''
