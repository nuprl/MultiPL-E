name: HumanEval_9_rolling_max
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
  \ generate a list of rolling maximum element found until given moment\n// in the\
  \ sequence.\n// >>> rolling_max((std::vector<long>({(long)1, (long)2, (long)3, (long)2,\
  \ (long)3, (long)4, (long)2})))\n// (std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)3, (long)3, (long)4, (long)4}))\nstd::vector<long> rolling_max(std::vector<long>\
  \ numbers) {\n"
tests: "}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
  \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
  \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100, (long)3})))\
  \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
  }\n"
completions: ["    std::vector<long> result;\n    long max = numbers[0];\n    result.push_back(max);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push_back(max);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::vector<long>::iterator\
    \ it = numbers.begin();\n    result.push_back(*it);\n    it++;\n    for (; it\
    \ != numbers.end(); it++) {\n        result.push_back(std::max(*it, result.back()));\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max = 0;\n\
    \    for (auto number : numbers) {\n        if (number > max) {\n            max\
    \ = number;\n        }\n        result.push_back(max);\n    }\n    return result;",
  "    std::vector<long> result;\n    long max = numbers[0];\n    result.push_back(max);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push_back(max);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max = numbers[0];\n\
    \    result.push_back(max);\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    long max_so_far = numbers[0];\n\
    \    result.push_back(max_so_far);\n    for (int i = 1; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \        }\n        result.push_back(max_so_far);\n    }\n    return result;",
  "    std::vector<long> result;\n    long max = numbers[0];\n    result.push_back(max);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push_back(max);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max = numbers[0];\n\
    \    result.push_back(max);\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    long max = numbers[0];\n\
    \    result.push_back(max);\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max = numbers[0];\n\
    \    for (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push_back(max);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stack<long>\
    \ stack;\n    for (auto number : numbers) {\n        while (!stack.empty() &&\
    \ stack.top() < number) {\n            stack.pop();\n        }\n        stack.push(number);\n\
    \        result.push_back(stack.top());\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max_value = numbers[0];\n    result.push_back(max_value);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_value)\
    \ {\n            max_value = numbers[i];\n        }\n        result.push_back(max_value);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max = numbers[0];\n\
    \    result.push_back(max);\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    long max = numbers[0];\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push_back(max);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max = numbers[0];\n\
    \    result.push_back(max);\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        max_so_far = std::max(max_so_far,\
    \ numbers[i]);\n        result.push_back(max_so_far);\n    }\n    return result;"]
stop_tokens:
- "\n}"
