language: cpp
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for (int i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (int i = 0; i < temp.size(); i++) {\n        switch (temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4t5zkvg.cpp: In function 'int main()':\n/tmp/tmpu4t5zkvg.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu4t5zkvg.cpp:2:\n/tmp/tmpu4t5zkvg.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpu4t5zkvg.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpu4t5zkvg.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu4t5zkvg.cpp:60:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu4t5zkvg.cpp:60:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpu4t5zkvg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplbetjge2.cpp: In function 'int main()':\n/tmp/tmplbetjge2.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplbetjge2.cpp:2:\n/tmp/tmplbetjge2.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmplbetjge2.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmplbetjge2.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmplbetjge2.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmplbetjge2.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplbetjge2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::vector<long>\
    \ sorted;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n      sorted.push_back(arr[i]);\n    }\n  }\n  std::sort(sorted.begin(),\
    \ sorted.end());\n  for (int i = sorted.size() - 1; i >= 0; i--) {\n    switch\
    \ (sorted[i]) {\n      case 1:\n        result.push_back(\"One\");\n        break;\n\
    \      case 2:\n        result.push_back(\"Two\");\n        break;\n      case\
    \ 3:\n        result.push_back(\"Three\");\n        break;\n      case 4:\n  \
    \      result.push_back(\"Four\");\n        break;\n      case 5:\n        result.push_back(\"\
    Five\");\n        break;\n      case 6:\n        result.push_back(\"Six\");\n\
    \        break;\n      case 7:\n        result.push_back(\"Seven\");\n       \
    \ break;\n      case 8:\n        result.push_back(\"Eight\");\n        break;\n\
    \      case 9:\n        result.push_back(\"Nine\");\n        break;\n    }\n \
    \ }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv3qbt6if.cpp: In function 'int main()':\n/tmp/tmpv3qbt6if.cpp:58:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv3qbt6if.cpp:2:\n/tmp/tmpv3qbt6if.cpp:59:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpv3qbt6if.cpp:59:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpv3qbt6if.cpp:59:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv3qbt6if.cpp:59:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpv3qbt6if.cpp:59:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpv3qbt6if.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for (int i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (int i = 0; i < temp.size(); i++) {\n        switch (temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4t5zkvg.cpp: In function 'int main()':\n/tmp/tmpu4t5zkvg.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu4t5zkvg.cpp:2:\n/tmp/tmpu4t5zkvg.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpu4t5zkvg.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpu4t5zkvg.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu4t5zkvg.cpp:60:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu4t5zkvg.cpp:60:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpu4t5zkvg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > 0 && arr[i] < 10) {\n            result.push_back(numbers[arr[i] - 1]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj_pz6vk6.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpj_pz6vk6.cpp:17:111: error: in\
    \ C++98 'numbers' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ numbers = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n                                                    \
    \                                                           ^\n/tmp/tmpj_pz6vk6.cpp:17:111:\
    \ error: could not convert '{\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"}' from '<brace-enclosed initializer\
    \ list>' to 'std::vector<std::basic_string<char> >'\n/tmp/tmpj_pz6vk6.cpp: In\
    \ function 'int main()':\n/tmp/tmpj_pz6vk6.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj_pz6vk6.cpp:2:\n/tmp/tmpj_pz6vk6.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpj_pz6vk6.cpp:29:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == 1) {\n     \
    \       result.push_back(\"One\");\n        } else if (arr[i] == 2) {\n      \
    \      result.push_back(\"Two\");\n        } else if (arr[i] == 3) {\n       \
    \     result.push_back(\"Three\");\n        } else if (arr[i] == 4) {\n      \
    \      result.push_back(\"Four\");\n        } else if (arr[i] == 5) {\n      \
    \      result.push_back(\"Five\");\n        } else if (arr[i] == 6) {\n      \
    \      result.push_back(\"Six\");\n        } else if (arr[i] == 7) {\n       \
    \     result.push_back(\"Seven\");\n        } else if (arr[i] == 8) {\n      \
    \      result.push_back(\"Eight\");\n        } else if (arr[i] == 9) {\n     \
    \       result.push_back(\"Nine\");\n        }\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2rt293ev.cpp: In function 'int main()':\n/tmp/tmp2rt293ev.cpp:42:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2rt293ev.cpp:2:\n/tmp/tmp2rt293ev.cpp:43:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp2rt293ev.cpp:43:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp2rt293ev.cpp:43:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2rt293ev.cpp:43:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2rt293ev.cpp:43:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2rt293ev.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto i = arr.rbegin();\
    \ i != arr.rend(); i++) {\n        if (*i < 1 || *i > 9) {\n            continue;\n\
    \        }\n        result.push_back(map[*i]);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfol6_toi.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpfol6_toi.cpp:28:15: error: 'i'\
    \ does not name a type\n     for (auto i = arr.rbegin(); i != arr.rend(); i++)\
    \ {\n               ^\n/tmp/tmpfol6_toi.cpp:28:33: error: expected ';' before\
    \ 'i'\n     for (auto i = arr.rbegin(); i != arr.rend(); i++) {\n            \
    \                     ^\n/tmp/tmpfol6_toi.cpp:28:33: error: 'i' was not declared\
    \ in this scope\n/tmp/tmpfol6_toi.cpp: In function 'int main()':\n/tmp/tmpfol6_toi.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfol6_toi.cpp:2:\n/tmp/tmpfol6_toi.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpfol6_toi.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpfol6_toi.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfol6_toi.cpp:38:113: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n       \
    \ }\n    }\n    std::sort(result.begin(), result.end());\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp88d8bxo7.cpp: In function 'int main()':\n/tmp/tmp88d8bxo7.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp88d8bxo7.cpp:2:\n/tmp/tmp88d8bxo7.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp88d8bxo7.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp88d8bxo7.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp88d8bxo7.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp88d8bxo7.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp88d8bxo7.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\";\n    map[3]\
    \ = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n    map[6] = \"\
    Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9] = \"Nine\"\
    ;\n    for (auto i : arr) {\n        if (i > 0 && i < 10) {\n            res.push_back(map[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz04h9vw8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpz04h9vw8.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpz04h9vw8.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(res.begin(), res.end());\n\
    \     ^\n/tmp/tmpz04h9vw8.cpp:32:37: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(res.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), res.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(res.begin(),\
    \ res.end());\n                                     ^\n/tmp/tmpz04h9vw8.cpp:33:41:\
    \ error: expected ')' before ';' token\n     std::reverse(res.begin(), res.end());\n\
    \                                         ^\n/tmp/tmpz04h9vw8.cpp: In function\
    \ 'int main()':\n/tmp/tmpz04h9vw8.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz04h9vw8.cpp:2:\n/tmp/tmpz04h9vw8.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpz04h9vw8.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vecto"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> sorted_arr;\n    std::map<long, std::string> map_of_numbers;\n\
    \    map_of_numbers[1] = \"One\";\n    map_of_numbers[2] = \"Two\";\n    map_of_numbers[3]\
    \ = \"Three\";\n    map_of_numbers[4] = \"Four\";\n    map_of_numbers[5] = \"\
    Five\";\n    map_of_numbers[6] = \"Six\";\n    map_of_numbers[7] = \"Seven\";\n\
    \    map_of_numbers[8] = \"Eight\";\n    map_of_numbers[9] = \"Nine\";\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9)\
    \ {\n            sorted_arr.push_back(arr[i]);\n        }\n    }\n    std::sort(sorted_arr.begin(),\
    \ sorted_arr.end());\n    for (int i = sorted_arr.size() - 1; i >= 0; i--) {\n\
    \        result.push_back(map_of_numbers[sorted_arr[i]]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu1eijqog.cpp: In function 'int main()':\n/tmp/tmpu1eijqog.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu1eijqog.cpp:2:\n/tmp/tmpu1eijqog.cpp:41:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpu1eijqog.cpp:41:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpu1eijqog.cpp:41:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu1eijqog.cpp:41:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu1eijqog.cpp:41:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpu1eijqog.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\"\
    ;\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] =\
    \ \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         res.push_back(m[i]);\n        }\n    }\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp28ct9odk.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp28ct9odk.cpp:28:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmp28ct9odk.cpp:33:5:\
    \ error: expected ';' before 'std'\n     std::reverse(res.begin(), res.end());\n\
    \     ^\n/tmp/tmp28ct9odk.cpp:33:40: error: could not convert 'std::reverse<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(res.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), res.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::reverse(res.begin(),\
    \ res.end());\n                                        ^\n/tmp/tmp28ct9odk.cpp:34:5:\
    \ error: expected primary-expression before 'return'\n     return res;\n     ^\n\
    /tmp/tmp28ct9odk.cpp:34:5: error: expected ')' before 'return'\n/tmp/tmp28ct9odk.cpp:\
    \ In function 'int main()':\n/tmp/tmp28ct9odk.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp28ct9odk.cpp:2:\n/tmp/tmp28ct9odk.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp28ct9odk.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> res;\n  std::map<long,\
    \ std::string> m = {\n    {1, \"One\"},\n    {2, \"Two\"},\n    {3, \"Three\"\
    },\n    {4, \"Four\"},\n    {5, \"Five\"},\n    {6, \"Six\"},\n    {7, \"Seven\"\
    },\n    {8, \"Eight\"},\n    {9, \"Nine\"}\n  };\n  std::sort(arr.begin(), arr.end());\n\
    \  for (auto it = arr.rbegin(); it != arr.rend(); ++it) {\n    if (*it >= 1 &&\
    \ *it <= 9) {\n      res.push_back(m[*it]);\n    }\n  }\n  return res;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2pr1j4o0.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp2pr1j4o0.cpp:27:3: error: in C++98\
    \ 'm' must be initialized by constructor, not by '{...}'\n   };\n   ^\n/tmp/tmp2pr1j4o0.cpp:27:3:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2pr1j4o0.cpp:27:3: error: could not convert '{{1,\
    \ \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"}, {6, \"\
    Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}}' from '<brace-enclosed\
    \ initializer list>' to 'std::map<long int, std::basic_string<char> >'\n/tmp/tmp2pr1j4o0.cpp:29:13:\
    \ error: 'it' does not name a type\n   for (auto it = arr.rbegin(); it != arr.rend();\
    \ ++it) {\n             ^\n/tmp/tmp2pr1j4o0.cpp:29:32: error: expected ';' before\
    \ 'it'\n   for (auto it = arr.rbegin(); it != arr.rend(); ++it) {\n          \
    \                      ^\n/tmp/tmp2pr1j4o0.cpp:29:32: error: 'it' was not declared\
    \ in this scope\n/tmp/tmp2pr1j4o0.cpp: In function 'int main()':\n/tmp/tmp2pr1j4o0.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2pr1j4o0.cpp:2:\n/tmp/tmp2pr1j4o0.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp2pr1j4o0.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (l"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ >= 1 && arr[i] <= 9) {\n            result.push_back(numbers[arr[i] - 1]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiuk3qsql.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpiuk3qsql.cpp:17:111: error: in\
    \ C++98 'numbers' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ numbers = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n                                                    \
    \                                                           ^\n/tmp/tmpiuk3qsql.cpp:17:111:\
    \ error: could not convert '{\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"}' from '<brace-enclosed initializer\
    \ list>' to 'std::vector<std::basic_string<char> >'\n/tmp/tmpiuk3qsql.cpp: In\
    \ function 'int main()':\n/tmp/tmpiuk3qsql.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiuk3qsql.cpp:2:\n/tmp/tmpiuk3qsql.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpiuk3qsql.cpp:29:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for (int i =\
    \ temp.size() - 1; i >= 0; i--) {\n        result.push_back(map[temp[i]]);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7u1z_4sd.cpp: In function 'int main()':\n/tmp/tmp7u1z_4sd.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7u1z_4sd.cpp:2:\n/tmp/tmp7u1z_4sd.cpp:41:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp7u1z_4sd.cpp:41:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp7u1z_4sd.cpp:41:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7u1z_4sd.cpp:41:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7u1z_4sd.cpp:41:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7u1z_4sd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ >= 1 && arr[i] <= 9) {\n            result.push_back(numbers[arr[i] - 1]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiuk3qsql.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpiuk3qsql.cpp:17:111: error: in\
    \ C++98 'numbers' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ numbers = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n                                                    \
    \                                                           ^\n/tmp/tmpiuk3qsql.cpp:17:111:\
    \ error: could not convert '{\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"}' from '<brace-enclosed initializer\
    \ list>' to 'std::vector<std::basic_string<char> >'\n/tmp/tmpiuk3qsql.cpp: In\
    \ function 'int main()':\n/tmp/tmpiuk3qsql.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiuk3qsql.cpp:2:\n/tmp/tmpiuk3qsql.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpiuk3qsql.cpp:29:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > 0 && arr[i] < 10) {\n            result.push_back(numbers[arr[i] - 1]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj_pz6vk6.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpj_pz6vk6.cpp:17:111: error: in\
    \ C++98 'numbers' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ numbers = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n                                                    \
    \                                                           ^\n/tmp/tmpj_pz6vk6.cpp:17:111:\
    \ error: could not convert '{\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"}' from '<brace-enclosed initializer\
    \ list>' to 'std::vector<std::basic_string<char> >'\n/tmp/tmpj_pz6vk6.cpp: In\
    \ function 'int main()':\n/tmp/tmpj_pz6vk6.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj_pz6vk6.cpp:2:\n/tmp/tmpj_pz6vk6.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpj_pz6vk6.cpp:29:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for (int i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (int i = 0; i < temp.size(); i++) {\n        switch (temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4t5zkvg.cpp: In function 'int main()':\n/tmp/tmpu4t5zkvg.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu4t5zkvg.cpp:2:\n/tmp/tmpu4t5zkvg.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpu4t5zkvg.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpu4t5zkvg.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu4t5zkvg.cpp:60:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu4t5zkvg.cpp:60:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpu4t5zkvg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::vector<std::string>\
    \ nums = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n    std::sort(arr.begin(), arr.end());\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n \
    \           res.push_back(nums[arr[i] - 1]);\n        }\n    }\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphv3ulvzt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmphv3ulvzt.cpp:17:108: error: in\
    \ C++98 'nums' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ nums = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n                                                    \
    \                                                        ^\n/tmp/tmphv3ulvzt.cpp:17:108:\
    \ error: could not convert '{\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"}' from '<brace-enclosed initializer\
    \ list>' to 'std::vector<std::basic_string<char> >'\n/tmp/tmphv3ulvzt.cpp: In\
    \ function 'int main()':\n/tmp/tmphv3ulvzt.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphv3ulvzt.cpp:2:\n/tmp/tmphv3ulvzt.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmphv3ulvzt.cpp:29:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (auto it = arr.rbegin(); it != arr.rend(); ++it) {\n  \
    \      if (*it > 0 && *it < 10) {\n            result.push_back(numbers[*it -\
    \ 1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpok1wchjk.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpok1wchjk.cpp:17:111: error: in\
    \ C++98 'numbers' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ numbers = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n                                                    \
    \                                                           ^\n/tmp/tmpok1wchjk.cpp:17:111:\
    \ error: could not convert '{\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"}' from '<brace-enclosed initializer\
    \ list>' to 'std::vector<std::basic_string<char> >'\n/tmp/tmpok1wchjk.cpp:19:15:\
    \ error: 'it' does not name a type\n     for (auto it = arr.rbegin(); it != arr.rend();\
    \ ++it) {\n               ^\n/tmp/tmpok1wchjk.cpp:19:34: error: expected ';' before\
    \ 'it'\n     for (auto it = arr.rbegin(); it != arr.rend(); ++it) {\n        \
    \                          ^\n/tmp/tmpok1wchjk.cpp:19:34: error: 'it' was not\
    \ declared in this scope\n/tmp/tmpok1wchjk.cpp: In function 'int main()':\n/tmp/tmpok1wchjk.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpok1wchjk.cpp:2:\n/tmp/tmpok1wchjk.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpok1wchjk.cpp:28:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long"
  stdout: ''
