language: cpp
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for (int i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (int i = 0; i < temp.size(); i++) {\n        switch (temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4t5zkvg.cpp: In function 'int main()':\n/tmp/tmpu4t5zkvg.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu4t5zkvg.cpp:2:\n/tmp/tmpu4t5zkvg.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpu4t5zkvg.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpu4t5zkvg.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu4t5zkvg.cpp:60:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu4t5zkvg.cpp:60:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpu4t5zkvg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplbetjge2.cpp: In function 'int main()':\n/tmp/tmplbetjge2.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplbetjge2.cpp:2:\n/tmp/tmplbetjge2.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmplbetjge2.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmplbetjge2.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmplbetjge2.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmplbetjge2.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplbetjge2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::vector<long>\
    \ sorted;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n      sorted.push_back(arr[i]);\n    }\n  }\n  std::sort(sorted.begin(),\
    \ sorted.end());\n  for (int i = sorted.size() - 1; i >= 0; i--) {\n    switch\
    \ (sorted[i]) {\n      case 1:\n        result.push_back(\"One\");\n        break;\n\
    \      case 2:\n        result.push_back(\"Two\");\n        break;\n      case\
    \ 3:\n        result.push_back(\"Three\");\n        break;\n      case 4:\n  \
    \      result.push_back(\"Four\");\n        break;\n      case 5:\n        result.push_back(\"\
    Five\");\n        break;\n      case 6:\n        result.push_back(\"Six\");\n\
    \        break;\n      case 7:\n        result.push_back(\"Seven\");\n       \
    \ break;\n      case 8:\n        result.push_back(\"Eight\");\n        break;\n\
    \      case 9:\n        result.push_back(\"Nine\");\n        break;\n    }\n \
    \ }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv3qbt6if.cpp: In function 'int main()':\n/tmp/tmpv3qbt6if.cpp:58:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv3qbt6if.cpp:2:\n/tmp/tmpv3qbt6if.cpp:59:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpv3qbt6if.cpp:59:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpv3qbt6if.cpp:59:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv3qbt6if.cpp:59:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpv3qbt6if.cpp:59:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpv3qbt6if.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for (int i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (int i = 0; i < temp.size(); i++) {\n        switch (temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4t5zkvg.cpp: In function 'int main()':\n/tmp/tmpu4t5zkvg.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu4t5zkvg.cpp:2:\n/tmp/tmpu4t5zkvg.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpu4t5zkvg.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpu4t5zkvg.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu4t5zkvg.cpp:60:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu4t5zkvg.cpp:60:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpu4t5zkvg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > 0 && arr[i] < 10) {\n            result.push_back(numbers[arr[i] - 1]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj_pz6vk6.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpj_pz6vk6.cpp:17:111: error: in\
    \ C++98 'numbers' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ numbers = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n                                                    \
    \                                                           ^\n/tmp/tmpj_pz6vk6.cpp:17:111:\
    \ error: could not convert '{\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"}' from '<brace-enclosed initializer\
    \ list>' to 'std::vector<std::basic_string<char> >'\n/tmp/tmpj_pz6vk6.cpp: In\
    \ function 'int main()':\n/tmp/tmpj_pz6vk6.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj_pz6vk6.cpp:2:\n/tmp/tmpj_pz6vk6.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpj_pz6vk6.cpp:29:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == 1) {\n     \
    \       result.push_back(\"One\");\n        } else if (arr[i] == 2) {\n      \
    \      result.push_back(\"Two\");\n        } else if (arr[i] == 3) {\n       \
    \     result.push_back(\"Three\");\n        } else if (arr[i] == 4) {\n      \
    \      result.push_back(\"Four\");\n        } else if (arr[i] == 5) {\n      \
    \      result.push_back(\"Five\");\n        } else if (arr[i] == 6) {\n      \
    \      result.push_back(\"Six\");\n        } else if (arr[i] == 7) {\n       \
    \     result.push_back(\"Seven\");\n        } else if (arr[i] == 8) {\n      \
    \      result.push_back(\"Eight\");\n        } else if (arr[i] == 9) {\n     \
    \       result.push_back(\"Nine\");\n        }\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2rt293ev.cpp: In function 'int main()':\n/tmp/tmp2rt293ev.cpp:42:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2rt293ev.cpp:2:\n/tmp/tmp2rt293ev.cpp:43:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp2rt293ev.cpp:43:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp2rt293ev.cpp:43:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2rt293ev.cpp:43:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2rt293ev.cpp:43:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2rt293ev.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto i = arr.rbegin();\
    \ i != arr.rend(); i++) {\n        if (*i < 1 || *i > 9) {\n            continue;\n\
    \        }\n        result.push_back(map[*i]);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfol6_toi.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpfol6_toi.cpp:28:15: error: 'i'\
    \ does not name a type\n     for (auto i = arr.rbegin(); i != arr.rend(); i++)\
    \ {\n               ^\n/tmp/tmpfol6_toi.cpp:28:33: error: expected ';' before\
    \ 'i'\n     for (auto i = arr.rbegin(); i != arr.rend(); i++) {\n            \
    \                     ^\n/tmp/tmpfol6_toi.cpp:28:33: error: 'i' was not declared\
    \ in this scope\n/tmp/tmpfol6_toi.cpp: In function 'int main()':\n/tmp/tmpfol6_toi.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfol6_toi.cpp:2:\n/tmp/tmpfol6_toi.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpfol6_toi.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpfol6_toi.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfol6_toi.cpp:38:113: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n       \
    \ }\n    }\n    std::sort(result.begin(), result.end());\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp88d8bxo7.cpp: In function 'int main()':\n/tmp/tmp88d8bxo7.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp88d8bxo7.cpp:2:\n/tmp/tmp88d8bxo7.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp88d8bxo7.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp88d8bxo7.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp88d8bxo7.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp88d8bxo7.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp88d8bxo7.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\";\n    map[3]\
    \ = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n    map[6] = \"\
    Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9] = \"Nine\"\
    ;\n    for (auto i : arr) {\n        if (i > 0 && i < 10) {\n            res.push_back(map[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz04h9vw8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpz04h9vw8.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpz04h9vw8.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(res.begin(), res.end());\n\
    \     ^\n/tmp/tmpz04h9vw8.cpp:32:37: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(res.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), res.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(res.begin(),\
    \ res.end());\n                                     ^\n/tmp/tmpz04h9vw8.cpp:33:41:\
    \ error: expected ')' before ';' token\n     std::reverse(res.begin(), res.end());\n\
    \                                         ^\n/tmp/tmpz04h9vw8.cpp: In function\
    \ 'int main()':\n/tmp/tmpz04h9vw8.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz04h9vw8.cpp:2:\n/tmp/tmpz04h9vw8.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpz04h9vw8.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vecto"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> sorted_arr;\n    std::map<long, std::string> map_of_numbers;\n\
    \    map_of_numbers[1] = \"One\";\n    map_of_numbers[2] = \"Two\";\n    map_of_numbers[3]\
    \ = \"Three\";\n    map_of_numbers[4] = \"Four\";\n    map_of_numbers[5] = \"\
    Five\";\n    map_of_numbers[6] = \"Six\";\n    map_of_numbers[7] = \"Seven\";\n\
    \    map_of_numbers[8] = \"Eight\";\n    map_of_numbers[9] = \"Nine\";\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9)\
    \ {\n            sorted_arr.push_back(arr[i]);\n        }\n    }\n    std::sort(sorted_arr.begin(),\
    \ sorted_arr.end());\n    for (int i = sorted_arr.size() - 1; i >= 0; i--) {\n\
    \        result.push_back(map_of_numbers[sorted_arr[i]]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu1eijqog.cpp: In function 'int main()':\n/tmp/tmpu1eijqog.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu1eijqog.cpp:2:\n/tmp/tmpu1eijqog.cpp:41:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpu1eijqog.cpp:41:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpu1eijqog.cpp:41:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu1eijqog.cpp:41:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu1eijqog.cpp:41:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpu1eijqog.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\"\
    ;\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] =\
    \ \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         res.push_back(m[i]);\n        }\n    }\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp28ct9odk.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp28ct9odk.cpp:28:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmp28ct9odk.cpp:33:5:\
    \ error: expected ';' before 'std'\n     std::reverse(res.begin(), res.end());\n\
    \     ^\n/tmp/tmp28ct9odk.cpp:33:40: error: could not convert 'std::reverse<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(res.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), res.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::reverse(res.begin(),\
    \ res.end());\n                                        ^\n/tmp/tmp28ct9odk.cpp:34:5:\
    \ error: expected primary-expression before 'return'\n     return res;\n     ^\n\
    /tmp/tmp28ct9odk.cpp:34:5: error: expected ')' before 'return'\n/tmp/tmp28ct9odk.cpp:\
    \ In function 'int main()':\n/tmp/tmp28ct9odk.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp28ct9odk.cpp:2:\n/tmp/tmp28ct9odk.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp28ct9odk.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> res;\n  std::map<long,\
    \ std::string> m = {\n    {1, \"One\"},\n    {2, \"Two\"},\n    {3, \"Three\"\
    },\n    {4, \"Four\"},\n    {5, \"Five\"},\n    {6, \"Six\"},\n    {7, \"Seven\"\
    },\n    {8, \"Eight\"},\n    {9, \"Nine\"}\n  };\n  std::sort(arr.begin(), arr.end());\n\
    \  for (auto it = arr.rbegin(); it != arr.rend(); ++it) {\n    if (*it >= 1 &&\
    \ *it <= 9) {\n      res.push_back(m[*it]);\n    }\n  }\n  return res;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2pr1j4o0.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp2pr1j4o0.cpp:27:3: error: in C++98\
    \ 'm' must be initialized by constructor, not by '{...}'\n   };\n   ^\n/tmp/tmp2pr1j4o0.cpp:27:3:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2pr1j4o0.cpp:27:3: error: could not convert '{{1,\
    \ \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"}, {6, \"\
    Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}}' from '<brace-enclosed\
    \ initializer list>' to 'std::map<long int, std::basic_string<char> >'\n/tmp/tmp2pr1j4o0.cpp:29:13:\
    \ error: 'it' does not name a type\n   for (auto it = arr.rbegin(); it != arr.rend();\
    \ ++it) {\n             ^\n/tmp/tmp2pr1j4o0.cpp:29:32: error: expected ';' before\
    \ 'it'\n   for (auto it = arr.rbegin(); it != arr.rend(); ++it) {\n          \
    \                      ^\n/tmp/tmp2pr1j4o0.cpp:29:32: error: 'it' was not declared\
    \ in this scope\n/tmp/tmp2pr1j4o0.cpp: In function 'int main()':\n/tmp/tmp2pr1j4o0.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2pr1j4o0.cpp:2:\n/tmp/tmp2pr1j4o0.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp2pr1j4o0.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (l"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ >= 1 && arr[i] <= 9) {\n            result.push_back(numbers[arr[i] - 1]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiuk3qsql.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpiuk3qsql.cpp:17:111: error: in\
    \ C++98 'numbers' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ numbers = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n                                                    \
    \                                                           ^\n/tmp/tmpiuk3qsql.cpp:17:111:\
    \ error: could not convert '{\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"}' from '<brace-enclosed initializer\
    \ list>' to 'std::vector<std::basic_string<char> >'\n/tmp/tmpiuk3qsql.cpp: In\
    \ function 'int main()':\n/tmp/tmpiuk3qsql.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiuk3qsql.cpp:2:\n/tmp/tmpiuk3qsql.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpiuk3qsql.cpp:29:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for (int i =\
    \ temp.size() - 1; i >= 0; i--) {\n        result.push_back(map[temp[i]]);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7u1z_4sd.cpp: In function 'int main()':\n/tmp/tmp7u1z_4sd.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7u1z_4sd.cpp:2:\n/tmp/tmp7u1z_4sd.cpp:41:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp7u1z_4sd.cpp:41:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp7u1z_4sd.cpp:41:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7u1z_4sd.cpp:41:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7u1z_4sd.cpp:41:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7u1z_4sd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ >= 1 && arr[i] <= 9) {\n            result.push_back(numbers[arr[i] - 1]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiuk3qsql.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpiuk3qsql.cpp:17:111: error: in\
    \ C++98 'numbers' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ numbers = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n                                                    \
    \                                                           ^\n/tmp/tmpiuk3qsql.cpp:17:111:\
    \ error: could not convert '{\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"}' from '<brace-enclosed initializer\
    \ list>' to 'std::vector<std::basic_string<char> >'\n/tmp/tmpiuk3qsql.cpp: In\
    \ function 'int main()':\n/tmp/tmpiuk3qsql.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiuk3qsql.cpp:2:\n/tmp/tmpiuk3qsql.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpiuk3qsql.cpp:29:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > 0 && arr[i] < 10) {\n            result.push_back(numbers[arr[i] - 1]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj_pz6vk6.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpj_pz6vk6.cpp:17:111: error: in\
    \ C++98 'numbers' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ numbers = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n                                                    \
    \                                                           ^\n/tmp/tmpj_pz6vk6.cpp:17:111:\
    \ error: could not convert '{\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"}' from '<brace-enclosed initializer\
    \ list>' to 'std::vector<std::basic_string<char> >'\n/tmp/tmpj_pz6vk6.cpp: In\
    \ function 'int main()':\n/tmp/tmpj_pz6vk6.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj_pz6vk6.cpp:2:\n/tmp/tmpj_pz6vk6.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpj_pz6vk6.cpp:29:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for (int i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (int i = 0; i < temp.size(); i++) {\n        switch (temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4t5zkvg.cpp: In function 'int main()':\n/tmp/tmpu4t5zkvg.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu4t5zkvg.cpp:2:\n/tmp/tmpu4t5zkvg.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpu4t5zkvg.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpu4t5zkvg.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu4t5zkvg.cpp:60:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu4t5zkvg.cpp:60:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpu4t5zkvg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::vector<std::string>\
    \ nums = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n    std::sort(arr.begin(), arr.end());\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n \
    \           res.push_back(nums[arr[i] - 1]);\n        }\n    }\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphv3ulvzt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmphv3ulvzt.cpp:17:108: error: in\
    \ C++98 'nums' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ nums = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n                                                    \
    \                                                        ^\n/tmp/tmphv3ulvzt.cpp:17:108:\
    \ error: could not convert '{\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"}' from '<brace-enclosed initializer\
    \ list>' to 'std::vector<std::basic_string<char> >'\n/tmp/tmphv3ulvzt.cpp: In\
    \ function 'int main()':\n/tmp/tmphv3ulvzt.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphv3ulvzt.cpp:2:\n/tmp/tmphv3ulvzt.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmphv3ulvzt.cpp:29:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (auto it = arr.rbegin(); it != arr.rend(); ++it) {\n  \
    \      if (*it > 0 && *it < 10) {\n            result.push_back(numbers[*it -\
    \ 1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpok1wchjk.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpok1wchjk.cpp:17:111: error: in\
    \ C++98 'numbers' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ numbers = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n                                                    \
    \                                                           ^\n/tmp/tmpok1wchjk.cpp:17:111:\
    \ error: could not convert '{\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"}' from '<brace-enclosed initializer\
    \ list>' to 'std::vector<std::basic_string<char> >'\n/tmp/tmpok1wchjk.cpp:19:15:\
    \ error: 'it' does not name a type\n     for (auto it = arr.rbegin(); it != arr.rend();\
    \ ++it) {\n               ^\n/tmp/tmpok1wchjk.cpp:19:34: error: expected ';' before\
    \ 'it'\n     for (auto it = arr.rbegin(); it != arr.rend(); ++it) {\n        \
    \                          ^\n/tmp/tmpok1wchjk.cpp:19:34: error: 'it' was not\
    \ declared in this scope\n/tmp/tmpok1wchjk.cpp: In function 'int main()':\n/tmp/tmpok1wchjk.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpok1wchjk.cpp:2:\n/tmp/tmpok1wchjk.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpok1wchjk.cpp:28:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i: arr){\n        if(i>=1 && i<=9){\n\
    \            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i: temp){\n\
    \        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsrjqgrw4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> arr_copy = arr;\n    std::sort(arr_copy.begin(), arr_copy.end());\n\
    \    std::reverse(arr_copy.begin(), arr_copy.end());\n    for (int i = 0; i <\
    \ arr_copy.size(); i++) {\n        if (arr_copy[i] == 1) {\n            result.push_back(\"\
    One\");\n        } else if (arr_copy[i] == 2) {\n            result.push_back(\"\
    Two\");\n        } else if (arr_copy[i] == 3) {\n            result.push_back(\"\
    Three\");\n        } else if (arr_copy[i] == 4) {\n            result.push_back(\"\
    Four\");\n        } else if (arr_copy[i] == 5) {\n            result.push_back(\"\
    Five\");\n        } else if (arr_copy[i] == 6) {\n            result.push_back(\"\
    Six\");\n        } else if (arr_copy[i] == 7) {\n            result.push_back(\"\
    Seven\");\n        } else if (arr_copy[i] == 8) {\n            result.push_back(\"\
    Eight\");\n        } else if (arr_copy[i] == 9) {\n            result.push_back(\"\
    Nine\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu_22j02l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8oav0u3w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] > 0 && arr[i] < 10) {\n            result.push_back(map[arr[i]]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0hsvmmeq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\"\
    ;\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] =\
    \ \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         res.push_back(m[i]);\n        }\n    }\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp28ct9odk.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp28ct9odk.cpp:28:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmp28ct9odk.cpp:33:5:\
    \ error: expected ';' before 'std'\n     std::reverse(res.begin(), res.end());\n\
    \     ^\n/tmp/tmp28ct9odk.cpp:33:40: error: could not convert 'std::reverse<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(res.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), res.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::reverse(res.begin(),\
    \ res.end());\n                                        ^\n/tmp/tmp28ct9odk.cpp:34:5:\
    \ error: expected primary-expression before 'return'\n     return res;\n     ^\n\
    /tmp/tmp28ct9odk.cpp:34:5: error: expected ')' before 'return'\n/tmp/tmp28ct9odk.cpp:\
    \ In function 'int main()':\n/tmp/tmp28ct9odk.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp28ct9odk.cpp:2:\n/tmp/tmp28ct9odk.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp28ct9odk.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::vector<long>\
    \ temp;\n  for (auto i : arr) {\n    if (i > 0 && i < 10) {\n      temp.push_back(i);\n\
    \    }\n  }\n  std::sort(temp.begin(), temp.end());\n  std::reverse(temp.begin(),\
    \ temp.end());\n  for (auto i : temp) {\n    switch (i) {\n      case 1:\n   \
    \     result.push_back(\"One\");\n        break;\n      case 2:\n        result.push_back(\"\
    Two\");\n        break;\n      case 3:\n        result.push_back(\"Three\");\n\
    \        break;\n      case 4:\n        result.push_back(\"Four\");\n        break;\n\
    \      case 5:\n        result.push_back(\"Five\");\n        break;\n      case\
    \ 6:\n        result.push_back(\"Six\");\n        break;\n      case 7:\n    \
    \    result.push_back(\"Seven\");\n        break;\n      case 8:\n        result.push_back(\"\
    Eight\");\n        break;\n      case 9:\n        result.push_back(\"Nine\");\n\
    \        break;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_h32qk8h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > 0 && arr[i] < 10) {\n            result.push_back(map[arr[i]]);\n        }\n\
    \    }\n    std::sort(result.begin(), result.end());\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9jy8yeh3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::map<long,\
    \ std::string> map;\n  map[1] = \"One\";\n  map[2] = \"Two\";\n  map[3] = \"Three\"\
    ;\n  map[4] = \"Four\";\n  map[5] = \"Five\";\n  map[6] = \"Six\";\n  map[7] =\
    \ \"Seven\";\n  map[8] = \"Eight\";\n  map[9] = \"Nine\";\n  for (auto &i : arr)\
    \ {\n    if (i >= 1 && i <= 9) {\n      result.push_back(map[i]);\n    }\n  }\n\
    \  std::sort(result.begin(), result.end());\n  std::reverse(result.begin(), result.end());\n\
    \  return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppysjn34k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplbetjge2.cpp: In function 'int main()':\n/tmp/tmplbetjge2.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplbetjge2.cpp:2:\n/tmp/tmplbetjge2.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmplbetjge2.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmplbetjge2.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmplbetjge2.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmplbetjge2.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplbetjge2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::map<long,\
    \ std::string> map;\n  map[1] = \"One\";\n  map[2] = \"Two\";\n  map[3] = \"Three\"\
    ;\n  map[4] = \"Four\";\n  map[5] = \"Five\";\n  map[6] = \"Six\";\n  map[7] =\
    \ \"Seven\";\n  map[8] = \"Eight\";\n  map[9] = \"Nine\";\n  for (auto i : arr)\
    \ {\n    if (i > 0 && i < 10) {\n      result.push_back(map[i]);\n    }\n  }\n\
    \  std::sort(result.begin(), result.end());\n  std::reverse(result.begin(), result.end());\n\
    \  return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt58fx4pb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::map<long,\
    \ std::string> map;\n  map[1] = \"One\";\n  map[2] = \"Two\";\n  map[3] = \"Three\"\
    ;\n  map[4] = \"Four\";\n  map[5] = \"Five\";\n  map[6] = \"Six\";\n  map[7] =\
    \ \"Seven\";\n  map[8] = \"Eight\";\n  map[9] = \"Nine\";\n  for (auto i : arr)\
    \ {\n    if (i >= 1 && i <= 9) {\n      result.push_back(map[i]);\n    }\n  }\n\
    \  std::sort(result.begin(), result.end());\n  std::reverse(result.begin(), result.end());\n\
    \  return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjxhrbq_i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> dict = {\n        {1, \"One\"},\n        {2, \"Two\"},\n      \
    \  {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"},\n        {6,\
    \ \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n        {9, \"\
    Nine\"},\n    };\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n\
    \            res.push_back(dict[i]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    std::reverse(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpohy4nchn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto i = arr.rbegin();\
    \ i != arr.rend(); i++) {\n        if (*i > 0 && *i < 10) {\n            result.push_back(map[*i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1vovtda.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplbetjge2.cpp: In function 'int main()':\n/tmp/tmplbetjge2.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplbetjge2.cpp:2:\n/tmp/tmplbetjge2.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmplbetjge2.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmplbetjge2.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmplbetjge2.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmplbetjge2.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplbetjge2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n\
    \    m[3] = \"Three\";\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] =\
    \ \"Six\";\n    m[7] = \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\"\
    ;\n    std::sort(arr.begin(), arr.end());\n    for (auto i = arr.rbegin(); i !=\
    \ arr.rend(); i++) {\n        if (*i >= 1 && *i <= 9) {\n            result.push_back(m[*i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmperclfiob.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> m = {\n        {1, \"One\"},\n        {2, \"Two\"},\n        {3,\
    \ \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"},\n        {6, \"\
    Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n        {9, \"Nine\"\
    }\n    };\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n       \
    \     res.push_back(m[i]);\n        }\n    }\n    std::sort(res.begin(), res.end());\n\
    \    std::reverse(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3hn111ds.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto i = arr.rbegin();\
    \ i != arr.rend(); i++) {\n        if (*i > 0 && *i < 10) {\n            result.push_back(map[*i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1vovtda.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(long i = 0; i < arr.size(); i++) {\n    \
    \    if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n \
    \       }\n    }\n    std::sort(temp.begin(), temp.end());\n    for(long i = temp.size()\
    \ - 1; i >= 0; i--) {\n        switch(temp[i]) {\n            case 1:\n      \
    \          result.push_back(\"One\");\n                break;\n            case\
    \ 2:\n                result.push_back(\"Two\");\n                break;\n   \
    \         case 3:\n                result.push_back(\"Three\");\n            \
    \    break;\n            case 4:\n                result.push_back(\"Four\");\n\
    \                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfvkkit3r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(),\
    \ arr.end());\n    std::reverse(arr.begin(), arr.end());\n    for (int i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n        \
    \    result.push_back(numbers[arr[i] - 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptdmh2z2z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> m;\n    m[1] = \"\
    One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\";\n    m[4] = \"Four\";\n   \
    \ m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] = \"Seven\";\n    m[8] = \"\
    Eight\";\n    m[9] = \"Nine\";\n    for (int i = 0; i < arr.size(); i++) {\n \
    \       if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for (int i =\
    \ temp.size() - 1; i >= 0; i--) {\n        result.push_back(m[temp[i]]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1sg1z50.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i > 0 && i < 10) {\n    \
    \        result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8adhfh9h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto i : arr)\
    \ {\n        if (i > 0 && i < 10) {\n            result.push_back(map[i]);\n \
    \       }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppx4pr7l5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] > 0 && arr[i] < 10) {\n            result.push_back(map[arr[i]]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0hsvmmeq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::map<long,\
    \ std::string> map;\n  map[1] = \"One\";\n  map[2] = \"Two\";\n  map[3] = \"Three\"\
    ;\n  map[4] = \"Four\";\n  map[5] = \"Five\";\n  map[6] = \"Six\";\n  map[7] =\
    \ \"Seven\";\n  map[8] = \"Eight\";\n  map[9] = \"Nine\";\n  for (int i = 0; i\
    \ < arr.size(); i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      result.push_back(map[arr[i]]);\n\
    \    }\n  }\n  std::sort(result.begin(), result.end());\n  std::reverse(result.begin(),\
    \ result.end());\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmfuuv73n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto i = arr.rbegin();\
    \ i != arr.rend(); i++) {\n        if (*i > 0 && *i < 10) {\n            result.push_back(map[*i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1vovtda.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> sorted;\n    for (auto i : arr) {\n        if (i >= 1 &&\
    \ i <= 9) {\n            sorted.push_back(i);\n        }\n    }\n    std::sort(sorted.begin(),\
    \ sorted.end());\n    for (auto i : sorted) {\n        switch (i) {\n        \
    \    case 1:\n                result.push_back(\"One\");\n                break;\n\
    \            case 2:\n                result.push_back(\"Two\");\n           \
    \     break;\n            case 3:\n                result.push_back(\"Three\"\
    );\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptl9a03jj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] > 0 && arr[i] < 10) {\n            temp.push_back(arr[i]);\n   \
    \     }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpztzpvrly.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i > 0 && i < 10) {\n    \
    \        result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8adhfh9h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i < 1 || i > 9) continue;\n\
    \        result.push_back(map[i]);\n    }\n    std::sort(result.begin(), result.end());\n\
    \    std::reverse(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppzvlivu9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::sort(arr.begin(), arr.end());\n    std::reverse(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == 1) {\n    \
    \        result.push_back(\"One\");\n        } else if (arr[i] == 2) {\n     \
    \       result.push_back(\"Two\");\n        } else if (arr[i] == 3) {\n      \
    \      result.push_back(\"Three\");\n        } else if (arr[i] == 4) {\n     \
    \       result.push_back(\"Four\");\n        } else if (arr[i] == 5) {\n     \
    \       result.push_back(\"Five\");\n        } else if (arr[i] == 6) {\n     \
    \       result.push_back(\"Six\");\n        } else if (arr[i] == 7) {\n      \
    \      result.push_back(\"Seven\");\n        } else if (arr[i] == 8) {\n     \
    \       result.push_back(\"Eight\");\n        } else if (arr[i] == 9) {\n    \
    \        result.push_back(\"Nine\");\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz4cnnpa8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\"\
    ;\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] =\
    \ \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > 0 && arr[i] < 10) {\n            res.push_back(m[arr[i]]);\n        }\n  \
    \  }\n    std::reverse(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdg4euxx1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] > 0 && arr[i] < 10) {\n            result.push_back(map[arr[i]]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0hsvmmeq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmwbsi26m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(),\
    \ arr.end());\n    std::reverse(arr.begin(), arr.end());\n    for (int i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n        \
    \    result.push_back(numbers[arr[i] - 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptdmh2z2z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> dict = {\n        {1, \"One\"},\n        {2, \"\
    Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"\
    },\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n\
    \        {9, \"Nine\"}\n    };\n    std::sort(arr.begin(), arr.end());\n    for\
    \ (auto it = arr.rbegin(); it != arr.rend(); ++it) {\n        if (*it >= 1 &&\
    \ *it <= 9) {\n            result.push_back(dict[*it]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7ox9uwji.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::map<long,\
    \ std::string> map;\n  map[1] = \"One\";\n  map[2] = \"Two\";\n  map[3] = \"Three\"\
    ;\n  map[4] = \"Four\";\n  map[5] = \"Five\";\n  map[6] = \"Six\";\n  map[7] =\
    \ \"Seven\";\n  map[8] = \"Eight\";\n  map[9] = \"Nine\";\n  std::sort(arr.begin(),\
    \ arr.end());\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] >= 1 &&\
    \ arr[i] <= 9) {\n      result.push_back(map[arr[i]]);\n    }\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5ttkkq60.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::vector<std::string>\
    \ numbers = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n  std::sort(arr.begin(), arr.end());\n  for (int i =\
    \ 0; i < arr.size(); i++) {\n    if (arr[i] > 0 && arr[i] < 10) {\n      result.push_back(numbers[arr[i]\
    \ - 1]);\n    }\n  }\n  std::reverse(result.begin(), result.end());\n  return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcfssn5n0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i: arr){\n        if(i>=1 && i<=9){\n\
    \            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i: temp){\n\
    \        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsrjqgrw4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for (int i =\
    \ temp.size() - 1; i >= 0; i--) {\n        result.push_back(map[temp[i]]);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7u1z_4sd.cpp: In function 'int main()':\n/tmp/tmp7u1z_4sd.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7u1z_4sd.cpp:2:\n/tmp/tmp7u1z_4sd.cpp:41:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp7u1z_4sd.cpp:41:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp7u1z_4sd.cpp:41:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7u1z_4sd.cpp:41:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7u1z_4sd.cpp:41:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7u1z_4sd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> m = {\n        {1, \"One\"},\n        {2, \"Two\"\
    },\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"},\n\
    \        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n   \
    \     {9, \"Nine\"}\n    };\n    std::sort(arr.begin(), arr.end());\n    for (auto\
    \ it = arr.rbegin(); it != arr.rend(); ++it) {\n        if (m.find(*it) != m.end())\
    \ {\n            result.push_back(m[*it]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_m46kp1z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\"\
    ;\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] =\
    \ \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > 0 && arr[i] < 10) {\n            res.push_back(m[arr[i]]);\n        }\n  \
    \  }\n    std::reverse(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdg4euxx1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8oav0u3w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto i = arr.rbegin();\
    \ i != arr.rend(); i++) {\n        if (*i >= 1 && *i <= 9) {\n            result.push_back(map[*i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwcap2rpt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmwbsi26m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto it = arr.rbegin();\
    \ it != arr.rend(); ++it) {\n        if (*it >= 1 && *it <= 9) {\n           \
    \ result.push_back(map[*it]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpggye5hbm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8oav0u3w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] > 0 && arr[i] < 10) {\n            temp.push_back(arr[i]);\n   \
    \     }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpztzpvrly.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmwbsi26m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > 0 && arr[i] < 10) {\n            result.push_back(numbers[arr[i] - 1]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj_pz6vk6.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpj_pz6vk6.cpp:17:111: error: in\
    \ C++98 'numbers' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ numbers = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n                                                    \
    \                                                           ^\n/tmp/tmpj_pz6vk6.cpp:17:111:\
    \ error: could not convert '{\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"}' from '<brace-enclosed initializer\
    \ list>' to 'std::vector<std::basic_string<char> >'\n/tmp/tmpj_pz6vk6.cpp: In\
    \ function 'int main()':\n/tmp/tmpj_pz6vk6.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj_pz6vk6.cpp:2:\n/tmp/tmpj_pz6vk6.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpj_pz6vk6.cpp:29:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8oav0u3w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::vector<long>::iterator\
    \ it;\n  std::vector<long>::iterator it1;\n  std::vector<long>::iterator it2;\n\
    \  std::vector<long>::iterator it3;\n  std::vector<long>::iterator it4;\n  std::vector<long>::iterator\
    \ it5;\n  std::vector<long>::iterator it6;\n  std::vector<long>::iterator it7;\n\
    \  std::vector<long>::iterator it8;\n  std::vector<long>::iterator it9;\n  std::vector<long>::iterator\
    \ it10;\n  std::vector<long>::iterator it11;\n  std::vector<long>::iterator it12;\n\
    \  std::vector<long>::iterator it13;\n  std::vector<long>::iterator it14;\n  std::vector<long>::iterator\
    \ it15;\n  std::vector<long>::iterator it16;\n  std::vector<long>::iterator it17;\n\
    \  std::vector<long>::iterator it18;\n  std::vector<long>::iterator it19;\n  std::vector<long>::iterator\
    \ it20;\n  std::vector<long>::iterator it21;\n  std::vector<long>::iterator it22;\n\
    \  std::vector<long>::iterator it23;\n  std::vector<long>::iterator it24;\n  std::vector<long>::iterator\
    \ it25;\n  std::vector<long>::iterator it26;\n  std::vector<long>::iterator it27;\n\
    \  std::vector<long>::iterator it28;\n  std::vector<long>::iterator it29;\n  std::vector<long>::iterator\
    \ it30;\n  std::vector<long>::iterator it31;\n  std::vector<long>::iterator it32;\n\
    \  std::vector<long>::iterator it33;\n  std::vector<long>::iterator it34;\n  std::vector<long>::iterator\
    \ it35;\n  std::vector<long>::iterator it36;\n  std::vector<long>::iterator it37;\n\
    \  std::vector<long\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphlkradxc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > 0 && arr[i] < 10) {\n            result.push_back(numbers[arr[i] - 1]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj_pz6vk6.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpj_pz6vk6.cpp:17:111: error: in\
    \ C++98 'numbers' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ numbers = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n                                                    \
    \                                                           ^\n/tmp/tmpj_pz6vk6.cpp:17:111:\
    \ error: could not convert '{\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"}' from '<brace-enclosed initializer\
    \ list>' to 'std::vector<std::basic_string<char> >'\n/tmp/tmpj_pz6vk6.cpp: In\
    \ function 'int main()':\n/tmp/tmpj_pz6vk6.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj_pz6vk6.cpp:2:\n/tmp/tmpj_pz6vk6.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpj_pz6vk6.cpp:29:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (long i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmcssbslo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::vector<std::string>\
    \ nums = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n    std::sort(arr.begin(), arr.end());\n    for (auto\
    \ it = arr.rbegin(); it != arr.rend(); ++it) {\n        if (*it > 0 && *it < 10)\
    \ {\n            res.push_back(nums[*it - 1]);\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx6ksq9n3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto it = arr.rbegin();\
    \ it != arr.rend(); ++it) {\n        if (*it >= 1 && *it <= 9) {\n           \
    \ result.push_back(map[*it]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpggye5hbm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmwbsi26m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplbetjge2.cpp: In function 'int main()':\n/tmp/tmplbetjge2.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplbetjge2.cpp:2:\n/tmp/tmplbetjge2.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmplbetjge2.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmplbetjge2.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmplbetjge2.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmplbetjge2.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplbetjge2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplbetjge2.cpp: In function 'int main()':\n/tmp/tmplbetjge2.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplbetjge2.cpp:2:\n/tmp/tmplbetjge2.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmplbetjge2.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmplbetjge2.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmplbetjge2.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmplbetjge2.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplbetjge2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> myMap;\n    myMap[1]\
    \ = \"One\";\n    myMap[2] = \"Two\";\n    myMap[3] = \"Three\";\n    myMap[4]\
    \ = \"Four\";\n    myMap[5] = \"Five\";\n    myMap[6] = \"Six\";\n    myMap[7]\
    \ = \"Seven\";\n    myMap[8] = \"Eight\";\n    myMap[9] = \"Nine\";\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n \
    \           temp.push_back(arr[i]);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    for (int i = temp.size() - 1; i >= 0; i--) {\n        result.push_back(myMap[temp[i]]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptq3nig9p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::sort(arr.begin(), arr.end());\n    std::reverse(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == 1) {\n    \
    \        result.push_back(\"One\");\n        } else if (arr[i] == 2) {\n     \
    \       result.push_back(\"Two\");\n        } else if (arr[i] == 3) {\n      \
    \      result.push_back(\"Three\");\n        } else if (arr[i] == 4) {\n     \
    \       result.push_back(\"Four\");\n        } else if (arr[i] == 5) {\n     \
    \       result.push_back(\"Five\");\n        } else if (arr[i] == 6) {\n     \
    \       result.push_back(\"Six\");\n        } else if (arr[i] == 7) {\n      \
    \      result.push_back(\"Seven\");\n        } else if (arr[i] == 8) {\n     \
    \       result.push_back(\"Eight\");\n        } else if (arr[i] == 9) {\n    \
    \        result.push_back(\"Nine\");\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz4cnnpa8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map = {{1, \"One\"}, {2, \"Two\"}, {3, \"Three\"\
    }, {4, \"Four\"}, {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"},\
    \ {9, \"Nine\"}};\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n       \
    \ }\n    }\n    std::sort(result.begin(), result.end());\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9i53aufl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i > 0 && i < 10) {\n    \
    \        result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8adhfh9h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > 0 && arr[i] < 10) {\n            result.push_back(numbers[arr[i] - 1]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj_pz6vk6.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpj_pz6vk6.cpp:17:111: error: in\
    \ C++98 'numbers' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ numbers = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n                                                    \
    \                                                           ^\n/tmp/tmpj_pz6vk6.cpp:17:111:\
    \ error: could not convert '{\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"}' from '<brace-enclosed initializer\
    \ list>' to 'std::vector<std::basic_string<char> >'\n/tmp/tmpj_pz6vk6.cpp: In\
    \ function 'int main()':\n/tmp/tmpj_pz6vk6.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj_pz6vk6.cpp:2:\n/tmp/tmpj_pz6vk6.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpj_pz6vk6.cpp:29:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for (int i =\
    \ temp.size() - 1; i >= 0; i--) {\n        result.push_back(map[temp[i]]);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7u1z_4sd.cpp: In function 'int main()':\n/tmp/tmp7u1z_4sd.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7u1z_4sd.cpp:2:\n/tmp/tmp7u1z_4sd.cpp:41:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp7u1z_4sd.cpp:41:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp7u1z_4sd.cpp:41:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7u1z_4sd.cpp:41:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7u1z_4sd.cpp:41:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7u1z_4sd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n       \
    \ }\n    }\n    std::sort(result.begin(), result.end());\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp88d8bxo7.cpp: In function 'int main()':\n/tmp/tmp88d8bxo7.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp88d8bxo7.cpp:2:\n/tmp/tmp88d8bxo7.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp88d8bxo7.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp88d8bxo7.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp88d8bxo7.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp88d8bxo7.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp88d8bxo7.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::map<long,\
    \ std::string> map;\n  map[1] = \"One\";\n  map[2] = \"Two\";\n  map[3] = \"Three\"\
    ;\n  map[4] = \"Four\";\n  map[5] = \"Five\";\n  map[6] = \"Six\";\n  map[7] =\
    \ \"Seven\";\n  map[8] = \"Eight\";\n  map[9] = \"Nine\";\n  for (auto i : arr)\
    \ {\n    if (i >= 1 && i <= 9) {\n      result.push_back(map[i]);\n    }\n  }\n\
    \  std::sort(result.begin(), result.end());\n  std::reverse(result.begin(), result.end());\n\
    \  return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjxhrbq_i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::map<long,\
    \ std::string> map;\n  map[1] = \"One\";\n  map[2] = \"Two\";\n  map[3] = \"Three\"\
    ;\n  map[4] = \"Four\";\n  map[5] = \"Five\";\n  map[6] = \"Six\";\n  map[7] =\
    \ \"Seven\";\n  map[8] = \"Eight\";\n  map[9] = \"Nine\";\n  std::vector<long>\
    \ temp;\n  for (auto i : arr) {\n    if (i >= 1 && i <= 9) {\n      temp.push_back(i);\n\
    \    }\n  }\n  std::sort(temp.begin(), temp.end());\n  for (auto i = temp.rbegin();\
    \ i != temp.rend(); i++) {\n    result.push_back(map[*i]);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpleeyb2os.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (auto i : arr) {\n\
    \        if (i >= 1 && i <= 9) {\n            temp.push_back(i);\n        }\n\
    \    }\n    std::sort(temp.begin(), temp.end());\n    for (auto i = temp.rbegin();\
    \ i != temp.rend(); i++) {\n        result.push_back(map[*i]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk60l8rnm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\"\
    ;\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] =\
    \ \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    for (auto i : arr)\
    \ {\n        if (i > 0 && i < 10) {\n            res.push_back(m[i]);\n      \
    \  }\n    }\n    std::sort(res.begin(), res.end());\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpitf1r_zj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::vector<long>\
    \ temp;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n      temp.push_back(arr[i]);\n    }\n  }\n  std::sort(temp.begin(),\
    \ temp.end());\n  std::reverse(temp.begin(), temp.end());\n  for (int i = 0; i\
    \ < temp.size(); i++) {\n    if (temp[i] == 1) {\n      result.push_back(\"One\"\
    );\n    } else if (temp[i] == 2) {\n      result.push_back(\"Two\");\n    } else\
    \ if (temp[i] == 3) {\n      result.push_back(\"Three\");\n    } else if (temp[i]\
    \ == 4) {\n      result.push_back(\"Four\");\n    } else if (temp[i] == 5) {\n\
    \      result.push_back(\"Five\");\n    } else if (temp[i] == 6) {\n      result.push_back(\"\
    Six\");\n    } else if (temp[i] == 7) {\n      result.push_back(\"Seven\");\n\
    \    } else if (temp[i] == 8) {\n      result.push_back(\"Eight\");\n    } else\
    \ if (temp[i] == 9) {\n      result.push_back(\"Nine\");\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpoz72b84i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > 0 && arr[i] < 10) {\n            result.push_back(map[arr[i]]);\n        }\n\
    \    }\n    std::sort(result.begin(), result.end());\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph9roo39z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> names = {\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (long i = arr.size() - 1; i >= 0; i--) {\n        if (arr[i]\
    \ >= 1 && arr[i] <= 9) {\n            result.push_back(names[arr[i] - 1]);\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzwdt31a8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] == 1) {\n            result.push_back(\"One\");\n    \
    \    } else if (arr[i] == 2) {\n            result.push_back(\"Two\");\n     \
    \   } else if (arr[i] == 3) {\n            result.push_back(\"Three\");\n    \
    \    } else if (arr[i] == 4) {\n            result.push_back(\"Four\");\n    \
    \    } else if (arr[i] == 5) {\n            result.push_back(\"Five\");\n    \
    \    } else if (arr[i] == 6) {\n            result.push_back(\"Six\");\n     \
    \   } else if (arr[i] == 7) {\n            result.push_back(\"Seven\");\n    \
    \    } else if (arr[i] == 8) {\n            result.push_back(\"Eight\");\n   \
    \     } else if (arr[i] == 9) {\n            result.push_back(\"Nine\");\n   \
    \     }\n    }\n    std::reverse(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpphhcu1kc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for (long i = 0; i < arr.size(); i++) {\n   \
    \     if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (long i = 0; i < temp.size(); i++) {\n        switch (temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjvv9meu2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::map<long,\
    \ std::string> map;\n  map[1] = \"One\";\n  map[2] = \"Two\";\n  map[3] = \"Three\"\
    ;\n  map[4] = \"Four\";\n  map[5] = \"Five\";\n  map[6] = \"Six\";\n  map[7] =\
    \ \"Seven\";\n  map[8] = \"Eight\";\n  map[9] = \"Nine\";\n  for (auto i : arr)\
    \ {\n    if (i >= 1 && i <= 9) {\n      result.push_back(map[i]);\n    }\n  }\n\
    \  std::sort(result.begin(), result.end());\n  std::reverse(result.begin(), result.end());\n\
    \  return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjxhrbq_i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for (long i = 0; i < arr.size(); i++) {\n   \
    \     if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (long i = 0; i < temp.size(); i++) {\n        switch (temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjvv9meu2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::sort(arr.begin(), arr.end());\n    for (auto i : arr) {\n        if (i\
    \ > 0 && i < 10) {\n            switch (i) {\n                case 1:\n      \
    \              result.push_back(\"One\");\n                    break;\n      \
    \          case 2:\n                    result.push_back(\"Two\");\n         \
    \           break;\n                case 3:\n                    result.push_back(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push_back(\"Four\");\n                    break;\n            \
    \    case 5:\n                    result.push_back(\"Five\");\n              \
    \      break;\n                case 6:\n                    result.push_back(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push_back(\"Seven\");\n                    break;\n             \
    \   case 8:\n                    result.push_back(\"Eight\");\n              \
    \      break;\n                case 9:\n                    result.push_back(\"\
    Nine\");\n                    break;\n            }\n        }\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpud0ytewz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::vector<long>\
    \ temp;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n      temp.push_back(arr[i]);\n    }\n  }\n  std::sort(temp.begin(),\
    \ temp.end());\n  std::reverse(temp.begin(), temp.end());\n  for (int i = 0; i\
    \ < temp.size(); i++) {\n    if (temp[i] == 1) {\n      result.push_back(\"One\"\
    );\n    } else if (temp[i] == 2) {\n      result.push_back(\"Two\");\n    } else\
    \ if (temp[i] == 3) {\n      result.push_back(\"Three\");\n    } else if (temp[i]\
    \ == 4) {\n      result.push_back(\"Four\");\n    } else if (temp[i] == 5) {\n\
    \      result.push_back(\"Five\");\n    } else if (temp[i] == 6) {\n      result.push_back(\"\
    Six\");\n    } else if (temp[i] == 7) {\n      result.push_back(\"Seven\");\n\
    \    } else if (temp[i] == 8) {\n      result.push_back(\"Eight\");\n    } else\
    \ if (temp[i] == 9) {\n      result.push_back(\"Nine\");\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpoz72b84i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for (int i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (int i = 0; i < temp.size(); i++) {\n        switch (temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4t5zkvg.cpp: In function 'int main()':\n/tmp/tmpu4t5zkvg.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu4t5zkvg.cpp:2:\n/tmp/tmpu4t5zkvg.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpu4t5zkvg.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpu4t5zkvg.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu4t5zkvg.cpp:60:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu4t5zkvg.cpp:60:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpu4t5zkvg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for (auto i : arr) {\n        if (i > 0 && i\
    \ < 10) {\n            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for (auto i :\
    \ temp) {\n        switch (i) {\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo8ct2qm1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplbetjge2.cpp: In function 'int main()':\n/tmp/tmplbetjge2.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplbetjge2.cpp:2:\n/tmp/tmplbetjge2.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmplbetjge2.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmplbetjge2.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmplbetjge2.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmplbetjge2.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplbetjge2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for (int i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (int i = 0; i < temp.size(); i++) {\n        if (temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        } else if (temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        } else if (temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        } else if (temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        } else if (temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        } else if (temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        } else if (temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        } else if (temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        } else if (temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpicx2ljnq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::vector<long>\
    \ tmp;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n      tmp.push_back(arr[i]);\n    }\n  }\n  std::sort(tmp.begin(),\
    \ tmp.end());\n  std::reverse(tmp.begin(), tmp.end());\n  for (int i = 0; i <\
    \ tmp.size(); i++) {\n    switch (tmp[i]) {\n      case 1:\n        result.push_back(\"\
    One\");\n        break;\n      case 2:\n        result.push_back(\"Two\");\n \
    \       break;\n      case 3:\n        result.push_back(\"Three\");\n        break;\n\
    \      case 4:\n        result.push_back(\"Four\");\n        break;\n      case\
    \ 5:\n        result.push_back(\"Five\");\n        break;\n      case 6:\n   \
    \     result.push_back(\"Six\");\n        break;\n      case 7:\n        result.push_back(\"\
    Seven\");\n        break;\n      case 8:\n        result.push_back(\"Eight\");\n\
    \        break;\n      case 9:\n        result.push_back(\"Nine\");\n        break;\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6obxmhc1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto it = arr.rbegin();\
    \ it != arr.rend(); ++it) {\n        if (*it >= 1 && *it <= 9) {\n           \
    \ result.push_back(map[*it]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpggye5hbm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::vector<long>\
    \ temp;\n  for (auto i : arr) {\n    if (i >= 1 && i <= 9) {\n      temp.push_back(i);\n\
    \    }\n  }\n  std::sort(temp.begin(), temp.end());\n  std::reverse(temp.begin(),\
    \ temp.end());\n  for (auto i : temp) {\n    switch (i) {\n      case 1:\n   \
    \     result.push_back(\"One\");\n        break;\n      case 2:\n        result.push_back(\"\
    Two\");\n        break;\n      case 3:\n        result.push_back(\"Three\");\n\
    \        break;\n      case 4:\n        result.push_back(\"Four\");\n        break;\n\
    \      case 5:\n        result.push_back(\"Five\");\n        break;\n      case\
    \ 6:\n        result.push_back(\"Six\");\n        break;\n      case 7:\n    \
    \    result.push_back(\"Seven\");\n        break;\n      case 8:\n        result.push_back(\"\
    Eight\");\n        break;\n      case 9:\n        result.push_back(\"Nine\");\n\
    \        break;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_qm7ehqp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::vector<long>\
    \ temp;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n      temp.push_back(arr[i]);\n    }\n  }\n  std::sort(temp.begin(),\
    \ temp.end());\n  for (int i = temp.size() - 1; i >= 0; i--) {\n    switch (temp[i])\
    \ {\n      case 1:\n        result.push_back(\"One\");\n        break;\n     \
    \ case 2:\n        result.push_back(\"Two\");\n        break;\n      case 3:\n\
    \        result.push_back(\"Three\");\n        break;\n      case 4:\n       \
    \ result.push_back(\"Four\");\n        break;\n      case 5:\n        result.push_back(\"\
    Five\");\n        break;\n      case 6:\n        result.push_back(\"Six\");\n\
    \        break;\n      case 7:\n        result.push_back(\"Seven\");\n       \
    \ break;\n      case 8:\n        result.push_back(\"Eight\");\n        break;\n\
    \      case 9:\n        result.push_back(\"Nine\");\n        break;\n    }\n \
    \ }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0f5wa_yy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::vector<std::string>\
    \ strs = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n  std::vector<long> nums = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n\
    \  std::vector<long> temp;\n  for (int i = 0; i < arr.size(); i++) {\n    for\
    \ (int j = 0; j < nums.size(); j++) {\n      if (arr[i] == nums[j]) {\n      \
    \  temp.push_back(arr[i]);\n      }\n    }\n  }\n  std::sort(temp.begin(), temp.end());\n\
    \  for (int i = temp.size() - 1; i >= 0; i--) {\n    for (int j = 0; j < nums.size();\
    \ j++) {\n      if (temp[i] == nums[j]) {\n        result.push_back(strs[j]);\n\
    \      }\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpziurylsb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\"\
    ;\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] =\
    \ \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    for (auto i : arr)\
    \ {\n        if (i >= 1 && i <= 9) {\n            res.push_back(m[i]);\n     \
    \   }\n    }\n    std::sort(res.begin(), res.end());\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph1ucqtvd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\"\
    ;\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] =\
    \ \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    for (auto i : arr)\
    \ {\n        if (i >= 1 && i <= 9) {\n            res.push_back(m[i]);\n     \
    \   }\n    }\n    std::sort(res.begin(), res.end());\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph1ucqtvd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::vector<long>\
    \ sorted;\n  for (long i : arr) {\n    if (i >= 1 && i <= 9) {\n      sorted.push_back(i);\n\
    \    }\n  }\n  std::sort(sorted.begin(), sorted.end());\n  for (long i : sorted)\
    \ {\n    switch (i) {\n      case 1:\n        result.push_back(\"One\");\n   \
    \     break;\n      case 2:\n        result.push_back(\"Two\");\n        break;\n\
    \      case 3:\n        result.push_back(\"Three\");\n        break;\n      case\
    \ 4:\n        result.push_back(\"Four\");\n        break;\n      case 5:\n   \
    \     result.push_back(\"Five\");\n        break;\n      case 6:\n        result.push_back(\"\
    Six\");\n        break;\n      case 7:\n        result.push_back(\"Seven\");\n\
    \        break;\n      case 8:\n        result.push_back(\"Eight\");\n       \
    \ break;\n      case 9:\n        result.push_back(\"Nine\");\n        break;\n\
    \    }\n  }\n  std::reverse(result.begin(), result.end());\n  return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1xj_yfew.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for (int i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (int i = 0; i < temp.size(); i++) {\n        switch (temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4t5zkvg.cpp: In function 'int main()':\n/tmp/tmpu4t5zkvg.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu4t5zkvg.cpp:2:\n/tmp/tmpu4t5zkvg.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpu4t5zkvg.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpu4t5zkvg.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu4t5zkvg.cpp:60:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu4t5zkvg.cpp:60:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpu4t5zkvg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> dict = {\n        {1, \"One\"},\n        {2, \"\
    Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"\
    },\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n\
    \        {9, \"Nine\"}\n    };\n    std::sort(arr.begin(), arr.end());\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9)\
    \ {\n            result.push_back(dict[arr[i]]);\n        }\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbjdm8xyi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\"\
    ;\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] =\
    \ \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    for (auto i : arr)\
    \ {\n        if (i >= 1 && i <= 9) {\n            res.push_back(m[i]);\n     \
    \   }\n    }\n    std::sort(res.begin(), res.end());\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph1ucqtvd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::vector<long>\
    \ temp;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n      temp.push_back(arr[i]);\n    }\n  }\n  std::sort(temp.begin(),\
    \ temp.end());\n  std::reverse(temp.begin(), temp.end());\n  for (int i = 0; i\
    \ < temp.size(); i++) {\n    switch (temp[i]) {\n      case 1:\n        result.push_back(\"\
    One\");\n        break;\n      case 2:\n        result.push_back(\"Two\");\n \
    \       break;\n      case 3:\n        result.push_back(\"Three\");\n        break;\n\
    \      case 4:\n        result.push_back(\"Four\");\n        break;\n      case\
    \ 5:\n        result.push_back(\"Five\");\n        break;\n      case 6:\n   \
    \     result.push_back(\"Six\");\n        break;\n      case 7:\n        result.push_back(\"\
    Seven\");\n        break;\n      case 8:\n        result.push_back(\"Eight\");\n\
    \        break;\n      case 9:\n        result.push_back(\"Nine\");\n        break;\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb2mns5h9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (auto i : arr) {\n\
    \        if (i >= 1 && i <= 9) {\n            temp.push_back(i);\n        }\n\
    \    }\n    std::sort(temp.begin(), temp.end());\n    for (auto i = temp.rbegin();\
    \ i != temp.rend(); i++) {\n        result.push_back(map[*i]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk60l8rnm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> m = {{1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\
    \ {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}};\n\
    \    for (auto i : arr) {\n        if (i > 0 && i < 10) {\n            res.push_back(m[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv8w91ku7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long>::iterator it;\n    std::vector<long>::iterator it2;\n  \
    \  std::vector<long>::iterator it3;\n    std::vector<long>::iterator it4;\n  \
    \  std::vector<long>::iterator it5;\n    std::vector<long>::iterator it6;\n  \
    \  std::vector<long>::iterator it7;\n    std::vector<long>::iterator it8;\n  \
    \  std::vector<long>::iterator it9;\n    std::vector<long>::iterator it10;\n \
    \   std::vector<long>::iterator it11;\n    std::vector<long>::iterator it12;\n\
    \    std::vector<long>::iterator it13;\n    std::vector<long>::iterator it14;\n\
    \    std::vector<long>::iterator it15;\n    std::vector<long>::iterator it16;\n\
    \    std::vector<long>::iterator it17;\n    std::vector<long>::iterator it18;\n\
    \    std::vector<long>::iterator it19;\n    std::vector<long>::iterator it20;\n\
    \    std::vector<long>::iterator it21;\n    std::vector<long>::iterator it22;\n\
    \    std::vector<long>::iterator it23;\n    std::vector<long>::iterator it24;\n\
    \    std::vector<long>::iterator it25;\n    std::vector<long>::iterator it26;\n\
    \    std::vector<long>::iterator it27;\n    std::vector<long>::iterator it28;\n\
    \    std::vector<long>::iterator it29;\n    std::vector<long>::iterator it30;\n\
    \    std::vector<long>::iterator it31;\n    std::vector<long>::iterator it32;\n\
    \    std::vector<long>::iterator it33;\n    std::vector<long>::iterator it34;\n\
    \    std::vector<long>::iterator it35;\n    std::vector<long>::iterator it36;\n\
    \    std::vector<long>::iterator it37;\n    std::vector<long>::iterator it38;\n\
    \    std::vector<long\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2u6e_oyl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> nums = {\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ >= 1 && arr[i] <= 9) {\n            result.push_back(nums[arr[i] - 1]);\n  \
    \      }\n    }\n    std::reverse(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphusbdvio.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> m = {{1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\
    \ {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}};\n\
    \    std::sort(arr.begin(), arr.end());\n    for (auto i : arr) {\n        if\
    \ (m.find(i) != m.end()) {\n            res.push_back(m[i]);\n        }\n    }\n\
    \    std::reverse(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp92mnxc03.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmwbsi26m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8oav0u3w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8oav0u3w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto it = arr.rbegin();\
    \ it != arr.rend(); ++it) {\n        if (*it < 1 || *it > 9) {\n            continue;\n\
    \        }\n        result.push_back(map[*it]);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprl4t2uxl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::map<long,\
    \ std::string> map;\n  map[1] = \"One\";\n  map[2] = \"Two\";\n  map[3] = \"Three\"\
    ;\n  map[4] = \"Four\";\n  map[5] = \"Five\";\n  map[6] = \"Six\";\n  map[7] =\
    \ \"Seven\";\n  map[8] = \"Eight\";\n  map[9] = \"Nine\";\n  std::sort(arr.begin(),\
    \ arr.end());\n  for (auto i : arr) {\n    if (i >= 1 && i <= 9) {\n      result.push_back(map[i]);\n\
    \    }\n  }\n  std::reverse(result.begin(), result.end());\n  return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuhv9e8re.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> sorted;\n    for (auto i : arr) {\n        if (i >= 1 &&\
    \ i <= 9) {\n            sorted.push_back(i);\n        }\n    }\n    std::sort(sorted.begin(),\
    \ sorted.end());\n    for (auto i : sorted) {\n        switch (i) {\n        \
    \    case 1:\n                result.push_back(\"One\");\n                break;\n\
    \            case 2:\n                result.push_back(\"Two\");\n           \
    \     break;\n            case 3:\n                result.push_back(\"Three\"\
    );\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptl9a03jj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8oav0u3w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for (int i =\
    \ temp.size() - 1; i >= 0; i--) {\n        result.push_back(map[temp[i]]);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7u1z_4sd.cpp: In function 'int main()':\n/tmp/tmp7u1z_4sd.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7u1z_4sd.cpp:2:\n/tmp/tmp7u1z_4sd.cpp:41:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp7u1z_4sd.cpp:41:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp7u1z_4sd.cpp:41:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7u1z_4sd.cpp:41:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7u1z_4sd.cpp:41:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7u1z_4sd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::map<long,\
    \ std::string> map;\n  map[1] = \"One\";\n  map[2] = \"Two\";\n  map[3] = \"Three\"\
    ;\n  map[4] = \"Four\";\n  map[5] = \"Five\";\n  map[6] = \"Six\";\n  map[7] =\
    \ \"Seven\";\n  map[8] = \"Eight\";\n  map[9] = \"Nine\";\n  std::sort(arr.begin(),\
    \ arr.end());\n  for (auto it = arr.rbegin(); it != arr.rend(); ++it) {\n    if\
    \ (*it > 0 && *it < 10) {\n      result.push_back(map[*it]);\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvnyv3bgs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\"\
    ;\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] =\
    \ \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    for (auto i : arr)\
    \ {\n        if (i >= 1 && i <= 9) {\n            res.push_back(m[i]);\n     \
    \   }\n    }\n    std::sort(res.begin(), res.end());\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph1ucqtvd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> nums = {\n        {1, \"One\"},\n        {2, \"\
    Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"\
    },\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n\
    \        {9, \"Nine\"}\n    };\n    std::sort(arr.begin(), arr.end());\n    for\
    \ (int i = arr.size() - 1; i >= 0; i--) {\n        if (arr[i] >= 1 && arr[i] <=\
    \ 9) {\n            result.push_back(nums[arr[i]]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp89cl21tb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::map<long,\
    \ std::string> map = {\n    {1, \"One\"},\n    {2, \"Two\"},\n    {3, \"Three\"\
    },\n    {4, \"Four\"},\n    {5, \"Five\"},\n    {6, \"Six\"},\n    {7, \"Seven\"\
    },\n    {8, \"Eight\"},\n    {9, \"Nine\"}\n  };\n  std::sort(arr.begin(), arr.end());\n\
    \  for (auto it = arr.rbegin(); it != arr.rend(); ++it) {\n    if (*it > 0 &&\
    \ *it < 10) {\n      result.push_back(map[*it]);\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqmw5e1wp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n\
    \    m[3] = \"Three\";\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] =\
    \ \"Six\";\n    m[7] = \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\"\
    ;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push_back(m[arr[i]]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpot3o2fu5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8oav0u3w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::map<long,\
    \ std::string> dict = {\n    {1, \"One\"},\n    {2, \"Two\"},\n    {3, \"Three\"\
    },\n    {4, \"Four\"},\n    {5, \"Five\"},\n    {6, \"Six\"},\n    {7, \"Seven\"\
    },\n    {8, \"Eight\"},\n    {9, \"Nine\"}\n  };\n  std::sort(arr.begin(), arr.end());\n\
    \  for (auto it = arr.rbegin(); it != arr.rend(); ++it) {\n    if (*it > 0 &&\
    \ *it < 10) {\n      result.push_back(dict[*it]);\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf2pavt31.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::vector<std::string>\
    \ nums = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n    std::sort(arr.begin(), arr.end());\n    for (auto\
    \ i = arr.rbegin(); i != arr.rend(); i++) {\n        if (*i > 0 && *i < 10) {\n\
    \            res.push_back(nums[*i - 1]);\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo4bcwl3z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> sorted;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (auto i : arr) {\n\
    \        if (i > 0 && i < 10) {\n            sorted.push_back(i);\n        }\n\
    \    }\n    std::sort(sorted.begin(), sorted.end());\n    for (auto i : sorted)\
    \ {\n        result.push_back(map[i]);\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjgltg72i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::map<long,\
    \ std::string> map = {\n    {1, \"One\"},\n    {2, \"Two\"},\n    {3, \"Three\"\
    },\n    {4, \"Four\"},\n    {5, \"Five\"},\n    {6, \"Six\"},\n    {7, \"Seven\"\
    },\n    {8, \"Eight\"},\n    {9, \"Nine\"}\n  };\n  std::sort(arr.begin(), arr.end());\n\
    \  for (auto it = arr.rbegin(); it != arr.rend(); ++it) {\n    if (*it >= 1 &&\
    \ *it <= 9) {\n      result.push_back(map[*it]);\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu8j34mpm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> m = {\n        {1, \"One\"},\n        {2, \"Two\"\
    },\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"},\n\
    \        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n   \
    \     {9, \"Nine\"}\n    };\n    for (auto i : arr) {\n        if (i >= 1 && i\
    \ <= 9) {\n            result.push_back(m[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5zmww8_q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749549
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for (int i =\
    \ temp.size() - 1; i >= 0; i--) {\n        result.push_back(map[temp[i]]);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7u1z_4sd.cpp: In function 'int main()':\n/tmp/tmp7u1z_4sd.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7u1z_4sd.cpp:2:\n/tmp/tmp7u1z_4sd.cpp:41:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp7u1z_4sd.cpp:41:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp7u1z_4sd.cpp:41:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7u1z_4sd.cpp:41:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7u1z_4sd.cpp:41:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7u1z_4sd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> res;\n  std::map<long,\
    \ std::string> map = {\n    {1, \"One\"},\n    {2, \"Two\"},\n    {3, \"Three\"\
    },\n    {4, \"Four\"},\n    {5, \"Five\"},\n    {6, \"Six\"},\n    {7, \"Seven\"\
    },\n    {8, \"Eight\"},\n    {9, \"Nine\"}\n  };\n  std::sort(arr.begin(), arr.end());\n\
    \  for (auto it = arr.rbegin(); it != arr.rend(); ++it) {\n    if (*it >= 1 &&\
    \ *it <= 9) {\n      res.push_back(map[*it]);\n    }\n  }\n  return res;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuzbaxl_6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749549
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for (auto i : arr) {\n        if (i >= 1 && i\
    \ <= 9) {\n            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for (auto i :\
    \ temp) {\n        switch (i) {\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptuk0vkph.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749549
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for (int i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (int i = 0; i < temp.size(); i++) {\n        switch (temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4t5zkvg.cpp: In function 'int main()':\n/tmp/tmpu4t5zkvg.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu4t5zkvg.cpp:2:\n/tmp/tmpu4t5zkvg.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpu4t5zkvg.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpu4t5zkvg.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu4t5zkvg.cpp:60:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu4t5zkvg.cpp:60:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpu4t5zkvg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map = {\n        {1, \"One\"},\n        {2, \"\
    Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"\
    },\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n\
    \        {9, \"Nine\"}\n    };\n    std::sort(arr.begin(), arr.end());\n    for\
    \ (auto it = arr.rbegin(); it != arr.rend(); ++it) {\n        if (*it >= 1 &&\
    \ *it <= 9) {\n            result.push_back(map[*it]);\n        }\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpghnpwd8w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749549
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\";\n    map[3]\
    \ = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n    map[6] = \"\
    Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9] = \"Nine\"\
    ;\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n            res.push_back(map[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy8o6z3vr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749549
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::sort(arr.begin(),\
    \ arr.end());\n  std::reverse(arr.begin(), arr.end());\n  for (int i = 0; i <\
    \ arr.size(); i++) {\n    if (arr[i] == 1) {\n      result.push_back(\"One\");\n\
    \    } else if (arr[i] == 2) {\n      result.push_back(\"Two\");\n    } else if\
    \ (arr[i] == 3) {\n      result.push_back(\"Three\");\n    } else if (arr[i] ==\
    \ 4) {\n      result.push_back(\"Four\");\n    } else if (arr[i] == 5) {\n   \
    \   result.push_back(\"Five\");\n    } else if (arr[i] == 6) {\n      result.push_back(\"\
    Six\");\n    } else if (arr[i] == 7) {\n      result.push_back(\"Seven\");\n \
    \   } else if (arr[i] == 8) {\n      result.push_back(\"Eight\");\n    } else\
    \ if (arr[i] == 9) {\n      result.push_back(\"Nine\");\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdkaojzm5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749549
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n\
    \    m[3] = \"Three\";\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] =\
    \ \"Six\";\n    m[7] = \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\"\
    ;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            result.push_back(m[arr[i]]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu3etpn_n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749549
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::map<long,\
    \ std::string> map;\n  map[1] = \"One\";\n  map[2] = \"Two\";\n  map[3] = \"Three\"\
    ;\n  map[4] = \"Four\";\n  map[5] = \"Five\";\n  map[6] = \"Six\";\n  map[7] =\
    \ \"Seven\";\n  map[8] = \"Eight\";\n  map[9] = \"Nine\";\n  for (auto i : arr)\
    \ {\n    if (i >= 1 && i <= 9) {\n      result.push_back(map[i]);\n    }\n  }\n\
    \  std::sort(result.begin(), result.end());\n  std::reverse(result.begin(), result.end());\n\
    \  return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjxhrbq_i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for (int i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (int i = 0; i < temp.size(); i++) {\n        switch (temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4t5zkvg.cpp: In function 'int main()':\n/tmp/tmpu4t5zkvg.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu4t5zkvg.cpp:2:\n/tmp/tmpu4t5zkvg.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpu4t5zkvg.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpu4t5zkvg.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu4t5zkvg.cpp:60:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu4t5zkvg.cpp:60:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpu4t5zkvg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> str;\n    std::vector<long>\
    \ temp;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]>=1 && arr[i]<=9){\n\
    \            temp.push_back(arr[i]);\n        }\n    }\n    std::sort(temp.begin(),temp.end());\n\
    \    for(int i=temp.size()-1;i>=0;i--){\n        if(temp[i]==1){\n           \
    \ str.push_back(\"One\");\n        }\n        else if(temp[i]==2){\n         \
    \   str.push_back(\"Two\");\n        }\n        else if(temp[i]==3){\n       \
    \     str.push_back(\"Three\");\n        }\n        else if(temp[i]==4){\n   \
    \         str.push_back(\"Four\");\n        }\n        else if(temp[i]==5){\n\
    \            str.push_back(\"Five\");\n        }\n        else if(temp[i]==6){\n\
    \            str.push_back(\"Six\");\n        }\n        else if(temp[i]==7){\n\
    \            str.push_back(\"Seven\");\n        }\n        else if(temp[i]==8){\n\
    \            str.push_back(\"Eight\");\n        }\n        else if(temp[i]==9){\n\
    \            str.push_back(\"Nine\");\n        }\n    }\n    return str;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm9_8fy22.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749549
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::vector<std::string> temp_str;\n    std::map<long,\
    \ std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\";\n    map[3]\
    \ = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n    map[6] = \"\
    Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9] = \"Nine\"\
    ;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            temp.push_back(arr[i]);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    for (int i = 0; i < temp.size(); i++) {\n        temp_str.push_back(map[temp[i]]);\n\
    \    }\n    std::reverse(temp_str.begin(), temp_str.end());\n    return temp_str;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa_br78e0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749549
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > 0 && arr[i] < 10) {\n            result.push_back(numbers[arr[i] - 1]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj_pz6vk6.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpj_pz6vk6.cpp:17:111: error: in\
    \ C++98 'numbers' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ numbers = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n                                                    \
    \                                                           ^\n/tmp/tmpj_pz6vk6.cpp:17:111:\
    \ error: could not convert '{\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"}' from '<brace-enclosed initializer\
    \ list>' to 'std::vector<std::basic_string<char> >'\n/tmp/tmpj_pz6vk6.cpp: In\
    \ function 'int main()':\n/tmp/tmpj_pz6vk6.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj_pz6vk6.cpp:2:\n/tmp/tmpj_pz6vk6.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpj_pz6vk6.cpp:29:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::vector<std::string>\
    \ numbers = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n  std::sort(arr.begin(), arr.end());\n  for (auto i :\
    \ arr) {\n    if (i > 0 && i < 10) {\n      result.push_back(numbers[i - 1]);\n\
    \    }\n  }\n  std::reverse(result.begin(), result.end());\n  return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpj4a9j0ra.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749549
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> res;\n  std::map<long,\
    \ std::string> m = {{1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\
    \ {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}};\n\
    \  std::sort(arr.begin(), arr.end());\n  for (auto i = arr.rbegin(); i != arr.rend();\
    \ ++i) {\n    if (*i > 0 && *i < 10) {\n      res.push_back(m[*i]);\n    }\n \
    \ }\n  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp27d5wg3y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749549
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for (int i =\
    \ temp.size() - 1; i >= 0; i--) {\n        result.push_back(map[temp[i]]);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7u1z_4sd.cpp: In function 'int main()':\n/tmp/tmp7u1z_4sd.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7u1z_4sd.cpp:2:\n/tmp/tmp7u1z_4sd.cpp:41:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp7u1z_4sd.cpp:41:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp7u1z_4sd.cpp:41:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7u1z_4sd.cpp:41:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7u1z_4sd.cpp:41:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7u1z_4sd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for (int i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (int i = 0; i < temp.size(); i++) {\n        if (temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        } else if (temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        } else if (temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        } else if (temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        } else if (temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        } else if (temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        } else if (temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        } else if (temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        } else if (temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpicx2ljnq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749548
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> dict = {\n        {1, \"One\"},\n        {2, \"Two\"},\n      \
    \  {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"},\n        {6,\
    \ \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n        {9, \"\
    Nine\"}\n    };\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n \
    \           res.push_back(dict[i]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    std::reverse(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyu3piepu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749549
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for (int i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (int i = 0; i < temp.size(); i++) {\n        switch (temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4t5zkvg.cpp: In function 'int main()':\n/tmp/tmpu4t5zkvg.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu4t5zkvg.cpp:2:\n/tmp/tmpu4t5zkvg.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpu4t5zkvg.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpu4t5zkvg.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu4t5zkvg.cpp:60:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu4t5zkvg.cpp:60:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpu4t5zkvg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto i : arr)\
    \ {\n        if (i >= 1 && i <= 9) {\n            result.push_back(map[i]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo718nu8m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749549
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::sort(arr.begin(), arr.end());\n    std::reverse(arr.begin(), arr.end());\n\
    \    for (auto item : arr) {\n        if (item == 1) {\n            result.push_back(\"\
    One\");\n        } else if (item == 2) {\n            result.push_back(\"Two\"\
    );\n        } else if (item == 3) {\n            result.push_back(\"Three\");\n\
    \        } else if (item == 4) {\n            result.push_back(\"Four\");\n  \
    \      } else if (item == 5) {\n            result.push_back(\"Five\");\n    \
    \    } else if (item == 6) {\n            result.push_back(\"Six\");\n       \
    \ } else if (item == 7) {\n            result.push_back(\"Seven\");\n        }\
    \ else if (item == 8) {\n            result.push_back(\"Eight\");\n        } else\
    \ if (item == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7y6sq4dp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749549
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (int i = 0; i < temp.size(); i++) {\n        result.push_back(map[temp[i]]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpj6shmc_0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749549
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::vector<std::string>\
    \ nums = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n  std::sort(arr.begin(), arr.end());\n  for (int i =\
    \ 0; i < arr.size(); i++) {\n    if (arr[i] > 0 && arr[i] < 10) {\n      result.push_back(nums[arr[i]\
    \ - 1]);\n    }\n  }\n  std::reverse(result.begin(), result.end());\n  return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpflljg4ye.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749549
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for (int i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for (int i = 0; i < temp.size(); i++) {\n        switch (temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4t5zkvg.cpp: In function 'int main()':\n/tmp/tmpu4t5zkvg.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu4t5zkvg.cpp:2:\n/tmp/tmpu4t5zkvg.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpu4t5zkvg.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpu4t5zkvg.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu4t5zkvg.cpp:60:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu4t5zkvg.cpp:60:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpu4t5zkvg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\"\
    ;\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] =\
    \ \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         res.push_back(m[i]);\n        }\n    }\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp28ct9odk.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp28ct9odk.cpp:28:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmp28ct9odk.cpp:33:5:\
    \ error: expected ';' before 'std'\n     std::reverse(res.begin(), res.end());\n\
    \     ^\n/tmp/tmp28ct9odk.cpp:33:40: error: could not convert 'std::reverse<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(res.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), res.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::reverse(res.begin(),\
    \ res.end());\n                                        ^\n/tmp/tmp28ct9odk.cpp:34:5:\
    \ error: expected primary-expression before 'return'\n     return res;\n     ^\n\
    /tmp/tmp28ct9odk.cpp:34:5: error: expected ')' before 'return'\n/tmp/tmp28ct9odk.cpp:\
    \ In function 'int main()':\n/tmp/tmp28ct9odk.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp28ct9odk.cpp:2:\n/tmp/tmp28ct9odk.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp28ct9odk.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::vector<long>\
    \ sorted;\n  for (auto i : arr) {\n    if (i >= 1 && i <= 9) {\n      sorted.push_back(i);\n\
    \    }\n  }\n  std::sort(sorted.begin(), sorted.end());\n  for (auto i : sorted)\
    \ {\n    switch (i) {\n      case 1:\n        result.push_back(\"One\");\n   \
    \     break;\n      case 2:\n        result.push_back(\"Two\");\n        break;\n\
    \      case 3:\n        result.push_back(\"Three\");\n        break;\n      case\
    \ 4:\n        result.push_back(\"Four\");\n        break;\n      case 5:\n   \
    \     result.push_back(\"Five\");\n        break;\n      case 6:\n        result.push_back(\"\
    Six\");\n        break;\n      case 7:\n        result.push_back(\"Seven\");\n\
    \        break;\n      case 8:\n        result.push_back(\"Eight\");\n       \
    \ break;\n      case 9:\n        result.push_back(\"Nine\");\n        break;\n\
    \    }\n  }\n  std::reverse(result.begin(), result.end());\n  return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplmrxcc5r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749549
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> tmp;\n    for (auto i : arr) {\n        if (i >= 1 && i\
    \ <= 9) {\n            tmp.push_back(i);\n        }\n    }\n    std::sort(tmp.begin(),\
    \ tmp.end());\n    std::reverse(tmp.begin(), tmp.end());\n    for (auto i : tmp)\
    \ {\n        switch (i) {\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkd8thknq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749549
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n       \
    \ }\n    }\n    std::sort(result.begin(), result.end());\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp88d8bxo7.cpp: In function 'int main()':\n/tmp/tmp88d8bxo7.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp88d8bxo7.cpp:2:\n/tmp/tmp88d8bxo7.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp88d8bxo7.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp88d8bxo7.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp88d8bxo7.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp88d8bxo7.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp88d8bxo7.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto i : arr)\
    \ {\n        if (i >= 1 && i <= 9) {\n            result.push_back(map[i]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo718nu8m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749549
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for (int i =\
    \ temp.size() - 1; i >= 0; i--) {\n        result.push_back(map[temp[i]]);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7u1z_4sd.cpp: In function 'int main()':\n/tmp/tmp7u1z_4sd.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7u1z_4sd.cpp:2:\n/tmp/tmp7u1z_4sd.cpp:41:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp7u1z_4sd.cpp:41:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp7u1z_4sd.cpp:41:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7u1z_4sd.cpp:41:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7u1z_4sd.cpp:41:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7u1z_4sd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> res;\n  std::map<long,\
    \ std::string> map;\n  map[1] = \"One\";\n  map[2] = \"Two\";\n  map[3] = \"Three\"\
    ;\n  map[4] = \"Four\";\n  map[5] = \"Five\";\n  map[6] = \"Six\";\n  map[7] =\
    \ \"Seven\";\n  map[8] = \"Eight\";\n  map[9] = \"Nine\";\n  for (auto i : arr)\
    \ {\n    if (i >= 1 && i <= 9) {\n      res.push_back(map[i]);\n    }\n  }\n \
    \ std::sort(res.begin(), res.end());\n  std::reverse(res.begin(), res.end());\n\
    \  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdjzymt8d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749549
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\";\n    map[3]\
    \ = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n    map[6] = \"\
    Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9] = \"Nine\"\
    ;\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n            res.push_back(map[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy8o6z3vr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749549
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> map = {\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (auto i = arr.rbegin(); i != arr.rend(); i++) {\n     \
    \   if (*i > 0 && *i < 10) {\n            result.push_back(map[*i - 1]);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbe9ioh2n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749549
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n       \
    \ }\n    }\n    std::sort(result.begin(), result.end());\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp88d8bxo7.cpp: In function 'int main()':\n/tmp/tmp88d8bxo7.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp88d8bxo7.cpp:2:\n/tmp/tmp88d8bxo7.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp88d8bxo7.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp88d8bxo7.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp88d8bxo7.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp88d8bxo7.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp88d8bxo7.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgau74dcc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgau74dcc.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpgau74dcc.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpgau74dcc.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpgau74dcc.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpgau74dcc.cpp: In function\
    \ 'int main()':\n/tmp/tmpgau74dcc.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgau74dcc.cpp:2:\n/tmp/tmpgau74dcc.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgau74dcc.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n       \
    \ }\n    }\n    std::sort(result.begin(), result.end());\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp88d8bxo7.cpp: In function 'int main()':\n/tmp/tmp88d8bxo7.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp88d8bxo7.cpp:2:\n/tmp/tmp88d8bxo7.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp88d8bxo7.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp88d8bxo7.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp88d8bxo7.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp88d8bxo7.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp88d8bxo7.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map = {\n        {1, \"One\"},\n        {2, \"\
    Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"\
    },\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n\
    \        {9, \"Nine\"}\n    };\n    std::sort(arr.begin(), arr.end());\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        if (map.find(arr[i]) != map.end())\
    \ {\n            result.push_back(map[arr[i]]);\n        }\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptkklqv7p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749549
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map = {\n        {1, \"One\"},\n        {2, \"\
    Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"\
    },\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n\
    \        {9, \"Nine\"}\n    };\n    std::sort(arr.begin(), arr.end());\n    for\
    \ (auto it = arr.rbegin(); it != arr.rend(); ++it) {\n        if (*it >= 1 &&\
    \ *it <= 9) {\n            result.push_back(map[*it]);\n        }\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpghnpwd8w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659749549
