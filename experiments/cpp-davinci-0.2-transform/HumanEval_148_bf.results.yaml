language: cpp
name: HumanEval_148_bf
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        int temp = p1;\n        p1 = p2;\n\
    \        p2 = temp;\n    }\n    for (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\n        \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n    };\n    std::vector<std::string> result;\n    int start = -1;\n\
    \    int end = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if\
    \ (planets[i] == planet1) {\n            start = i;\n        }\n        if (planets[i]\
    \ == planet2) {\n            end = i;\n        }\n    }\n    if (start == -1 ||\
    \ end == -1) {\n        return result;\n    }\n    if (start > end) {\n      \
    \  std::swap(start, end);\n    }\n    for (int i = start + 1; i < end; i++) {\n\
    \        result.push_back(planets[i]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return result;\n    if (p1 > p2) std::swap(p1, p2);\n    for (int i = p1\
    \ + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start < end) {\n        for (int i = start\
    \ + 1; i < end; i++) {\n            result.push_back(planets[i]);\n        }\n\
    \    } else {\n        for (int i = end + 1; i < start; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int i1 = -1, i2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          i1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    i2 = i;\n        }\n    }\n    if (i1 == -1 || i2 == -1) {\n        return\
    \ res;\n    }\n    if (i1 > i2) {\n        std::swap(i1, i2);\n    }\n    for\
    \ (int i = i1 + 1; i < i2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\n        \"\
    Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n      \
    \  \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    };\n    std::vector<std::string> result;\n    int i1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int i2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (i1 == planets.size() ||\
    \ i2 == planets.size()) {\n        return result;\n    }\n    if (i1 > i2) {\n\
    \        std::swap(i1, i2);\n    }\n    for (int i = i1 + 1; i < i2; i++) {\n\
    \        result.push_back(planets[i]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++)\
    \ {\n            result.push_back(planets[i]);\n        }\n    } else {\n    \
    \    for (int i = p2 + 1; i < p1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++)\
    \ {\n            result.push_back(planets[i]);\n        }\n    } else {\n    \
    \    for (int i = p2 + 1; i < p1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int i = 0;\n    while (planets[i] !=\
    \ planet1) {\n        i++;\n    }\n    int j = 0;\n    while (planets[j] != planet2)\
    \ {\n        j++;\n    }\n    if (i > j) {\n        for (int k = j; k < i; k++)\
    \ {\n            res.push_back(planets[k]);\n        }\n    } else {\n       \
    \ for (int k = i; k < j; k++) {\n            res.push_back(planets[k]);\n    \
    \    }\n    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n  \
    \  assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpka64b2oj: /tmp/tmpka64b2oj.cpp:43: int main(): Assertion `candidate(("Jupiter"),
    ("Neptune")) == (std::vector<std::string>({(std::string)"Saturn", (std::string)"Uranus"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660062137
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i = 0;\n    while (planets[i]\
    \ != planet1) {\n        i++;\n    }\n    int j = 0;\n    while (planets[j] !=\
    \ planet2) {\n        j++;\n    }\n    if (i > j) {\n        std::swap(i, j);\n\
    \    }\n    for (int k = i + 1; k < j; k++) {\n        result.push_back(planets[k]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i\
    \ < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++)\
    \ {\n            result.push_back(planets[i]);\n        }\n    } else {\n    \
    \    for (int i = p2 + 1; i < p1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++) {\n\
    \            res.push_back(planets[i]);\n        }\n    } else {\n        for\
    \ (int i = p2 + 1; i < p1; i++) {\n            res.push_back(planets[i]);\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i = 0;\n    int j = 0;\n   \
    \ while (planets[i] != planet1) {\n        i++;\n    }\n    while (planets[j]\
    \ != planet2) {\n        j++;\n    }\n    if (i > j) {\n        for (int k = j;\
    \ k < i; k++) {\n            result.push_back(planets[k]);\n        }\n    } else\
    \ {\n        for (int k = i; k < j; k++) {\n            result.push_back(planets[k]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp1w3c2agc: /tmp/tmp1w3c2agc.cpp:43: int main(): Assertion `candidate(("Jupiter"),
    ("Neptune")) == (std::vector<std::string>({(std::string)"Saturn", (std::string)"Uranus"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int p2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (p1 == 8 || p2 == 8) {\n\
    \        return res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n\
    \    }\n    for (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i\
    \ < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return result;\n    if (p1 > p2) {\n        int tmp = p1;\n        p1 =\
    \ p2;\n        p2 = tmp;\n    }\n    for (int i = p1 + 1; i < p2; i++) {\n   \
    \     result.push_back(planets[i]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int index2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (index1 == planets.size()\
    \ || index2 == planets.size()) {\n        return result;\n    }\n    if (index1\
    \ > index2) {\n        std::swap(index1, index2);\n    }\n    for (int i = index1\
    \ + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n\tstd::vector<std::string> result;\n\tint index1 = -1, index2 = -1;\n\t\
    for (int i = 0; i < planets.size(); i++) {\n\t\tif (planets[i] == planet1) {\n\
    \t\t\tindex1 = i;\n\t\t}\n\t\tif (planets[i] == planet2) {\n\t\t\tindex2 = i;\n\
    \t\t}\n\t}\n\tif (index1 == -1 || index2 == -1) {\n\t\treturn result;\n\t}\n\t\
    if (index1 > index2) {\n\t\tstd::swap(index1, index2);\n\t}\n\tfor (int i = index1\
    \ + 1; i < index2; i++) {\n\t\tresult.push_back(planets[i]);\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i = 0;\n    int j = 0;\n   \
    \ for (i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n\
    \            break;\n        }\n    }\n    for (j = 0; j < planets.size(); j++)\
    \ {\n        if (planets[j] == planet2) {\n            break;\n        }\n   \
    \ }\n    if (i == planets.size() || j == planets.size()) {\n        return result;\n\
    \    }\n    if (i < j) {\n        for (int k = i + 1; k < j; k++) {\n        \
    \    result.push_back(planets[k]);\n        }\n    } else {\n        for (int\
    \ k = j + 1; k < i; k++) {\n            result.push_back(planets[k]);\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n \
    \   assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int index2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (index1 == 8 || index2 ==\
    \ 8) {\n        return result;\n    }\n    if (index1 > index2) {\n        std::swap(index1,\
    \ index2);\n    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n\tstd::vector<std::string> result;\n\tint p1 = -1, p2 = -1;\n\tfor (int\
    \ i = 0; i < planets.size(); i++) {\n\t\tif (planets[i] == planet1) {\n\t\t\t\
    p1 = i;\n\t\t}\n\t\tif (planets[i] == planet2) {\n\t\t\tp2 = i;\n\t\t}\n\t}\n\t\
    if (p1 == -1 || p2 == -1) {\n\t\treturn result;\n\t}\n\tif (p1 < p2) {\n\t\tfor\
    \ (int i = p1 + 1; i < p2; i++) {\n\t\t\tresult.push_back(planets[i]);\n\t\t}\n\
    \t}\n\telse {\n\t\tfor (int i = p2 + 1; i < p1; i++) {\n\t\t\tresult.push_back(planets[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return res;\n    if (p1 > p2) std::swap(p1, p2);\n    for (int i = p1 +\
    \ 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++)\
    \ {\n            result.push_back(planets[i]);\n        }\n    } else {\n    \
    \    for (int i = p2 + 1; i < p1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++)\
    \ {\n            result.push_back(planets[i]);\n        }\n    } else {\n    \
    \    for (int i = p2 + 1; i < p1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int index2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if(index1 == 8 || index2 ==\
    \ 8) return result;\n    if(index1 > index2) {\n        int temp = index1;\n \
    \       index1 = index2;\n        index2 = temp;\n    }\n    for(int i = index1\
    \ + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n\tstd::vector<std::string> result;\n\tint i = 0;\n\tfor (auto it = planets.begin();\
    \ it != planets.end(); it++) {\n\t\tif (*it == planet1) {\n\t\t\ti = 1;\n\t\t\
    }\n\t\tif (i == 1 && *it != planet2) {\n\t\t\tresult.push_back(*it);\n\t\t}\n\t\
    \tif (*it == planet2) {\n\t\t\ti = 0;\n\t\t}\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpuw7hdzw2: /tmp/tmpuw7hdzw2.cpp:38: int main(): Assertion `candidate(("Jupiter"),
    ("Neptune")) == (std::vector<std::string>({(std::string)"Saturn", (std::string)"Uranus"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int i = 0;\n    while (planets[i] !=\
    \ planet1) {\n        i++;\n    }\n    int j = 0;\n    while (planets[j] != planet2)\
    \ {\n        j++;\n    }\n    if (i > j) {\n        for (int k = j; k <= i; k++)\
    \ {\n            res.push_back(planets[k]);\n        }\n    } else {\n       \
    \ for (int k = i; k <= j; k++) {\n            res.push_back(planets[k]);\n   \
    \     }\n    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n \
    \   assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpixctgh4c: /tmp/tmpixctgh4c.cpp:43: int main(): Assertion `candidate(("Jupiter"),
    ("Neptune")) == (std::vector<std::string>({(std::string)"Saturn", (std::string)"Uranus"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return result;\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2;\
    \ i++) {\n            result.push_back(planets[i]);\n        }\n    } else {\n\
    \        for (int i = p2 + 1; i < p1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start < end) {\n        for (int i = start\
    \ + 1; i < end; i++) {\n            result.push_back(planets[i]);\n        }\n\
    \    } else {\n        for (int i = end + 1; i < start; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = 0;\n    int end = 0;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == 0 || end == 0) {\n \
    \       return result;\n    }\n    if (start < end) {\n        for (int i = start\
    \ + 1; i < end; i++) {\n            result.push_back(planets[i]);\n        }\n\
    \    } else {\n        for (int i = end + 1; i < start; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmptqlynlm1: /tmp/tmptqlynlm1.cpp:49: int main(): Assertion `candidate(("Earth"),
    ("Mercury")) == (std::vector<std::string>({(std::string)"Venus"}))'' failed.

    '
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n  std::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n  std::vector<std::string> result;\n  int p1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n  int p2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n  if (p1 == 8 || p2 == 8) return\
    \ result;\n  if (p1 > p2) std::swap(p1, p2);\n  for (int i = p1 + 1; i < p2; i++)\
    \ result.push_back(planets[i]);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int i = 0;\n    while (planets[i] !=\
    \ planet1) {\n        i++;\n    }\n    int j = 0;\n    while (planets[j] != planet2)\
    \ {\n        j++;\n    }\n    if (i > j) {\n        for (int k = j; k < i; k++)\
    \ {\n            res.push_back(planets[k]);\n        }\n    } else {\n       \
    \ for (int k = i; k < j; k++) {\n            res.push_back(planets[k]);\n    \
    \    }\n    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n  \
    \  assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpka64b2oj: /tmp/tmpka64b2oj.cpp:43: int main(): Assertion `candidate(("Jupiter"),
    ("Neptune")) == (std::vector<std::string>({(std::string)"Saturn", (std::string)"Uranus"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++)\
    \ {\n            result.push_back(planets[i]);\n        }\n    } else {\n    \
    \    for (int i = p2 + 1; i < p1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\n        \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n    };\n    std::vector<std::string> result;\n    int p1 = -1,\
    \ p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            p1 = i;\n        }\n        if (planets[i] == planet2)\
    \ {\n            p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n\
    \        return result;\n    }\n    if (p1 < p2) {\n        for (int i = p1 +\
    \ 1; i < p2; i++) {\n            result.push_back(planets[i]);\n        }\n  \
    \  } else {\n        for (int i = p2 + 1; i < p1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n\tstd::vector<std::string> res;\n\tint i = 0;\n\twhile (planets[i] != planet1)\
    \ {\n\t\ti++;\n\t}\n\tint j = 0;\n\twhile (planets[j] != planet2) {\n\t\tj++;\n\
    \t}\n\tif (i > j) {\n\t\tfor (int k = j; k <= i; k++) {\n\t\t\tres.push_back(planets[k]);\n\
    \t\t}\n\t} else {\n\t\tfor (int k = i; k <= j; k++) {\n\t\t\tres.push_back(planets[k]);\n\
    \t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpsneq70zw: /tmp/tmpsneq70zw.cpp:43: int main(): Assertion `candidate(("Jupiter"),
    ("Neptune")) == (std::vector<std::string>({(std::string)"Saturn", (std::string)"Uranus"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i\
    \ < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = 0;\n    int end = 0;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == 0 || end == 0) {\n \
    \       return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: Exception
  stderr: 'tmplrfqezm5: /tmp/tmplrfqezm5.cpp:48: int main(): Assertion `candidate(("Earth"),
    ("Mercury")) == (std::vector<std::string>({(std::string)"Venus"}))'' failed.

    '
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++)\
    \ {\n            result.push_back(planets[i]);\n        }\n    } else {\n    \
    \    for (int i = p2 + 1; i < p1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return res;\n    }\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    for (int i = start + 1; i < end; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int index2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (index1 == 8 || index2 ==\
    \ 8) {\n        return result;\n    }\n    if (index1 > index2) {\n        std::swap(index1,\
    \ index2);\n    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n\tstd::vector<std::string> res;\n\tint p1 = -1, p2 = -1;\n\tfor (int i = 0;\
    \ i < planets.size(); i++) {\n\t\tif (planets[i] == planet1) p1 = i;\n\t\tif (planets[i]\
    \ == planet2) p2 = i;\n\t}\n\tif (p1 == -1 || p2 == -1) return res;\n\tif (p1\
    \ > p2) std::swap(p1, p2);\n\tfor (int i = p1 + 1; i < p2; i++) {\n\t\tres.push_back(planets[i]);\n\
    \t}\n\treturn res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i = 0;\n    while (planets[i]\
    \ != planet1) {\n        i++;\n    }\n    int j = 0;\n    while (planets[j] !=\
    \ planet2) {\n        j++;\n    }\n    if (i > j) {\n        for (int k = j; k\
    \ < i; k++) {\n            result.push_back(planets[k]);\n        }\n    } else\
    \ {\n        for (int k = i; k < j; k++) {\n            result.push_back(planets[k]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6pc2yuqp: /tmp/tmp6pc2yuqp.cpp:43: int main(): Assertion `candidate(("Jupiter"),
    ("Neptune")) == (std::vector<std::string>({(std::string)"Saturn", (std::string)"Uranus"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i = 0;\n    int j = 0;\n   \
    \ for (int k = 0; k < planets.size(); k++) {\n        if (planets[k] == planet1)\
    \ {\n            i = k;\n        }\n        if (planets[k] == planet2) {\n   \
    \         j = k;\n        }\n    }\n    if (i > j) {\n        for (int k = j;\
    \ k < i; k++) {\n            result.push_back(planets[k]);\n        }\n    } else\
    \ {\n        for (int k = i; k < j; k++) {\n            result.push_back(planets[k]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6o79e7qi: /tmp/tmp6o79e7qi.cpp:45: int main(): Assertion `candidate(("Jupiter"),
    ("Neptune")) == (std::vector<std::string>({(std::string)"Saturn", (std::string)"Uranus"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n\tstd::vector<std::string> result;\n\tint index1 = -1, index2 = -1;\n\t\
    for (int i = 0; i < planets.size(); i++) {\n\t\tif (planets[i] == planet1) {\n\
    \t\t\tindex1 = i;\n\t\t}\n\t\tif (planets[i] == planet2) {\n\t\t\tindex2 = i;\n\
    \t\t}\n\t}\n\tif (index1 == -1 || index2 == -1) {\n\t\treturn result;\n\t}\n\t\
    if (index1 < index2) {\n\t\tfor (int i = index1 + 1; i < index2; i++) {\n\t\t\t\
    result.push_back(planets[i]);\n\t\t}\n\t}\n\telse {\n\t\tfor (int i = index2 +\
    \ 1; i < index1; i++) {\n\t\t\tresult.push_back(planets[i]);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\n        \"\
    Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n      \
    \  \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int\
    \ index2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int start = 0;\n    int end = 0;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == 0 || end == 0) {\n \
    \       return res;\n    }\n    if (start > end) {\n        std::swap(start, end);\n\
    \    }\n    for (int i = start + 1; i < end; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp_rmzzrre: /tmp/tmp_rmzzrre.cpp:46: int main(): Assertion `candidate(("Earth"),
    ("Mercury")) == (std::vector<std::string>({(std::string)"Venus"}))'' failed.

    '
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = 0;\n    int end = 0;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == 0 && end == 0) {\n \
    \       return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp5nch1ot3: /tmp/tmp5nch1ot3.cpp:53: int main(): Assertion `candidate(("Jupiter"),
    ("Makemake")) == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int pos1 = -1, pos2 = -1;\n    for\
    \ (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) pos1\
    \ = i;\n        if (planets[i] == planet2) pos2 = i;\n    }\n    if (pos1 == -1\
    \ || pos2 == -1) return result;\n    if (pos1 > pos2) std::swap(pos1, pos2);\n\
    \    for (int i = pos1 + 1; i < pos2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i = 0;\n    int j = 0;\n   \
    \ for (i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n\
    \            break;\n        }\n    }\n    for (j = 0; j < planets.size(); j++)\
    \ {\n        if (planets[j] == planet2) {\n            break;\n        }\n   \
    \ }\n    if (i == planets.size() || j == planets.size()) {\n        return result;\n\
    \    }\n    if (i > j) {\n        for (int k = j; k < i; k++) {\n            result.push_back(planets[k]);\n\
    \        }\n    } else {\n        for (int k = i; k < j; k++) {\n            result.push_back(planets[k]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpab7vlvb_: /tmp/tmpab7vlvb_.cpp:50: int main(): Assertion `candidate(("Jupiter"),
    ("Neptune")) == (std::vector<std::string>({(std::string)"Saturn", (std::string)"Uranus"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++) {\n\
    \            res.push_back(planets[i]);\n        }\n    } else {\n        for\
    \ (int i = p2 + 1; i < p1; i++) {\n            res.push_back(planets[i]);\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i\
    \ < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = 0;\n    int end = 0;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == 0 && end == 0) {\n \
    \       return result;\n    }\n    if (start > end) {\n        for (int i = end\
    \ + 1; i < start; i++) {\n            result.push_back(planets[i]);\n        }\n\
    \    } else {\n        for (int i = start + 1; i < end; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmprmmtnt_7: /tmp/tmprmmtnt_7.cpp:54: int main(): Assertion `candidate(("Jupiter"),
    ("Makemake")) == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n\tstd::vector<std::string> result;\n\tint i = 0;\n\tint j = 0;\n\tfor (i\
    \ = 0; i < planets.size(); i++) {\n\t\tif (planets[i] == planet1) {\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\tfor (j = 0; j < planets.size(); j++) {\n\t\tif (planets[j] == planet2)\
    \ {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i == planets.size() || j == planets.size())\
    \ {\n\t\treturn result;\n\t}\n\tif (i > j) {\n\t\tfor (int k = j; k <= i; k++)\
    \ {\n\t\t\tresult.push_back(planets[k]);\n\t\t}\n\t}\n\telse {\n\t\tfor (int k\
    \ = i; k <= j; k++) {\n\t\t\tresult.push_back(planets[k]);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpzggrez2o: /tmp/tmpzggrez2o.cpp:51: int main(): Assertion `candidate(("Jupiter"),
    ("Neptune")) == (std::vector<std::string>({(std::string)"Saturn", (std::string)"Uranus"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660062139
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n\tstd::vector<std::string> result;\n\tint index1 = -1;\n\tint index2 = -1;\n\
    \tfor (int i = 0; i < planets.size(); i++) {\n\t\tif (planets[i] == planet1) {\n\
    \t\t\tindex1 = i;\n\t\t}\n\t\tif (planets[i] == planet2) {\n\t\t\tindex2 = i;\n\
    \t\t}\n\t}\n\tif (index1 == -1 || index2 == -1) {\n\t\treturn result;\n\t}\n\t\
    if (index1 > index2) {\n\t\tint temp = index1;\n\t\tindex1 = index2;\n\t\tindex2\
    \ = temp;\n\t}\n\tfor (int i = index1 + 1; i < index2; i++) {\n\t\tresult.push_back(planets[i]);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062139
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    std::vector<std::string>::iterator\
    \ it1 = std::find(planets.begin(), planets.end(), planet1);\n    std::vector<std::string>::iterator\
    \ it2 = std::find(planets.begin(), planets.end(), planet2);\n    if (it1 == planets.end()\
    \ || it2 == planets.end()) {\n        return result;\n    }\n    if (it1 > it2)\
    \ {\n        std::swap(it1, it2);\n    }\n    for (auto it = it1 + 1; it != it2;\
    \ it++) {\n        result.push_back(*it);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660062139
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n\tstd::vector<std::string> result;\n\tint index1 = -1, index2 = -1;\n\t\
    for (int i = 0; i < planets.size(); i++) {\n\t\tif (planets[i] == planet1) {\n\
    \t\t\tindex1 = i;\n\t\t}\n\t\tif (planets[i] == planet2) {\n\t\t\tindex2 = i;\n\
    \t\t}\n\t}\n\tif (index1 == -1 || index2 == -1) {\n\t\treturn result;\n\t}\n\t\
    if (index1 > index2) {\n\t\tstd::swap(index1, index2);\n\t}\n\tfor (int i = index1\
    \ + 1; i < index2; i++) {\n\t\tresult.push_back(planets[i]);\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i = 0;\n    int j = 0;\n   \
    \ for (int k = 0; k < planets.size(); k++) {\n        if (planets[k] == planet1)\
    \ {\n            i = k;\n        }\n        if (planets[k] == planet2) {\n   \
    \         j = k;\n        }\n    }\n    if (i > j) {\n        std::swap(i, j);\n\
    \    }\n    for (int k = i + 1; k < j; k++) {\n        result.push_back(planets[k]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpp9p_ttpt: /tmp/tmpp9p_ttpt.cpp:48: int main(): Assertion `candidate(("Jupiter"),
    ("Makemake")) == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660062139
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start < end) {\n        for (int i = start\
    \ + 1; i < end; i++) {\n            result.push_back(planets[i]);\n        }\n\
    \    } else {\n        for (int i = end + 1; i < start; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int pos1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int pos2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (pos1 < 0 || pos2 < 0) {\n\
    \        return result;\n    }\n    if (pos1 > pos2) {\n        std::swap(pos1,\
    \ pos2);\n    }\n    for (int i = pos1 + 1; i < pos2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp7yfqod1l: /tmp/tmp7yfqod1l.cpp:43: int main(): Assertion `candidate(("Jupiter"),
    ("Makemake")) == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660062139
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start < end) {\n        for (int i = start\
    \ + 1; i < end; i++) {\n            result.push_back(planets[i]);\n        }\n\
    \    } else {\n        for (int i = end + 1; i < start; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n\tstd::vector<std::string> result;\n\tint p1 = -1, p2 = -1;\n\tfor (int\
    \ i = 0; i < planets.size(); i++) {\n\t\tif (planets[i] == planet1) {\n\t\t\t\
    p1 = i;\n\t\t}\n\t\tif (planets[i] == planet2) {\n\t\t\tp2 = i;\n\t\t}\n\t}\n\t\
    if (p1 == -1 || p2 == -1) {\n\t\treturn result;\n\t}\n\tif (p1 < p2) {\n\t\tfor\
    \ (int i = p1 + 1; i < p2; i++) {\n\t\t\tresult.push_back(planets[i]);\n\t\t}\n\
    \t}\n\telse {\n\t\tfor (int i = p2 + 1; i < p1; i++) {\n\t\t\tresult.push_back(planets[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\n        \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n    };\n    std::vector<std::string> result;\n    int p1 = -1,\
    \ p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            p1 = i;\n        }\n        if (planets[i] == planet2)\
    \ {\n            p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n\
    \        return result;\n    }\n    if (p1 < p2) {\n        for (int i = p1 +\
    \ 1; i < p2; i++) {\n            result.push_back(planets[i]);\n        }\n  \
    \  } else {\n        for (int i = p2 + 1; i < p1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i = 0;\n    int j = 0;\n   \
    \ for (i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n\
    \            break;\n        }\n    }\n    for (j = 0; j < planets.size(); j++)\
    \ {\n        if (planets[j] == planet2) {\n            break;\n        }\n   \
    \ }\n    if (i == planets.size() || j == planets.size()) {\n        return result;\n\
    \    }\n    if (i < j) {\n        for (int k = i + 1; k < j; k++) {\n        \
    \    result.push_back(planets[k]);\n        }\n    } else {\n        for (int\
    \ k = j + 1; k < i; k++) {\n            result.push_back(planets[k]);\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n \
    \   assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i = 0;\n    int j = 0;\n   \
    \ for (i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n\
    \            break;\n        }\n    }\n    for (j = 0; j < planets.size(); j++)\
    \ {\n        if (planets[j] == planet2) {\n            break;\n        }\n   \
    \ }\n    if (i == planets.size() || j == planets.size()) {\n        return result;\n\
    \    }\n    if (i < j) {\n        for (int k = i + 1; k < j; k++) {\n        \
    \    result.push_back(planets[k]);\n        }\n    } else {\n        for (int\
    \ k = j + 1; k < i; k++) {\n            result.push_back(planets[k]);\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n \
    \   assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start < end) {\n        for (int i = start\
    \ + 1; i < end; i++) {\n            result.push_back(planets[i]);\n        }\n\
    \    } else {\n        for (int i = end + 1; i < start; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int p2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (p1 == 8 || p2 == 8) return\
    \ result;\n    if (p1 > p2) {\n        int temp = p1;\n        p1 = p2;\n    \
    \    p2 = temp;\n    }\n    for (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062139
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return result;\n    if (p1 > p2) {\n        int temp = p1;\n        p1 =\
    \ p2;\n        p2 = temp;\n    }\n    for (int i = p1 + 1; i < p2; i++) {\n  \
    \      result.push_back(planets[i]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062139
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int index2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (index1 == 8 || index2 ==\
    \ 8) {\n        return result;\n    }\n    if (index1 > index2) {\n        std::swap(index1,\
    \ index2);\n    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int p2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (p1 == 8 || p2 == 8) {\n\
    \        return result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n\
    \    }\n    for (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062139
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i\
    \ < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = 0;\n    int index2\
    \ = 0;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == 0 ||\
    \ index2 == 0) {\n        return result;\n    }\n    if (index1 > index2) {\n\
    \        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i < index2;\
    \ i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp_kbnhqpk: /tmp/tmp_kbnhqpk.cpp:46: int main(): Assertion `candidate(("Earth"),
    ("Mercury")) == (std::vector<std::string>({(std::string)"Venus"}))'' failed.

    '
  stdout: ''
  timestamp: 1660062139
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n\tstd::vector<std::string> result;\n\tint p1 = -1, p2 = -1;\n\tfor (int\
    \ i = 0; i < planets.size(); i++) {\n\t\tif (planets[i] == planet1) {\n\t\t\t\
    p1 = i;\n\t\t}\n\t\tif (planets[i] == planet2) {\n\t\t\tp2 = i;\n\t\t}\n\t}\n\t\
    if (p1 == -1 || p2 == -1) {\n\t\treturn result;\n\t}\n\tif (p1 > p2) {\n\t\tstd::swap(p1,\
    \ p2);\n\t}\n\tfor (int i = p1 + 1; i < p2; i++) {\n\t\tresult.push_back(planets[i]);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062139
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++) {\n\
    \            res.push_back(planets[i]);\n        }\n    } else {\n        for\
    \ (int i = p2 + 1; i < p1; i++) {\n            res.push_back(planets[i]);\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i1 = -1, i2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          i1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    i2 = i;\n        }\n    }\n    if (i1 == -1 || i2 == -1) {\n        return\
    \ result;\n    }\n    if (i1 > i2) {\n        std::swap(i1, i2);\n    }\n    for\
    \ (int i = i1 + 1; i < i2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062139
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int first = -1;\n    int second\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            first = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            second = i;\n        }\n    }\n    if (first == -1 ||\
    \ second == -1) {\n        return result;\n    }\n    if (first < second) {\n\
    \        for (int i = first + 1; i < second; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = second + 1; i < first; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062139
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\n        \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n    };\n    std::vector<std::string> res;\n    int i = 0;\n   \
    \ while (planets[i] != planet1) {\n        i++;\n        if (i == planets.size())\
    \ {\n            return res;\n        }\n    }\n    int j = 0;\n    while (planets[j]\
    \ != planet2) {\n        j++;\n        if (j == planets.size()) {\n          \
    \  return res;\n        }\n    }\n    if (i > j) {\n        std::swap(i, j);\n\
    \    }\n    for (int k = i + 1; k < j; k++) {\n        res.push_back(planets[k]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062139
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return res;\n    }\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    for (int i = start + 1; i < end; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\n        \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n    };\n    std::vector<std::string> result;\n    auto it1 = std::find(planets.begin(),\
    \ planets.end(), planet1);\n    auto it2 = std::find(planets.begin(), planets.end(),\
    \ planet2);\n    if (it1 == planets.end() || it2 == planets.end()) {\n       \
    \ return result;\n    }\n    if (it1 > it2) {\n        std::swap(it1, it2);\n\
    \    }\n    for (auto it = it1; it != it2; ++it) {\n        result.push_back(*it);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp7fyz6ixv: /tmp/tmp7fyz6ixv.cpp:39: int main(): Assertion `candidate(("Jupiter"),
    ("Neptune")) == (std::vector<std::string>({(std::string)"Saturn", (std::string)"Uranus"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660062139
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i\
    \ < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n\tstd::vector<std::string> res;\n\tint p1 = -1, p2 = -1;\n\tfor (int i = 0;\
    \ i < planets.size(); i++) {\n\t\tif (planets[i] == planet1) {\n\t\t\tp1 = i;\n\
    \t\t}\n\t\tif (planets[i] == planet2) {\n\t\t\tp2 = i;\n\t\t}\n\t}\n\tif (p1 ==\
    \ -1 || p2 == -1) {\n\t\treturn res;\n\t}\n\tif (p1 > p2) {\n\t\tstd::swap(p1,\
    \ p2);\n\t}\n\tfor (int i = p1 + 1; i < p2; i++) {\n\t\tres.push_back(planets[i]);\n\
    \t}\n\treturn res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062139
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start < end) {\n        for (int i = start\
    \ + 1; i < end; i++) {\n            result.push_back(planets[i]);\n        }\n\
    \    } else {\n        for (int i = end + 1; i < start; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int i2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (i1 == 8 || i2 == 8) {\n\
    \        return result;\n    }\n    if (i1 > i2) {\n        std::swap(i1, i2);\n\
    \    }\n    for (int i = i1 + 1; i < i2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062139
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int pos1 = -1, pos2 = -1;\n    for\
    \ (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n\
    \            pos1 = i;\n        }\n        if (planets[i] == planet2) {\n    \
    \        pos2 = i;\n        }\n    }\n    if (pos1 == -1 || pos2 == -1) {\n  \
    \      return result;\n    }\n    if (pos1 > pos2) {\n        std::swap(pos1,\
    \ pos2);\n    }\n    for (int i = pos1 + 1; i < pos2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062139
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int index2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (index1 == 8 || index2 ==\
    \ 8) {\n        return result;\n    }\n    if (index1 > index2) {\n        std::swap(index1,\
    \ index2);\n    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = 0;\n    int end = 0;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == 0 || end == 0) {\n \
    \       return result;\n    }\n    if (start < end) {\n        for (int i = start\
    \ + 1; i < end; i++) {\n            result.push_back(planets[i]);\n        }\n\
    \    } else {\n        for (int i = end + 1; i < start; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmptqlynlm1: /tmp/tmptqlynlm1.cpp:49: int main(): Assertion `candidate(("Earth"),
    ("Mercury")) == (std::vector<std::string>({(std::string)"Venus"}))'' failed.

    '
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i\
    \ < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return result;\n    if (p1 > p2) std::swap(p1, p2);\n    for (int i = p1\
    \ + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return res;\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++)\
    \ {\n            res.push_back(planets[i]);\n        }\n    } else {\n       \
    \ for (int i = p2 + 1; i < p1; i++) {\n            res.push_back(planets[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062139
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start < end) {\n        for (int i = start\
    \ + 1; i < end; i++) {\n            result.push_back(planets[i]);\n        }\n\
    \    } else {\n        for (int i = end + 1; i < start; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i\
    \ < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = 0;\n    int p2 = 0;\n \
    \   for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            p1 = i;\n        }\n        if (planets[i] == planet2) {\n  \
    \          p2 = i;\n        }\n    }\n    if (p1 == 0 || p2 == 0) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        for (int i = p2 + 1; i < p1; i++)\
    \ {\n            result.push_back(planets[i]);\n        }\n    } else {\n    \
    \    for (int i = p1 + 1; i < p2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpcn4gsltr: /tmp/tmpcn4gsltr.cpp:49: int main(): Assertion `candidate(("Earth"),
    ("Mercury")) == (std::vector<std::string>({(std::string)"Venus"}))'' failed.

    '
  stdout: ''
  timestamp: 1660062139
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int index2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (index1 == 8 || index2 ==\
    \ 8) {\n        return result;\n    }\n    if (index1 > index2) {\n        std::swap(index1,\
    \ index2);\n    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\n        \"\
    Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n      \
    \  \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int\
    \ index2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i\
    \ < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062139
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int index2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (index1 > index2) {\n   \
    \     std::swap(index1, index2);\n    }\n    if (index1 < 0 || index2 < 0) {\n\
    \        return result;\n    }\n    for (int i = index1 + 1; i < index2; i++)\
    \ {\n        result.push_back(planets[i]);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpj2u9q_8v: /tmp/tmpj2u9q_8v.cpp:43: int main(): Assertion `candidate(("Jupiter"),
    ("Makemake")) == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660062139
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i1 = -1, i2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          i1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    i2 = i;\n        }\n    }\n    if (i1 == -1 || i2 == -1) {\n        return\
    \ result;\n    }\n    if (i1 > i2) {\n        std::swap(i1, i2);\n    }\n    for\
    \ (int i = i1 + 1; i < i2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062139
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\n        \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n    };\n    std::vector<std::string> result;\n    int start = -1;\n\
    \    int end = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if\
    \ (planets[i] == planet1) {\n            start = i;\n        }\n        if (planets[i]\
    \ == planet2) {\n            end = i;\n        }\n    }\n    if (start == -1 ||\
    \ end == -1) {\n        return result;\n    }\n    if (start > end) {\n      \
    \  std::swap(start, end);\n    }\n    for (int i = start + 1; i < end; i++) {\n\
    \        result.push_back(planets[i]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = 0;\n    int end = 0;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == 0 && end == 0) {\n \
    \       return result;\n    }\n    if (start > end) {\n        for (int i = end;\
    \ i < start; i++) {\n            result.push_back(planets[i]);\n        }\n  \
    \  } else {\n        for (int i = start; i < end; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpx7lvejad: /tmp/tmpx7lvejad.cpp:48: int main(): Assertion `candidate(("Jupiter"),
    ("Neptune")) == (std::vector<std::string>({(std::string)"Saturn", (std::string)"Uranus"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660062139
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int p2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (p1 == 8 || p2 == 8) return\
    \ result;\n    if (p1 > p2) std::swap(p1, p2);\n    for (int i = p1 + 1; i < p2;\
    \ i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062139
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int i = 0;\n    int j = 0;\n    for\
    \ (int k = 0; k < planets.size(); k++) {\n        if (planets[k] == planet1) {\n\
    \            i = k;\n        }\n        if (planets[k] == planet2) {\n       \
    \     j = k;\n        }\n    }\n    if (i > j) {\n        for (int k = j + 1;\
    \ k < i; k++) {\n            res.push_back(planets[k]);\n        }\n    } else\
    \ {\n        for (int k = i + 1; k < j; k++) {\n            res.push_back(planets[k]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp8_p1nbty: /tmp/tmp8_p1nbty.cpp:51: int main(): Assertion `candidate(("Jupiter"),
    ("Makemake")) == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660062140
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return result;\n    if (p1 > p2) {\n        int tmp = p1;\n        p1 =\
    \ p2;\n        p2 = tmp;\n    }\n    for (int i = p1 + 1; i < p2; i++) {\n   \
    \     result.push_back(planets[i]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        for (int i = index2 + 1; i < index1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index1 + 1; i < index2; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = 0;\n    int end = 0;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == 0 && end == 0) {\n \
    \       return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp5nch1ot3: /tmp/tmp5nch1ot3.cpp:53: int main(): Assertion `candidate(("Jupiter"),
    ("Makemake")) == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\n        \"\
    Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n      \
    \  \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for\
    \ (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n\
    \            p1 = i;\n        }\n        if (planets[i] == planet2) {\n      \
    \      p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++) {\n\
    \            res.push_back(planets[i]);\n        }\n    } else {\n        for\
    \ (int i = p2 + 1; i < p1; i++) {\n            res.push_back(planets[i]);\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062140
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = 0;\n    int index2\
    \ = 0;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == 0 ||\
    \ index2 == 0) {\n        return result;\n    }\n    if (index1 > index2) {\n\
    \        for (int i = index2 + 1; i < index1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index1 + 1; i < index2; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpt40pobsr: /tmp/tmpt40pobsr.cpp:49: int main(): Assertion `candidate(("Earth"),
    ("Mercury")) == (std::vector<std::string>({(std::string)"Venus"}))'' failed.

    '
  stdout: ''
  timestamp: 1660062140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = 0;\n    int index2\
    \ = 0;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == 0 ||\
    \ index2 == 0) {\n        return result;\n    }\n    if (index1 > index2) {\n\
    \        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpkgq3u83j: /tmp/tmpkgq3u83j.cpp:48: int main(): Assertion `candidate(("Earth"),
    ("Mercury")) == (std::vector<std::string>({(std::string)"Venus"}))'' failed.

    '
  stdout: ''
  timestamp: 1660062140
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i = 0;\n    int j = 0;\n   \
    \ for (i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n\
    \            break;\n        }\n    }\n    for (j = 0; j < planets.size(); j++)\
    \ {\n        if (planets[j] == planet2) {\n            break;\n        }\n   \
    \ }\n    if (i == planets.size() || j == planets.size()) {\n        return result;\n\
    \    }\n    if (i < j) {\n        for (int k = i + 1; k < j; k++) {\n        \
    \    result.push_back(planets[k]);\n        }\n    } else {\n        for (int\
    \ k = j + 1; k < i; k++) {\n            result.push_back(planets[k]);\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n \
    \   assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\n        \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n    };\n    std::vector<std::string> result;\n    auto it1 = std::find(planets.begin(),\
    \ planets.end(), planet1);\n    auto it2 = std::find(planets.begin(), planets.end(),\
    \ planet2);\n    if (it1 == planets.end() || it2 == planets.end()) {\n       \
    \ return result;\n    }\n    if (it1 > it2) {\n        std::swap(it1, it2);\n\
    \    }\n    for (auto it = it1 + 1; it != it2; ++it) {\n        result.push_back(*it);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660062140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = 0;\n    int end = 0;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == 0 || end == 0) {\n \
    \       return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: Exception
  stderr: 'tmplrfqezm5: /tmp/tmplrfqezm5.cpp:48: int main(): Assertion `candidate(("Earth"),
    ("Mercury")) == (std::vector<std::string>({(std::string)"Venus"}))'' failed.

    '
  stdout: ''
  timestamp: 1660062138
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062137
