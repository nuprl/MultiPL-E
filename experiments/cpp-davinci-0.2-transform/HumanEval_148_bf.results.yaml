language: cpp
name: HumanEval_148_bf
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        int temp = p1;\n        p1 = p2;\n\
    \        p2 = temp;\n    }\n    for (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphql9ymla.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmphql9ymla.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmphql9ymla.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmphql9ymla.cpp: In function\
    \ 'int main()':\n/tmp/tmphql9ymla.cpp:45:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphql9ymla.cpp:2:\n/tmp/tmphql9ymla.cpp:46:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmphql9ymla.cpp:46:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmphql9ymla.cpp:46:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmphql9ymla.cpp:46:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\n        \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n    };\n    std::vector<std::string> result;\n    int start = -1;\n\
    \    int end = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if\
    \ (planets[i] == planet1) {\n            start = i;\n        }\n        if (planets[i]\
    \ == planet2) {\n            end = i;\n        }\n    }\n    if (start == -1 ||\
    \ end == -1) {\n        return result;\n    }\n    if (start > end) {\n      \
    \  std::swap(start, end);\n    }\n    for (int i = start + 1; i < end; i++) {\n\
    \        result.push_back(planets[i]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpr5hoapbd.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpr5hoapbd.cpp:22:5: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     };\n    \
    \ ^\n/tmp/tmpr5hoapbd.cpp:22:5: error: could not convert '{\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}' from\
    \ '<brace-enclosed initializer list>' to 'std::vector<std::basic_string<char>\
    \ >'\n/tmp/tmpr5hoapbd.cpp: In function 'int main()':\n/tmp/tmpr5hoapbd.cpp:46:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = bf;\n       \
    \   ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n          \
    \       from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n  \
    \               from /tmp/tmpr5hoapbd.cpp:2:\n/tmp/tmpr5hoapbd.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpr5hoapbd.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpr5hoapbd.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpr5hoapbd.cpp:47:123: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpr5hoapbd.cpp:48:74:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate("
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return result;\n    if (p1 > p2) std::swap(p1, p2);\n    for (int i = p1\
    \ + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy7h3f4lu.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpy7h3f4lu.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpy7h3f4lu.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpy7h3f4lu.cpp: In function\
    \ 'int main()':\n/tmp/tmpy7h3f4lu.cpp:35:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy7h3f4lu.cpp:2:\n/tmp/tmpy7h3f4lu.cpp:36:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpy7h3f4lu.cpp:36:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpy7h3f4lu.cpp:36:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpy7h3f4lu.cpp:36:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start < end) {\n        for (int i = start\
    \ + 1; i < end; i++) {\n            result.push_back(planets[i]);\n        }\n\
    \    } else {\n        for (int i = end + 1; i < start; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8wqkgvb6.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp8wqkgvb6.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp8wqkgvb6.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp8wqkgvb6.cpp: In function\
    \ 'int main()':\n/tmp/tmp8wqkgvb6.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8wqkgvb6.cpp:2:\n/tmp/tmp8wqkgvb6.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp8wqkgvb6.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp8wqkgvb6.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp8wqkgvb6.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int i1 = -1, i2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          i1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    i2 = i;\n        }\n    }\n    if (i1 == -1 || i2 == -1) {\n        return\
    \ res;\n    }\n    if (i1 > i2) {\n        std::swap(i1, i2);\n    }\n    for\
    \ (int i = i1 + 1; i < i2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcv6sz907.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpcv6sz907.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpcv6sz907.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpcv6sz907.cpp: In function\
    \ 'int main()':\n/tmp/tmpcv6sz907.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcv6sz907.cpp:2:\n/tmp/tmpcv6sz907.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpcv6sz907.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpcv6sz907.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpcv6sz907.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4j7lxils.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp4j7lxils.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp4j7lxils.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp4j7lxils.cpp: In function\
    \ 'int main()':\n/tmp/tmp4j7lxils.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4j7lxils.cpp:2:\n/tmp/tmp4j7lxils.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp4j7lxils.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp4j7lxils.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp4j7lxils.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\n        \"\
    Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n      \
    \  \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    };\n    std::vector<std::string> result;\n    int i1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int i2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (i1 == planets.size() ||\
    \ i2 == planets.size()) {\n        return result;\n    }\n    if (i1 > i2) {\n\
    \        std::swap(i1, i2);\n    }\n    for (int i = i1 + 1; i < i2; i++) {\n\
    \        result.push_back(planets[i]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpfwi5iw2i.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpfwi5iw2i.cpp:29:5: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     };\n    \
    \ ^\n/tmp/tmpfwi5iw2i.cpp:29:5: error: could not convert '{\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}' from\
    \ '<brace-enclosed initializer list>' to 'std::vector<std::basic_string<char>\
    \ >'\n/tmp/tmpfwi5iw2i.cpp: In function 'int main()':\n/tmp/tmpfwi5iw2i.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = bf;\n       \
    \   ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n          \
    \       from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n  \
    \               from /tmp/tmpfwi5iw2i.cpp:2:\n/tmp/tmpfwi5iw2i.cpp:46:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpfwi5iw2i.cpp:46:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpfwi5iw2i.cpp:46:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpfwi5iw2i.cpp:46:123: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpfwi5iw2i.cpp:47:74:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate("
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpggd66d4o.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpggd66d4o.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpggd66d4o.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpggd66d4o.cpp: In function\
    \ 'int main()':\n/tmp/tmpggd66d4o.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpggd66d4o.cpp:2:\n/tmp/tmpggd66d4o.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpggd66d4o.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpggd66d4o.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpggd66d4o.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++)\
    \ {\n            result.push_back(planets[i]);\n        }\n    } else {\n    \
    \    for (int i = p2 + 1; i < p1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj791jf_v.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpj791jf_v.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpj791jf_v.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpj791jf_v.cpp: In function\
    \ 'int main()':\n/tmp/tmpj791jf_v.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj791jf_v.cpp:2:\n/tmp/tmpj791jf_v.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpj791jf_v.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpj791jf_v.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpj791jf_v.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++)\
    \ {\n            result.push_back(planets[i]);\n        }\n    } else {\n    \
    \    for (int i = p2 + 1; i < p1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj791jf_v.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpj791jf_v.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpj791jf_v.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpj791jf_v.cpp: In function\
    \ 'int main()':\n/tmp/tmpj791jf_v.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj791jf_v.cpp:2:\n/tmp/tmpj791jf_v.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpj791jf_v.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpj791jf_v.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpj791jf_v.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int i = 0;\n    while (planets[i] !=\
    \ planet1) {\n        i++;\n    }\n    int j = 0;\n    while (planets[j] != planet2)\
    \ {\n        j++;\n    }\n    if (i > j) {\n        for (int k = j; k < i; k++)\
    \ {\n            res.push_back(planets[k]);\n        }\n    } else {\n       \
    \ for (int k = i; k < j; k++) {\n            res.push_back(planets[k]);\n    \
    \    }\n    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n  \
    \  assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpndxp2wt0.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpndxp2wt0.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpndxp2wt0.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpndxp2wt0.cpp: In function\
    \ 'int main()':\n/tmp/tmpndxp2wt0.cpp:42:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpndxp2wt0.cpp:2:\n/tmp/tmpndxp2wt0.cpp:43:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpndxp2wt0.cpp:43:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpndxp2wt0.cpp:43:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpndxp2wt0.cpp:43:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i = 0;\n    while (planets[i]\
    \ != planet1) {\n        i++;\n    }\n    int j = 0;\n    while (planets[j] !=\
    \ planet2) {\n        j++;\n    }\n    if (i > j) {\n        std::swap(i, j);\n\
    \    }\n    for (int k = i + 1; k < j; k++) {\n        result.push_back(planets[k]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnz9g8bvd.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpnz9g8bvd.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpnz9g8bvd.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpnz9g8bvd.cpp: In function\
    \ 'int main()':\n/tmp/tmpnz9g8bvd.cpp:39:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnz9g8bvd.cpp:2:\n/tmp/tmpnz9g8bvd.cpp:40:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpnz9g8bvd.cpp:40:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpnz9g8bvd.cpp:40:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpnz9g8bvd.cpp:40:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i\
    \ < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptf07o6hd.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmptf07o6hd.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmptf07o6hd.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmptf07o6hd.cpp: In function\
    \ 'int main()':\n/tmp/tmptf07o6hd.cpp:44:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptf07o6hd.cpp:2:\n/tmp/tmptf07o6hd.cpp:45:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmptf07o6hd.cpp:45:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmptf07o6hd.cpp:45:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmptf07o6hd.cpp:45:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++)\
    \ {\n            result.push_back(planets[i]);\n        }\n    } else {\n    \
    \    for (int i = p2 + 1; i < p1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj791jf_v.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpj791jf_v.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpj791jf_v.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpj791jf_v.cpp: In function\
    \ 'int main()':\n/tmp/tmpj791jf_v.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj791jf_v.cpp:2:\n/tmp/tmpj791jf_v.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpj791jf_v.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpj791jf_v.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpj791jf_v.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfh6q8zh.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpzfh6q8zh.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpzfh6q8zh.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpzfh6q8zh.cpp: In function\
    \ 'int main()':\n/tmp/tmpzfh6q8zh.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzfh6q8zh.cpp:2:\n/tmp/tmpzfh6q8zh.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpzfh6q8zh.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpzfh6q8zh.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpzfh6q8zh.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfh6q8zh.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpzfh6q8zh.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpzfh6q8zh.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpzfh6q8zh.cpp: In function\
    \ 'int main()':\n/tmp/tmpzfh6q8zh.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzfh6q8zh.cpp:2:\n/tmp/tmpzfh6q8zh.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpzfh6q8zh.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpzfh6q8zh.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpzfh6q8zh.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++) {\n\
    \            res.push_back(planets[i]);\n        }\n    } else {\n        for\
    \ (int i = p2 + 1; i < p1; i++) {\n            res.push_back(planets[i]);\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0k13_eou.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp0k13_eou.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp0k13_eou.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp0k13_eou.cpp: In function\
    \ 'int main()':\n/tmp/tmp0k13_eou.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0k13_eou.cpp:2:\n/tmp/tmp0k13_eou.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp0k13_eou.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp0k13_eou.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp0k13_eou.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i = 0;\n    int j = 0;\n   \
    \ while (planets[i] != planet1) {\n        i++;\n    }\n    while (planets[j]\
    \ != planet2) {\n        j++;\n    }\n    if (i > j) {\n        for (int k = j;\
    \ k < i; k++) {\n            result.push_back(planets[k]);\n        }\n    } else\
    \ {\n        for (int k = i; k < j; k++) {\n            result.push_back(planets[k]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprapsj37r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int p2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (p1 == 8 || p2 == 8) {\n\
    \        return res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n\
    \    }\n    for (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4bsx_stf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i\
    \ < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptf07o6hd.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmptf07o6hd.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmptf07o6hd.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmptf07o6hd.cpp: In function\
    \ 'int main()':\n/tmp/tmptf07o6hd.cpp:44:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptf07o6hd.cpp:2:\n/tmp/tmptf07o6hd.cpp:45:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmptf07o6hd.cpp:45:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmptf07o6hd.cpp:45:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmptf07o6hd.cpp:45:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return result;\n    if (p1 > p2) {\n        int tmp = p1;\n        p1 =\
    \ p2;\n        p2 = tmp;\n    }\n    for (int i = p1 + 1; i < p2; i++) {\n   \
    \     result.push_back(planets[i]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkvyjcwoq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int index2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (index1 == planets.size()\
    \ || index2 == planets.size()) {\n        return result;\n    }\n    if (index1\
    \ > index2) {\n        std::swap(index1, index2);\n    }\n    for (int i = index1\
    \ + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdii6m2t.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpmdii6m2t.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpmdii6m2t.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpmdii6m2t.cpp: In function\
    \ 'int main()':\n/tmp/tmpmdii6m2t.cpp:36:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmdii6m2t.cpp:2:\n/tmp/tmpmdii6m2t.cpp:37:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpmdii6m2t.cpp:37:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpmdii6m2t.cpp:37:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpmdii6m2t.cpp:37:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n\tstd::vector<std::string> result;\n\tint index1 = -1, index2 = -1;\n\t\
    for (int i = 0; i < planets.size(); i++) {\n\t\tif (planets[i] == planet1) {\n\
    \t\t\tindex1 = i;\n\t\t}\n\t\tif (planets[i] == planet2) {\n\t\t\tindex2 = i;\n\
    \t\t}\n\t}\n\tif (index1 == -1 || index2 == -1) {\n\t\treturn result;\n\t}\n\t\
    if (index1 > index2) {\n\t\tstd::swap(index1, index2);\n\t}\n\tfor (int i = index1\
    \ + 1; i < index2; i++) {\n\t\tresult.push_back(planets[i]);\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpq835mr99.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i = 0;\n    int j = 0;\n   \
    \ for (i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n\
    \            break;\n        }\n    }\n    for (j = 0; j < planets.size(); j++)\
    \ {\n        if (planets[j] == planet2) {\n            break;\n        }\n   \
    \ }\n    if (i == planets.size() || j == planets.size()) {\n        return result;\n\
    \    }\n    if (i < j) {\n        for (int k = i + 1; k < j; k++) {\n        \
    \    result.push_back(planets[k]);\n        }\n    } else {\n        for (int\
    \ k = j + 1; k < i; k++) {\n            result.push_back(planets[k]);\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n \
    \   assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf974n5hd.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpf974n5hd.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpf974n5hd.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpf974n5hd.cpp: In function\
    \ 'int main()':\n/tmp/tmpf974n5hd.cpp:49:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf974n5hd.cpp:2:\n/tmp/tmpf974n5hd.cpp:50:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpf974n5hd.cpp:50:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpf974n5hd.cpp:50:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpf974n5hd.cpp:50:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfh6q8zh.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpzfh6q8zh.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpzfh6q8zh.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpzfh6q8zh.cpp: In function\
    \ 'int main()':\n/tmp/tmpzfh6q8zh.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzfh6q8zh.cpp:2:\n/tmp/tmpzfh6q8zh.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpzfh6q8zh.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpzfh6q8zh.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpzfh6q8zh.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpggd66d4o.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpggd66d4o.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpggd66d4o.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpggd66d4o.cpp: In function\
    \ 'int main()':\n/tmp/tmpggd66d4o.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpggd66d4o.cpp:2:\n/tmp/tmpggd66d4o.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpggd66d4o.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpggd66d4o.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpggd66d4o.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int index2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (index1 == 8 || index2 ==\
    \ 8) {\n        return result;\n    }\n    if (index1 > index2) {\n        std::swap(index1,\
    \ index2);\n    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgy0mtzuy.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpgy0mtzuy.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpgy0mtzuy.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpgy0mtzuy.cpp: In function\
    \ 'int main()':\n/tmp/tmpgy0mtzuy.cpp:36:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgy0mtzuy.cpp:2:\n/tmp/tmpgy0mtzuy.cpp:37:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpgy0mtzuy.cpp:37:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpgy0mtzuy.cpp:37:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpgy0mtzuy.cpp:37:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n\tstd::vector<std::string> result;\n\tint p1 = -1, p2 = -1;\n\tfor (int\
    \ i = 0; i < planets.size(); i++) {\n\t\tif (planets[i] == planet1) {\n\t\t\t\
    p1 = i;\n\t\t}\n\t\tif (planets[i] == planet2) {\n\t\t\tp2 = i;\n\t\t}\n\t}\n\t\
    if (p1 == -1 || p2 == -1) {\n\t\treturn result;\n\t}\n\tif (p1 < p2) {\n\t\tfor\
    \ (int i = p1 + 1; i < p2; i++) {\n\t\t\tresult.push_back(planets[i]);\n\t\t}\n\
    \t}\n\telse {\n\t\tfor (int i = p2 + 1; i < p1; i++) {\n\t\t\tresult.push_back(planets[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph0l8b84j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return res;\n    if (p1 > p2) std::swap(p1, p2);\n    for (int i = p1 +\
    \ 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpldflshz_.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpldflshz_.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpldflshz_.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpldflshz_.cpp: In function\
    \ 'int main()':\n/tmp/tmpldflshz_.cpp:35:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpldflshz_.cpp:2:\n/tmp/tmpldflshz_.cpp:36:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpldflshz_.cpp:36:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpldflshz_.cpp:36:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpldflshz_.cpp:36:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxvjap5oi.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpxvjap5oi.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpxvjap5oi.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpxvjap5oi.cpp: In function\
    \ 'int main()':\n/tmp/tmpxvjap5oi.cpp:44:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxvjap5oi.cpp:2:\n/tmp/tmpxvjap5oi.cpp:45:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpxvjap5oi.cpp:45:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpxvjap5oi.cpp:45:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpxvjap5oi.cpp:45:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++)\
    \ {\n            result.push_back(planets[i]);\n        }\n    } else {\n    \
    \    for (int i = p2 + 1; i < p1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj791jf_v.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpj791jf_v.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpj791jf_v.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpj791jf_v.cpp: In function\
    \ 'int main()':\n/tmp/tmpj791jf_v.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj791jf_v.cpp:2:\n/tmp/tmpj791jf_v.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpj791jf_v.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpj791jf_v.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpj791jf_v.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++)\
    \ {\n            result.push_back(planets[i]);\n        }\n    } else {\n    \
    \    for (int i = p2 + 1; i < p1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj791jf_v.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpj791jf_v.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpj791jf_v.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpj791jf_v.cpp: In function\
    \ 'int main()':\n/tmp/tmpj791jf_v.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj791jf_v.cpp:2:\n/tmp/tmpj791jf_v.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpj791jf_v.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpj791jf_v.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpj791jf_v.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfh6q8zh.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpzfh6q8zh.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpzfh6q8zh.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpzfh6q8zh.cpp: In function\
    \ 'int main()':\n/tmp/tmpzfh6q8zh.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzfh6q8zh.cpp:2:\n/tmp/tmpzfh6q8zh.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpzfh6q8zh.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpzfh6q8zh.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpzfh6q8zh.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int index2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if(index1 == 8 || index2 ==\
    \ 8) return result;\n    if(index1 > index2) {\n        int temp = index1;\n \
    \       index1 = index2;\n        index2 = temp;\n    }\n    for(int i = index1\
    \ + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcidgpajy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n\tstd::vector<std::string> result;\n\tint i = 0;\n\tfor (auto it = planets.begin();\
    \ it != planets.end(); it++) {\n\t\tif (*it == planet1) {\n\t\t\ti = 1;\n\t\t\
    }\n\t\tif (i == 1 && *it != planet2) {\n\t\t\tresult.push_back(*it);\n\t\t}\n\t\
    \tif (*it == planet2) {\n\t\t\ti = 0;\n\t\t}\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjitlcean.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int i = 0;\n    while (planets[i] !=\
    \ planet1) {\n        i++;\n    }\n    int j = 0;\n    while (planets[j] != planet2)\
    \ {\n        j++;\n    }\n    if (i > j) {\n        for (int k = j; k <= i; k++)\
    \ {\n            res.push_back(planets[k]);\n        }\n    } else {\n       \
    \ for (int k = i; k <= j; k++) {\n            res.push_back(planets[k]);\n   \
    \     }\n    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n \
    \   assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps8fa7rzl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return result;\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2;\
    \ i++) {\n            result.push_back(planets[i]);\n        }\n    } else {\n\
    \        for (int i = p2 + 1; i < p1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpostaib5p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpostaib5p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpostaib5p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpostaib5p.cpp: In function\
    \ 'int main()':\n/tmp/tmpostaib5p.cpp:40:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpostaib5p.cpp:2:\n/tmp/tmpostaib5p.cpp:41:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpostaib5p.cpp:41:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpostaib5p.cpp:41:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpostaib5p.cpp:41:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start < end) {\n        for (int i = start\
    \ + 1; i < end; i++) {\n            result.push_back(planets[i]);\n        }\n\
    \    } else {\n        for (int i = end + 1; i < start; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8wqkgvb6.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp8wqkgvb6.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp8wqkgvb6.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp8wqkgvb6.cpp: In function\
    \ 'int main()':\n/tmp/tmp8wqkgvb6.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8wqkgvb6.cpp:2:\n/tmp/tmp8wqkgvb6.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp8wqkgvb6.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp8wqkgvb6.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp8wqkgvb6.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = 0;\n    int end = 0;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == 0 || end == 0) {\n \
    \       return result;\n    }\n    if (start < end) {\n        for (int i = start\
    \ + 1; i < end; i++) {\n            result.push_back(planets[i]);\n        }\n\
    \    } else {\n        for (int i = end + 1; i < start; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvrpaq67d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n  std::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n  std::vector<std::string> result;\n  int p1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n  int p2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n  if (p1 == 8 || p2 == 8) return\
    \ result;\n  if (p1 > p2) std::swap(p1, p2);\n  for (int i = p1 + 1; i < p2; i++)\
    \ result.push_back(planets[i]);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg5o2kdmj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4j7lxils.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp4j7lxils.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp4j7lxils.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp4j7lxils.cpp: In function\
    \ 'int main()':\n/tmp/tmp4j7lxils.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4j7lxils.cpp:2:\n/tmp/tmp4j7lxils.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp4j7lxils.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp4j7lxils.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp4j7lxils.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int i = 0;\n    while (planets[i] !=\
    \ planet1) {\n        i++;\n    }\n    int j = 0;\n    while (planets[j] != planet2)\
    \ {\n        j++;\n    }\n    if (i > j) {\n        for (int k = j; k < i; k++)\
    \ {\n            res.push_back(planets[k]);\n        }\n    } else {\n       \
    \ for (int k = i; k < j; k++) {\n            res.push_back(planets[k]);\n    \
    \    }\n    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n  \
    \  assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpndxp2wt0.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpndxp2wt0.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpndxp2wt0.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpndxp2wt0.cpp: In function\
    \ 'int main()':\n/tmp/tmpndxp2wt0.cpp:42:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpndxp2wt0.cpp:2:\n/tmp/tmpndxp2wt0.cpp:43:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpndxp2wt0.cpp:43:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpndxp2wt0.cpp:43:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpndxp2wt0.cpp:43:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++)\
    \ {\n            result.push_back(planets[i]);\n        }\n    } else {\n    \
    \    for (int i = p2 + 1; i < p1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj791jf_v.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpj791jf_v.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpj791jf_v.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpj791jf_v.cpp: In function\
    \ 'int main()':\n/tmp/tmpj791jf_v.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj791jf_v.cpp:2:\n/tmp/tmpj791jf_v.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpj791jf_v.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpj791jf_v.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpj791jf_v.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\n        \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n    };\n    std::vector<std::string> result;\n    int p1 = -1,\
    \ p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            p1 = i;\n        }\n        if (planets[i] == planet2)\
    \ {\n            p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n\
    \        return result;\n    }\n    if (p1 < p2) {\n        for (int i = p1 +\
    \ 1; i < p2; i++) {\n            result.push_back(planets[i]);\n        }\n  \
    \  } else {\n        for (int i = p2 + 1; i < p1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu0pwagdg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n\tstd::vector<std::string> res;\n\tint i = 0;\n\twhile (planets[i] != planet1)\
    \ {\n\t\ti++;\n\t}\n\tint j = 0;\n\twhile (planets[j] != planet2) {\n\t\tj++;\n\
    \t}\n\tif (i > j) {\n\t\tfor (int k = j; k <= i; k++) {\n\t\t\tres.push_back(planets[k]);\n\
    \t\t}\n\t} else {\n\t\tfor (int k = i; k <= j; k++) {\n\t\t\tres.push_back(planets[k]);\n\
    \t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptadw72yb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4j7lxils.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp4j7lxils.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp4j7lxils.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp4j7lxils.cpp: In function\
    \ 'int main()':\n/tmp/tmp4j7lxils.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4j7lxils.cpp:2:\n/tmp/tmp4j7lxils.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp4j7lxils.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp4j7lxils.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp4j7lxils.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i\
    \ < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptf07o6hd.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmptf07o6hd.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmptf07o6hd.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmptf07o6hd.cpp: In function\
    \ 'int main()':\n/tmp/tmptf07o6hd.cpp:44:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptf07o6hd.cpp:2:\n/tmp/tmptf07o6hd.cpp:45:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmptf07o6hd.cpp:45:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmptf07o6hd.cpp:45:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmptf07o6hd.cpp:45:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = 0;\n    int end = 0;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == 0 || end == 0) {\n \
    \       return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp6kuen0se.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp6kuen0se.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp6kuen0se.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp6kuen0se.cpp: In function\
    \ 'int main()':\n/tmp/tmp6kuen0se.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6kuen0se.cpp:2:\n/tmp/tmp6kuen0se.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp6kuen0se.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp6kuen0se.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp6kuen0se.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4j7lxils.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp4j7lxils.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp4j7lxils.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp4j7lxils.cpp: In function\
    \ 'int main()':\n/tmp/tmp4j7lxils.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4j7lxils.cpp:2:\n/tmp/tmp4j7lxils.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp4j7lxils.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp4j7lxils.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp4j7lxils.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfh6q8zh.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpzfh6q8zh.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpzfh6q8zh.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpzfh6q8zh.cpp: In function\
    \ 'int main()':\n/tmp/tmpzfh6q8zh.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzfh6q8zh.cpp:2:\n/tmp/tmpzfh6q8zh.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpzfh6q8zh.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpzfh6q8zh.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpzfh6q8zh.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++)\
    \ {\n            result.push_back(planets[i]);\n        }\n    } else {\n    \
    \    for (int i = p2 + 1; i < p1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj791jf_v.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpj791jf_v.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpj791jf_v.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpj791jf_v.cpp: In function\
    \ 'int main()':\n/tmp/tmpj791jf_v.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj791jf_v.cpp:2:\n/tmp/tmpj791jf_v.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpj791jf_v.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpj791jf_v.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpj791jf_v.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return res;\n    }\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    for (int i = start + 1; i < end; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp63uv5mtp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxvjap5oi.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpxvjap5oi.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpxvjap5oi.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpxvjap5oi.cpp: In function\
    \ 'int main()':\n/tmp/tmpxvjap5oi.cpp:44:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxvjap5oi.cpp:2:\n/tmp/tmpxvjap5oi.cpp:45:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpxvjap5oi.cpp:45:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpxvjap5oi.cpp:45:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpxvjap5oi.cpp:45:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int index2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (index1 == 8 || index2 ==\
    \ 8) {\n        return result;\n    }\n    if (index1 > index2) {\n        std::swap(index1,\
    \ index2);\n    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgy0mtzuy.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpgy0mtzuy.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpgy0mtzuy.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpgy0mtzuy.cpp: In function\
    \ 'int main()':\n/tmp/tmpgy0mtzuy.cpp:36:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgy0mtzuy.cpp:2:\n/tmp/tmpgy0mtzuy.cpp:37:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpgy0mtzuy.cpp:37:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpgy0mtzuy.cpp:37:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpgy0mtzuy.cpp:37:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxvjap5oi.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpxvjap5oi.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpxvjap5oi.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpxvjap5oi.cpp: In function\
    \ 'int main()':\n/tmp/tmpxvjap5oi.cpp:44:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxvjap5oi.cpp:2:\n/tmp/tmpxvjap5oi.cpp:45:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpxvjap5oi.cpp:45:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpxvjap5oi.cpp:45:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpxvjap5oi.cpp:45:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n\tstd::vector<std::string> res;\n\tint p1 = -1, p2 = -1;\n\tfor (int i = 0;\
    \ i < planets.size(); i++) {\n\t\tif (planets[i] == planet1) p1 = i;\n\t\tif (planets[i]\
    \ == planet2) p2 = i;\n\t}\n\tif (p1 == -1 || p2 == -1) return res;\n\tif (p1\
    \ > p2) std::swap(p1, p2);\n\tfor (int i = p1 + 1; i < p2; i++) {\n\t\tres.push_back(planets[i]);\n\
    \t}\n\treturn res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvdr7o2ur.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i = 0;\n    while (planets[i]\
    \ != planet1) {\n        i++;\n    }\n    int j = 0;\n    while (planets[j] !=\
    \ planet2) {\n        j++;\n    }\n    if (i > j) {\n        for (int k = j; k\
    \ < i; k++) {\n            result.push_back(planets[k]);\n        }\n    } else\
    \ {\n        for (int k = i; k < j; k++) {\n            result.push_back(planets[k]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb6ghswqm.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpb6ghswqm.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpb6ghswqm.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpb6ghswqm.cpp: In function\
    \ 'int main()':\n/tmp/tmpb6ghswqm.cpp:42:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb6ghswqm.cpp:2:\n/tmp/tmpb6ghswqm.cpp:43:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpb6ghswqm.cpp:43:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpb6ghswqm.cpp:43:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpb6ghswqm.cpp:43:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4j7lxils.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp4j7lxils.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp4j7lxils.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp4j7lxils.cpp: In function\
    \ 'int main()':\n/tmp/tmp4j7lxils.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4j7lxils.cpp:2:\n/tmp/tmp4j7lxils.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp4j7lxils.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp4j7lxils.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp4j7lxils.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i = 0;\n    int j = 0;\n   \
    \ for (int k = 0; k < planets.size(); k++) {\n        if (planets[k] == planet1)\
    \ {\n            i = k;\n        }\n        if (planets[k] == planet2) {\n   \
    \         j = k;\n        }\n    }\n    if (i > j) {\n        for (int k = j;\
    \ k < i; k++) {\n            result.push_back(planets[k]);\n        }\n    } else\
    \ {\n        for (int k = i; k < j; k++) {\n            result.push_back(planets[k]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgwa9toaz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n\tstd::vector<std::string> result;\n\tint index1 = -1, index2 = -1;\n\t\
    for (int i = 0; i < planets.size(); i++) {\n\t\tif (planets[i] == planet1) {\n\
    \t\t\tindex1 = i;\n\t\t}\n\t\tif (planets[i] == planet2) {\n\t\t\tindex2 = i;\n\
    \t\t}\n\t}\n\tif (index1 == -1 || index2 == -1) {\n\t\treturn result;\n\t}\n\t\
    if (index1 < index2) {\n\t\tfor (int i = index1 + 1; i < index2; i++) {\n\t\t\t\
    result.push_back(planets[i]);\n\t\t}\n\t}\n\telse {\n\t\tfor (int i = index2 +\
    \ 1; i < index1; i++) {\n\t\t\tresult.push_back(planets[i]);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_1bd3k95.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\n        \"\
    Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n      \
    \  \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int\
    \ index2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp64yj3cr1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int start = 0;\n    int end = 0;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == 0 || end == 0) {\n \
    \       return res;\n    }\n    if (start > end) {\n        std::swap(start, end);\n\
    \    }\n    for (int i = start + 1; i < end; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp28idkbxf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = 0;\n    int end = 0;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == 0 && end == 0) {\n \
    \       return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0l12kvuj.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp0l12kvuj.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp0l12kvuj.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp0l12kvuj.cpp: In function\
    \ 'int main()':\n/tmp/tmp0l12kvuj.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0l12kvuj.cpp:2:\n/tmp/tmp0l12kvuj.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp0l12kvuj.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp0l12kvuj.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp0l12kvuj.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfh6q8zh.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpzfh6q8zh.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpzfh6q8zh.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpzfh6q8zh.cpp: In function\
    \ 'int main()':\n/tmp/tmpzfh6q8zh.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzfh6q8zh.cpp:2:\n/tmp/tmpzfh6q8zh.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpzfh6q8zh.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpzfh6q8zh.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpzfh6q8zh.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int pos1 = -1, pos2 = -1;\n    for\
    \ (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) pos1\
    \ = i;\n        if (planets[i] == planet2) pos2 = i;\n    }\n    if (pos1 == -1\
    \ || pos2 == -1) return result;\n    if (pos1 > pos2) std::swap(pos1, pos2);\n\
    \    for (int i = pos1 + 1; i < pos2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzj7tklff.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i = 0;\n    int j = 0;\n   \
    \ for (i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n\
    \            break;\n        }\n    }\n    for (j = 0; j < planets.size(); j++)\
    \ {\n        if (planets[j] == planet2) {\n            break;\n        }\n   \
    \ }\n    if (i == planets.size() || j == planets.size()) {\n        return result;\n\
    \    }\n    if (i > j) {\n        for (int k = j; k < i; k++) {\n            result.push_back(planets[k]);\n\
    \        }\n    } else {\n        for (int k = i; k < j; k++) {\n            result.push_back(planets[k]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnp8m198v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxvjap5oi.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpxvjap5oi.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpxvjap5oi.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpxvjap5oi.cpp: In function\
    \ 'int main()':\n/tmp/tmpxvjap5oi.cpp:44:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxvjap5oi.cpp:2:\n/tmp/tmpxvjap5oi.cpp:45:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpxvjap5oi.cpp:45:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpxvjap5oi.cpp:45:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpxvjap5oi.cpp:45:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++) {\n\
    \            res.push_back(planets[i]);\n        }\n    } else {\n        for\
    \ (int i = p2 + 1; i < p1; i++) {\n            res.push_back(planets[i]);\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0k13_eou.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp0k13_eou.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp0k13_eou.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp0k13_eou.cpp: In function\
    \ 'int main()':\n/tmp/tmp0k13_eou.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0k13_eou.cpp:2:\n/tmp/tmp0k13_eou.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp0k13_eou.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp0k13_eou.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp0k13_eou.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i\
    \ < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptf07o6hd.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmptf07o6hd.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmptf07o6hd.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmptf07o6hd.cpp: In function\
    \ 'int main()':\n/tmp/tmptf07o6hd.cpp:44:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptf07o6hd.cpp:2:\n/tmp/tmptf07o6hd.cpp:45:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmptf07o6hd.cpp:45:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmptf07o6hd.cpp:45:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmptf07o6hd.cpp:45:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = 0;\n    int end = 0;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == 0 && end == 0) {\n \
    \       return result;\n    }\n    if (start > end) {\n        for (int i = end\
    \ + 1; i < start; i++) {\n            result.push_back(planets[i]);\n        }\n\
    \    } else {\n        for (int i = start + 1; i < end; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1lf8zve2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n\tstd::vector<std::string> result;\n\tint i = 0;\n\tint j = 0;\n\tfor (i\
    \ = 0; i < planets.size(); i++) {\n\t\tif (planets[i] == planet1) {\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\tfor (j = 0; j < planets.size(); j++) {\n\t\tif (planets[j] == planet2)\
    \ {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i == planets.size() || j == planets.size())\
    \ {\n\t\treturn result;\n\t}\n\tif (i > j) {\n\t\tfor (int k = j; k <= i; k++)\
    \ {\n\t\t\tresult.push_back(planets[k]);\n\t\t}\n\t}\n\telse {\n\t\tfor (int k\
    \ = i; k <= j; k++) {\n\t\t\tresult.push_back(planets[k]);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyqd8rkae.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n\tstd::vector<std::string> result;\n\tint index1 = -1;\n\tint index2 = -1;\n\
    \tfor (int i = 0; i < planets.size(); i++) {\n\t\tif (planets[i] == planet1) {\n\
    \t\t\tindex1 = i;\n\t\t}\n\t\tif (planets[i] == planet2) {\n\t\t\tindex2 = i;\n\
    \t\t}\n\t}\n\tif (index1 == -1 || index2 == -1) {\n\t\treturn result;\n\t}\n\t\
    if (index1 > index2) {\n\t\tint temp = index1;\n\t\tindex1 = index2;\n\t\tindex2\
    \ = temp;\n\t}\n\tfor (int i = index1 + 1; i < index2; i++) {\n\t\tresult.push_back(planets[i]);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyefphgq7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    std::vector<std::string>::iterator\
    \ it1 = std::find(planets.begin(), planets.end(), planet1);\n    std::vector<std::string>::iterator\
    \ it2 = std::find(planets.begin(), planets.end(), planet2);\n    if (it1 == planets.end()\
    \ || it2 == planets.end()) {\n        return result;\n    }\n    if (it1 > it2)\
    \ {\n        std::swap(it1, it2);\n    }\n    for (auto it = it1 + 1; it != it2;\
    \ it++) {\n        result.push_back(*it);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnvi9nd2m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n\tstd::vector<std::string> result;\n\tint index1 = -1, index2 = -1;\n\t\
    for (int i = 0; i < planets.size(); i++) {\n\t\tif (planets[i] == planet1) {\n\
    \t\t\tindex1 = i;\n\t\t}\n\t\tif (planets[i] == planet2) {\n\t\t\tindex2 = i;\n\
    \t\t}\n\t}\n\tif (index1 == -1 || index2 == -1) {\n\t\treturn result;\n\t}\n\t\
    if (index1 > index2) {\n\t\tstd::swap(index1, index2);\n\t}\n\tfor (int i = index1\
    \ + 1; i < index2; i++) {\n\t\tresult.push_back(planets[i]);\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpq835mr99.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4j7lxils.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp4j7lxils.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp4j7lxils.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp4j7lxils.cpp: In function\
    \ 'int main()':\n/tmp/tmp4j7lxils.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4j7lxils.cpp:2:\n/tmp/tmp4j7lxils.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp4j7lxils.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp4j7lxils.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp4j7lxils.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i = 0;\n    int j = 0;\n   \
    \ for (int k = 0; k < planets.size(); k++) {\n        if (planets[k] == planet1)\
    \ {\n            i = k;\n        }\n        if (planets[k] == planet2) {\n   \
    \         j = k;\n        }\n    }\n    if (i > j) {\n        std::swap(i, j);\n\
    \    }\n    for (int k = i + 1; k < j; k++) {\n        result.push_back(planets[k]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa7noxipl.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpa7noxipl.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpa7noxipl.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpa7noxipl.cpp: In function\
    \ 'int main()':\n/tmp/tmpa7noxipl.cpp:41:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa7noxipl.cpp:2:\n/tmp/tmpa7noxipl.cpp:42:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpa7noxipl.cpp:42:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpa7noxipl.cpp:42:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpa7noxipl.cpp:42:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfh6q8zh.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpzfh6q8zh.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpzfh6q8zh.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpzfh6q8zh.cpp: In function\
    \ 'int main()':\n/tmp/tmpzfh6q8zh.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzfh6q8zh.cpp:2:\n/tmp/tmpzfh6q8zh.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpzfh6q8zh.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpzfh6q8zh.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpzfh6q8zh.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4j7lxils.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp4j7lxils.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp4j7lxils.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp4j7lxils.cpp: In function\
    \ 'int main()':\n/tmp/tmp4j7lxils.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4j7lxils.cpp:2:\n/tmp/tmp4j7lxils.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp4j7lxils.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp4j7lxils.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp4j7lxils.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start < end) {\n        for (int i = start\
    \ + 1; i < end; i++) {\n            result.push_back(planets[i]);\n        }\n\
    \    } else {\n        for (int i = end + 1; i < start; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8wqkgvb6.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp8wqkgvb6.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp8wqkgvb6.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp8wqkgvb6.cpp: In function\
    \ 'int main()':\n/tmp/tmp8wqkgvb6.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8wqkgvb6.cpp:2:\n/tmp/tmp8wqkgvb6.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp8wqkgvb6.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp8wqkgvb6.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp8wqkgvb6.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int pos1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int pos2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (pos1 < 0 || pos2 < 0) {\n\
    \        return result;\n    }\n    if (pos1 > pos2) {\n        std::swap(pos1,\
    \ pos2);\n    }\n    for (int i = pos1 + 1; i < pos2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppenbtdch.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start < end) {\n        for (int i = start\
    \ + 1; i < end; i++) {\n            result.push_back(planets[i]);\n        }\n\
    \    } else {\n        for (int i = end + 1; i < start; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8wqkgvb6.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp8wqkgvb6.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp8wqkgvb6.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp8wqkgvb6.cpp: In function\
    \ 'int main()':\n/tmp/tmp8wqkgvb6.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8wqkgvb6.cpp:2:\n/tmp/tmp8wqkgvb6.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp8wqkgvb6.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp8wqkgvb6.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp8wqkgvb6.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n\tstd::vector<std::string> result;\n\tint p1 = -1, p2 = -1;\n\tfor (int\
    \ i = 0; i < planets.size(); i++) {\n\t\tif (planets[i] == planet1) {\n\t\t\t\
    p1 = i;\n\t\t}\n\t\tif (planets[i] == planet2) {\n\t\t\tp2 = i;\n\t\t}\n\t}\n\t\
    if (p1 == -1 || p2 == -1) {\n\t\treturn result;\n\t}\n\tif (p1 < p2) {\n\t\tfor\
    \ (int i = p1 + 1; i < p2; i++) {\n\t\t\tresult.push_back(planets[i]);\n\t\t}\n\
    \t}\n\telse {\n\t\tfor (int i = p2 + 1; i < p1; i++) {\n\t\t\tresult.push_back(planets[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph0l8b84j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\n        \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n    };\n    std::vector<std::string> result;\n    int p1 = -1,\
    \ p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            p1 = i;\n        }\n        if (planets[i] == planet2)\
    \ {\n            p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n\
    \        return result;\n    }\n    if (p1 < p2) {\n        for (int i = p1 +\
    \ 1; i < p2; i++) {\n            result.push_back(planets[i]);\n        }\n  \
    \  } else {\n        for (int i = p2 + 1; i < p1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu0pwagdg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i = 0;\n    int j = 0;\n   \
    \ for (i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n\
    \            break;\n        }\n    }\n    for (j = 0; j < planets.size(); j++)\
    \ {\n        if (planets[j] == planet2) {\n            break;\n        }\n   \
    \ }\n    if (i == planets.size() || j == planets.size()) {\n        return result;\n\
    \    }\n    if (i < j) {\n        for (int k = i + 1; k < j; k++) {\n        \
    \    result.push_back(planets[k]);\n        }\n    } else {\n        for (int\
    \ k = j + 1; k < i; k++) {\n            result.push_back(planets[k]);\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n \
    \   assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf974n5hd.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpf974n5hd.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpf974n5hd.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpf974n5hd.cpp: In function\
    \ 'int main()':\n/tmp/tmpf974n5hd.cpp:49:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf974n5hd.cpp:2:\n/tmp/tmpf974n5hd.cpp:50:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpf974n5hd.cpp:50:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpf974n5hd.cpp:50:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpf974n5hd.cpp:50:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i = 0;\n    int j = 0;\n   \
    \ for (i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n\
    \            break;\n        }\n    }\n    for (j = 0; j < planets.size(); j++)\
    \ {\n        if (planets[j] == planet2) {\n            break;\n        }\n   \
    \ }\n    if (i == planets.size() || j == planets.size()) {\n        return result;\n\
    \    }\n    if (i < j) {\n        for (int k = i + 1; k < j; k++) {\n        \
    \    result.push_back(planets[k]);\n        }\n    } else {\n        for (int\
    \ k = j + 1; k < i; k++) {\n            result.push_back(planets[k]);\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n \
    \   assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf974n5hd.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpf974n5hd.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpf974n5hd.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpf974n5hd.cpp: In function\
    \ 'int main()':\n/tmp/tmpf974n5hd.cpp:49:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf974n5hd.cpp:2:\n/tmp/tmpf974n5hd.cpp:50:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpf974n5hd.cpp:50:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpf974n5hd.cpp:50:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpf974n5hd.cpp:50:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start < end) {\n        for (int i = start\
    \ + 1; i < end; i++) {\n            result.push_back(planets[i]);\n        }\n\
    \    } else {\n        for (int i = end + 1; i < start; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8wqkgvb6.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp8wqkgvb6.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp8wqkgvb6.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp8wqkgvb6.cpp: In function\
    \ 'int main()':\n/tmp/tmp8wqkgvb6.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8wqkgvb6.cpp:2:\n/tmp/tmp8wqkgvb6.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp8wqkgvb6.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp8wqkgvb6.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp8wqkgvb6.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int p2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (p1 == 8 || p2 == 8) return\
    \ result;\n    if (p1 > p2) {\n        int temp = p1;\n        p1 = p2;\n    \
    \    p2 = temp;\n    }\n    for (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_ge2kmp3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return result;\n    if (p1 > p2) {\n        int temp = p1;\n        p1 =\
    \ p2;\n        p2 = temp;\n    }\n    for (int i = p1 + 1; i < p2; i++) {\n  \
    \      result.push_back(planets[i]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmxlpk8fk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int index2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (index1 == 8 || index2 ==\
    \ 8) {\n        return result;\n    }\n    if (index1 > index2) {\n        std::swap(index1,\
    \ index2);\n    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgy0mtzuy.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpgy0mtzuy.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpgy0mtzuy.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpgy0mtzuy.cpp: In function\
    \ 'int main()':\n/tmp/tmpgy0mtzuy.cpp:36:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgy0mtzuy.cpp:2:\n/tmp/tmpgy0mtzuy.cpp:37:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpgy0mtzuy.cpp:37:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpgy0mtzuy.cpp:37:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpgy0mtzuy.cpp:37:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int p2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (p1 == 8 || p2 == 8) {\n\
    \        return result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n\
    \    }\n    for (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp61emzx_4.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp61emzx_4.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp61emzx_4.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp61emzx_4.cpp: In function\
    \ 'int main()':\n/tmp/tmp61emzx_4.cpp:36:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp61emzx_4.cpp:2:\n/tmp/tmp61emzx_4.cpp:37:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp61emzx_4.cpp:37:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp61emzx_4.cpp:37:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp61emzx_4.cpp:37:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i\
    \ < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptf07o6hd.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmptf07o6hd.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmptf07o6hd.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmptf07o6hd.cpp: In function\
    \ 'int main()':\n/tmp/tmptf07o6hd.cpp:44:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptf07o6hd.cpp:2:\n/tmp/tmptf07o6hd.cpp:45:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmptf07o6hd.cpp:45:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmptf07o6hd.cpp:45:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmptf07o6hd.cpp:45:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = 0;\n    int index2\
    \ = 0;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == 0 ||\
    \ index2 == 0) {\n        return result;\n    }\n    if (index1 > index2) {\n\
    \        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i < index2;\
    \ i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpouihjuu4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfh6q8zh.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpzfh6q8zh.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpzfh6q8zh.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpzfh6q8zh.cpp: In function\
    \ 'int main()':\n/tmp/tmpzfh6q8zh.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzfh6q8zh.cpp:2:\n/tmp/tmpzfh6q8zh.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpzfh6q8zh.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpzfh6q8zh.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpzfh6q8zh.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n\tstd::vector<std::string> result;\n\tint p1 = -1, p2 = -1;\n\tfor (int\
    \ i = 0; i < planets.size(); i++) {\n\t\tif (planets[i] == planet1) {\n\t\t\t\
    p1 = i;\n\t\t}\n\t\tif (planets[i] == planet2) {\n\t\t\tp2 = i;\n\t\t}\n\t}\n\t\
    if (p1 == -1 || p2 == -1) {\n\t\treturn result;\n\t}\n\tif (p1 > p2) {\n\t\tstd::swap(p1,\
    \ p2);\n\t}\n\tfor (int i = p1 + 1; i < p2; i++) {\n\t\tresult.push_back(planets[i]);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyydipyfb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4j7lxils.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp4j7lxils.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp4j7lxils.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp4j7lxils.cpp: In function\
    \ 'int main()':\n/tmp/tmp4j7lxils.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4j7lxils.cpp:2:\n/tmp/tmp4j7lxils.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp4j7lxils.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp4j7lxils.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp4j7lxils.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpggd66d4o.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpggd66d4o.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpggd66d4o.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpggd66d4o.cpp: In function\
    \ 'int main()':\n/tmp/tmpggd66d4o.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpggd66d4o.cpp:2:\n/tmp/tmpggd66d4o.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpggd66d4o.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpggd66d4o.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpggd66d4o.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfh6q8zh.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpzfh6q8zh.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpzfh6q8zh.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpzfh6q8zh.cpp: In function\
    \ 'int main()':\n/tmp/tmpzfh6q8zh.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzfh6q8zh.cpp:2:\n/tmp/tmpzfh6q8zh.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpzfh6q8zh.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpzfh6q8zh.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpzfh6q8zh.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++) {\n\
    \            res.push_back(planets[i]);\n        }\n    } else {\n        for\
    \ (int i = p2 + 1; i < p1; i++) {\n            res.push_back(planets[i]);\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0k13_eou.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp0k13_eou.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp0k13_eou.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp0k13_eou.cpp: In function\
    \ 'int main()':\n/tmp/tmp0k13_eou.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0k13_eou.cpp:2:\n/tmp/tmp0k13_eou.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp0k13_eou.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp0k13_eou.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp0k13_eou.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i1 = -1, i2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          i1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    i2 = i;\n        }\n    }\n    if (i1 == -1 || i2 == -1) {\n        return\
    \ result;\n    }\n    if (i1 > i2) {\n        std::swap(i1, i2);\n    }\n    for\
    \ (int i = i1 + 1; i < i2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwi2k_px7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfh6q8zh.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpzfh6q8zh.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpzfh6q8zh.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpzfh6q8zh.cpp: In function\
    \ 'int main()':\n/tmp/tmpzfh6q8zh.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzfh6q8zh.cpp:2:\n/tmp/tmpzfh6q8zh.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpzfh6q8zh.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpzfh6q8zh.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpzfh6q8zh.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int first = -1;\n    int second\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            first = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            second = i;\n        }\n    }\n    if (first == -1 ||\
    \ second == -1) {\n        return result;\n    }\n    if (first < second) {\n\
    \        for (int i = first + 1; i < second; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = second + 1; i < first; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpak5k87kt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\n        \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n    };\n    std::vector<std::string> res;\n    int i = 0;\n   \
    \ while (planets[i] != planet1) {\n        i++;\n        if (i == planets.size())\
    \ {\n            return res;\n        }\n    }\n    int j = 0;\n    while (planets[j]\
    \ != planet2) {\n        j++;\n        if (j == planets.size()) {\n          \
    \  return res;\n        }\n    }\n    if (i > j) {\n        std::swap(i, j);\n\
    \    }\n    for (int k = i + 1; k < j; k++) {\n        res.push_back(planets[k]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0pheelip.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return res;\n    }\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    for (int i = start + 1; i < end; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp63uv5mtp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\n        \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n    };\n    std::vector<std::string> result;\n    auto it1 = std::find(planets.begin(),\
    \ planets.end(), planet1);\n    auto it2 = std::find(planets.begin(), planets.end(),\
    \ planet2);\n    if (it1 == planets.end() || it2 == planets.end()) {\n       \
    \ return result;\n    }\n    if (it1 > it2) {\n        std::swap(it1, it2);\n\
    \    }\n    for (auto it = it1; it != it2; ++it) {\n        result.push_back(*it);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi8xda3by.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpggd66d4o.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpggd66d4o.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpggd66d4o.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpggd66d4o.cpp: In function\
    \ 'int main()':\n/tmp/tmpggd66d4o.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpggd66d4o.cpp:2:\n/tmp/tmpggd66d4o.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpggd66d4o.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpggd66d4o.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpggd66d4o.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4j7lxils.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp4j7lxils.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp4j7lxils.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp4j7lxils.cpp: In function\
    \ 'int main()':\n/tmp/tmp4j7lxils.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4j7lxils.cpp:2:\n/tmp/tmp4j7lxils.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp4j7lxils.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp4j7lxils.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp4j7lxils.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i\
    \ < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptf07o6hd.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmptf07o6hd.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmptf07o6hd.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmptf07o6hd.cpp: In function\
    \ 'int main()':\n/tmp/tmptf07o6hd.cpp:44:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptf07o6hd.cpp:2:\n/tmp/tmptf07o6hd.cpp:45:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmptf07o6hd.cpp:45:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmptf07o6hd.cpp:45:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmptf07o6hd.cpp:45:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n\tstd::vector<std::string> res;\n\tint p1 = -1, p2 = -1;\n\tfor (int i = 0;\
    \ i < planets.size(); i++) {\n\t\tif (planets[i] == planet1) {\n\t\t\tp1 = i;\n\
    \t\t}\n\t\tif (planets[i] == planet2) {\n\t\t\tp2 = i;\n\t\t}\n\t}\n\tif (p1 ==\
    \ -1 || p2 == -1) {\n\t\treturn res;\n\t}\n\tif (p1 > p2) {\n\t\tstd::swap(p1,\
    \ p2);\n\t}\n\tfor (int i = p1 + 1; i < p2; i++) {\n\t\tres.push_back(planets[i]);\n\
    \t}\n\treturn res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuqq_cu4y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start < end) {\n        for (int i = start\
    \ + 1; i < end; i++) {\n            result.push_back(planets[i]);\n        }\n\
    \    } else {\n        for (int i = end + 1; i < start; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8wqkgvb6.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp8wqkgvb6.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp8wqkgvb6.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp8wqkgvb6.cpp: In function\
    \ 'int main()':\n/tmp/tmp8wqkgvb6.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8wqkgvb6.cpp:2:\n/tmp/tmp8wqkgvb6.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp8wqkgvb6.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp8wqkgvb6.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp8wqkgvb6.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int i2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (i1 == 8 || i2 == 8) {\n\
    \        return result;\n    }\n    if (i1 > i2) {\n        std::swap(i1, i2);\n\
    \    }\n    for (int i = i1 + 1; i < i2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp365z6rjg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int pos1 = -1, pos2 = -1;\n    for\
    \ (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n\
    \            pos1 = i;\n        }\n        if (planets[i] == planet2) {\n    \
    \        pos2 = i;\n        }\n    }\n    if (pos1 == -1 || pos2 == -1) {\n  \
    \      return result;\n    }\n    if (pos1 > pos2) {\n        std::swap(pos1,\
    \ pos2);\n    }\n    for (int i = pos1 + 1; i < pos2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgr00jw3b.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpgr00jw3b.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpgr00jw3b.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpgr00jw3b.cpp: In function\
    \ 'int main()':\n/tmp/tmpgr00jw3b.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgr00jw3b.cpp:2:\n/tmp/tmpgr00jw3b.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpgr00jw3b.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpgr00jw3b.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpgr00jw3b.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int index2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (index1 == 8 || index2 ==\
    \ 8) {\n        return result;\n    }\n    if (index1 > index2) {\n        std::swap(index1,\
    \ index2);\n    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgy0mtzuy.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpgy0mtzuy.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpgy0mtzuy.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpgy0mtzuy.cpp: In function\
    \ 'int main()':\n/tmp/tmpgy0mtzuy.cpp:36:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgy0mtzuy.cpp:2:\n/tmp/tmpgy0mtzuy.cpp:37:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpgy0mtzuy.cpp:37:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpgy0mtzuy.cpp:37:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpgy0mtzuy.cpp:37:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = 0;\n    int end = 0;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == 0 || end == 0) {\n \
    \       return result;\n    }\n    if (start < end) {\n        for (int i = start\
    \ + 1; i < end; i++) {\n            result.push_back(planets[i]);\n        }\n\
    \    } else {\n        for (int i = end + 1; i < start; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvrpaq67d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i\
    \ < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptf07o6hd.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmptf07o6hd.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmptf07o6hd.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmptf07o6hd.cpp: In function\
    \ 'int main()':\n/tmp/tmptf07o6hd.cpp:44:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptf07o6hd.cpp:2:\n/tmp/tmptf07o6hd.cpp:45:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmptf07o6hd.cpp:45:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmptf07o6hd.cpp:45:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmptf07o6hd.cpp:45:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return result;\n    if (p1 > p2) std::swap(p1, p2);\n    for (int i = p1\
    \ + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy7h3f4lu.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpy7h3f4lu.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpy7h3f4lu.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpy7h3f4lu.cpp: In function\
    \ 'int main()':\n/tmp/tmpy7h3f4lu.cpp:35:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy7h3f4lu.cpp:2:\n/tmp/tmpy7h3f4lu.cpp:36:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpy7h3f4lu.cpp:36:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpy7h3f4lu.cpp:36:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpy7h3f4lu.cpp:36:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4j7lxils.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp4j7lxils.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp4j7lxils.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp4j7lxils.cpp: In function\
    \ 'int main()':\n/tmp/tmp4j7lxils.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4j7lxils.cpp:2:\n/tmp/tmp4j7lxils.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp4j7lxils.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp4j7lxils.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp4j7lxils.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return res;\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++)\
    \ {\n            res.push_back(planets[i]);\n        }\n    } else {\n       \
    \ for (int i = p2 + 1; i < p1; i++) {\n            res.push_back(planets[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp97u92wtp.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp97u92wtp.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp97u92wtp.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp97u92wtp.cpp: In function\
    \ 'int main()':\n/tmp/tmp97u92wtp.cpp:40:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp97u92wtp.cpp:2:\n/tmp/tmp97u92wtp.cpp:41:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp97u92wtp.cpp:41:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp97u92wtp.cpp:41:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp97u92wtp.cpp:41:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start < end) {\n        for (int i = start\
    \ + 1; i < end; i++) {\n            result.push_back(planets[i]);\n        }\n\
    \    } else {\n        for (int i = end + 1; i < start; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8wqkgvb6.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp8wqkgvb6.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp8wqkgvb6.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp8wqkgvb6.cpp: In function\
    \ 'int main()':\n/tmp/tmp8wqkgvb6.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8wqkgvb6.cpp:2:\n/tmp/tmp8wqkgvb6.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp8wqkgvb6.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp8wqkgvb6.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp8wqkgvb6.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i\
    \ < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptf07o6hd.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmptf07o6hd.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmptf07o6hd.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmptf07o6hd.cpp: In function\
    \ 'int main()':\n/tmp/tmptf07o6hd.cpp:44:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptf07o6hd.cpp:2:\n/tmp/tmptf07o6hd.cpp:45:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmptf07o6hd.cpp:45:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmptf07o6hd.cpp:45:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmptf07o6hd.cpp:45:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = 0;\n    int p2 = 0;\n \
    \   for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            p1 = i;\n        }\n        if (planets[i] == planet2) {\n  \
    \          p2 = i;\n        }\n    }\n    if (p1 == 0 || p2 == 0) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        for (int i = p2 + 1; i < p1; i++)\
    \ {\n            result.push_back(planets[i]);\n        }\n    } else {\n    \
    \    for (int i = p1 + 1; i < p2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4wgikv2k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int index2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (index1 == 8 || index2 ==\
    \ 8) {\n        return result;\n    }\n    if (index1 > index2) {\n        std::swap(index1,\
    \ index2);\n    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgy0mtzuy.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpgy0mtzuy.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpgy0mtzuy.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpgy0mtzuy.cpp: In function\
    \ 'int main()':\n/tmp/tmpgy0mtzuy.cpp:36:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgy0mtzuy.cpp:2:\n/tmp/tmpgy0mtzuy.cpp:37:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpgy0mtzuy.cpp:37:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpgy0mtzuy.cpp:37:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpgy0mtzuy.cpp:37:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxvjap5oi.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpxvjap5oi.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpxvjap5oi.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpxvjap5oi.cpp: In function\
    \ 'int main()':\n/tmp/tmpxvjap5oi.cpp:44:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxvjap5oi.cpp:2:\n/tmp/tmpxvjap5oi.cpp:45:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpxvjap5oi.cpp:45:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpxvjap5oi.cpp:45:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpxvjap5oi.cpp:45:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\n        \"\
    Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n      \
    \  \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int\
    \ index2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i\
    \ < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1rq__s_y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpggd66d4o.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpggd66d4o.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpggd66d4o.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpggd66d4o.cpp: In function\
    \ 'int main()':\n/tmp/tmpggd66d4o.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpggd66d4o.cpp:2:\n/tmp/tmpggd66d4o.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpggd66d4o.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpggd66d4o.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpggd66d4o.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int index2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (index1 > index2) {\n   \
    \     std::swap(index1, index2);\n    }\n    if (index1 < 0 || index2 < 0) {\n\
    \        return result;\n    }\n    for (int i = index1 + 1; i < index2; i++)\
    \ {\n        result.push_back(planets[i]);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsekg0s1p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i1 = -1, i2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          i1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    i2 = i;\n        }\n    }\n    if (i1 == -1 || i2 == -1) {\n        return\
    \ result;\n    }\n    if (i1 > i2) {\n        std::swap(i1, i2);\n    }\n    for\
    \ (int i = i1 + 1; i < i2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwi2k_px7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\n        \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n    };\n    std::vector<std::string> result;\n    int start = -1;\n\
    \    int end = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if\
    \ (planets[i] == planet1) {\n            start = i;\n        }\n        if (planets[i]\
    \ == planet2) {\n            end = i;\n        }\n    }\n    if (start == -1 ||\
    \ end == -1) {\n        return result;\n    }\n    if (start > end) {\n      \
    \  std::swap(start, end);\n    }\n    for (int i = start + 1; i < end; i++) {\n\
    \        result.push_back(planets[i]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpr5hoapbd.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpr5hoapbd.cpp:22:5: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     };\n    \
    \ ^\n/tmp/tmpr5hoapbd.cpp:22:5: error: could not convert '{\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}' from\
    \ '<brace-enclosed initializer list>' to 'std::vector<std::basic_string<char>\
    \ >'\n/tmp/tmpr5hoapbd.cpp: In function 'int main()':\n/tmp/tmpr5hoapbd.cpp:46:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = bf;\n       \
    \   ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n          \
    \       from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n  \
    \               from /tmp/tmpr5hoapbd.cpp:2:\n/tmp/tmpr5hoapbd.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpr5hoapbd.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpr5hoapbd.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpr5hoapbd.cpp:47:123: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpr5hoapbd.cpp:48:74:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate("
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = 0;\n    int end = 0;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == 0 && end == 0) {\n \
    \       return result;\n    }\n    if (start > end) {\n        for (int i = end;\
    \ i < start; i++) {\n            result.push_back(planets[i]);\n        }\n  \
    \  } else {\n        for (int i = start; i < end; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8s_if63l.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp8s_if63l.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp8s_if63l.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp8s_if63l.cpp: In function\
    \ 'int main()':\n/tmp/tmp8s_if63l.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8s_if63l.cpp:2:\n/tmp/tmp8s_if63l.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp8s_if63l.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp8s_if63l.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp8s_if63l.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxvjap5oi.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpxvjap5oi.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpxvjap5oi.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpxvjap5oi.cpp: In function\
    \ 'int main()':\n/tmp/tmpxvjap5oi.cpp:44:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxvjap5oi.cpp:2:\n/tmp/tmpxvjap5oi.cpp:45:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpxvjap5oi.cpp:45:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpxvjap5oi.cpp:45:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpxvjap5oi.cpp:45:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpd7jlb3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdpd7jlb3.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdpd7jlb3.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdpd7jlb3.cpp: In function\
    \ 'int main()':\n/tmp/tmpdpd7jlb3.cpp:43:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpd7jlb3.cpp:2:\n/tmp/tmpdpd7jlb3.cpp:44:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdpd7jlb3.cpp:44:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdpd7jlb3.cpp:44:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int p2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (p1 == 8 || p2 == 8) return\
    \ result;\n    if (p1 > p2) std::swap(p1, p2);\n    for (int i = p1 + 1; i < p2;\
    \ i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx37z035z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> res;\n    int i = 0;\n    int j = 0;\n    for\
    \ (int k = 0; k < planets.size(); k++) {\n        if (planets[k] == planet1) {\n\
    \            i = k;\n        }\n        if (planets[k] == planet2) {\n       \
    \     j = k;\n        }\n    }\n    if (i > j) {\n        for (int k = j + 1;\
    \ k < i; k++) {\n            res.push_back(planets[k]);\n        }\n    } else\
    \ {\n        for (int k = i + 1; k < j; k++) {\n            res.push_back(planets[k]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr75y04wk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) p1 = i;\n\
    \        if (planets[i] == planet2) p2 = i;\n    }\n    if (p1 == -1 || p2 ==\
    \ -1) return result;\n    if (p1 > p2) {\n        int tmp = p1;\n        p1 =\
    \ p2;\n        p2 = tmp;\n    }\n    for (int i = p1 + 1; i < p2; i++) {\n   \
    \     result.push_back(planets[i]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkvyjcwoq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4j7lxils.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp4j7lxils.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp4j7lxils.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp4j7lxils.cpp: In function\
    \ 'int main()':\n/tmp/tmp4j7lxils.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4j7lxils.cpp:2:\n/tmp/tmp4j7lxils.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp4j7lxils.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp4j7lxils.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp4j7lxils.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        for (int i = index2 + 1; i < index1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index1 + 1; i < index2; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpupmv0804.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = 0;\n    int end = 0;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == 0 && end == 0) {\n \
    \       return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0l12kvuj.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp0l12kvuj.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp0l12kvuj.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp0l12kvuj.cpp: In function\
    \ 'int main()':\n/tmp/tmp0l12kvuj.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0l12kvuj.cpp:2:\n/tmp/tmp0l12kvuj.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp0l12kvuj.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp0l12kvuj.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp0l12kvuj.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\n        \"\
    Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n      \
    \  \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    };\n    std::vector<std::string> res;\n    int p1 = -1, p2 = -1;\n    for\
    \ (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n\
    \            p1 = i;\n        }\n        if (planets[i] == planet2) {\n      \
    \      p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ res;\n    }\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++) {\n\
    \            res.push_back(planets[i]);\n        }\n    } else {\n        for\
    \ (int i = p2 + 1; i < p1; i++) {\n            res.push_back(planets[i]);\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpznqy5uoi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = 0;\n    int index2\
    \ = 0;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == 0 ||\
    \ index2 == 0) {\n        return result;\n    }\n    if (index1 > index2) {\n\
    \        for (int i = index2 + 1; i < index1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index1 + 1; i < index2; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjqgqc1lw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = 0;\n    int index2\
    \ = 0;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == 0 ||\
    \ index2 == 0) {\n        return result;\n    }\n    if (index1 > index2) {\n\
    \        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu6r0rxsy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int i = 0;\n    int j = 0;\n   \
    \ for (i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n\
    \            break;\n        }\n    }\n    for (j = 0; j < planets.size(); j++)\
    \ {\n        if (planets[j] == planet2) {\n            break;\n        }\n   \
    \ }\n    if (i == planets.size() || j == planets.size()) {\n        return result;\n\
    \    }\n    if (i < j) {\n        for (int k = i + 1; k < j; k++) {\n        \
    \    result.push_back(planets[k]);\n        }\n    } else {\n        for (int\
    \ k = j + 1; k < i; k++) {\n            result.push_back(planets[k]);\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n \
    \   assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"\
    Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"\
    Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf974n5hd.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpf974n5hd.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpf974n5hd.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpf974n5hd.cpp: In function\
    \ 'int main()':\n/tmp/tmpf974n5hd.cpp:49:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf974n5hd.cpp:2:\n/tmp/tmpf974n5hd.cpp:50:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpf974n5hd.cpp:50:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpf974n5hd.cpp:50:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpf974n5hd.cpp:50:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwhu1d2p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpdwhu1d2p.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpdwhu1d2p.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpdwhu1d2p.cpp: In function\
    \ 'int main()':\n/tmp/tmpdwhu1d2p.cpp:47:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwhu1d2p.cpp:2:\n/tmp/tmpdwhu1d2p.cpp:48:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpdwhu1d2p.cpp:48:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpdwhu1d2p.cpp:48:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\n        \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n    };\n    std::vector<std::string> result;\n    auto it1 = std::find(planets.begin(),\
    \ planets.end(), planet1);\n    auto it2 = std::find(planets.begin(), planets.end(),\
    \ planet2);\n    if (it1 == planets.end() || it2 == planets.end()) {\n       \
    \ return result;\n    }\n    if (it1 > it2) {\n        std::swap(it1, it2);\n\
    \    }\n    for (auto it = it1 + 1; it != it2; ++it) {\n        result.push_back(*it);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\"\
    )) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\"\
    , (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"\
    Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"\
    Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"\
    Makemake\")) == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpw6i3gke4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = 0;\n    int end = 0;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == 0 || end == 0) {\n \
    \       return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp6kuen0se.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmp6kuen0se.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmp6kuen0se.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmp6kuen0se.cpp: In function\
    \ 'int main()':\n/tmp/tmp6kuen0se.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6kuen0se.cpp:2:\n/tmp/tmp6kuen0se.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmp6kuen0se.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmp6kuen0se.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmp6kuen0se.cpp:47:123: warning: extended initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"\
    Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"\
    Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start > end) {\n        int temp = start;\n\
    \        start = end;\n        end = temp;\n    }\n    for (int i = start + 1;\
    \ i < end; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
    Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
    Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
    , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"\
    )) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\"\
    , (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfh6q8zh.cpp: In function 'std::vector<std::basic_string<char>\
    \ > bf(std::string, std::string)':\n/tmp/tmpzfh6q8zh.cpp:20:118: error: in C++98\
    \ 'planets' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n                                                \
    \                                                                      ^\n/tmp/tmpzfh6q8zh.cpp:20:118:\
    \ error: could not convert '{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}' from '<brace-enclosed initializer list>'\
    \ to 'std::vector<std::basic_string<char> >'\n/tmp/tmpzfh6q8zh.cpp: In function\
    \ 'int main()':\n/tmp/tmpzfh6q8zh.cpp:46:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = bf;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzfh6q8zh.cpp:2:\n/tmp/tmpzfh6q8zh.cpp:47:46: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
    Uranus\"})));\n                                              ^\n/tmp/tmpzfh6q8zh.cpp:47:76:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
    })));\n                                                                      \
    \      ^\n/tmp/tmpzfh6q8zh.cpp:47:123: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\"\
    , (std::string)\"Uranus\"})));\n                                             \
    \                                                                            \
    \  ^\n/tmp/tmpzfh6q8zh.cpp:47:123: warning: extended initialize"
  stdout: ''
