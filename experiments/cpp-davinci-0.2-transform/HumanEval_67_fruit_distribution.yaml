name: HumanEval_67_fruit_distribution
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this task, you will be\
  \ given a string that represents a number of apples and oranges \n// that are distributed\
  \ in a basket of fruit this basket contains \n// apples, oranges, and mango fruits.\
  \ Given the string that represents the total number of \n// the oranges and apples\
  \ and an integer that represent the total number of the fruits \n// in the basket\
  \ return the number of the mango fruits in the basket.\n// for examble:\n// >>>\
  \ fruit_distribution((\"5 apples and 6 oranges\"), (19))\n// (8)\n// >>> fruit_distribution((\"\
  0 apples and 1 oranges\"), (3))\n// (2)\n// >>> fruit_distribution((\"2 apples and\
  \ 3 oranges\"), (100))\n// (95)\n// >>> fruit_distribution((\"100 apples and 1 oranges\"\
  ), (120))\n// (19)\nlong fruit_distribution(std::string s, long n) {\n"
tests: "}\nint main() {\n    auto candidate = fruit_distribution;\n    assert(candidate((\"\
  5 apples and 6 oranges\"), (19)) == (8));\n    assert(candidate((\"5 apples and\
  \ 6 oranges\"), (21)) == (10));\n    assert(candidate((\"0 apples and 1 oranges\"\
  ), (3)) == (2));\n    assert(candidate((\"1 apples and 0 oranges\"), (3)) == (2));\n\
  \    assert(candidate((\"2 apples and 3 oranges\"), (100)) == (95));\n    assert(candidate((\"\
  2 apples and 3 oranges\"), (5)) == (0));\n    assert(candidate((\"1 apples and 100\
  \ oranges\"), (120)) == (19));\n}\n"
completions: ["    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n\
    \    std::stringstream ss(s);\n    std::string temp;\n    while(ss >> temp) {\n\
    \        if(temp == \"apples\") {\n            ss >> apples;\n        } else if(temp\
    \ == \"oranges\") {\n            ss >> oranges;\n        }\n    }\n    mangoes\
    \ = n - (apples + oranges);\n    return mangoes;", "    // your code here\n  \
    \  long apple = 0, orange = 0;\n    std::stringstream ss(s);\n    std::string\
    \ word;\n    while(ss >> word) {\n        if(word == \"apples\") {\n         \
    \   ss >> word;\n            apple = std::stol(word);\n        }\n        else\
    \ if(word == \"oranges\") {\n            ss >> word;\n            orange = std::stol(word);\n\
    \        }\n    }\n    return n - (apple + orange);", "    // your code here\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    int count1\
    \ = 0;\n    int count2 = 0;\n    while(s[i] != ' '){\n        i++;\n    }\n  \
    \  while(s[j] != 'a'){\n        j++;\n    }\n    while(s[k] != 'o'){\n       \
    \ k++;\n    }\n    for(int l = 0; l < i; l++){\n        count = count*10 + (s[l]\
    \ - '0');\n    }\n    for(int l = j-1; l < i; l++){\n        count1 = count1*10\
    \ + (s[l] - '0');\n    }\n    for(int l = k-1; l < i; l++){\n        count2 =\
    \ count2*10 + (s[l] - '0');\n    }\n    return n - (count1 + count2);", "    std::stringstream\
    \ ss(s);\n    std::string word;\n    int apples = 0;\n    int oranges = 0;\n \
    \   while (ss >> word) {\n        if (word == \"apples\") {\n            ss >>\
    \ word;\n            ss >> word;\n            apples = std::stoi(word);\n    \
    \    }\n        if (word == \"oranges\") {\n            ss >> word;\n        \
    \    ss >> word;\n            oranges = std::stoi(word);\n        }\n    }\n \
    \   return n - (apples + oranges);", "    // your code here\n    long apples =\
    \ 0;\n    long oranges = 0;\n    std::stringstream ss(s);\n    std::string temp;\n\
    \    std::vector<std::string> tokens;\n    while(std::getline(ss, temp, ' '))\
    \ {\n        tokens.push_back(temp);\n    }\n    apples = std::stol(tokens[0]);\n\
    \    oranges = std::stol(tokens[2]);\n    return n - (apples + oranges);", " \
    \   // your code here\n    int a,o;\n    sscanf(s.c_str(),\"%d apples and %d oranges\"\
    ,&a,&o);\n    return n-a-o;", "    // your code here\n    std::stringstream ss(s);\n\
    \    long a, o;\n    ss >> a >> s >> o >> s;\n    return n - a - o;", "    //\
    \ your code here\n    std::stringstream ss(s);\n    std::string word;\n    int\
    \ apples = 0;\n    int oranges = 0;\n    while(ss >> word) {\n        if(word\
    \ == \"apples\") {\n            ss >> word;\n            apples = std::stoi(word);\n\
    \        }\n        else if(word == \"oranges\") {\n            ss >> word;\n\
    \            oranges = std::stoi(word);\n        }\n    }\n    return n - (apples\
    \ + oranges);", "    // your code here\n    // return 0;\n    long a,o;\n    std::stringstream\
    \ ss(s);\n    ss>>a>>s>>o;\n    return n-a-o;", "    long apples = 0;\n    long\
    \ oranges = 0;\n    long mangoes = 0;\n    std::stringstream ss(s);\n    std::string\
    \ token;\n    while(std::getline(ss, token, ' ')) {\n        if(token == \"apples\"\
    ) {\n            apples = std::stol(std::getline(ss, token, ' '));\n        }\
    \ else if(token == \"oranges\") {\n            oranges = std::stol(std::getline(ss,\
    \ token, ' '));\n        }\n    }\n    mangoes = n - (apples + oranges);\n   \
    \ return mangoes;", "    // your code here\n    std::stringstream ss(s);\n   \
    \ std::string word;\n    std::vector<std::string> v;\n    while(ss >> word)\n\
    \        v.push_back(word);\n    int a = std::stoi(v[0]);\n    int o = std::stoi(v[2]);\n\
    \    return n - (a + o);", "    // your code here\n    std::stringstream ss(s);\n\
    \    std::string word;\n    int apples = 0;\n    int oranges = 0;\n    while(ss\
    \ >> word) {\n        if(word == \"apples\") {\n            ss >> word;\n    \
    \        ss >> word;\n            apples = std::stoi(word);\n        }\n     \
    \   else if(word == \"oranges\") {\n            ss >> word;\n            ss >>\
    \ word;\n            oranges = std::stoi(word);\n        }\n    }\n    return\
    \ n - (apples + oranges);", "    // your code here\n    std::stringstream ss(s);\n\
    \    std::string word;\n    int apples = 0;\n    int oranges = 0;\n    while(ss\
    \ >> word) {\n        if(word == \"apples\") {\n            ss >> word;\n    \
    \        ss >> word;\n            apples = std::stoi(word);\n        }\n     \
    \   else if(word == \"oranges\") {\n            ss >> word;\n            ss >>\
    \ word;\n            oranges = std::stoi(word);\n        }\n    }\n    return\
    \ n - (apples + oranges);", "    // your code here\n    long count = 0;\n    std::stringstream\
    \ ss(s);\n    std::string temp;\n    while(getline(ss, temp, ' ')){\n        if(temp\
    \ == \"apples\"){\n            getline(ss, temp, ' ');\n            count += std::stol(temp);\n\
    \        }\n        else if(temp == \"oranges\"){\n            getline(ss, temp,\
    \ ' ');\n            count += std::stol(temp);\n        }\n    }\n    return n\
    \ - count;", "    // your code here\n    long apples = 0;\n    long oranges =\
    \ 0;\n    long mangoes = 0;\n    std::stringstream ss(s);\n    std::string word;\n\
    \    while(ss >> word){\n        if(word == \"apples\"){\n            ss >> word;\n\
    \            apples = std::stol(word);\n        }\n        else if(word == \"\
    oranges\"){\n            ss >> word;\n            oranges = std::stol(word);\n\
    \        }\n    }\n    mangoes = n - apples - oranges;\n    return mangoes;",
  "    // your code here\n    std::stringstream ss(s);\n    std::string word;\n  \
    \  long apple = 0;\n    long orange = 0;\n    while(ss >> word){\n        if(word\
    \ == \"apples\"){\n            ss >> word;\n            apple = std::stol(word);\n\
    \        }\n        else if(word == \"oranges\"){\n            ss >> word;\n \
    \           orange = std::stol(word);\n        }\n    }\n    return n - (apple\
    \ + orange);", "    // your code here\n    long num_apples = 0;\n    long num_oranges\
    \ = 0;\n    long num_mangoes = 0;\n    long i = 0;\n    while(s[i] != ' '){\n\
    \        num_apples = num_apples * 10 + (s[i] - '0');\n        i++;\n    }\n \
    \   i = i + 5;\n    while(s[i] != ' '){\n        num_oranges = num_oranges * 10\
    \ + (s[i] - '0');\n        i++;\n    }\n    num_mangoes = n - num_apples - num_oranges;\n\
    \    return num_mangoes;", "    std::stringstream ss(s);\n    std::string word;\n\
    \    std::vector<std::string> words;\n    while (ss >> word)\n        words.push_back(word);\n\
    \    long num_apples = std::stol(words[0]);\n    long num_oranges = std::stol(words[3]);\n\
    \    return n - num_apples - num_oranges;", "    long apples = 0;\n    long oranges\
    \ = 0;\n    long mangoes = 0;\n    std::string temp = \"\";\n    for(int i = 0;\
    \ i < s.length(); i++){\n        if(s[i] == ' '){\n            if(temp == \"apples\"\
    ){\n                apples = std::stol(s.substr(0, i));\n            }\n     \
    \       else if(temp == \"oranges\"){\n                oranges = std::stol(s.substr(0,\
    \ i));\n            }\n            s = s.substr(i+1, s.length() - i);\n      \
    \      i = 0;\n            temp = \"\";\n        }\n        else{\n          \
    \  temp += s[i];\n        }\n    }\n    oranges = std::stol(s);\n    mangoes =\
    \ n - (apples + oranges);\n    return mangoes;", "    // your code here\n    long\
    \ num_apples = 0;\n    long num_oranges = 0;\n    long num_mangoes = 0;\n    std::stringstream\
    \ ss(s);\n    std::string temp;\n    std::vector<std::string> tokens;\n    while(std::getline(ss,\
    \ temp, ' ')){\n        tokens.push_back(temp);\n    }\n    num_apples = std::stol(tokens[0]);\n\
    \    num_oranges = std::stol(tokens[3]);\n    num_mangoes = n - (num_apples +\
    \ num_oranges);\n    return num_mangoes;"]
stop_tokens:
- "\n}"
