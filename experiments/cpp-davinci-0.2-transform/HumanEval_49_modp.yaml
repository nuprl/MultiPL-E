name: HumanEval_49_modp
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be aware\
  \ of numerics).\n// >>> modp((3), (5))\n// (3)\n// >>> modp((1101), (101))\n// (2)\n\
  // >>> modp((0), (101))\n// (1)\n// >>> modp((3), (11))\n// (8)\n// >>> modp((100),\
  \ (101))\n// (1)\nlong modp(long n, long p) {\n"
tests: "}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5))\
  \ == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
  \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
  \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
  \ (5)) == (3));\n}\n"
completions: ["    if (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n\
    \        long t = modp(n / 2, p);\n        return (t * t) % p;\n    }\n    return\
    \ (modp(n - 1, p) * n) % p;", "    assert(p > 0);\n    if (n < 0) {\n        return\
    \ p - modp(-n, p);\n    }\n    long res = 1;\n    long mult = n % p;\n    while\
    \ (n > 0) {\n        if (n & 1) {\n            res = (res * mult) % p;\n     \
    \   }\n        mult = (mult * mult) % p;\n        n >>= 1;\n    }\n    return\
    \ res;", "    if (n == 0) return 1;\n    long res = modp(n/2, p);\n    res = (res\
    \ * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return res;", " \
    \   assert(p > 0);\n    if (n < 0) {\n        n = n % p + p;\n    }\n    long\
    \ res = 1;\n    long b = n;\n    while (p > 0) {\n        if (p & 1) {\n     \
    \       res = (res * b) % p;\n        }\n        p >>= 1;\n        b = (b * b)\
    \ % p;\n    }\n    return res;", "    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n == 1) return n % p;\n    if (n % 2 == 0) {\n        long t = modp(n\
    \ / 2, p);\n        return (t * t) % p;\n    } else {\n        long t = modp(n\
    \ / 2, p);\n        return (2 * t * t) % p;\n    }", "    assert(p > 0);\n   \
    \ if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n\
    \        return (t * t) % p;\n    } else {\n        return (modp(n - 1, p) * n)\
    \ % p;\n    }", "    assert(p > 0);\n    if (n == 0) {\n        return 1;\n  \
    \  }\n    if (n % 2 == 0) {\n        long x = modp(n / 2, p);\n        return\
    \ (x * x) % p;\n    }\n    return (modp(n - 1, p) * n) % p;", "    assert(p >\
    \ 0);\n    assert(n >= 0);\n    if (n == 0) {\n        return 1;\n    }\n    long\
    \ res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) {\n \
    \       res = (res * 2) % p;\n    }\n    return res;", "    assert(p > 0);\n \
    \   if (n < 0) {\n        n = n % p + p;\n    }\n    if (n == 0) {\n        return\
    \ 1;\n    }\n    long half = modp(n / 2, p);\n    if (n % 2 == 0) {\n        return\
    \ (half * half) % p;\n    } else {\n        return (half * half * n) % p;\n  \
    \  }", "    if (n == 0) return 1;\n    if (n == 1) return n;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * n) % p;\n\
    \    return res;", "    assert(p > 0);\n    if (n < 0) {\n        n = (n % p)\
    \ + p;\n    }\n    return n % p;", "    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n / 2, p);\n        return (t * t) % p;\n    } else\
    \ {\n        return (modp(n - 1, p) * n) % p;\n    }", "    if (n == 0) {\n  \
    \      return 1;\n    }\n    if (n % 2 == 0) {\n        long res = modp(n / 2,\
    \ p);\n        return (res * res) % p;\n    }\n    return (modp(n - 1, p) * n)\
    \ % p;", "    assert(p > 0);\n    if (n == 0) return 1;\n    long res = modp(n\
    \ / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) %\
    \ p;\n    return res;", "    assert(p > 0);\n    if (n < 0) {\n        n = (n\
    \ % p) + p;\n    }\n    return n % p;", "    assert(p > 0);\n    if (n < 0) {\n\
    \        n = (n % p) + p;\n    }\n    return n % p;", "    if (n == 0) return\
    \ 1;\n    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return\
    \ t * t % p;\n    } else {\n        return modp(n - 1, p) * n % p;\n    }", " \
    \   if (n == 0) {\n        return 1;\n    }\n    long x = modp(n/2, p);\n    x\
    \ = (x * x) % p;\n    if (n % 2 == 1) {\n        x = (x * 2) % p;\n    }\n   \
    \ return x;", "    if (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0)\
    \ {\n        long half = modp(n / 2, p);\n        return (half * half) % p;\n\
    \    }\n    else {\n        return (modp(n - 1, p) * n) % p;\n    }", "    if\
    \ (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        long x\
    \ = modp(n / 2, p);\n        return (x * x) % p;\n    }\n    return (modp(n -\
    \ 1, p) * n) % p;"]
stop_tokens:
- "\n}"
