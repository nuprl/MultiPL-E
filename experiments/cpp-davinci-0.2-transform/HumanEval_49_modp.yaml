name: HumanEval_49_modp
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be aware\
  \ of numerics).\n// >>> modp((3), (5))\n// (3)\n// >>> modp((1101), (101))\n// (2)\n\
  // >>> modp((0), (101))\n// (1)\n// >>> modp((3), (11))\n// (8)\n// >>> modp((100),\
  \ (101))\n// (1)\nlong modp(long n, long p) {\n"
tests: "}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5))\
  \ == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
  \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
  \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
  \ (5)) == (3));\n}\n"
completions: ["    if (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n\
    \        long t = modp(n / 2, p);\n        return (t * t) % p;\n    }\n    return\
    \ (modp(n - 1, p) * n) % p;", "    assert(p > 0);\n    if (n < 0) {\n        return\
    \ p - modp(-n, p);\n    }\n    long res = 1;\n    long mult = n % p;\n    while\
    \ (n > 0) {\n        if (n & 1) {\n            res = (res * mult) % p;\n     \
    \   }\n        mult = (mult * mult) % p;\n        n >>= 1;\n    }\n    return\
    \ res;", "    if (n == 0) return 1;\n    long res = modp(n/2, p);\n    res = (res\
    \ * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return res;", " \
    \   assert(p > 0);\n    if (n < 0) {\n        n = n % p + p;\n    }\n    long\
    \ res = 1;\n    long b = n;\n    while (p > 0) {\n        if (p & 1) {\n     \
    \       res = (res * b) % p;\n        }\n        p >>= 1;\n        b = (b * b)\
    \ % p;\n    }\n    return res;", "    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n == 1) return n % p;\n    if (n % 2 == 0) {\n        long t = modp(n\
    \ / 2, p);\n        return (t * t) % p;\n    } else {\n        long t = modp(n\
    \ / 2, p);\n        return (2 * t * t) % p;\n    }", "    assert(p > 0);\n   \
    \ if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n\
    \        return (t * t) % p;\n    } else {\n        return (modp(n - 1, p) * n)\
    \ % p;\n    }", "    assert(p > 0);\n    if (n == 0) {\n        return 1;\n  \
    \  }\n    if (n % 2 == 0) {\n        long x = modp(n / 2, p);\n        return\
    \ (x * x) % p;\n    }\n    return (modp(n - 1, p) * n) % p;", "    assert(p >\
    \ 0);\n    assert(n >= 0);\n    if (n == 0) {\n        return 1;\n    }\n    long\
    \ res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) {\n \
    \       res = (res * 2) % p;\n    }\n    return res;", "    assert(p > 0);\n \
    \   if (n < 0) {\n        n = n % p + p;\n    }\n    if (n == 0) {\n        return\
    \ 1;\n    }\n    long half = modp(n / 2, p);\n    if (n % 2 == 0) {\n        return\
    \ (half * half) % p;\n    } else {\n        return (half * half * n) % p;\n  \
    \  }", "    if (n == 0) return 1;\n    if (n == 1) return n;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * n) % p;\n\
    \    return res;", "    assert(p > 0);\n    if (n < 0) {\n        n = (n % p)\
    \ + p;\n    }\n    return n % p;", "    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n / 2, p);\n        return (t * t) % p;\n    } else\
    \ {\n        return (modp(n - 1, p) * n) % p;\n    }", "    if (n == 0) {\n  \
    \      return 1;\n    }\n    if (n % 2 == 0) {\n        long res = modp(n / 2,\
    \ p);\n        return (res * res) % p;\n    }\n    return (modp(n - 1, p) * n)\
    \ % p;", "    assert(p > 0);\n    if (n == 0) return 1;\n    long res = modp(n\
    \ / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) %\
    \ p;\n    return res;", "    assert(p > 0);\n    if (n < 0) {\n        n = (n\
    \ % p) + p;\n    }\n    return n % p;", "    assert(p > 0);\n    if (n < 0) {\n\
    \        n = (n % p) + p;\n    }\n    return n % p;", "    if (n == 0) return\
    \ 1;\n    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return\
    \ t * t % p;\n    } else {\n        return modp(n - 1, p) * n % p;\n    }", " \
    \   if (n == 0) {\n        return 1;\n    }\n    long x = modp(n/2, p);\n    x\
    \ = (x * x) % p;\n    if (n % 2 == 1) {\n        x = (x * 2) % p;\n    }\n   \
    \ return x;", "    if (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0)\
    \ {\n        long half = modp(n / 2, p);\n        return (half * half) % p;\n\
    \    }\n    else {\n        return (modp(n - 1, p) * n) % p;\n    }", "    if\
    \ (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        long x\
    \ = modp(n / 2, p);\n        return (x * x) % p;\n    }\n    return (modp(n -\
    \ 1, p) * n) % p;", "    if (n == 0) {\n        return 1;\n    }\n    long res\
    \ = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) {\n     \
    \   res = (res * 2) % p;\n    }\n    return res;", "    long res = 1;\n    while\
    \ (n > 0) {\n        if (n % 2 == 1) {\n            res = (res * 2) % p;\n   \
    \     }\n        n = n / 2;\n        if (n > 0) {\n            res = (res * res)\
    \ % p;\n        }\n    }\n    return res;", "  assert(p > 0);\n  if (n < 0) {\n\
    \    n = (n % p) + p;\n  }\n  return n % p;", "    if (n == 0) {\n        return\
    \ 1;\n    }\n    if (n % 2 == 0) {\n        long y = modp(n / 2, p);\n       \
    \ return (y * y) % p;\n    }\n    else {\n        return (modp(n - 1, p) * n)\
    \ % p;\n    }", "    long res = 1;\n    while (n > 0) {\n        if (n & 1) {\n\
    \            res = (res * n) % p;\n        }\n        n = n >> 1;\n        n =\
    \ (n * n) % p;\n    }\n    return res;", "    if (n == 0) {\n        return 1;\n\
    \    }\n    if (n % 2 == 0) {\n        long temp = modp(n / 2, p);\n        return\
    \ (temp * temp) % p;\n    }\n    return (modp(n - 1, p) * n) % p;", "    if (n\
    \ == 0) {\n        return 1;\n    }\n    if (n == 1) {\n        return n;\n  \
    \  }\n    long half = modp(n / 2, p);\n    long result = (half * half) % p;\n\
    \    if (n % 2 == 1) {\n        result = (result * n) % p;\n    }\n    return\
    \ result;", "  assert(p > 0);\n  if (n < 0) {\n    n += p;\n  }\n  if (n >= p)\
    \ {\n    n %= p;\n  }\n  return n;", "    if (n == 0) {\n        return 1;\n \
    \   }\n    if (n % 2 == 0) {\n        long res = modp(n / 2, p);\n        return\
    \ (res * res) % p;\n    }\n    else {\n        return (modp(n - 1, p) * n) % p;\n\
    \    }", "    assert(p > 0);\n    if (n < 0) {\n        n = (n % p) + p;\n   \
    \ }\n    return n % p;", "    if (n == 0) {\n        return 1;\n    }\n    if\
    \ (n == 1) {\n        return n;\n    }\n    long half = modp(n / 2, p);\n    if\
    \ (n % 2 == 0) {\n        return (half * half) % p;\n    } else {\n        return\
    \ (half * half * n) % p;\n    }", "    assert(p >= 2);\n    if (n < 0) {\n   \
    \     n = p - ((-n) % p);\n    }\n    return n % p;", "    assert(p > 0);\n  \
    \  if (n < 0) {\n        n += p * ((-n / p) + 1);\n    }\n    return n % p;",
  "  assert(p > 0);\n  long res = 1;\n  while (n > 0) {\n    if (n & 1)\n      res\
    \ = (res * n) % p;\n    n = n >> 1;\n    n = (n * n) % p;\n  }\n  return res;",
  "    assert(p > 0);\n    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long\
    \ res = modp(n / 2, p);\n        return (res * res) % p;\n    } else {\n     \
    \   return (modp(n - 1, p) * n) % p;\n    }", "    assert(p > 0);\n    if (n <\
    \ 0) {\n        n = n % p + p;\n    }\n    return n % p;", "    if (n == 0) return\
    \ 1;\n    long res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n %\
    \ 2 == 1) res = (res * 2) % p;\n    return res;", "    assert(p > 0);\n    if\
    \ (n < 0) {\n        n = (n % p) + p;\n    }\n    return n % p;", "    if (n ==\
    \ 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        long t = modp(n\
    \ / 2, p);\n        return (t * t) % p;\n    }\n    return (modp(n - 1, p) * n)\
    \ % p;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long r = modp(n\
    \ / 2, p);\n        return (r * r) % p;\n    } else {\n        return (modp(n\
    \ - 1, p) * n) % p;\n    }", "    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n == 1) return n;\n    long res = 1;\n    while (n > 0) {\n        if\
    \ (n & 1) res = (res * n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n\
    \    }\n    return res;", "    assert(p > 0);\n    if (n < 0) {\n        n = n\
    \ % p + p;\n    }\n    return n % p;", "    assert(p > 0);\n    if (n < 0) {\n\
    \        n = p - (-n % p);\n    }\n    return n % p;", "    if (n == 0) {\n  \
    \      return 1;\n    }\n    if (n == 1) {\n        return n;\n    }\n    if (n\
    \ % 2 == 0) {\n        long tmp = modp(n / 2, p);\n        return (tmp * tmp)\
    \ % p;\n    }\n    else {\n        long tmp = modp(n - 1, p);\n        return\
    \ (tmp * n) % p;\n    }", "    assert(p > 0);\n    if (n < 0) {\n        n = p\
    \ - (-n % p);\n    }\n    return n % p;", "    if (n == 0) {\n        return 1;\n\
    \    }\n    long res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n\
    \ % 2 == 1) {\n        res = (res * 2) % p;\n    }\n    return res;", "    assert(p\
    \ > 0);\n    if (n < 0) {\n        n = n % p + p;\n    }\n    return n % p;",
  "    assert(p > 0);\n    if (n < 0) {\n        n = (n % p) + p;\n    }\n    return\
    \ n % p;", "    assert(p > 0);\n    if (n == 0) return 1;\n    if (n % 2 == 0)\
    \ {\n        long t = modp(n / 2, p);\n        return t * t % p;\n    } else {\n\
    \        return modp(n - 1, p) * n % p;\n    }", "    if (n == 0) {\n        return\
    \ 1;\n    }\n    if (n % 2 == 0) {\n        long x = modp(n / 2, p);\n       \
    \ return (x * x) % p;\n    }\n    else {\n        return (modp(n - 1, p) * n)\
    \ % p;\n    }", "    assert(p > 0);\n    if (n < 0) {\n        n = (n % p) + p;\n\
    \    }\n    return n % p;", "    if (n == 0) {\n        return 1;\n    }\n   \
    \ if (n % 2 == 0) {\n        long x = modp(n / 2, p);\n        return (x * x)\
    \ % p;\n    }\n    return (modp(n - 1, p) * n) % p;", "    if (n == 0) return\
    \ 1;\n    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2\
    \ == 1) res = (res * 2) % p;\n    return res;", "    assert(p > 0);\n    if (n\
    \ < 0) {\n        n = (n % p) + p;\n    }\n    return n % p;", "    assert(p >\
    \ 0);\n    if (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n  \
    \      long t = modp(n / 2, p);\n        return (t * t) % p;\n    }\n    return\
    \ (modp(n - 1, p) * n) % p;", "    if (n == 0) {\n        return 1;\n    }\n \
    \   if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t * t)\
    \ % p;\n    }\n    return (modp(n - 1, p) * n) % p;", "    long result = 1;\n\
    \    while (n > 0) {\n        if (n & 1) {\n            result = (result * n)\
    \ % p;\n        }\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return\
    \ result;", "    assert(p > 0);\n    if (n < 0) {\n        n = (n % p) + p;\n\
    \    }\n    return n % p;", "    assert(p > 0);\n    if (n < 0) {\n        n =\
    \ n % p + p;\n    }\n    long result = 1;\n    long x = n;\n    while (p > 0)\
    \ {\n        if (p & 1) {\n            result = (result * x) % n;\n        }\n\
    \        x = (x * x) % n;\n        p >>= 1;\n    }\n    return result;", "   \
    \ assert(p > 0);\n    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long\
    \ t = modp(n / 2, p);\n        return (t * t) % p;\n    } else {\n        return\
    \ (modp(n - 1, p) * n) % p;\n    }", "    if (n == 0) {\n        return 1;\n \
    \   }\n    if (n % 2 == 0) {\n        long tmp = modp(n / 2, p);\n        return\
    \ (tmp * tmp) % p;\n    }\n    return (modp(n - 1, p) * n) % p;", "    assert(p\
    \ > 0);\n    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n\
    \ / 2, p);\n        return (t * t) % p;\n    } else {\n        return (modp(n\
    \ - 1, p) * n) % p;\n    }", "    assert(p > 0);\n    long res = 1;\n    while\
    \ (n > 0) {\n        if (n & 1) {\n            res = (res * n) % p;\n        }\n\
    \        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return res;", "   \
    \ long res = 1;\n    while (n > 0) {\n        if (n & 1) {\n            res =\
    \ (res * n) % p;\n        }\n        n = n >> 1;\n        n = (n * n) % p;\n \
    \   }\n    return res;", "    if (n == 0) {\n        return 1;\n    }\n    if\
    \ (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t * t) % p;\n\
    \    }\n    return (modp(n - 1, p) * n) % p;", "    long res = 1;\n    while (n\
    \ > 0) {\n        if (n & 1) {\n            res = (res * n) % p;\n        }\n\
    \        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return res;", "   \
    \ if (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        long\
    \ y = modp(n / 2, p);\n        return (y * y) % p;\n    }\n    return (modp(n\
    \ - 1, p) * n) % p;", "    assert(p > 0);\n    if (n == 0) return 1;\n    if (n\
    \ == 1) return n % p;\n    long res = 1;\n    while (n > 0) {\n        if (n &\
    \ 1) res = (res * n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n   \
    \ }\n    return res;", "    assert(p > 0);\n    if (n == 0) return 1;\n    if\
    \ (n % 2 == 0) {\n        long res = modp(n / 2, p);\n        return (res * res)\
    \ % p;\n    } else {\n        return (modp(n - 1, p) * n) % p;\n    }", "    assert(p\
    \ > 0);\n    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n\
    \ / 2, p);\n        return (t * t) % p;\n    } else {\n        return (modp(n\
    \ - 1, p) * n) % p;\n    }", "\tassert(p > 0);\n\tif (n < 0) {\n\t\tn = n % p\
    \ + p;\n\t}\n\treturn n % p;", "    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long res = 1;\n    long sq = n;\n    while (sq > 0) {\n        if\
    \ (sq & 1) res = (res * n) % p;\n        sq >>= 1;\n        n = (n * n) % p;\n\
    \    }\n    return res;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n\
    \        long x = modp(n/2, p);\n        return (x*x) % p;\n    } else {\n   \
    \     return (n % p) * modp(n-1, p) % p;\n    }", "  long res = 1;\n  while (n\
    \ > 0) {\n    if (n & 1) {\n      res = (res * n) % p;\n    }\n    n = n >> 1;\n\
    \    n = (n * n) % p;\n  }\n  return res;", "    if (n == 0) return 1;\n    long\
    \ res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res =\
    \ (res * 2) % p;\n    return res;", "    assert(p > 0);\n    if (n < 0) {\n  \
    \      n = n % p + p;\n    }\n    return n % p;", "    if (n == 0) {\n       \
    \ return 1;\n    }\n    if (n == 1) {\n        return n;\n    }\n    long half\
    \ = modp(n / 2, p);\n    if (n % 2 == 0) {\n        return (half * half) % p;\n\
    \    } else {\n        return (half * half * n) % p;\n    }", "    assert(p >\
    \ 0);\n    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n\
    \ / 2, p);\n        return (t * t) % p;\n    } else {\n        return (modp(n\
    \ - 1, p) * n) % p;\n    }", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n\
    \        long t = modp(n / 2, p);\n        return (t * t) % p;\n    } else {\n\
    \        return (modp(n - 1, p) * n) % p;\n    }", "    if (n == 0) {\n      \
    \  return 1;\n    }\n    if (n == 1) {\n        return n;\n    }\n    long half\
    \ = modp(n / 2, p);\n    long result = half * half % p;\n    if (n % 2 == 1) {\n\
    \        result = result * n % p;\n    }\n    return result;", "    long res =\
    \ 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            res = (res *\
    \ 2) % p;\n        }\n        n = n / 2;\n        if (n > 0) {\n            res\
    \ = (res * res) % p;\n        }\n    }\n    return res;", "    assert(p > 0);\n\
    \    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long m = modp(n / 2,\
    \ p);\n        return (m * m) % p;\n    } else {\n        return (modp(n - 1,\
    \ p) * n) % p;\n    }", "    assert(p > 0);\n    if (n < 0) {\n        n = (n\
    \ % p) + p;\n    }\n    return n % p;", "    if (n == 0) return 1;\n    if (n\
    \ == 1) return n;\n    long res = 1;\n    while (n > 0) {\n        if (n & 1)\
    \ res = (res * n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n\
    \    return res;", "    assert(p > 0);\n    if (n == 0) {\n        return 1;\n\
    \    }\n    if (n % 2 == 0) {\n        long tmp = modp(n / 2, p);\n        return\
    \ (tmp * tmp) % p;\n    } else {\n        return (modp(n - 1, p) * n) % p;\n \
    \   }", "    if (n == 0) {\n        return 1;\n    }\n    long res = modp(n /\
    \ 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) {\n        res = (res\
    \ * 2) % p;\n    }\n    return res;", "    assert(p > 0);\n    if (n < 0) {\n\
    \        n = n % p + p;\n    }\n    return n % p;", "    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long r = modp(n / 2, p);\n        return (r *\
    \ r) % p;\n    } else {\n        return (modp(n - 1, p) * n) % p;\n    }", " \
    \   if (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        long\
    \ res = modp(n / 2, p);\n        return (res * res) % p;\n    }\n    return (modp(n\
    \ - 1, p) * n) % p;", "  assert(p > 0);\n  if (n == 0) return 1;\n  if (n == 1)\
    \ return n;\n  long res = 1;\n  while (n > 0) {\n    if (n & 1) res = (res * n)\
    \ % p;\n    n = n >> 1;\n    n = (n * n) % p;\n  }\n  return res;", "    long\
    \ res = 1;\n    while (n > 0) {\n        if (n & 1) {\n            res = (res\
    \ * n) % p;\n        }\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n\
    \    return res;", "    assert(p > 0);\n    if (n < 0) {\n        n = (n % p)\
    \ + p;\n    }\n    return n % p;", "    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n / 2, p);\n        return (t * t) % p;\n    } else\
    \ {\n        return (modp(n - 1, p) * n) % p;\n    }", "    if (n == 0) return\
    \ 1;\n    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2\
    \ == 1) res = (res * 2) % p;\n    return res;", "    assert(p >= 2);\n    if (n\
    \ < 0) {\n        n = p - 1 - ((-n - 1) % (p - 1));\n    }\n    return n % p;",
  "    long r = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            r\
    \ = (r * 2) % p;\n        }\n        n = n / 2;\n        if (n > 0) {\n      \
    \      r = (r * r) % p;\n        }\n    }\n    return r;", "    if (n == 0) return\
    \ 1;\n    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2\
    \ == 1) res = (res * 2) % p;\n    return res;", "    assert(p > 0);\n    if (n\
    \ < 0) {\n        n = n % p + p;\n    }\n    if (n < p) {\n        return n;\n\
    \    }\n    long res = 1;\n    while (n > 0) {\n        if (n & 1) {\n       \
    \     res = (res * 2) % p;\n        }\n        n >>= 1;\n        if (n > 0) {\n\
    \            res = (res * 2) % p;\n        }\n    }\n    return res;", "    long\
    \ res = 1;\n    while (n > 0) {\n        if (n & 1)\n            res = (res *\
    \ 2) % p;\n        n >>= 1;\n    }\n    return res;", "    assert(p > 0);\n  \
    \  assert(n >= 0);\n    if (n == 0) return 1;\n    if (n % 2 == 0) {\n       \
    \ long t = modp(n / 2, p);\n        return (t * t) % p;\n    } else {\n      \
    \  return (modp(n - 1, p) * n) % p;\n    }", "  assert(p > 0);\n  if (n < 0) {\n\
    \    n = (n % p) + p;\n  }\n  return n % p;", "    if (n == 0) {\n        return\
    \ 1;\n    }\n    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n       \
    \ return (t * t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;", "    if (n\
    \ == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n \
    \       return (t * t) % p;\n    } else {\n        return (modp(n - 1, p) * n)\
    \ % p;\n    }", "    if (n == 0) {\n        return 1;\n    }\n    if (n == 1)\
    \ {\n        return n;\n    }\n    long res = 1;\n    while (n > 0) {\n      \
    \  if (n & 1) {\n            res = (res * n) % p;\n        }\n        n = n >>\
    \ 1;\n        n = (n * n) % p;\n    }\n    return res;", "    assert(p > 0);\n\
    \    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n / 2,\
    \ p);\n        return (t * t) % p;\n    } else {\n        return (modp(n - 1,\
    \ p) * n) % p;\n    }", "    assert(p > 0);\n    if (n < 0) {\n        n = n %\
    \ p + p;\n    }\n    return n % p;", "    assert(p > 0);\n    if (n < 0) {\n \
    \       n = n % p + p;\n    }\n    return pow(2, n) % p;", "    assert(p > 0);\n\
    \    if (n < 0) {\n        n = (n % p) + p;\n    }\n    return n % p;", "    if\
    \ (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        long t\
    \ = modp(n / 2, p);\n        return (t * t) % p;\n    }\n    return (modp(n -\
    \ 1, p) * n) % p;", "    long r = 1;\n    while (n > 0) {\n        if (n % 2 ==\
    \ 1) {\n            r = (r * 2) % p;\n        }\n        n = n / 2;\n        if\
    \ (n > 0) {\n            r = (r * r) % p;\n        }\n    }\n    return r;", " \
    \   if (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        long\
    \ r = modp(n / 2, p);\n        return (r * r) % p;\n    }\n    return (modp(n\
    \ - 1, p) * n) % p;", "    assert(p > 0);\n    if (n == 0) return 1;\n    if (n\
    \ % 2 == 0) {\n        long r = modp(n / 2, p);\n        return (r * r) % p;\n\
    \    } else {\n        return (modp(n - 1, p) * n) % p;\n    }", "    if (n ==\
    \ 0) return 1;\n    long res = modp(n/2, p);\n    res = (res * res) % p;\n   \
    \ if (n % 2 == 1) res = (res * 2) % p;\n    return res;", "    if (n == 0) return\
    \ 1;\n    long res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n %\
    \ 2 == 1) res = (res * 2) % p;\n    return res;", "    if (n == 0) {\n       \
    \ return 1;\n    }\n    if (n % 2 == 0) {\n        long tmp = modp(n / 2, p);\n\
    \        return (tmp * tmp) % p;\n    }\n    return (modp(n - 1, p) * n) % p;",
  "    assert(p > 0);\n    if (n < 0) {\n        n = (n % p) + p;\n    }\n    return\
    \ n % p;", "    assert(p > 0);\n    if (n < 0) {\n        n = (n % p) + p;\n \
    \   }\n    return n % p;", "    if (n == 0) {\n        return 1;\n    }\n    long\
    \ res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) {\n \
    \       res = (res * 2) % p;\n    }\n    return res;", "    assert(p > 0);\n \
    \   if (n < 0) {\n        n = n % p + p;\n    }\n    return n % p;", "    assert(p\
    \ > 0);\n    if (n < 0) {\n        n = (n % p) + p;\n    }\n    return n % p;",
  "    assert(p > 0);\n    if (n < 0) {\n        n = n % p + p;\n    }\n    return\
    \ n % p;", "    if (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n\
    \        long x = modp(n / 2, p);\n        return (x * x) % p;\n    }\n    else\
    \ {\n        return (modp(n - 1, p) * n) % p;\n    }", "    assert(p > 0);\n \
    \   if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n / 2,\
    \ p);\n        return (t * t) % p;\n    } else {\n        return (modp(n - 1,\
    \ p) * n) % p;\n    }", "    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        long x = modp(n / 2, p);\n        return (x * x) % p;\n\
    \    }\n    return (modp(n - 1, p) * n) % p;", "    if (n == 0) return 1;\n  \
    \  long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res\
    \ = (res * 2) % p;\n    return res;", "    if (n == 0) return 1;\n    if (n %\
    \ 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t * t) % p;\n \
    \   } else {\n        return (modp(n - 1, p) * n) % p;\n    }", "    if (n ==\
    \ 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        long m = modp(n\
    \ / 2, p);\n        return (m * m) % p;\n    }\n    return (modp(n - 1, p) * n)\
    \ % p;", "    if (n == 0) return 1;\n    long res = modp(n / 2, p);\n    res =\
    \ (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return res;",
  "    assert(p > 0);\n    if (n < 0) {\n        n = (n % p) + p;\n    }\n    return\
    \ n % p;", "    assert(p > 0);\n    if (n < 0) {\n        n = (n % p) + p;\n \
    \   }\n    return n % p;", "    assert(p > 0);\n    if (n < 0) {\n        n =\
    \ (n % p) + p;\n    }\n    return n % p;", "  assert(p > 0);\n  if (n < 0) {\n\
    \    n = (n % p) + p;\n  }\n  return n % p;", "    if (n == 0) {\n        return\
    \ 1;\n    }\n    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n       \
    \ return (t * t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;", "    assert(p\
    \ > 0);\n    if (n == 0) return 1;\n    if (n == 1) return n;\n    if (n % 2 ==\
    \ 0) {\n        long x = modp(n/2, p);\n        return (x*x) % p;\n    } else\
    \ {\n        return (n*modp(n-1, p)) % p;\n    }", "    assert(p > 0);\n    if\
    \ (n < 0) {\n        n = n % p + p;\n    }\n    return n % p;", "    assert(p\
    \ > 0);\n    if (n < 0) {\n        n = n % p + p;\n    }\n    return n % p;",
  "    if (n == 0) return 1;\n    long res = modp(n / 2, p);\n    res = (res * res)\
    \ % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return res;", "    assert(p\
    \ > 0);\n    if (n < 0) {\n        n = p - (-n % p);\n    }\n    return n % p;",
  "    if (n == 0) return 1;\n    if (n == 1) return n;\n    if (n % 2 == 0) {\n \
    \       long x = modp(n/2, p);\n        return (x*x) % p;\n    } else {\n    \
    \    return (n * modp(n-1, p)) % p;\n    }", "    assert(p > 0);\n    if (n ==\
    \ 0) return 1;\n    if (n % 2 == 0) {\n        long tmp = modp(n / 2, p);\n  \
    \      return (tmp * tmp) % p;\n    } else {\n        return (modp(n - 1, p) *\
    \ n) % p;\n    }", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n       \
    \ long t = modp(n / 2, p);\n        return (t * t) % p;\n    } else {\n      \
    \  return (modp(n - 1, p) * n) % p;\n    }", "    if (n == 0) {\n        return\
    \ 1;\n    }\n    if (n == 1) {\n        return n;\n    }\n    long res = 1;\n\
    \    long a = n;\n    while (p > 0) {\n        if (p & 1) {\n            res =\
    \ (res * a) % MOD;\n        }\n        a = (a * a) % MOD;\n        p >>= 1;\n\
    \    }\n    return res;", "    if (n == 0) return 1;\n    if (n == 1) return n;\n\
    \    long res = 1;\n    while (n > 0) {\n        if (n & 1) res = (res * n) %\
    \ p;\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return res;",
  "    if (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        long\
    \ x = modp(n / 2, p);\n        return (x * x) % p;\n    }\n    return (modp(n\
    \ - 1, p) * n) % p;", "    if (n == 0) {\n        return 1;\n    } else if (n\
    \ == 1) {\n        return n;\n    } else if (n % 2 == 0) {\n        long res =\
    \ modp(n / 2, p);\n        return (res * res) % p;\n    } else {\n        return\
    \ (n * modp(n - 1, p)) % p;\n    }", "    assert(p > 0);\n    if (n < 0) {\n \
    \       n = (n % p) + p;\n    }\n    return n % p;", "    long res = 1;\n    while\
    \ (n > 0) {\n        if (n % 2 == 1) {\n            res = (res * 2) % p;\n   \
    \     }\n        n = n / 2;\n        if (n > 0) {\n            res = (res * res)\
    \ % p;\n        }\n    }\n    return res;", "    assert(p > 0);\n    if (n ==\
    \ 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n    \
    \    return (t * t) % p;\n    } else {\n        return (n * modp(n - 1, p)) %\
    \ p;\n    }", "    if (n == 0) {\n        return 1;\n    }\n    else if (n ==\
    \ 1) {\n        return n;\n    }\n    else if (n % 2 == 0) {\n        long res\
    \ = modp(n / 2, p);\n        return (res * res) % p;\n    }\n    else {\n    \
    \    return (n * modp(n - 1, p)) % p;\n    }", "    long res = 1;\n    while (n\
    \ > 0) {\n        if (n % 2 == 1) {\n            res = (res * 2) % p;\n      \
    \  }\n        n = n / 2;\n        if (n > 0) {\n            res = (res * res)\
    \ % p;\n        }\n    }\n    return res;", "    if (n == 0) {\n        return\
    \ 1;\n    }\n    if (n % 2 == 0) {\n        long temp = modp(n / 2, p);\n    \
    \    return (temp * temp) % p;\n    }\n    else {\n        return (modp(n - 1,\
    \ p) * n) % p;\n    }", "    if (n == 0) return 1;\n    if (n == 1) return n;\n\
    \    long res = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n         \
    \   res = (res * n) % p;\n        }\n        n = n / 2;\n        n = (n * n) %\
    \ p;\n    }\n    return res;", "    long r = 1;\n    while (n > 0) {\n       \
    \ if (n % 2 == 1) {\n            r = (r * 2) % p;\n        }\n        n = n /\
    \ 2;\n        if (n > 0) {\n            r = (r * r) % p;\n        }\n    }\n \
    \   return r;", "    assert(p > 0);\n    if (n == 0) return 1;\n    if (n == 1)\
    \ return n % p;\n    if (n % 2 == 0) {\n        long res = modp(n / 2, p);\n \
    \       return (res * res) % p;\n    }\n    return (n * modp(n - 1, p)) % p;",
  "    if (n == 0) return 1;\n    long res = modp(n/2, p);\n    res = (res * res)\
    \ % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return res;", "    if (n\
    \ == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        return modp(n\
    \ / 2, p) * modp(n / 2, p) % p;\n    }\n    return modp(n / 2, p) * modp(n / 2,\
    \ p) * n % p;", "    assert(p > 0);\n    if (n < 0) {\n        n = (n % p) + p;\n\
    \    }\n    return n % p;", "    assert(p > 0);\n    if (n == 0) return 1;\n \
    \   if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t * t)\
    \ % p;\n    } else {\n        return (n * modp(n - 1, p)) % p;\n    }", "    long\
    \ res = 1;\n    while (n > 0) {\n        if (n & 1)\n            res = (res *\
    \ 2) % p;\n        n >>= 1;\n    }\n    return res;", "    assert(p > 0);\n  \
    \  if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n / 2,\
    \ p);\n        return (t * t) % p;\n    } else {\n        return (modp(n - 1,\
    \ p) * n) % p;\n    }", "    assert(p > 0);\n    if (n < 0) {\n        n = n %\
    \ p + p;\n    }\n    if (n == 0) {\n        return 1;\n    }\n    long res = 1;\n\
    \    while (n > 0) {\n        if (n & 1) {\n            res = (res * 2) % p;\n\
    \        }\n        n >>= 1;\n        if (n > 0) {\n            res = (res * res)\
    \ % p;\n        }\n    }\n    return res;", "    assert(p > 0);\n    if (n ==\
    \ 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        long x = modp(n\
    \ / 2, p);\n        return (x * x) % p;\n    }\n    return (modp(n - 1, p) * n)\
    \ % p;", "    assert(p > 0);\n    if (n < 0) {\n        n = (n % p) + p;\n   \
    \ }\n    return n % p;", "    assert(p > 0);\n    if (n < 0) {\n        n = (n\
    \ % p) + p;\n    }\n    return n % p;", "    if (n == 0) return 1;\n    if (n\
    \ % 2 == 0) {\n        long x = modp(n/2, p);\n        return (x*x) % p;\n   \
    \ } else {\n        return (n * modp(n-1, p)) % p;\n    }", "    assert(p > 0);\n\
    \    if (n == 0) return 1;\n    if (n == 1) return n % p;\n    long res = 1;\n\
    \    while (n > 0) {\n        if (n & 1) {\n            res = (res * 2) % p;\n\
    \        }\n        n >>= 1;\n        res = (res * res) % p;\n    }\n    return\
    \ res;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long res =\
    \ modp(n/2, p);\n        return (res * res) % p;\n    }\n    return (modp(n-1,\
    \ p) * n) % p;", "    if (n == 0) {\n        return 1;\n    }\n    else if (n\
    \ % 2 == 0) {\n        long x = modp(n / 2, p);\n        return (x * x) % p;\n\
    \    }\n    else {\n        return (modp(n - 1, p) * n) % p;\n    }", "    long\
    \ res = 1;\n    while (n > 0) {\n        if (n & 1) {\n            res = (res\
    \ * n) % p;\n        }\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n\
    \    return res;", "    if (n == 0) {\n        return 1;\n    }\n    if (n ==\
    \ 1) {\n        return n;\n    }\n    if (n % 2 == 0) {\n        long t = modp(n\
    \ / 2, p);\n        return (t * t) % p;\n    }\n    return (n * modp(n - 1, p))\
    \ % p;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n\
    \ / 2, p);\n        return (t * t) % p;\n    } else {\n        return (modp(n\
    \ - 1, p) * n) % p;\n    }", "    if (n == 0) {\n        return 1;\n    }\n  \
    \  if (n % 2 == 0) {\n        return modp(n/2, p) * modp(n/2, p) % p;\n    }\n\
    \    return modp(n/2, p) * modp(n/2, p) * n % p;", "    if (n == 0) {\n      \
    \  return 1;\n    }\n    long x = modp(n / 2, p);\n    x = (x * x) % p;\n    if\
    \ (n % 2 == 1) {\n        x = (x * 2) % p;\n    }\n    return x;", "    if (n\
    \ == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        return modp(n\
    \ / 2, p) * modp(n / 2, p) % p;\n    }\n    return modp(n / 2, p) * modp(n / 2,\
    \ p) * n % p;", "    if (n == 0) {\n        return 1;\n    }\n    long res = modp(n\
    \ / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) {\n        res = (res\
    \ * 2) % p;\n    }\n    return res;", "    if (n == 0) return 1;\n    if (n %\
    \ 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t * t) % p;\n \
    \   } else {\n        return (modp(n - 1, p) * n) % p;\n    }", "    if (n ==\
    \ 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        long t = modp(n\
    \ / 2, p);\n        return (t * t) % p;\n    }\n    return (modp(n - 1, p) * n)\
    \ % p;", "  assert(p >= 2);\n  if (n < 0) {\n    n = (n % p) + p;\n  }\n  int\
    \ result = 1;\n  int base = n % p;\n  int exp = n;\n  while (exp > 0) {\n    if\
    \ (exp % 2 == 1) {\n      result = (result * base) % p;\n    }\n    base = (base\
    \ * base) % p;\n    exp = exp / 2;\n  }\n  return result;", "    assert(p > 0);\n\
    \    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n / 2,\
    \ p);\n        return (t * t) % p;\n    } else {\n        return (modp(n - 1,\
    \ p) * n) % p;\n    }", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n  \
    \      long t = modp(n / 2, p);\n        return (t * t) % p;\n    } else {\n \
    \       return (modp(n - 1, p) * n) % p;\n    }", "    if (n == 0) {\n       \
    \ return 1;\n    } else if (n % 2 == 0) {\n        long y = modp(n / 2, p);\n\
    \        return (y * y) % p;\n    } else {\n        return (modp(n - 1, p) * n)\
    \ % p;\n    }", "    assert(p > 0);\n    if (n < 0) {\n        n = n % p + p;\n\
    \    }\n    return n % p;", "    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long res = 1;\n    long sq = n;\n    while (sq > 0) {\n        if\
    \ (sq & 1) res = (res * n) % p;\n        sq >>= 1;\n        n = (n * n) % p;\n\
    \    }\n    return res;", "    if (n == 0) {\n        return 1;\n    }\n    if\
    \ (n % 2 == 0) {\n        long x = modp(n / 2, p);\n        return (x * x) % p;\n\
    \    }\n    return (modp(n - 1, p) * n) % p;", "    assert(p > 0);\n    if (n\
    \ < 0)\n        n += p;\n    long res = 1;\n    while (n > 0) {\n        if (n\
    \ & 1)\n            res = (res * 2) % p;\n        n >>= 1;\n    }\n    return\
    \ res;", "    long res = 1;\n    while (n > 0) {\n        if (n & 1) {\n     \
    \       res = (res * n) % p;\n        }\n        n = n >> 1;\n        n = (n *\
    \ n) % p;\n    }\n    return res;", "    if (n == 0) return 1;\n    if (n % 2\
    \ == 0) {\n        long t = modp(n / 2, p);\n        return (t * t) % p;\n   \
    \ } else {\n        return (modp(n - 1, p) * n) % p;\n    }", "    assert(p >\
    \ 0);\n    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n\
    \ / 2, p);\n        return (t * t) % p;\n    } else {\n        return (n * modp(n\
    \ - 1, p)) % p;\n    }", "    long r = 1;\n    while (n > 0) {\n        if (n\
    \ & 1) {\n            r = (r * 2) % p;\n        }\n        n >>= 1;\n        if\
    \ (n > 0) {\n            r = (r * r) % p;\n        }\n    }\n    return r;", " \
    \   assert(p > 0);\n    if (n < 0) {\n        n = n % p + p;\n    }\n    return\
    \ n % p;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long x =\
    \ modp(n/2, p);\n        return (x*x) % p;\n    } else {\n        return (modp(n-1,\
    \ p) * n) % p;\n    }", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n  \
    \      long t = modp(n / 2, p);\n        return (t * t) % p;\n    } else {\n \
    \       return (modp(n - 1, p) * n) % p;\n    }", "    if (n == 0) {\n       \
    \ return 1;\n    }\n    if (n % 2 == 0) {\n        long temp = modp(n / 2, p);\n\
    \        return (temp * temp) % p;\n    }\n    else {\n        return (modp(n\
    \ - 1, p) * n) % p;\n    }", "    assert(p >= 2);\n    if (n < 0)\n        n =\
    \ p - 1 - ((-n) % (p - 1));\n    return 1 << n % (p - 1);", "    if (n == 0) return\
    \ 1;\n    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2\
    \ == 1) res = (res * 2) % p;\n    return res;", "  assert(p > 0);\n  if (n ==\
    \ 0) return 1;\n  if (n % 2 == 0) {\n    long t = modp(n / 2, p);\n    return\
    \ (t * t) % p;\n  } else {\n    return (modp(n - 1, p) * n) % p;\n  }", "    long\
    \ res = 1;\n    while (n > 0) {\n        if (n & 1) {\n            res = (res\
    \ * n) % p;\n        }\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n\
    \    return res;", "    assert(p > 0);\n    if (n < 0) {\n        n = n % p +\
    \ p;\n    }\n    long res = 1;\n    long x = n;\n    while (p > 0) {\n       \
    \ if (p & 1) {\n            res = (res * x) % p;\n        }\n        x = (x *\
    \ x) % p;\n        p >>= 1;\n    }\n    return res;", "  assert(p > 0);\n  if\
    \ (n == 0) return 1;\n  if (n % 2 == 0) {\n    long t = modp(n / 2, p);\n    return\
    \ (t * t) % p;\n  } else {\n    return (modp(n - 1, p) * n) % p;\n  }", "    assert(p\
    \ > 0);\n    assert(n >= 0);\n    if (n == 0) return 1;\n    if (n % 2 == 0) {\n\
    \        long t = modp(n / 2, p);\n        return (t * t) % p;\n    } else {\n\
    \        return (modp(n - 1, p) * n) % p;\n    }"]
stop_tokens:
- "\n}"
