name: HumanEval_157_right_angle_triangle
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
  \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
  \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
  \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
  \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
  bool right_angle_triangle(long a, long b, long c) {\n"
tests: "}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
  \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
  \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
  \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n \
  \   assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15), (8),\
  \ (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
  \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n}\n"
completions: ["    // Write your code here\n    // To print results to the standard\
    \ output you can use Printf\n    // Example: Printf(\"%s = %d\", \"a\", a);\n\
    \    if(a>b && a>c)\n    {\n        if(a*a == b*b + c*c)\n            return true;\n\
    \        else\n            return false;\n    }\n    else if(b>a && b>c)\n   \
    \ {\n        if(b*b == a*a + c*c)\n            return true;\n        else\n  \
    \          return false;\n    }\n    else if(c>a && c>b)\n    {\n        if(c*c\
    \ == a*a + b*b)\n            return true;\n        else\n            return false;\n\
    \    }", "    // Write your code here\n    // To print results to the standard\
    \ output you can use print\n    // Example: print \"Hello world!\"\n    long max\
    \ = std::max(a, std::max(b, c));\n    long min = std::min(a, std::min(b, c));\n\
    \    long mid = a + b + c - max - min;\n    if (max * max == mid * mid + min *\
    \ min)\n        return true;\n    else\n        return false;", "    // Write\
    \ your code here\n    // To print results to the standard output you can use printf()\n\
    \    // Example: printf(\"%s\", \"Hello world!\");\n    if(a*a + b*b == c*c)\n\
    \        return true;\n    if(a*a + c*c == b*b)\n        return true;\n    if(b*b\
    \ + c*c == a*a)\n        return true;\n    return false;", "    // Write your\
    \ code here\n    // To print results to the standard output you can use printf()\n\
    \    // Example: printf(\"%s\", \"Hello world!\");\n    long max = std::max(a,\
    \ std::max(b, c));\n    long min = std::min(a, std::min(b, c));\n    long mid\
    \ = a + b + c - max - min;\n    return max * max == min * min + mid * mid;", " \
    \   if (a == 0 || b == 0 || c == 0) {\n        return false;\n    }\n    if (a\
    \ == b && b == c) {\n        return false;\n    }\n    long max = std::max(a,\
    \ std::max(b, c));\n    long min = std::min(a, std::min(b, c));\n    long mid\
    \ = a + b + c - max - min;\n    if (max * max == min * min + mid * mid) {\n  \
    \      return true;\n    }\n    return false;", "    // TODO: Write your code\
    \ here\n    return false;", "    // Write your code here\n    // To print results\
    \ to the standard output you can use Printf\n    // Example: Printf(\"%s = %s\\\
    n\", \"My variable\", my_variable);\n    if(a==0 || b==0 || c==0)\n        return\
    \ false;\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a + c*c ==\
    \ b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return true;\n\
    \    return false;", "    if(a*a + b*b == c*c)\n        return true;\n    else\
    \ if(a*a + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n\
    \        return true;\n    else\n        return false;", "    // Write your code\
    \ here\n    // To print results to the standard output you can use Printf\n  \
    \  // Example: Printf(\"%s = %d\", \"a\", a);\n    long x = a*a;\n    long y =\
    \ b*b;\n    long z = c*c;\n    if(x+y==z || x+z==y || y+z==x)\n        return\
    \ true;\n    else\n        return false;", "    // Write your code here\n    //\
    \ To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if (a*a + b*b == c*c || a*a + c*c ==\
    \ b*b || b*b + c*c == a*a)\n        return true;\n    return false;", "    //\
    \ Write your code here\n    // To print results to the standard output you can\
    \ use Printf\n    // Example: Printf(\"%s = %d\", \"a\", a);\n    long x = a*a;\n\
    \    long y = b*b;\n    long z = c*c;\n    if(x+y==z || x+z==y || y+z==x)\n  \
    \      return true;\n    else\n        return false;", "    // Write your code\
    \ here\n    // To print results to the standard output you can use Printf\n  \
    \  // Example: Printf(\"%s = %s\\n\", \"My variable\", my_var);\n    // long a\
    \ = 3, b = 4, c = 5;\n    if(a > b && a > c)\n    {\n        if(a*a == b*b + c*c)\n\
    \            return true;\n        else\n            return false;\n    }\n  \
    \  else if(b > a && b > c)\n    {\n        if(b*b == a*a + c*c)\n            return\
    \ true;\n        else\n            return false;\n    }\n    else if(c > a &&\
    \ c > b)\n    {\n        if(c*c == a*a + b*b)\n            return true;\n    \
    \    else\n            return false;\n    }\n    else\n        return false;",
  "    // Write your code here\n    // To print results to the standard output you\
    \ can use printf()\n    // Example: printf(\"%s\", \"Hello world!\");\n    if(a*a\
    \ + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a)\n        return true;\n\
    \    return false;", "    // Write your code here\n    // To print results to\
    \ the standard output you can use printf()\n    // Example: printf(\"%s\", \"\
    Hello world!\");\n    if(a*a + b*b == c*c)\n        return true;\n    else if(a*a\
    \ + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n       \
    \ return true;\n    else\n        return false;", "    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s\\n\", \"Hello world!\");\n    long max = std::max(a, std::max(b,\
    \ c));\n    long min = std::min(a, std::min(b, c));\n    long mid = a + b + c\
    \ - max - min;\n    if (max * max == min * min + mid * mid) {\n        return\
    \ true;\n    }\n    return false;", "    // Write your code here\n    // To print\
    \ results to the standard output you can use printf()\n    // Example: printf(\"\
    %s\", \"Hello world!\");\n    if(a*a + b*b == c*c || a*a + c*c == b*b || b*b +\
    \ c*c == a*a)\n        return true;\n    return false;", "    // Write your code\
    \ here\n    // To print results to the standard output you can use Printf()\n\
    \    // Example: Printf(\"%s\", \"Hello world!\");\n    if(a*a + b*b == c*c ||\
    \ b*b + c*c == a*a || a*a + c*c == b*b)\n        return true;\n    return false;",
  "    // Write your code here\n    // To print results to the standard output you\
    \ can use print\n    // Example: print \"Hello world!\"\n    long max, min1, min2;\n\
    \    if(a > b && a > c) {\n        max = a;\n        min1 = b;\n        min2 =\
    \ c;\n    }\n    else if(b > a && b > c) {\n        max = b;\n        min1 = a;\n\
    \        min2 = c;\n    }\n    else {\n        max = c;\n        min1 = a;\n \
    \       min2 = b;\n    }\n    if(max * max == min1 * min1 + min2 * min2)\n   \
    \     return true;\n    return false;", "    if (a == 0 || b == 0 || c == 0) {\n\
    \        return false;\n    }\n    std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(),\
    \ sides.end());\n    return (sides[0] * sides[0] + sides[1] * sides[1]) == sides[2]\
    \ * sides[2];", "    long sides[3] = {a, b, c};\n    std::sort(sides, sides +\
    \ 3);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];"]
stop_tokens:
- "\n}"
