name: HumanEval_70_strange_sort_list
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers, return\
  \ list in strange order.\n// Strange sorting, is when you start with the minimum\
  \ value,\n// then maximum of the remaining integers, then minimum and so on.\n//\
  \ Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)3}))\n//\
  \ >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5, (long)5})))\n\
  // (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n// >>> strange_sort_list((std::vector<long>()))\n\
  // (std::vector<long>())\nstd::vector<long> strange_sort_list(std::vector<long>\
  \ lst) {\n"
tests: "}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
  \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
  \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
  \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
  \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
  \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
  \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
  \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
  \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
  \ (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8, (long)2,\
  \ (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
  \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
  \ == (std::vector<long>({(long)111111})));\n}\n"
completions: ["    std::vector<long> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n\
    \            j--;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;", "    std::vector<long> res;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n\
    \        if (i != j) {\n            res.push_back(lst[j]);\n        }\n      \
    \  i++;\n        j--;\n    }\n    return res;", "    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    if (lst.size()\
    \ == 0) {\n        return res;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n\
    \        i++;\n        if (i <= j) {\n            res.push_back(lst[j]);\n   \
    \         j--;\n        }\n    }\n    return res;", "    std::vector<long> res;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i !=\
    \ j) {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;", "  std::vector<long> result;\n  if (lst.size() == 0)\
    \ {\n    return result;\n  }\n  std::sort(lst.begin(), lst.end());\n  int i =\
    \ 0;\n  int j = lst.size() - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n\
    \    i++;\n    if (i <= j) {\n      result.push_back(lst[j]);\n      j--;\n  \
    \  }\n  }\n  return result;", "    std::vector<long> res;\n    if (lst.size()\
    \ == 0) {\n        return res;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n\
    \        i++;\n        if (i <= j) {\n            res.push_back(lst[j]);\n   \
    \         j--;\n        }\n    }\n    return res;", "    if (lst.size() == 0)\
    \ return lst;\n    std::sort(lst.begin(), lst.end());\n    std::vector<long> res;\n\
    \    int i = 0, j = lst.size() - 1;\n    while (i <= j) {\n        res.push_back(lst[i++]);\n\
    \        if (i <= j) res.push_back(lst[j--]);\n    }\n    return res;", "    std::vector<long>\
    \ result;\n    int n = lst.size();\n    if (n == 0) {\n        return result;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = n\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;", "    std::vector<long> res;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n\
    \        i++;\n        if (i <= j) {\n            res.push_back(lst[j]);\n   \
    \         j--;\n        }\n    }\n    return res;", "    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    if\
    \ (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;", "    std::vector<long> result;\n    if (lst.size() == 0)\
    \ {\n        return result;\n    }\n    std::sort(lst.begin(), lst.end());\n \
    \   int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n\
    \            j--;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ res;\n    if (lst.size() == 0) return res;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0, j = lst.size() - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n\
    \        if (i != j) res.push_back(lst[j]);\n        i++;\n        j--;\n    }\n\
    \    return res;", "    std::vector<long> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;", "\tstd::vector<long> ret;\n\tif (lst.size() == 0) {\n\t\t\
    return ret;\n\t}\n\tstd::sort(lst.begin(), lst.end());\n\tint i = 0;\n\tint j\
    \ = lst.size() - 1;\n\twhile (i <= j) {\n\t\tret.push_back(lst[i]);\n\t\ti++;\n\
    \t\tif (i <= j) {\n\t\t\tret.push_back(lst[j]);\n\t\t\tj--;\n\t\t}\n\t}\n\treturn\
    \ ret;", "    std::vector<long> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0;\n    while(lst.size() > 0) {\n        if(i % 2 == 0) {\n     \
    \       result.push_back(lst[0]);\n            lst.erase(lst.begin());\n     \
    \   } else {\n            result.push_back(lst[lst.size() - 1]);\n           \
    \ lst.erase(lst.end() - 1);\n        }\n        i++;\n    }\n    return result;",
  "    std::vector<long> res;\n    std::sort(lst.begin(), lst.end());\n    int i =\
    \ 0;\n    int j = lst.size() - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n\
    \        if (i != j) {\n            res.push_back(lst[j]);\n        }\n      \
    \  i++;\n        j--;\n    }\n    return res;"]
stop_tokens:
- "\n}"
