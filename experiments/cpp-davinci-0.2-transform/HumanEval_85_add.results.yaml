language: cpp
name: HumanEval_85_add
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  long sum = 0;\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (i % 2 != 0 && lst[i] % 2 == 0) {\n      sum += lst[i];\n   \
    \ }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpej18uf3k.cpp: In function 'int main()':\n/tmp/tmpej18uf3k.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpej18uf3k.cpp:2:\n/tmp/tmpej18uf3k.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpej18uf3k.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpej18uf3k.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpej18uf3k.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpej18uf3k.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpej18uf3k.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpej18uf3k.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpej18uf3k.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  long sum = 0;\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      sum += lst[i];\n   \
    \ }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ql50vfa.cpp: In function 'int main()':\n/tmp/tmp0ql50vfa.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp0ql50vfa.cpp:2:\n/tmp/tmp0ql50vfa.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp0ql50vfa.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp0ql50vfa.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0ql50vfa.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp0ql50vfa.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp0ql50vfa.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmp0ql50vfa.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0ql50vfa.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size();\
    \ i++) {\n        if(i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprqnz2959.cpp: In function 'int main()':\n/tmp/tmprqnz2959.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmprqnz2959.cpp:2:\n/tmp/tmprqnz2959.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmprqnz2959.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmprqnz2959.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprqnz2959.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmprqnz2959.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmprqnz2959.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmprqnz2959.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprqnz2959.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size();\
    \ i++) {\n        if(i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprqnz2959.cpp: In function 'int main()':\n/tmp/tmprqnz2959.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmprqnz2959.cpp:2:\n/tmp/tmprqnz2959.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmprqnz2959.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmprqnz2959.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprqnz2959.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmprqnz2959.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmprqnz2959.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmprqnz2959.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprqnz2959.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size();\
    \ i++) {\n        if(i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprqnz2959.cpp: In function 'int main()':\n/tmp/tmprqnz2959.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmprqnz2959.cpp:2:\n/tmp/tmprqnz2959.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmprqnz2959.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmprqnz2959.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprqnz2959.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmprqnz2959.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmprqnz2959.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmprqnz2959.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprqnz2959.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size();\
    \ i++) {\n        if(i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprqnz2959.cpp: In function 'int main()':\n/tmp/tmprqnz2959.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmprqnz2959.cpp:2:\n/tmp/tmprqnz2959.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmprqnz2959.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmprqnz2959.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprqnz2959.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmprqnz2959.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmprqnz2959.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmprqnz2959.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprqnz2959.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size();\
    \ i++) {\n        if(i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprqnz2959.cpp: In function 'int main()':\n/tmp/tmprqnz2959.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmprqnz2959.cpp:2:\n/tmp/tmprqnz2959.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmprqnz2959.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmprqnz2959.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprqnz2959.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmprqnz2959.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmprqnz2959.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmprqnz2959.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprqnz2959.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  long sum = 0;\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      sum += lst[i];\n   \
    \ }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ql50vfa.cpp: In function 'int main()':\n/tmp/tmp0ql50vfa.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp0ql50vfa.cpp:2:\n/tmp/tmp0ql50vfa.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp0ql50vfa.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp0ql50vfa.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0ql50vfa.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp0ql50vfa.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp0ql50vfa.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmp0ql50vfa.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0ql50vfa.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  long sum = 0;\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      sum += lst[i];\n   \
    \ }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ql50vfa.cpp: In function 'int main()':\n/tmp/tmp0ql50vfa.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp0ql50vfa.cpp:2:\n/tmp/tmp0ql50vfa.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp0ql50vfa.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp0ql50vfa.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0ql50vfa.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp0ql50vfa.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp0ql50vfa.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmp0ql50vfa.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0ql50vfa.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size();\
    \ i++) {\n        if(i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9c0dspll.cpp: In function 'int main()':\n/tmp/tmp9c0dspll.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp9c0dspll.cpp:2:\n/tmp/tmp9c0dspll.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp9c0dspll.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp9c0dspll.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp9c0dspll.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp9c0dspll.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp9c0dspll.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmp9c0dspll.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp9c0dspll.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  long sum = 0;\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      sum += lst[i];\n   \
    \ }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ql50vfa.cpp: In function 'int main()':\n/tmp/tmp0ql50vfa.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp0ql50vfa.cpp:2:\n/tmp/tmp0ql50vfa.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp0ql50vfa.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp0ql50vfa.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0ql50vfa.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp0ql50vfa.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp0ql50vfa.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmp0ql50vfa.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0ql50vfa.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size();\
    \ i++) {\n        if(i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprqnz2959.cpp: In function 'int main()':\n/tmp/tmprqnz2959.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmprqnz2959.cpp:2:\n/tmp/tmprqnz2959.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmprqnz2959.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmprqnz2959.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprqnz2959.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmprqnz2959.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmprqnz2959.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmprqnz2959.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprqnz2959.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size();\
    \ i++) {\n        if(i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprqnz2959.cpp: In function 'int main()':\n/tmp/tmprqnz2959.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmprqnz2959.cpp:2:\n/tmp/tmprqnz2959.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmprqnz2959.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmprqnz2959.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprqnz2959.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmprqnz2959.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmprqnz2959.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmprqnz2959.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprqnz2959.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size();\
    \ i++){\n        if(i % 2 == 1 && lst[i] % 2 == 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpogviy2ci.cpp: In function 'int main()':\n/tmp/tmpogviy2ci.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpogviy2ci.cpp:2:\n/tmp/tmpogviy2ci.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpogviy2ci.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpogviy2ci.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpogviy2ci.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpogviy2ci.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpogviy2ci.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpogviy2ci.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpogviy2ci.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  long sum = 0;\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      sum += lst[i];\n   \
    \ }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ql50vfa.cpp: In function 'int main()':\n/tmp/tmp0ql50vfa.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp0ql50vfa.cpp:2:\n/tmp/tmp0ql50vfa.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp0ql50vfa.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp0ql50vfa.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0ql50vfa.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp0ql50vfa.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp0ql50vfa.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmp0ql50vfa.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0ql50vfa.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  long sum = 0;\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      sum += lst[i];\n   \
    \ }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ql50vfa.cpp: In function 'int main()':\n/tmp/tmp0ql50vfa.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp0ql50vfa.cpp:2:\n/tmp/tmp0ql50vfa.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp0ql50vfa.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp0ql50vfa.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0ql50vfa.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp0ql50vfa.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp0ql50vfa.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmp0ql50vfa.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0ql50vfa.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size();\
    \ i++) {\n        if(i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprqnz2959.cpp: In function 'int main()':\n/tmp/tmprqnz2959.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmprqnz2959.cpp:2:\n/tmp/tmprqnz2959.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmprqnz2959.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmprqnz2959.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprqnz2959.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmprqnz2959.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmprqnz2959.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmprqnz2959.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprqnz2959.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size();\
    \ i++) {\n        if(i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprqnz2959.cpp: In function 'int main()':\n/tmp/tmprqnz2959.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmprqnz2959.cpp:2:\n/tmp/tmprqnz2959.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmprqnz2959.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmprqnz2959.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprqnz2959.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmprqnz2959.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmprqnz2959.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmprqnz2959.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprqnz2959.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for(int i = 1; i < lst.size();\
    \ i += 2) {\n        if(lst[i] % 2 == 0) {\n            sum += lst[i];\n     \
    \   }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi49t9frv.cpp: In function 'int main()':\n/tmp/tmpi49t9frv.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpi49t9frv.cpp:2:\n/tmp/tmpi49t9frv.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpi49t9frv.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpi49t9frv.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpi49t9frv.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpi49t9frv.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpi49t9frv.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpi49t9frv.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpi49t9frv.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size();\
    \ i++) {\n        if(i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprqnz2959.cpp: In function 'int main()':\n/tmp/tmprqnz2959.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmprqnz2959.cpp:2:\n/tmp/tmprqnz2959.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmprqnz2959.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmprqnz2959.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprqnz2959.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmprqnz2959.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmprqnz2959.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmprqnz2959.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprqnz2959.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
