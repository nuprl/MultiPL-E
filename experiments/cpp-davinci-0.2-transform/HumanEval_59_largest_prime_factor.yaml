name: HumanEval_59_largest_prime_factor
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
  \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
  // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
  \ n) {\n"
tests: "}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
  \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
  \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
  }\n"
completions: ["    long largest_prime_factor = 1;\n    long factor = 2;\n    while\
    \ (factor * factor <= n) {\n        if (n % factor == 0) {\n            largest_prime_factor\
    \ = factor;\n            while (n % factor == 0) {\n                n /= factor;\n\
    \            }\n        }\n        factor += 1;\n    }\n    if (n > 1) {\n   \
    \     largest_prime_factor = n;\n    }\n    return largest_prime_factor;", " \
    \   long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      return largest_prime_factor(n / i);\n        }\n    }\n    return n;",
  "    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n) {\n   \
    \     if (n % i == 0) {\n            largest_prime_factor = i;\n            n\
    \ /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return largest_prime_factor;",
  "    long largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i ==\
    \ 0) {\n            largest = i;\n            n /= i;\n            i--;\n    \
    \    }\n    }\n    return largest;", "    long largest_prime_factor = 1;\n   \
    \ long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largest_prime_factor;", "    long largest_prime_factor = 1;\n\
    \    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n          \
    \  largest_prime_factor = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime_factor;", "    long largest_prime_factor\
    \ = 1;\n    int i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n    \
    \        largest_prime_factor = i;\n            n /= i;\n        } else {\n  \
    \          i++;\n        }\n    }\n    return largest_prime_factor;", "    long\
    \ i = 2;\n    while (n > 1) {\n        if (n % i == 0) {\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return i;", "    long\
    \ i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return\
    \ largest_prime_factor(n / i);\n        }\n    }\n    return n;", "    // TODO:\
    \ implement me\n    long largest_prime = 0;\n    for (long i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            largest_prime = i;\n            n\
    \ /= i;\n            i--;\n        }\n    }\n    return largest_prime;", "  long\
    \ i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      n /= i;\n    }\
    \ else {\n      i += 1;\n    }\n  }\n  return n;", "    long largest_factor =\
    \ 1;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n       \
    \     largest_factor = i;\n            n /= i;\n            i--;\n        }\n\
    \    }\n    return largest_factor;", "    long i;\n    for (i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return largest_prime_factor(n / i);\n\
    \        }\n    }\n    return n;", "    long largest_prime_factor = 1;\n    for\
    \ (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            while (n % i == 0) {\n                n /= i;\n          \
    \  }\n        }\n    }\n    return largest_prime_factor;", "  long largest_factor\
    \ = 1;\n  for (long i = 2; i <= n; i++) {\n    if (n % i == 0) {\n      largest_factor\
    \ = i;\n      n /= i;\n      i--;\n    }\n  }\n  return largest_factor;", "  \
    \  long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n       \
    \     n /= i;\n            i--;\n        }\n    }\n    return i;", "  long i =\
    \ 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      n /= i;\n    } else\
    \ {\n      i += 1;\n    }\n  }\n  return n;", "    long i = 2;\n    while (i *\
    \ i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return n;", "    long i;\n    for (i\
    \ = 2; i < n; i++) {\n        if (n % i == 0) {\n            return largest_prime_factor(n\
    \ / i);\n        }\n    }\n    return n;", "    long largest_prime_factor = 1;\n\
    \    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n          \
    \  largest_prime_factor = i;\n            n /= i;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    return largest_prime_factor;"]
stop_tokens:
- "\n}"
