language: cpp
name: HumanEval_28_concatenate
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (auto s : strings) {\n      \
    \  ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkdpbidpt.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpkdpbidpt.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpkdpbidpt.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return ss.str();\n     ^\n/tmp/tmpkdpbidpt.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpkdpbidpt.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpkdpbidpt.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpkdpbidpt.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpkdpbidpt.cpp: In function 'int main()':\n/tmp/tmpkdpbidpt.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkdpbidpt.cpp:2:\n/tmp/tmpkdpbidpt.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpkdpbidpt.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpkdpbidpt.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpkdpbidpt.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpkdpbidpt.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed ini"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto string : strings) {\n   \
    \     result += string;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3hgymo0c.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp3hgymo0c.cpp:10:15: error: 'string' does not name a type\n   \
    \  for (auto string : strings) {\n               ^\n/tmp/tmp3hgymo0c.cpp:13:5:\
    \ error: expected ';' before 'return'\n     return result;\n     ^\n/tmp/tmp3hgymo0c.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp3hgymo0c.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp3hgymo0c.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp3hgymo0c.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp3hgymo0c.cpp: In function 'int main()':\n/tmp/tmp3hgymo0c.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3hgymo0c.cpp:2:\n/tmp/tmp3hgymo0c.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp3hgymo0c.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp3hgymo0c.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp3hgymo0c.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3hgymo0c.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-encl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (auto s : strings) {\n      \
    \  ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkdpbidpt.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpkdpbidpt.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpkdpbidpt.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return ss.str();\n     ^\n/tmp/tmpkdpbidpt.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpkdpbidpt.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpkdpbidpt.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpkdpbidpt.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpkdpbidpt.cpp: In function 'int main()':\n/tmp/tmpkdpbidpt.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkdpbidpt.cpp:2:\n/tmp/tmpkdpbidpt.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpkdpbidpt.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpkdpbidpt.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpkdpbidpt.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpkdpbidpt.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed ini"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n  std::string result;\n  for (auto &s : strings) {\n    result +=\
    \ s;\n  }\n  return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwwlcxgxu.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwwlcxgxu.cpp:10:14: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n   for (auto &s : strings) {\n              ^\n\
    /tmp/tmpwwlcxgxu.cpp:10:18: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (auto &s : strings) {\n                  ^\n/tmp/tmpwwlcxgxu.cpp:\
    \ In function 'int main()':\n/tmp/tmpwwlcxgxu.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = concatenate;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwwlcxgxu.cpp:2:\n/tmp/tmpwwlcxgxu.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwwlcxgxu.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwwlcxgxu.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwwlcxgxu.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwwlcxgxu.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwwlcxgxu.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 fr"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n  std::string result;\n  for (std::string s : strings) {\n    result\
    \ += s;\n  }\n  return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplnofc_qc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto string : strings) {\n   \
    \     result += string;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3hgymo0c.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp3hgymo0c.cpp:10:15: error: 'string' does not name a type\n   \
    \  for (auto string : strings) {\n               ^\n/tmp/tmp3hgymo0c.cpp:13:5:\
    \ error: expected ';' before 'return'\n     return result;\n     ^\n/tmp/tmp3hgymo0c.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp3hgymo0c.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp3hgymo0c.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp3hgymo0c.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp3hgymo0c.cpp: In function 'int main()':\n/tmp/tmp3hgymo0c.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3hgymo0c.cpp:2:\n/tmp/tmp3hgymo0c.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp3hgymo0c.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp3hgymo0c.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp3hgymo0c.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3hgymo0c.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-encl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result = \"\";\n    for (std::string s : strings)\
    \ {\n        result += s;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphbh6499f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto &s : strings) {\n       \
    \ result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2m_1c86j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (auto s : strings) {\n      \
    \  ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkdpbidpt.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpkdpbidpt.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpkdpbidpt.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return ss.str();\n     ^\n/tmp/tmpkdpbidpt.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpkdpbidpt.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpkdpbidpt.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpkdpbidpt.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpkdpbidpt.cpp: In function 'int main()':\n/tmp/tmpkdpbidpt.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkdpbidpt.cpp:2:\n/tmp/tmpkdpbidpt.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpkdpbidpt.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpkdpbidpt.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpkdpbidpt.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpkdpbidpt.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed ini"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n  std::string result;\n  for (std::string s : strings) {\n    result\
    \ += s;\n  }\n  return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplnofc_qc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n  std::stringstream ss;\n  for (auto s : strings) {\n    ss << s;\n\
    \  }\n  return ss.str();\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9h6ln2vb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n  std::string result;\n  for (auto &s : strings) {\n    result +=\
    \ s;\n  }\n  return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwwlcxgxu.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwwlcxgxu.cpp:10:14: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n   for (auto &s : strings) {\n              ^\n\
    /tmp/tmpwwlcxgxu.cpp:10:18: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (auto &s : strings) {\n                  ^\n/tmp/tmpwwlcxgxu.cpp:\
    \ In function 'int main()':\n/tmp/tmpwwlcxgxu.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = concatenate;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwwlcxgxu.cpp:2:\n/tmp/tmpwwlcxgxu.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwwlcxgxu.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwwlcxgxu.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwwlcxgxu.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwwlcxgxu.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwwlcxgxu.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 fr"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result = \"\";\n    for (std::string s : strings)\
    \ {\n        result += s;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphbh6499f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result = \"\";\n    for (std::string s : strings)\
    \ {\n        result += s;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphbh6499f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result = \"\";\n    for (std::string s : strings)\
    \ {\n        result += s;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphbh6499f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n  std::string result;\n  for (auto string : strings) {\n    result\
    \ += string;\n  }\n  return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp73v4a52d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (auto s : strings) {\n      \
    \  ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkdpbidpt.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpkdpbidpt.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpkdpbidpt.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return ss.str();\n     ^\n/tmp/tmpkdpbidpt.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpkdpbidpt.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpkdpbidpt.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpkdpbidpt.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpkdpbidpt.cpp: In function 'int main()':\n/tmp/tmpkdpbidpt.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkdpbidpt.cpp:2:\n/tmp/tmpkdpbidpt.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpkdpbidpt.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpkdpbidpt.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpkdpbidpt.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpkdpbidpt.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed ini"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string string : strings)\
    \ {\n        result += string;\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2z3bstcr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result = \"\";\n    for (std::string s : strings)\
    \ {\n        result += s;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphbh6499f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result = \"\";\n    for (std::string s : strings)\
    \ {\n        result += s;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphbh6499f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result = \"\";\n    for (std::string s : strings)\
    \ {\n        result += s;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphbh6499f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n  std::stringstream ss;\n  for (std::string s : strings) {\n   \
    \ ss << s;\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk_mivz__.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result = \"\";\n    for (std::string s : strings)\
    \ {\n        result += s;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphbh6499f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto &s : strings) {\n       \
    \ result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2m_1c86j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (auto s : strings) {\n      \
    \  ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkdpbidpt.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpkdpbidpt.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpkdpbidpt.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return ss.str();\n     ^\n/tmp/tmpkdpbidpt.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpkdpbidpt.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpkdpbidpt.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpkdpbidpt.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpkdpbidpt.cpp: In function 'int main()':\n/tmp/tmpkdpbidpt.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkdpbidpt.cpp:2:\n/tmp/tmpkdpbidpt.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpkdpbidpt.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpkdpbidpt.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpkdpbidpt.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpkdpbidpt.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed ini"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string string : strings)\
    \ {\n        ss << string;\n    }\n    return ss.str();\n}\nint main() {\n   \
    \ auto candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt5c311in.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n  std::string result;\n  for (std::string s : strings) {\n    result\
    \ += s;\n  }\n  return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplnofc_qc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result = \"\";\n    for (auto s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6osq0ee9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result = \"\";\n    for (std::string s : strings)\
    \ {\n        result += s;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphbh6499f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result = \"\";\n    for (std::string s : strings)\
    \ {\n        result += s;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphbh6499f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result = \"\";\n    for (std::string s : strings)\
    \ {\n        result += s;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphbh6499f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result = \"\";\n    for (std::string s : strings)\
    \ {\n        result += s;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphbh6499f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n  std::string result;\n  for (auto s : strings) {\n    result +=\
    \ s;\n  }\n  return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjif5gfhx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto &s : strings) {\n       \
    \ result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2m_1c86j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n  std::string result;\n  for (std::string s : strings) {\n    result\
    \ += s;\n  }\n  return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplnofc_qc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n  std::string result;\n  for (std::string s : strings) {\n    result\
    \ += s;\n  }\n  return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplnofc_qc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result = \"\";\n    for (std::string s : strings)\
    \ {\n        result += s;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphbh6499f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (auto s : strings) {\n      \
    \  ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkdpbidpt.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpkdpbidpt.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpkdpbidpt.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return ss.str();\n     ^\n/tmp/tmpkdpbidpt.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpkdpbidpt.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpkdpbidpt.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpkdpbidpt.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpkdpbidpt.cpp: In function 'int main()':\n/tmp/tmpkdpbidpt.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkdpbidpt.cpp:2:\n/tmp/tmpkdpbidpt.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpkdpbidpt.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpkdpbidpt.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpkdpbidpt.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpkdpbidpt.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed ini"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (auto s : strings) {\n      \
    \  ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkdpbidpt.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpkdpbidpt.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpkdpbidpt.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return ss.str();\n     ^\n/tmp/tmpkdpbidpt.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpkdpbidpt.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpkdpbidpt.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpkdpbidpt.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpkdpbidpt.cpp: In function 'int main()':\n/tmp/tmpkdpbidpt.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkdpbidpt.cpp:2:\n/tmp/tmpkdpbidpt.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpkdpbidpt.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpkdpbidpt.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpkdpbidpt.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpkdpbidpt.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed ini"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxu3plkm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwxu3plkm.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpwxu3plkm.cpp: In function 'int main()':\n/tmp/tmpwxu3plkm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxu3plkm.cpp:2:\n/tmp/tmpwxu3plkm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwxu3plkm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwxu3plkm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwxu3plkm.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwxu3plkm.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1i754w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwa1i754w.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwa1i754w.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwa1i754w.cpp: In function 'int main()':\n/tmp/tmpwa1i754w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwa1i754w.cpp:2:\n/tmp/tmpwa1i754w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwa1i754w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwa1i754w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwa1i754w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w18ccja.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp9w18ccja.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp9w18ccja.cpp: In function 'int main()':\n/tmp/tmp9w18ccja.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9w18ccja.cpp:2:\n/tmp/tmp9w18ccja.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp9w18ccja.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp9w18ccja.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9w18ccja.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9w18ccja.cpp:2:\n/usr/include/c++/"
  stdout: ''
