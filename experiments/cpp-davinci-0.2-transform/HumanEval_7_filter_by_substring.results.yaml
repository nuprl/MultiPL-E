language: cpp
name: HumanEval_7_filter_by_substring
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptt9rgc6h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmptt9rgc6h.cpp:10:15: error: 'string' does not name a type\n     for (auto\
    \ string : strings) {\n               ^\n/tmp/tmptt9rgc6h.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmptt9rgc6h.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmptt9rgc6h.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmptt9rgc6h.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmptt9rgc6h.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmptt9rgc6h.cpp: In function 'int main()':\n/tmp/tmptt9rgc6h.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptt9rgc6h.cpp:2:\n/tmp/tmptt9rgc6h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmptt9rgc6h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmptt9rgc6h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    for\
    \ (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            res.push_back(s);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp033xirf_.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp033xirf_.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp033xirf_.cpp: In function 'int main()':\n/tmp/tmp033xirf_.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp033xirf_.cpp:2:\n/tmp/tmp033xirf_.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp033xirf_.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp033xirf_.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp033xirf_.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
