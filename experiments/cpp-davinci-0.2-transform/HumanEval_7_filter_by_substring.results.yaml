language: cpp
name: HumanEval_7_filter_by_substring
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptt9rgc6h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmptt9rgc6h.cpp:10:15: error: 'string' does not name a type\n     for (auto\
    \ string : strings) {\n               ^\n/tmp/tmptt9rgc6h.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmptt9rgc6h.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmptt9rgc6h.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmptt9rgc6h.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmptt9rgc6h.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmptt9rgc6h.cpp: In function 'int main()':\n/tmp/tmptt9rgc6h.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptt9rgc6h.cpp:2:\n/tmp/tmptt9rgc6h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmptt9rgc6h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmptt9rgc6h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    for\
    \ (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            res.push_back(s);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp033xirf_.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp033xirf_.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp033xirf_.cpp: In function 'int main()':\n/tmp/tmp033xirf_.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp033xirf_.cpp:2:\n/tmp/tmp033xirf_.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp033xirf_.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp033xirf_.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp033xirf_.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered_strings;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp1_yvvae.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcwrsd2hz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvl5g_y86.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvl5g_y86.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps5bz6ery.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    for\
    \ (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            res.push_back(s);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp033xirf_.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp033xirf_.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp033xirf_.cpp: In function 'int main()':\n/tmp/tmp033xirf_.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp033xirf_.cpp:2:\n/tmp/tmp033xirf_.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp033xirf_.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp033xirf_.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp033xirf_.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptt9rgc6h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmptt9rgc6h.cpp:10:15: error: 'string' does not name a type\n     for (auto\
    \ string : strings) {\n               ^\n/tmp/tmptt9rgc6h.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmptt9rgc6h.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmptt9rgc6h.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmptt9rgc6h.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmptt9rgc6h.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmptt9rgc6h.cpp: In function 'int main()':\n/tmp/tmptt9rgc6h.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptt9rgc6h.cpp:2:\n/tmp/tmptt9rgc6h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmptt9rgc6h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmptt9rgc6h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps5bz6ery.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps5bz6ery.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcwrsd2hz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg3pruyj6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcwrsd2hz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps5bz6ery.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptn2bk89e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps5bz6ery.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered_strings;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp1_yvvae.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            res.push_back(strings[i]);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa7x0adbd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps5bz6ery.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps5bz6ery.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    for\
    \ (auto s : strings) {\n        if (s.find(substring) != std::string::npos) {\n\
    \            res.push_back(s);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp369dwazo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptt9rgc6h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmptt9rgc6h.cpp:10:15: error: 'string' does not name a type\n     for (auto\
    \ string : strings) {\n               ^\n/tmp/tmptt9rgc6h.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmptt9rgc6h.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmptt9rgc6h.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmptt9rgc6h.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmptt9rgc6h.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmptt9rgc6h.cpp: In function 'int main()':\n/tmp/tmptt9rgc6h.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptt9rgc6h.cpp:2:\n/tmp/tmptt9rgc6h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmptt9rgc6h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmptt9rgc6h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> result;\n  for\
    \ (std::string s : strings) {\n    if (s.find(substring) != std::string::npos)\
    \ {\n      result.push_back(s);\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfyont38h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> ans;\n    for\
    \ (auto s : strings) {\n        if (s.find(substring) != std::string::npos) {\n\
    \            ans.push_back(s);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3b_kcblh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg3pruyj6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps5bz6ery.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps5bz6ery.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps5bz6ery.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps5bz6ery.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    for\
    \ (auto s : strings) {\n        if (s.find(substring) != std::string::npos) {\n\
    \            res.push_back(s);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp369dwazo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered_strings;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp1_yvvae.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps5bz6ery.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp34l9nx6i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> result;\n  for\
    \ (std::string s : strings) {\n    if (s.find(substring) != std::string::npos)\
    \ {\n      result.push_back(s);\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfyont38h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps5bz6ery.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps5bz6ery.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptt9rgc6h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmptt9rgc6h.cpp:10:15: error: 'string' does not name a type\n     for (auto\
    \ string : strings) {\n               ^\n/tmp/tmptt9rgc6h.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmptt9rgc6h.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmptt9rgc6h.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmptt9rgc6h.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmptt9rgc6h.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmptt9rgc6h.cpp: In function 'int main()':\n/tmp/tmptt9rgc6h.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptt9rgc6h.cpp:2:\n/tmp/tmptt9rgc6h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmptt9rgc6h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmptt9rgc6h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcwrsd2hz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps5bz6ery.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    for\
    \ (auto s : strings) {\n        if (s.find(substring) != std::string::npos) {\n\
    \            res.push_back(s);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp369dwazo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto i = strings.begin(); i != strings.end(); i++) {\n        if (i->find(substring)\
    \ != std::string::npos) {\n            result.push_back(*i);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnhcygf6c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto i = strings.begin(); i != strings.end(); i++) {\n        if (i->find(substring)\
    \ != std::string::npos) {\n            result.push_back(*i);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnhcygf6c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptt9rgc6h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmptt9rgc6h.cpp:10:15: error: 'string' does not name a type\n     for (auto\
    \ string : strings) {\n               ^\n/tmp/tmptt9rgc6h.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmptt9rgc6h.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmptt9rgc6h.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmptt9rgc6h.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmptt9rgc6h.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmptt9rgc6h.cpp: In function 'int main()':\n/tmp/tmptt9rgc6h.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptt9rgc6h.cpp:2:\n/tmp/tmptt9rgc6h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmptt9rgc6h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmptt9rgc6h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    for\
    \ (auto s : strings) {\n        if (s.find(substring) != std::string::npos) {\n\
    \            res.push_back(s);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp369dwazo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    for\
    \ (auto s : strings) {\n        if (s.find(substring) != std::string::npos) {\n\
    \            res.push_back(s);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp369dwazo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ljxjvkq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp1ljxjvkq.cpp:10:26: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (std::string s : strings) {\n                         \
    \ ^\n/tmp/tmp1ljxjvkq.cpp: In function 'int main()':\n/tmp/tmp1ljxjvkq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ljxjvkq.cpp:2:\n/tmp/tmp1ljxjvkq.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1ljxjvkq.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1ljxjvkq.cpp:20:176: warning: extended initializer lists only\
    \ available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    for\
    \ (auto s : strings) {\n        if (s.find(substring) != std::string::npos) {\n\
    \            res.push_back(s);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp369dwazo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748500
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxcnkmww.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpsxcnkmww.cpp:10:15: error: 's' does not name a type\n     for (auto s\
    \ : strings) {\n               ^\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ';'\
    \ before 'return'\n     return result;\n     ^\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsxcnkmww.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpsxcnkmww.cpp: In function 'int main()':\n/tmp/tmpsxcnkmww.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = filter_by_substring;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxcnkmww.cpp:2:\n/tmp/tmpsxcnkmww.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpsxcnkmww.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpsxcnkmww.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::st"
  stdout: ''
