name: HumanEval_24_largest_divisor
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find\
  \ the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n\
  // (5)\nlong largest_divisor(long n) {\n"
tests: "}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
  \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n\
  \    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
completions: ["    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) {\n\
    \        if (n % i == 0) {\n            largest_divisor = i;\n        }\n    }\n\
    \    return largest_divisor;", "    long i = n - 1;\n    while (i > 0) {\n   \
    \     if (n % i == 0) {\n            return i;\n        }\n        i--;\n    }\n\
    \    return 0;", "    // your code here\n    return 0;", "    assert(n >= 1);\n\
    \    long largest = 1;\n    for (long i = 2; i < n; i++) {\n        if (n % i\
    \ == 0) {\n            largest = i;\n        }\n    }\n    return largest;", " \
    \   long largest_divisor = 1;\n    for (long i = 2; i < n; i++) {\n        if\
    \ (n % i == 0) {\n            largest_divisor = i;\n        }\n    }\n    return\
    \ largest_divisor;", "    long i;\n    for (i = n - 1; i > 0; i--) {\n       \
    \ if (n % i == 0) {\n            return i;\n        }\n    }\n    return i;",
  "    long i = n - 1;\n    while (i > 0) {\n        if (n % i == 0) {\n         \
    \   return i;\n        }\n        i--;\n    }\n    return i;", "    // your code\
    \ here\n    long i;\n    for(i=n-1;i>0;i--)\n    {\n        if(n%i==0)\n     \
    \   {\n            return i;\n        }\n    }", "    // your code here\n    long\
    \ largest = 0;\n    for(long i = 1; i < n; i++){\n        if(n % i == 0){\n  \
    \          largest = i;\n        }\n    }\n    return largest;", "    // your\
    \ code here\n    long i;\n    for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n\
    \        {\n            return i;\n        }\n    }", "    for (long i = n - 1;\
    \ i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n\
    \    }\n    return 0;", "    if (n == 1) {\n        return 1;\n    }\n    for\
    \ (long i = n - 1; i > 0; i--) {\n        if (n % i == 0) {\n            return\
    \ i;\n        }\n    }\n    return 1;", "    long largest_divisor = 1;\n    for\
    \ (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;", "    long i = n - 1;\n\
    \    while (i > 0) {\n        if (n % i == 0) {\n            return i;\n     \
    \   }\n        i--;\n    }\n    return 0;", "    long largest = 0;\n    for (long\
    \ i = 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n\
    \        }\n    }\n    return largest;", "    // >>> largest_divisor((15))\n \
    \   // (5)\n    long largest_divisor = 1;\n    for (long i = 2; i < n; i++) {\n\
    \        if (n % i == 0) {\n            largest_divisor = i;\n        }\n    }\n\
    \    return largest_divisor;", "    long largest_divisor = 1;\n    for (long i\
    \ = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor =\
    \ i;\n        }\n    }\n    return largest_divisor;", "    long largest = 1;\n\
    \    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest\
    \ = i;\n        }\n    }\n    return largest;", "    long i;\n    for (i = n-1;\
    \ i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n\
    \    }\n    return 0;", "    // your code here\n    long i;\n    for(i=n-1;i>=1;i--)\n\
    \    {\n        if(n%i==0)\n        {\n            return i;\n        }\n    }"]
stop_tokens:
- "\n}"
