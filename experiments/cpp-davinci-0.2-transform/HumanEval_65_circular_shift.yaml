name: HumanEval_65_circular_shift
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
  \ of the integer x, shift the digits right by shift\n// and return the result as\
  \ a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift((12),\
  \ (1))\n// (\"21\")\n// >>> circular_shift((12), (2))\n// (\"12\")\nstd::string\
  \ circular_shift(long x, long shift) {\n"
tests: "}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
  \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
  \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
  \ (101)) == (\"11\"));\n}\n"
completions: ["    std::string s = std::to_string(x);\n    std::reverse(s.begin(),\
    \ s.end());\n    if (shift > s.size()) {\n        return s;\n    }\n    return\
    \ s.substr(0, shift) + s.substr(shift);", "    std::string s = std::to_string(x);\n\
    \    std::string result = \"\";\n    if (shift > s.length()) {\n        for (int\
    \ i = s.length() - 1; i >= 0; i--) {\n            result += s[i];\n        }\n\
    \    } else {\n        for (int i = shift; i < s.length(); i++) {\n          \
    \  result += s[i];\n        }\n        for (int i = 0; i < shift; i++) {\n   \
    \         result += s[i];\n        }\n    }\n    return result;", "    std::string\
    \ s = std::to_string(x);\n    if (shift >= s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string str = std::to_string(x);\n    if (shift > str.length())\
    \ {\n        std::reverse(str.begin(), str.end());\n        return str;\n    }\n\
    \    std::rotate(str.begin(), str.begin() + shift, str.end());\n    return str;",
  "  std::string result;\n  std::stringstream ss;\n  ss << x;\n  std::string s = ss.str();\n\
    \  if (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return\
    \ s;\n  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;",
  "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "  std::string s = std::to_string(x);\n  std::reverse(s.begin(),\
    \ s.end());\n  if (shift > s.size()) {\n    return s;\n  }\n  std::string result\
    \ = s.substr(0, shift);\n  std::reverse(result.begin(), result.end());\n  result\
    \ += s.substr(shift);\n  return result;", "    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string a = s.substr(0, shift);\n    std::string b = s.substr(shift,\
    \ s.size() - shift);\n    return b + a;", "    // TODO: Write your code here\n\
    \    std::string str = std::to_string(x);\n    if(shift > str.length()) {\n  \
    \      std::reverse(str.begin(), str.end());\n        return str;\n    }\n   \
    \ std::rotate(str.begin(), str.begin() + shift, str.end());\n    return str;",
  "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    std::reverse(s.begin(),\
    \ s.end());\n    if (shift > s.size()) {\n        return s;\n    }\n    std::string\
    \ prefix = s.substr(0, shift);\n    std::string suffix = s.substr(shift);\n  \
    \  return suffix + prefix;", "    std::string s = std::to_string(x);\n    if (shift\
    \ > s.size()) {\n        std::reverse(s.begin(), s.end());\n        return s;\n\
    \    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;",
  "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "  std::string s = std::to_string(x);\n  if (shift > s.size())\
    \ {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n  return s;", "    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string result = s.substr(0, shift);\n    std::reverse(result.begin(),\
    \ result.end());\n    result += s.substr(shift);\n    return result;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string str = std::to_string(x);\n    std::reverse(str.begin(),\
    \ str.end());\n    if (shift > str.size()) {\n        return str;\n    }\n   \
    \ std::string left = str.substr(0, shift);\n    std::string right = str.substr(shift,\
    \ str.size() - shift);\n    std::reverse(left.begin(), left.end());\n    std::reverse(right.begin(),\
    \ right.end());\n    return left + right;", "    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string result = s.substr(0, shift);\n    std::reverse(result.begin(),\
    \ result.end());\n    result += s.substr(shift);\n    return result;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::string s1 = s.substr(s.size()\
    \ - shift, shift);\n    std::string s2 = s.substr(0, s.size() - shift);\n    return\
    \ s1 + s2;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ str = std::to_string(x);\n    if (shift > str.length()) {\n        std::reverse(str.begin(),\
    \ str.end());\n        return str;\n    }\n    std::rotate(str.begin(), str.begin()\
    \ + shift, str.end());\n    return str;", "  std::string s = std::to_string(x);\n\
    \  if (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return\
    \ s;\n  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;",
  "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "  std::string s = std::to_string(x);\n  std::reverse(s.begin(),\
    \ s.end());\n  if (shift > s.size()) {\n    return s;\n  }\n  std::string s1 =\
    \ s.substr(0, shift);\n  std::string s2 = s.substr(shift);\n  std::reverse(s1.begin(),\
    \ s1.end());\n  std::reverse(s2.begin(), s2.end());\n  return s2 + s1;", "   \
    \ std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "  std::string s = std::to_string(x);\n  if (shift > s.size())\
    \ {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n  return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "  std::string\
    \ s = std::to_string(x);\n  std::string result = \"\";\n  if (shift > s.length())\
    \ {\n    for (int i = s.length() - 1; i >= 0; i--) {\n      result += s[i];\n\
    \    }\n    return result;\n  }\n  result = s.substr(s.length() - shift, shift);\n\
    \  result += s.substr(0, s.length() - shift);\n  return result;", "    std::string\
    \ s = std::to_string(x);\n    std::string result = \"\";\n    if (shift > s.length())\
    \ {\n        for (int i = s.length() - 1; i >= 0; i--) {\n            result +=\
    \ s[i];\n        }\n    } else {\n        for (int i = s.length() - shift; i <\
    \ s.length(); i++) {\n            result += s[i];\n        }\n        for (int\
    \ i = 0; i < s.length() - shift; i++) {\n            result += s[i];\n       \
    \ }\n    }\n    return result;", "    std::string s = std::to_string(x);\n   \
    \ if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n       \
    \ return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "  std::string s = std::to_string(x);\n  if (shift > s.size())\
    \ {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n  return s;", "    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string a = s.substr(0, shift);\n    std::string b = s.substr(shift,\
    \ s.size() - shift);\n    std::reverse(a.begin(), a.end());\n    std::reverse(b.begin(),\
    \ b.end());\n    return b + a;", "    std::string s = std::to_string(x);\n   \
    \ std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string s1 = s.substr(0, shift);\n    std::string s2 = s.substr(shift,\
    \ s.size() - shift);\n    std::reverse(s1.begin(), s1.end());\n    std::reverse(s2.begin(),\
    \ s2.end());\n    return s2 + s1;", "  std::string s = std::to_string(x);\n  if\
    \ (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return s;\n\
    \  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;", " \
    \   std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "  std::string s = std::to_string(x);\n  std::reverse(s.begin(),\
    \ s.end());\n  if (shift > s.size()) {\n    return s;\n  }\n  std::string first\
    \ = s.substr(0, shift);\n  std::string second = s.substr(shift);\n  std::reverse(first.begin(),\
    \ first.end());\n  std::reverse(second.begin(), second.end());\n  return first\
    \ + second;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::string s1 = s.substr(s.size() - shift, shift);\n    std::string s2 = s.substr(0,\
    \ s.size() - shift);\n    return s1 + s2;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    std::reverse(s.begin(),\
    \ s.end());\n    if (shift > s.size()) {\n        return s;\n    }\n    std::string\
    \ first = s.substr(0, shift);\n    std::string second = s.substr(shift);\n   \
    \ std::reverse(first.begin(), first.end());\n    std::reverse(second.begin(),\
    \ second.end());\n    return second + first;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "  std::string s = std::to_string(x);\n  if (shift > s.size())\
    \ {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n  return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::string result = s.substr(shift) + s.substr(0,\
    \ shift);\n    return result;", "    std::string s = std::to_string(x);\n    if\
    \ (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n        return\
    \ s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n    return\
    \ s;", "    std::string s = std::to_string(x);\n    std::string result;\n    if\
    \ (shift > s.size()) {\n        for (int i = s.size() - 1; i >= 0; i--) {\n  \
    \          result += s[i];\n        }\n    } else {\n        result = s.substr(shift)\
    \ + s.substr(0, shift);\n    }\n    return result;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    std::reverse(s.begin(), s.end());\n    std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    std::string result = s.substr(0, shift);\n\
    \    std::reverse(result.begin(), result.end());\n    result += s.substr(shift);\n\
    \    return result;", "\tstd::string s = std::to_string(x);\n\tif (shift > s.size())\
    \ {\n\t\tstd::reverse(s.begin(), s.end());\n\t\treturn s;\n\t}\n\tstd::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n\treturn s;", "    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    return s.substr(0, shift) + s.substr(shift);", "    std::string\
    \ str = std::to_string(x);\n    if (shift > str.length()) {\n        std::reverse(str.begin(),\
    \ str.end());\n        return str;\n    }\n    std::rotate(str.begin(), str.begin()\
    \ + shift, str.end());\n    return str;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::string s1 = s.substr(s.size()\
    \ - shift, shift);\n    std::string s2 = s.substr(0, s.size() - shift);\n    return\
    \ s1 + s2;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::string result = s.substr(shift) + s.substr(0, shift);\n    return result;",
  "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::string a = s.substr(0, shift);\n    std::string b = s.substr(shift, s.size()\
    \ - shift);\n    return b + a;", "    std::string s = std::to_string(x);\n   \
    \ if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n       \
    \ return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ result;\n    std::stringstream ss;\n    ss << x;\n    std::string s = ss.str();\n\
    \    if (shift > s.length()) {\n        std::reverse(s.begin(), s.end());\n  \
    \      return s;\n    }\n    std::string s1 = s.substr(shift, s.length() - shift);\n\
    \    std::string s2 = s.substr(0, shift);\n    result = s1 + s2;\n    return result;",
  "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "  std::string s = std::to_string(x);\n  if (shift > s.size())\
    \ {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n  return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift >= s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "  std::string s = std::to_string(x);\n  if\
    \ (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return s;\n\
    \  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;", " \
    \   std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "  std::string s = std::to_string(x);\n  if (shift > s.size())\
    \ {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n  return s;", "    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    shift = shift % s.size();\n    if\
    \ (shift == 0) {\n        return s;\n    }\n    std::string s1 = s.substr(0, shift);\n\
    \    std::string s2 = s.substr(shift);\n    std::reverse(s1.begin(), s1.end());\n\
    \    std::reverse(s2.begin(), s2.end());\n    return s1 + s2;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string str = std::to_string(x);\n\
    \    if (shift > str.length()) {\n        std::reverse(str.begin(), str.end());\n\
    \        return str;\n    }\n    std::rotate(str.begin(), str.begin() + shift,\
    \ str.end());\n    return str;", "    std::string s = std::to_string(x);\n   \
    \ if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n       \
    \ return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    std::reverse(s.begin(), s.end());\n    if (shift\
    \ > s.size()) {\n        return s;\n    }\n    std::string s1 = s.substr(0, shift);\n\
    \    std::string s2 = s.substr(shift, s.size() - shift);\n    std::reverse(s1.begin(),\
    \ s1.end());\n    std::reverse(s2.begin(), s2.end());\n    return s2 + s1;", " \
    \   std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    std::reverse(s.begin(),\
    \ s.end());\n    std::string res = s.substr(0, shift);\n    std::reverse(res.begin(),\
    \ res.end());\n    res += s.substr(shift);\n    return res;", "    std::string\
    \ s = std::to_string(x);\n    std::reverse(s.begin(), s.end());\n    if (shift\
    \ > s.size()) {\n        return s;\n    }\n    std::string res = s.substr(0, shift);\n\
    \    std::reverse(res.begin(), res.end());\n    res += s.substr(shift);\n    return\
    \ res;", "    std::string s = std::to_string(x);\n    std::reverse(s.begin(),\
    \ s.end());\n    if (shift > s.size()) {\n        return s;\n    }\n    std::string\
    \ result = s.substr(0, shift);\n    std::reverse(result.begin(), result.end());\n\
    \    result += s.substr(shift);\n    return result;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ str = std::to_string(x);\n    if (shift > str.length()) {\n        std::reverse(str.begin(),\
    \ str.end());\n        return str;\n    }\n    std::string str1 = str.substr(0,\
    \ shift);\n    std::string str2 = str.substr(shift, str.length() - shift);\n \
    \   return str2 + str1;", "    std::string s = std::to_string(x);\n    if (shift\
    \ > s.size()) {\n        std::reverse(s.begin(), s.end());\n        return s;\n\
    \    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;",
  "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::string result = s.substr(shift)\
    \ + s.substr(0, shift);\n    return result;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ result;\n    std::stringstream ss;\n    ss << x;\n    result = ss.str();\n \
    \   if (shift > result.length()) {\n        std::reverse(result.begin(), result.end());\n\
    \        return result;\n    }\n    std::string first = result.substr(0, shift);\n\
    \    std::string second = result.substr(shift, result.length() - shift);\n   \
    \ result = second + first;\n    return result;", "    std::string str = std::to_string(x);\n\
    \    if (shift > str.length()) {\n        std::reverse(str.begin(), str.end());\n\
    \        return str;\n    }\n    std::rotate(str.begin(), str.begin() + shift,\
    \ str.end());\n    return str;", "    std::string s = std::to_string(x);\n   \
    \ if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n       \
    \ return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    std::reverse(s.begin(),\
    \ s.end());\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n    return\
    \ s;", "    std::string s = std::to_string(x);\n    std::reverse(s.begin(), s.end());\n\
    \    if (shift > s.size()) {\n        return s;\n    }\n    std::string res =\
    \ s.substr(0, shift);\n    std::reverse(res.begin(), res.end());\n    res += s.substr(shift);\n\
    \    return res;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    std::reverse(s.begin(), s.end());\n    if (shift\
    \ > s.size()) {\n        return s;\n    }\n    std::rotate(s.begin(), s.begin()\
    \ + shift, s.end());\n    return s;", "    std::string result;\n    std::stringstream\
    \ ss;\n    ss << x;\n    std::string s = ss.str();\n    if (shift > s.length())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ result = s.substr(shift, s.length() - shift);\n    result += s.substr(0, shift);\n\
    \    return result;", "    std::string s = std::to_string(x);\n    if (shift >\
    \ s.size()) {\n        std::reverse(s.begin(), s.end());\n        return s;\n\
    \    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;",
  "  std::string str = std::to_string(x);\n  if (shift > str.length()) {\n    std::reverse(str.begin(),\
    \ str.end());\n    return str;\n  }\n  std::string first = str.substr(0, shift);\n\
    \  std::string second = str.substr(shift, str.length() - shift);\n  return second\
    \ + first;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift >= s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ str = std::to_string(x);\n    if (shift > str.length()) {\n        std::reverse(str.begin(),\
    \ str.end());\n        return str;\n    }\n    std::rotate(str.begin(), str.begin()\
    \ + shift, str.end());\n    return str;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "  std::string\
    \ s = std::to_string(x);\n  if (shift > s.size()) {\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \  return s;", "    std::string str = std::to_string(x);\n    if (shift > str.length())\
    \ {\n        std::reverse(str.begin(), str.end());\n        return str;\n    }\n\
    \    std::rotate(str.begin(), str.begin() + shift, str.end());\n    return str;",
  "    std::string s = std::to_string(x);\n    if (shift >= s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string str = std::to_string(x);\n    if (shift > str.length())\
    \ {\n        std::reverse(str.begin(), str.end());\n        return str;\n    }\n\
    \    std::rotate(str.begin(), str.begin() + shift, str.end());\n    return str;",
  "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "  std::string s = std::to_string(x);\n  if\
    \ (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return s;\n\
    \  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;", " \
    \ std::string s = std::to_string(x);\n  if (shift > s.size()) {\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \  return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    std::reverse(s.begin(), s.end());\n    if (shift\
    \ > s.size()) {\n        return s;\n    }\n    std::string s1 = s.substr(0, shift);\n\
    \    std::string s2 = s.substr(shift, s.size() - shift);\n    return s2 + s1;",
  "    std::string s = std::to_string(x);\n    std::reverse(s.begin(), s.end());\n\
    \    if (shift > s.size()) {\n        return s;\n    }\n    std::string s1 = s.substr(0,\
    \ shift);\n    std::string s2 = s.substr(shift, s.size() - shift);\n    return\
    \ s2 + s1;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    std::reverse(s.begin(), s.end());\n    if (shift\
    \ > s.size()) {\n        return s;\n    }\n    std::string res = s.substr(0, shift);\n\
    \    std::reverse(res.begin(), res.end());\n    res += s.substr(shift);\n    return\
    \ res;", "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n\
    \        std::reverse(s.begin(), s.end());\n        return s;\n    }\n    std::string\
    \ s1 = s.substr(0, shift);\n    std::string s2 = s.substr(shift, s.size() - shift);\n\
    \    return s2 + s1;", "    std::string s = std::to_string(x);\n    if (shift\
    \ > s.size()) {\n        std::reverse(s.begin(), s.end());\n        return s;\n\
    \    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;",
  "  std::string str = std::to_string(x);\n  if (shift > str.length()) {\n    std::reverse(str.begin(),\
    \ str.end());\n    return str;\n  }\n  std::rotate(str.begin(), str.begin() +\
    \ shift, str.end());\n  return str;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    std::string result = \"\";\n    if (shift > s.length()) {\n        for (int\
    \ i = s.length() - 1; i >= 0; i--) {\n            result += s[i];\n        }\n\
    \    } else {\n        for (int i = shift; i < s.length(); i++) {\n          \
    \  result += s[i];\n        }\n        for (int i = 0; i < shift; i++) {\n   \
    \         result += s[i];\n        }\n    }\n    return result;", "  std::string\
    \ s = std::to_string(x);\n  if (shift > s.size()) {\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n  }\n  std::rotate(s.begin(), s.begin() + s.size()\
    \ - shift, s.end());\n  return s;", "\tstd::string s = std::to_string(x);\n\t\
    if (shift > s.size()) {\n\t\tstd::reverse(s.begin(), s.end());\n\t\treturn s;\n\
    \t}\n\tstd::rotate(s.begin(), s.begin() + shift, s.end());\n\treturn s;", "  \
    \  std::string str = std::to_string(x);\n    std::reverse(str.begin(), str.end());\n\
    \    if (shift > str.size()) {\n        return str;\n    }\n    std::string front\
    \ = str.substr(0, shift);\n    std::string back = str.substr(shift, str.size()\
    \ - shift);\n    return back + front;", "    std::string s = std::to_string(x);\n\
    \    std::string t = \"\";\n    for (int i = 0; i < shift; i++) {\n        t =\
    \ t + s[s.length() - 1];\n        s.pop_back();\n    }\n    return t + s;", " \
    \   std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ str = std::to_string(x);\n    std::reverse(str.begin(), str.end());\n    std::string\
    \ result = str.substr(0, shift);\n    std::reverse(result.begin(), result.end());\n\
    \    result += str.substr(shift);\n    return result;", "    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string s1 = s.substr(0, shift);\n    std::string s2 = s.substr(shift,\
    \ s.size() - shift);\n    return s2 + s1;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    std::reverse(s.begin(), s.end());\n    if (shift\
    \ > s.size()) {\n        return s;\n    }\n    std::string result = s.substr(0,\
    \ shift);\n    std::reverse(result.begin(), result.end());\n    result += s.substr(shift);\n\
    \    return result;", "    std::string s = std::to_string(x);\n    if (shift >\
    \ s.size()) {\n        std::reverse(s.begin(), s.end());\n        return s;\n\
    \    }\n    std::string s1 = s.substr(0, shift);\n    std::string s2 = s.substr(shift,\
    \ s.size() - shift);\n    return s2 + s1;", "    std::string str = std::to_string(x);\n\
    \    std::reverse(str.begin(), str.end());\n    if (shift > str.size()) {\n  \
    \      return str;\n    }\n    std::string str1 = str.substr(0, shift);\n    std::string\
    \ str2 = str.substr(shift, str.size() - shift);\n    return str2 + str1;", " \
    \   std::string str = std::to_string(x);\n    std::reverse(str.begin(), str.end());\n\
    \    if (shift > str.size()) {\n        return str;\n    }\n    std::string str1\
    \ = str.substr(0, shift);\n    std::string str2 = str.substr(shift, str.size()\
    \ - shift);\n    std::reverse(str1.begin(), str1.end());\n    std::reverse(str2.begin(),\
    \ str2.end());\n    return str1 + str2;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "  std::string\
    \ s = std::to_string(x);\n  std::reverse(s.begin(), s.end());\n  if (shift > s.size())\
    \ {\n    return s;\n  }\n  std::string res = s.substr(0, shift);\n  std::reverse(res.begin(),\
    \ res.end());\n  res += s.substr(shift);\n  return res;", "    std::string s =\
    \ std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string str = std::to_string(x);\n    if (shift > str.length())\
    \ {\n        std::reverse(str.begin(), str.end());\n        return str;\n    }\n\
    \    std::rotate(str.begin(), str.begin() + shift, str.end());\n    return str;",
  "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    return s.substr(0, shift) + s.substr(shift);", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "  std::string s = std::to_string(x);\n  if\
    \ (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return s;\n\
    \  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;", " \
    \ std::string s = std::to_string(x);\n  if (shift > s.size()) {\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \  return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    std::reverse(s.begin(), s.end());\n    if (shift\
    \ > s.size()) {\n        return s;\n    }\n    std::string s1 = s.substr(0, shift);\n\
    \    std::string s2 = s.substr(shift, s.size() - shift);\n    std::reverse(s1.begin(),\
    \ s1.end());\n    std::reverse(s2.begin(), s2.end());\n    return s2 + s1;", " \
    \   std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "  std::string s = std::to_string(x);\n  if\
    \ (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return s;\n\
    \  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;", " \
    \   std::string s = std::to_string(x);\n    if (shift >= s.size()) {\n       \
    \ std::reverse(s.begin(), s.end());\n        return s;\n    }\n    std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string str = std::to_string(x);\n    if (shift > str.length())\
    \ {\n        std::reverse(str.begin(), str.end());\n        return str;\n    }\n\
    \    std::rotate(str.begin(), str.begin() + shift, str.end());\n    return str;",
  "    std::string s = std::to_string(x);\n    std::reverse(s.begin(), s.end());\n\
    \    std::string result = s.substr(0, shift);\n    std::reverse(result.begin(),\
    \ result.end());\n    result += s.substr(shift);\n    return result;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "  std::string s = std::to_string(x);\n  if\
    \ (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return s;\n\
    \  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;", " \
    \   std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    std::reverse(s.begin(),\
    \ s.end());\n    std::string result = s.substr(0, shift);\n    std::reverse(result.begin(),\
    \ result.end());\n    result += s.substr(shift);\n    return result;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string prefix = s.substr(0, shift);\n    std::string suffix\
    \ = s.substr(shift);\n    return suffix + prefix;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::string s1 = s.substr(0, shift);\n\
    \    std::string s2 = s.substr(shift, s.size() - shift);\n    return s2 + s1;",
  "    std::string x_str = std::to_string(x);\n    if (shift > x_str.size()) {\n \
    \       std::reverse(x_str.begin(), x_str.end());\n        return x_str;\n   \
    \ }\n    std::string x_str_shifted = x_str.substr(x_str.size() - shift, shift);\n\
    \    x_str_shifted += x_str.substr(0, x_str.size() - shift);\n    return x_str_shifted;",
  "    std::string s = std::to_string(x);\n    std::reverse(s.begin(), s.end());\n\
    \    if (shift > s.size()) {\n        return s;\n    }\n    std::string s1 = s.substr(0,\
    \ shift);\n    std::string s2 = s.substr(shift, s.size() - shift);\n    return\
    \ s2 + s1;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;"]
stop_tokens:
- "\n}"
