language: cpp
name: HumanEval_118_get_closest_vowel
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp1dv7ng60: /tmp/tmp1dv7ng60.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpl4iqz8oe: /tmp/tmpl4iqz8oe.cpp:34: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpyi6v25ix: /tmp/tmpyi6v25ix.cpp:34: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp6f0aj45c: /tmp/tmp6f0aj45c.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int pos = word.length() - 1;\n    while (pos >= 0) {\n        if (vowels.find(word[pos])\
    \ != std::string::npos) {\n            if (pos == 0) {\n                return\
    \ \"\";\n            }\n            if (vowels.find(word[pos - 1]) == std::string::npos)\
    \ {\n                return word.substr(pos, 1);\n            }\n        }\n \
    \       pos--;\n    }\n    return \"\";\n}\nint main() {\n    auto candidate =\
    \ get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp2yezs0it: /tmp/tmp2yezs0it.cpp:39: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpl4iqz8oe: /tmp/tmpl4iqz8oe.cpp:34: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // your code here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = word.length()\
    \ - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n      \
    \  index--;\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpbl96grqh: /tmp/tmpbl96grqh.cpp:35: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Your code here\n    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            result = word[i];\n            break;\n        }\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n \
    \   assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpq7fcflhj: /tmp/tmpq7fcflhj.cpp:33: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpl4iqz8oe: /tmp/tmpl4iqz8oe.cpp:34: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int len = word.length();\n    for (int\
    \ i = len - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            result = word[i];\n            break;\n        }\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n \
    \   assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp5j064lsh: /tmp/tmp5j064lsh.cpp:33: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int len = word.length();\n    int i = len - 1;\n    while (i >= 0) {\n\
    \        if (vowels.find(word[i]) != std::string::npos) {\n            int j =\
    \ i - 1;\n            while (j >= 0) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    j--;\n                } else {\n\
    \                    break;\n                }\n            }\n            if\
    \ (j >= 0) {\n                return word.substr(i, 1);\n            }\n     \
    \   }\n        i--;\n    }\n    return \"\";\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp7k_w2jky: /tmp/tmp7k_w2jky.cpp:45: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    int n = word.length();\n    int i\
    \ = n-1;\n    while(i>=0){\n        if(word[i] == 'a' || word[i] == 'e' || word[i]\
    \ == 'i' || word[i] == 'o' || word[i] == 'u'){\n            if(i == n-1){\n  \
    \              return \"\";\n            }\n            if(word[i+1] == 'a' ||\
    \ word[i+1] == 'e' || word[i+1] == 'i' || word[i+1] == 'o' || word[i+1] == 'u'){\n\
    \                return \"\";\n            }\n            return word.substr(i,1);\n\
    \        }\n        i--;\n    }\n    return \"\";\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp00eqtgli: /tmp/tmp00eqtgli.cpp:38: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    int closest_vowel_index = -1;\n    int closest_vowel_distance = -1;\n   \
    \ for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) !=\
    \ std::string::npos) {\n            int vowel_index = vowels.find(word[i]);\n\
    \            int distance = 0;\n            for (int j = i + 1; j < word.size();\
    \ j++) {\n                if (vowels.find(word[j]) != std::string::npos) {\n \
    \                   break;\n                }\n                distance++;\n \
    \           }\n            if (distance > 0 && (closest_vowel_distance == -1 ||\
    \ distance < closest_vowel_distance)) {\n                closest_vowel_distance\
    \ = distance;\n                closest_vowel_index = vowel_index;\n          \
    \  }\n        }\n    }\n    if (closest_vowel_index == -1) {\n        return \"\
    \";\n    }\n    return vowels.substr(closest_vowel_index, 1);\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmptc8dk2iv: /tmp/tmptc8dk2iv.cpp:44: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpl4iqz8oe: /tmp/tmpl4iqz8oe.cpp:34: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    for (int i = word.length() - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   result = word[i];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpm246qi5w: /tmp/tmpm246qi5w.cpp:32: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int i = word.length() - 1;\n    while (i\
    \ >= 0) {\n        if (consonants.find(word[i]) != std::string::npos) {\n    \
    \        if (i == word.length() - 1) {\n                return result;\n     \
    \       }\n            else {\n                int j = i + 1;\n              \
    \  while (j < word.length()) {\n                    if (vowels.find(word[j]) !=\
    \ std::string::npos) {\n                        result = word[j];\n          \
    \              return result;\n                    }\n                    j++;\n\
    \                }\n                return result;\n            }\n        }\n\
    \        i--;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpf_zkdof3: /tmp/tmpf_zkdof3.cpp:45: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int pos = word.length() - 1;\n    while (pos >= 0) {\n        if (vowels.find(word[pos])\
    \ != std::string::npos) {\n            if (pos == 0) {\n                return\
    \ \"\";\n            }\n            if (vowels.find(word[pos - 1]) == std::string::npos)\
    \ {\n                return word.substr(pos, 1);\n            }\n        }\n \
    \       pos--;\n    }\n    return \"\";\n}\nint main() {\n    auto candidate =\
    \ get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp2yezs0it: /tmp/tmp2yezs0it.cpp:39: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n  \
    \  for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (closest_vowel_index == -1) {\n    \
    \            closest_vowel_index = i;\n                closest_vowel = word[i];\n\
    \            } else {\n                if (i + 1 < closest_vowel_index) {\n  \
    \                  closest_vowel_index = i;\n                    closest_vowel\
    \ = word[i];\n                }\n            }\n        }\n    }\n    return closest_vowel;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp5hbwoswi: /tmp/tmp5hbwoswi.cpp:38: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpl4iqz8oe: /tmp/tmpl4iqz8oe.cpp:34: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int n = word.length();\n    int i = n - 1;\n    while(i >= 0) {\n     \
    \   if(vowels.find(word[i]) != std::string::npos) {\n            if(i == n - 1)\
    \ {\n                return \"\";\n            }\n            if(vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n                return word.substr(i, 1);\n \
    \           }\n        }\n        i--;\n    }\n    return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmprav_varx: /tmp/tmprav_varx.cpp:38: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    int len = word.length();\n    for (int i = len - 1; i >= 0; i--) {\n    \
    \    if (vowels.find(word[i]) != std::string::npos) {\n            if (i == len\
    \ - 1) {\n                return \"\";\n            }\n            if (vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n                return word.substr(i, 1);\n \
    \           }\n        }\n    }\n    return \"\";\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpoluixmsg: /tmp/tmpoluixmsg.cpp:36: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    int min_distance =\
    \ INT_MAX;\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int j = i - 1;\n            while (j >=\
    \ 0 && vowels.find(word[j]) != std::string::npos) {\n                j--;\n  \
    \          }\n            if (j >= 0) {\n                int distance = i - j;\n\
    \                if (distance < min_distance) {\n                    min_distance\
    \ = distance;\n                    index = i;\n                }\n           \
    \ }\n        }\n    }\n    if (index != -1) {\n        result = word[index];\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpoig0fw1_: /tmp/tmpoig0fw1_.cpp:44: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int pos = word.length() - 1;\n    while (pos >= 0) {\n        if (vowels.find(word[pos])\
    \ != std::string::npos) {\n            if (pos == 0) {\n                return\
    \ \"\";\n            }\n            if (vowels.find(word[pos - 1]) == std::string::npos)\
    \ {\n                return word.substr(pos, 1);\n            }\n        }\n \
    \       pos--;\n    }\n    return \"\";\n}\nint main() {\n    auto candidate =\
    \ get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp2yezs0it: /tmp/tmp2yezs0it.cpp:39: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int last_vowel_index = -1;\n    for (int\
    \ i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            last_vowel_index = i;\n            break;\n        }\n    }\n\
    \    if (last_vowel_index == -1) {\n        return result;\n    }\n    for (int\
    \ i = last_vowel_index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) ==\
    \ std::string::npos) {\n            result = word[last_vowel_index];\n       \
    \     break;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmplckmwi0b: /tmp/tmplckmwi0b.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n   \
    \     if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpp8lut3ua: /tmp/tmpp8lut3ua.cpp:42: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int closest = word.size();\n    for (int i = 0; i < word.size(); i++) {\n\
    \        if (vowels.find(word[i]) != std::string::npos) {\n            int j =\
    \ i + 1;\n            while (j < word.size() && vowels.find(word[j]) != std::string::npos)\
    \ {\n                j++;\n            }\n            if (j < word.size()) {\n\
    \                closest = std::min(closest, j - i);\n            }\n        }\n\
    \    }\n    if (closest == word.size()) {\n        return \"\";\n    }\n    for\
    \ (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int j = i + 1;\n            while (j < word.size() && vowels.find(word[j])\
    \ != std::string::npos) {\n                j++;\n            }\n            if\
    \ (j < word.size() && j - i == closest) {\n                return std::string(1,\
    \ word[i]);\n            }\n        }\n    }\n    return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmppidc9w5b: /tmp/tmppidc9w5b.cpp:49: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Write your code here\n    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n \
    \   for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp3qumt2pm: /tmp/tmp3qumt2pm.cpp:45: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // your code here\n    return \"\"\
    ;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmptb69015i: /tmp/tmptb69015i.cpp:23: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string closest_vowel = \"\";\n    int min_distance = INT_MAX;\n  \
    \  for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = word.length() - i - 1;\n\
    \            if (distance < min_distance) {\n                min_distance = distance;\n\
    \                closest_vowel = word[i];\n            }\n        }\n    }\n \
    \   return closest_vowel;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp44wc9sbx: /tmp/tmp44wc9sbx.cpp:36: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpyn1r2x6w: /tmp/tmpyn1r2x6w.cpp:42: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int len = word.length();\n    int i = len - 1;\n    while (i > 0) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            if (vowels.find(word[i\
    \ - 1]) == std::string::npos) {\n                return word.substr(i, 1);\n \
    \           }\n        }\n        i--;\n    }\n    return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmph2ewnyo4: /tmp/tmph2ewnyo4.cpp:37: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp6f0aj45c: /tmp/tmp6f0aj45c.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n  \
    \  int closest_vowel_distance = INT_MAX;\n    for (int i = 0; i < word.length();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int distance = 0;\n            for (int j = i + 1; j < word.length(); j++)\
    \ {\n                if (vowels.find(word[j]) != std::string::npos) {\n      \
    \              break;\n                }\n                distance++;\n      \
    \      }\n            if (distance < closest_vowel_distance) {\n             \
    \   closest_vowel_distance = distance;\n                closest_vowel_index =\
    \ i;\n            }\n        }\n    }\n    if (closest_vowel_index != -1) {\n\
    \        closest_vowel = word[closest_vowel_index];\n    }\n    return closest_vowel;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpt7zfr1zt: /tmp/tmpt7zfr1zt.cpp:44: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp1dv7ng60: /tmp/tmp1dv7ng60.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp6f0aj45c: /tmp/tmp6f0aj45c.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index > 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            if (vowels.find(word[index - 1]) == std::string::npos) {\n      \
    \          result = word[index];\n                break;\n            }\n    \
    \    }\n        index--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpjkgf5m83: /tmp/tmpjkgf5m83.cpp:38: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ != -1) {\n        for (int i = index - 1; i >= 0; i--) {\n            if (vowels.find(word[i])\
    \ == std::string::npos) {\n                result = word[index];\n           \
    \     break;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpg88e5iy6: /tmp/tmpg88e5iy6.cpp:43: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpyn1r2x6w: /tmp/tmpyn1r2x6w.cpp:42: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int len = word.length();\n    int i = len - 1;\n    while (i >= 0) {\n\
    \        if (vowels.find(word[i]) != std::string::npos) {\n            if (i ==\
    \ len - 1) {\n                return \"\";\n            }\n            if (vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n                return word.substr(i, 1);\n \
    \           }\n        }\n        i--;\n    }\n    return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpqlhotwzw: /tmp/tmpqlhotwzw.cpp:38: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n  \
    \  for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            closest_vowel = word[i];\n            closest_vowel_index\
    \ = i;\n            break;\n        }\n    }\n    if (closest_vowel_index == -1)\
    \ {\n        return \"\";\n    }\n    for (int i = closest_vowel_index - 1; i\
    \ >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n   \
    \         return closest_vowel;\n        }\n    }\n    return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp0v64puo2: /tmp/tmp0v64puo2.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpl4iqz8oe: /tmp/tmpl4iqz8oe.cpp:34: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index > 0) {\n        if (consonants.find(word[index]) != std::string::npos)\
    \ {\n            if (vowels.find(word[index - 1]) != std::string::npos) {\n  \
    \              result = word[index - 1];\n                break;\n           \
    \ }\n        }\n        index--;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpb58jyw6y: /tmp/tmpb58jyw6y.cpp:37: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowel = \"aeiou\";\n\
    \    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        for (int j = 0; j < vowel.size(); j++)\
    \ {\n            if (word[i] == vowel[j]) {\n                int k = i - 1;\n\
    \                while (k >= 0) {\n                    if (vowel.find(word[k])\
    \ == std::string::npos) {\n                        k--;\n                    }\
    \ else {\n                        break;\n                    }\n            \
    \    }\n                if (k == -1) {\n                    k = i + 1;\n     \
    \               while (k < word.size()) {\n                        if (vowel.find(word[k])\
    \ == std::string::npos) {\n                            k++;\n                \
    \        } else {\n                            break;\n                      \
    \  }\n                    }\n                    if (k == word.size()) {\n   \
    \                     return result;\n                    }\n                }\n\
    \                if (min_distance > i - k) {\n                    min_distance\
    \ = i - k;\n                    result = word[i];\n                }\n       \
    \     }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp0lj28olq: /tmp/tmp0lj28olq.cpp:56: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = 0; i\
    \ < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index + 1; i < word.length();\
    \ i++) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n        index = i;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpwn1w9eop: /tmp/tmpwn1w9eop.cpp:41: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpl4iqz8oe: /tmp/tmpl4iqz8oe.cpp:34: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n\tstd::string vowels = \"aeiouAEIOU\"\
    ;\n\tint n = word.length();\n\tfor (int i = n - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i])\
    \ != std::string::npos) {\n\t\t\tif (i == n - 1) {\n\t\t\t\treturn \"\";\n\t\t\
    \t}\n\t\t\telse if (vowels.find(word[i + 1]) == std::string::npos) {\n\t\t\t\t\
    return word.substr(i, 1);\n\t\t\t}\n\t\t}\n\t}\n\treturn \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp9x4w6aiq: /tmp/tmp9x4w6aiq.cpp:36: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n  \
    \  for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (closest_vowel_index == -1) {\n    \
    \            closest_vowel_index = i;\n                closest_vowel = word[i];\n\
    \            } else {\n                if (i + 1 < closest_vowel_index) {\n  \
    \                  closest_vowel_index = i;\n                    closest_vowel\
    \ = word[i];\n                }\n            }\n        }\n    }\n    return closest_vowel;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp5hbwoswi: /tmp/tmp5hbwoswi.cpp:38: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int pos = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n     \
    \   if (vowels.find(word[i]) != std::string::npos) {\n            pos = i;\n \
    \           break;\n        }\n    }\n    if (pos == -1) {\n        return \"\"\
    ;\n    }\n    for (int i = pos - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(pos, 1);\n        }\n\
    \    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpiufe_co2: /tmp/tmpiufe_co2.cpp:42: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n\tstd::string vowels = \"aeiou\";\n\t\
    std::string result = \"\";\n\tint index = word.length() - 1;\n\twhile (index >=\
    \ 0) {\n\t\tif (vowels.find(word[index]) != std::string::npos) {\n\t\t\tresult\
    \ = word[index];\n\t\t\tbreak;\n\t\t}\n\t\tindex--;\n\t}\n\treturn result;\n}\n\
    int main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpokb8k0dd: /tmp/tmpokb8k0dd.cpp:34: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int distance = 0;\n            for (int j = i + 1; j < word.size();\
    \ j++) {\n                if (vowels.find(word[j]) != std::string::npos) {\n \
    \                   break;\n                }\n                distance++;\n \
    \           }\n            if (distance < min_distance) {\n                min_distance\
    \ = distance;\n                result = word[i];\n            }\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpx3a1stkb: /tmp/tmpx3a1stkb.cpp:40: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n\tstd::string vowels = \"aeiouAEIOU\"\
    ;\n\tstd::string result = \"\";\n\tint i = word.length() - 1;\n\twhile (i >= 0)\
    \ {\n\t\tif (vowels.find(word[i]) != std::string::npos) {\n\t\t\tresult = word[i];\n\
    \t\t\tbreak;\n\t\t}\n\t\ti--;\n\t}\n\treturn result;\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp7ue1ydck: /tmp/tmp7ue1ydck.cpp:34: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (i == word.size() - 1) {\n         \
    \       return \"\";\n            }\n            if (vowels.find(word[i + 1])\
    \ == std::string::npos) {\n                return word.substr(i, 1);\n       \
    \     }\n        }\n    }\n    return \"\";\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpuwm45au5: /tmp/tmpuwm45au5.cpp:35: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Your code here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int len = word.length();\n    for(int i = len-1;\
    \ i >= 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos) {\n  \
    \          if(i == len-1) {\n                return \"\";\n            }\n   \
    \         if(vowels.find(word[i+1]) == std::string::npos) {\n                return\
    \ word.substr(i, 1);\n            }\n        }\n    }\n    return \"\";\n}\nint\
    \ main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpqcfg7eh6: /tmp/tmpqcfg7eh6.cpp:37: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int closest_vowel_index = -1;\n    int closest_vowel_distance = INT_MAX;\n\
    \    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = word.size() - i;\n     \
    \       if (distance < closest_vowel_distance) {\n                closest_vowel_distance\
    \ = distance;\n                closest_vowel_index = i;\n            }\n     \
    \   }\n    }\n    if (closest_vowel_index == -1) {\n        return \"\";\n   \
    \ }\n    return word.substr(closest_vowel_index, 1);\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp7if_ygc7: /tmp/tmp7if_ygc7.cpp:39: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n    int distance\
    \ = 0;\n    int vowel_index = -1;\n    int consonant_index = -1;\n    for (int\
    \ i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            vowel_index = i;\n            for (int j = vowel_index + 1; j\
    \ < word.length(); j++) {\n                if (vowels.find(word[j]) == std::string::npos)\
    \ {\n                    consonant_index = j;\n                    distance =\
    \ consonant_index - vowel_index;\n                    if (distance < min_distance)\
    \ {\n                        min_distance = distance;\n                      \
    \  result = word[vowel_index];\n                    }\n                }\n   \
    \         }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp0zg40i0u: /tmp/tmp0zg40i0u.cpp:43: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Your code here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int len = word.length();\n    int i = len - 1;\n\
    \    while(i >= 0) {\n        if(vowels.find(word[i]) != std::string::npos) {\n\
    \            if(i == len - 1) {\n                return \"\";\n            }\n\
    \            if(vowels.find(word[i + 1]) == std::string::npos) {\n           \
    \     return word.substr(i, 1);\n            }\n        }\n        i--;\n    }\n\
    \    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp041_lq2j: /tmp/tmp041_lq2j.cpp:39: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n\
    \    int word_length = word.length();\n    for (int i = 0; i < word_length; i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            if\
    \ (i == 0 || i == word_length - 1) {\n                continue;\n            }\n\
    \            if (vowels.find(word[i - 1]) != std::string::npos || vowels.find(word[i\
    \ + 1]) != std::string::npos) {\n                continue;\n            }\n  \
    \          if (closest_vowel_index == -1 || i > closest_vowel_index) {\n     \
    \           closest_vowel_index = i;\n                closest_vowel = word[i];\n\
    \            }\n        }\n    }\n    return closest_vowel;\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpyn1r2x6w: /tmp/tmpyn1r2x6w.cpp:42: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    int n = word.length();\n    int i\
    \ = n-1;\n    while(i >= 0) {\n        if(word[i] == 'a' || word[i] == 'e' ||\
    \ word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {\n            if(i == n-1)\
    \ {\n                i--;\n                continue;\n            }\n        \
    \    if(word[i+1] == 'a' || word[i+1] == 'e' || word[i+1] == 'i' || word[i+1]\
    \ == 'o' || word[i+1] == 'u') {\n                i--;\n                continue;\n\
    \            }\n            return word.substr(i, 1);\n        }\n        i--;\n\
    \    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmppdlx8a1i: /tmp/tmppdlx8a1i.cpp:40: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Your code here\n    std::string\
    \ vowels = \"aeiou\";\n    int index = -1;\n    for (int i = word.length() - 1;\
    \ i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n \
    \           index = i;\n            break;\n        }\n    }\n    if (index ==\
    \ -1) {\n        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(index, 1);\n        }\n    }\n    return \"\";\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpv3degzcl: /tmp/tmpv3degzcl.cpp:43: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n\tstd::string vowels = \"aeiouAEIOU\"\
    ;\n\tstd::string result = \"\";\n\tint index = word.length() - 1;\n\twhile (index\
    \ >= 0) {\n\t\tif (vowels.find(word[index]) != std::string::npos) {\n\t\t\tresult\
    \ = word[index];\n\t\t\tbreak;\n\t\t}\n\t\tindex--;\n\t}\n\treturn result;\n}\n\
    int main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpgb4aodmt: /tmp/tmpgb4aodmt.cpp:34: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int j = i + 1;\n            while (j < word.size() && vowels.find(word[j])\
    \ != std::string::npos) {\n                j++;\n            }\n            if\
    \ (j < word.size()) {\n                int distance = j - i;\n               \
    \ if (distance < min_distance) {\n                    min_distance = distance;\n\
    \                    result = word[i];\n                }\n            }\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp50u49j1f: /tmp/tmp50u49j1f.cpp:40: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int i = word.size() - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (i == word.size() - 1) {\n         \
    \       return \"\";\n            }\n            if (vowels.find(word[i + 1])\
    \ == std::string::npos) {\n                return word.substr(i, 1);\n       \
    \     }\n        }\n        i--;\n    }\n    return \"\";\n}\nint main() {\n \
    \   auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp4qrm_od4: /tmp/tmp4qrm_od4.cpp:37: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // your code here\n    std::string\
    \ vowels = \"aeiou\";\n    std::string closest = \"\";\n    int min_distance =\
    \ INT_MAX;\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = 0;\n            for (int\
    \ j = i + 1; j < word.length(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    break;\n                }\n   \
    \             distance++;\n            }\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                closest = word[i];\n\
    \            }\n        }\n    }\n    return closest;\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp0437ddio: /tmp/tmp0437ddio.cpp:41: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // your code here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string closest_vowel = \"\";\n    int closest_vowel_index\
    \ = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (closest_vowel_index == -1) {\n    \
    \            closest_vowel_index = i;\n                closest_vowel = word[i];\n\
    \            }\n            else {\n                if (i < closest_vowel_index)\
    \ {\n                    closest_vowel_index = i;\n                    closest_vowel\
    \ = word[i];\n                }\n            }\n        }\n    }\n    return closest_vowel;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp9w0c6498: /tmp/tmp9w0c6498.cpp:40: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Write your code here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int n = word.length();\n    int i = n-1;\n   \
    \ while(i>=0){\n        if(vowels.find(word[i])!=std::string::npos){\n       \
    \     if(i==n-1){\n                return \"\";\n            }\n            else\
    \ if(vowels.find(word[i+1])!=std::string::npos){\n                return \"\"\
    ;\n            }\n            else{\n                return word.substr(i,1);\n\
    \            }\n        }\n        i--;\n    }\n    return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpc6vdf05n: /tmp/tmpc6vdf05n.cpp:42: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    int index = -1;\n    int min_distance = INT_MAX;\n    for (int i = 0; i <\
    \ word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int distance = word.size() - i;\n            if (distance < min_distance)\
    \ {\n                index = i;\n                min_distance = distance;\n  \
    \          }\n        }\n    }\n    if (index == -1) {\n        return \"\";\n\
    \    }\n    return word.substr(index, 1);\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmppl2ypw1d: /tmp/tmppl2ypw1d.cpp:39: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    if (index != -1) {\n        result = word[index];\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpz0kg2baj: /tmp/tmpz0kg2baj.cpp:42: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int len = word.length();\n    for (int\
    \ i = len - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            result = word[i];\n            break;\n        }\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n \
    \   assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp5j064lsh: /tmp/tmp5j064lsh.cpp:33: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int min_distance = word.length();\n    for\
    \ (int i = 0; i < word.length(); i++) {\n        char c = word[i];\n        if\
    \ (vowels.find(c) != std::string::npos) {\n            int j = i - 1;\n      \
    \      while (j >= 0 && vowels.find(word[j]) != std::string::npos) {\n       \
    \         j--;\n            }\n            if (j >= 0) {\n                int\
    \ k = i + 1;\n                while (k < word.length() && vowels.find(word[k])\
    \ != std::string::npos) {\n                    k++;\n                }\n     \
    \           if (k < word.length()) {\n                    int distance = k - j\
    \ - 1;\n                    if (distance < min_distance) {\n                 \
    \       min_distance = distance;\n                        result = c;\n      \
    \              }\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp5finstw4: /tmp/tmp5finstw4.cpp:47: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    for (int i = word.length() - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   result = word[i];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpm246qi5w: /tmp/tmpm246qi5w.cpp:32: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n\
    \    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            closest_vowel = word[i];\n            closest_vowel_index\
    \ = i;\n            break;\n        }\n    }\n    if (closest_vowel_index == -1)\
    \ {\n        return \"\";\n    }\n    for (int i = closest_vowel_index - 1; i\
    \ >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n   \
    \         return closest_vowel;\n        }\n    }\n    return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpgzc5vxru: /tmp/tmpgzc5vxru.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int len = word.length();\n    int i = len - 1;\n    while (i >= 0) {\n\
    \        if (vowels.find(word[i]) != std::string::npos) {\n            if (i ==\
    \ len - 1) {\n                return \"\";\n            }\n            if (vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n                return word.substr(i, 1);\n \
    \           }\n        }\n        i--;\n    }\n    return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpqlhotwzw: /tmp/tmpqlhotwzw.cpp:38: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (consonants.find(word[i]) != std::string::npos) {\n            if (i\
    \ == word.length() - 1) {\n                return \"\";\n            }\n     \
    \       for (int j = i + 1; j < word.length(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    if (index == -1) {\n        return \"\";\n    }\n    return word.substr(index,\
    \ 1);\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp0ndcd8py: /tmp/tmp0ndcd8py.cpp:42: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n  \
    \  for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            closest_vowel = word[i];\n            closest_vowel_index\
    \ = i;\n            break;\n        }\n    }\n    if (closest_vowel_index == -1)\
    \ {\n        return \"\";\n    }\n    for (int i = closest_vowel_index - 1; i\
    \ >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n   \
    \         return closest_vowel;\n        }\n    }\n    return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp0v64puo2: /tmp/tmp0v64puo2.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Write your code here\n    // To\
    \ print results to the standard output you can use std::cout\n    // Example:\
    \ std::cout << \"Hello world!\";\n    std::string vowels = \"aeiou\";\n    int\
    \ index = -1;\n    for(int i = word.length() - 1; i >= 0; i--) {\n        if(vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if(index == -1) {\n        return \"\";\n    }\n    for(int i\
    \ = index - 1; i >= 0; i--) {\n        if(vowels.find(word[i]) == std::string::npos)\
    \ {\n            return word.substr(index, 1);\n        }\n    }\n    return \"\
    \";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpvc6mxl7z: /tmp/tmpvc6mxl7z.cpp:45: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int distance = 0;\n            for (int j = i + 1; j < word.size();\
    \ j++) {\n                if (vowels.find(word[j]) != std::string::npos) {\n \
    \                   break;\n                }\n                distance++;\n \
    \           }\n            if (distance < min_distance) {\n                min_distance\
    \ = distance;\n                result = word[i];\n            }\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpx3a1stkb: /tmp/tmpx3a1stkb.cpp:40: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int len = word.length();\n    for (int i = len - 1; i >= 0; i--) {\n  \
    \      if (vowels.find(word[i]) != std::string::npos) {\n            if (i ==\
    \ len - 1 || i == 0) {\n                return \"\";\n            }\n        \
    \    if (vowels.find(word[i - 1]) == std::string::npos && vowels.find(word[i +\
    \ 1]) == std::string::npos) {\n                return word.substr(i, 1);\n   \
    \         }\n        }\n    }\n    return \"\";\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpsws48lob: /tmp/tmpsws48lob.cpp:44: int main(): Assertion `candidate(("anime"))
    == ("i")'' failed.

    '
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int pos = -1;\n    int min_pos = -1;\n\
    \    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            pos = i;\n            break;\n        }\n\
    \    }\n    if (pos == -1) {\n        return result;\n    }\n    for (int i =\
    \ pos - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            min_pos = i;\n            break;\n        }\n    }\n    if (min_pos\
    \ == -1) {\n        return result;\n    }\n    for (int i = pos + 1; i < word.length();\
    \ i++) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   if (i - pos < pos - min_pos) {\n                return result;\n         \
    \   }\n            break;\n        }\n    }\n    result = word[pos];\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpfdgr5puf: /tmp/tmpfdgr5puf.cpp:57: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060961
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (index == -1) {\n                index = i;\n            }\
    \ else {\n                if (word[index] != word[i]) {\n                    return\
    \ word[index];\n                }\n            }\n        } else {\n         \
    \   if (index != -1) {\n                return word[index];\n            }\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpufyf4wfz.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpufyf4wfz.cpp:27:38: error: could not convert \u2018word.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)index))\u2019\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   27 |                     return word[index];\n      |                  \
    \                    ^\n      |                                      |\n     \
    \ |                                      __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type {aka char}\n/tmp/tmpufyf4wfz.cpp:32:34: error: could not convert\
    \ \u2018word.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)index))\u2019\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   32 |                 return word[index];\n      |                      \
    \            ^\n      |                                  |\n      |          \
    \                        __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\
    \ {aka char}\n"
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n  // your code here\n  int len = word.length();\n\
    \  int i = len - 1;\n  while(i >= 0) {\n    if(word[i] == 'a' || word[i] == 'e'\
    \ || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {\n      if(i == len\
    \ - 1) {\n        return \"\";\n      }\n      else if(word[i + 1] == 'a' || word[i\
    \ + 1] == 'e' || word[i + 1] == 'i' || word[i + 1] == 'o' || word[i + 1] == 'u')\
    \ {\n        return \"\";\n      }\n      else {\n        return word.substr(i,\
    \ 1);\n      }\n    }\n    i--;\n  }\n  return \"\";\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp47vfi36s: /tmp/tmp47vfi36s.cpp:41: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int len = word.length();\n    int i = len - 1;\n    while (i >= 0) {\n\
    \        if (vowels.find(word[i]) != std::string::npos) {\n            if (i >\
    \ 0 && vowels.find(word[i - 1]) == std::string::npos) {\n                return\
    \ word.substr(i, 1);\n            }\n        }\n        i--;\n    }\n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpa0ute1qp: /tmp/tmpa0ute1qp.cpp:37: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int len = word.length();\n    int i = len - 1;\n    while (i >= 0) {\n\
    \        if (vowels.find(word[i]) != std::string::npos) {\n            if (i ==\
    \ len - 1) {\n                return \"\";\n            }\n            if (vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n                return word.substr(i, 1);\n \
    \           }\n        }\n        i--;\n    }\n    return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpqlhotwzw: /tmp/tmpqlhotwzw.cpp:38: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n\tstd::string vowels = \"aeiou\";\n\t\
    std::string closest_vowel = \"\";\n\tint closest_vowel_index = -1;\n\tfor (int\
    \ i = 0; i < word.length(); i++) {\n\t\tif (vowels.find(word[i]) != std::string::npos)\
    \ {\n\t\t\tif (i == 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (vowels.find(word[i\
    \ - 1]) != std::string::npos) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (i == word.length()\
    \ - 1) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (vowels.find(word[i + 1]) != std::string::npos)\
    \ {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (closest_vowel_index == -1) {\n\t\t\t\
    \tclosest_vowel_index = i;\n\t\t\t\tclosest_vowel = word[i];\n\t\t\t} else {\n\
    \t\t\t\tif (i > closest_vowel_index) {\n\t\t\t\t\tclosest_vowel_index = i;\n\t\
    \t\t\t\tclosest_vowel = word[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn closest_vowel;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Write your code here\n    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n \
    \   for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp3qumt2pm: /tmp/tmp3qumt2pm.cpp:45: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n\
    \    int closest_vowel_distance = INT_MAX;\n    for (int i = 0; i < word.length();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int distance = word.length() - i;\n            if (distance < closest_vowel_distance)\
    \ {\n                closest_vowel_distance = distance;\n                closest_vowel_index\
    \ = i;\n            }\n        }\n    }\n    if (closest_vowel_index != -1) {\n\
    \        closest_vowel = word[closest_vowel_index];\n    }\n    return closest_vowel;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpfiq03c0p: /tmp/tmpfiq03c0p.cpp:40: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int i = word.size() - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (i == word.size() - 1) {\n         \
    \       i--;\n                continue;\n            }\n            if (vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n                return word.substr(i, 1);\n \
    \           }\n        }\n        i--;\n    }\n    return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp10jj3va4: /tmp/tmp10jj3va4.cpp:38: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n\tstd::string vowels = \"aeiouAEIOU\"\
    ;\n\tstd::string result = \"\";\n\tint index = word.length() - 1;\n\twhile (index\
    \ >= 0) {\n\t\tif (vowels.find(word[index]) != std::string::npos) {\n\t\t\tresult\
    \ = word[index];\n\t\t\tbreak;\n\t\t}\n\t\tindex--;\n\t}\n\treturn result;\n}\n\
    int main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpgb4aodmt: /tmp/tmpgb4aodmt.cpp:34: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp1dv7ng60: /tmp/tmp1dv7ng60.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n\
    \    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            closest_vowel = word[i];\n            closest_vowel_index\
    \ = i;\n            break;\n        }\n    }\n    if (closest_vowel_index == -1)\
    \ {\n        return \"\";\n    }\n    for (int i = closest_vowel_index - 1; i\
    \ >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n   \
    \         return closest_vowel;\n        }\n    }\n    return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpgzc5vxru: /tmp/tmpgzc5vxru.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpyn1r2x6w: /tmp/tmpyn1r2x6w.cpp:42: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int n = word.length();\n    int i = n-1;\n    while(i >= 0) {\n       \
    \ if(consonants.find(word[i]) != std::string::npos) {\n            if(i == n-1)\
    \ {\n                return \"\";\n            }\n            else {\n       \
    \         if(vowels.find(word[i+1]) != std::string::npos) {\n                \
    \    return word.substr(i+1, 1);\n                }\n                else {\n\
    \                    return \"\";\n                }\n            }\n        }\n\
    \        i--;\n    }\n    return \"\";\n}\nint main() {\n    auto candidate =\
    \ get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpb_j1hlkj: /tmp/tmpb_j1hlkj.cpp:42: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpyi6v25ix: /tmp/tmpyi6v25ix.cpp:34: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpl4iqz8oe: /tmp/tmpl4iqz8oe.cpp:34: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // your code here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int len = word.length();\n    int i = len - 1;\n\
    \    while(i >= 0) {\n        if(vowels.find(word[i]) != std::string::npos) {\n\
    \            if(i == len - 1) {\n                return \"\";\n            }\n\
    \            if(vowels.find(word[i + 1]) == std::string::npos) {\n           \
    \     return word.substr(i, 1);\n            }\n        }\n        i--;\n    }\n\
    \    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpwc6t3w58: /tmp/tmpwc6t3w58.cpp:39: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (consonants.find(word[index]) != std::string::npos)\
    \ {\n            if (index == word.length() - 1) {\n                return result;\n\
    \            }\n            if (vowels.find(word[index + 1]) != std::string::npos)\
    \ {\n                return word.substr(index + 1, 1);\n            }\n      \
    \  }\n        index--;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp9ra0q6ur: /tmp/tmp9ra0q6ur.cpp:37: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpl4iqz8oe: /tmp/tmpl4iqz8oe.cpp:34: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpl4iqz8oe: /tmp/tmpl4iqz8oe.cpp:34: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int j = i + 1;\n            while (j < word.size() && vowels.find(word[j])\
    \ != std::string::npos) {\n                j++;\n            }\n            if\
    \ (j < word.size()) {\n                int distance = j - i;\n               \
    \ if (distance < min_distance) {\n                    min_distance = distance;\n\
    \                    result = word[i];\n                }\n            }\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpaha4nxw5: /tmp/tmpaha4nxw5.cpp:40: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n\
    \    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (i > 0 && vowels.find(word[i - 1]) ==\
    \ std::string::npos) {\n                if (closest_vowel_index == -1 || i < closest_vowel_index)\
    \ {\n                    closest_vowel_index = i;\n                    closest_vowel\
    \ = word[i];\n                }\n            }\n        }\n    }\n    return closest_vowel;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpmtnrj0eh: /tmp/tmpmtnrj0eh.cpp:35: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int n = word.length();\n    for(int i = n-1; i >= 0; i--) {\n        if(vowels.find(word[i])\
    \ != std::string::npos) {\n            if(i == n-1) {\n                return\
    \ \"\";\n            }\n            if(vowels.find(word[i+1]) == std::string::npos)\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \ }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpbrl2iwou: /tmp/tmpbrl2iwou.cpp:36: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n  \
    \  for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            closest_vowel = word[i];\n            closest_vowel_index\
    \ = i;\n            break;\n        }\n    }\n    if (closest_vowel_index == -1)\
    \ {\n        return \"\";\n    }\n    for (int i = closest_vowel_index - 1; i\
    \ >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n   \
    \         return closest_vowel;\n        }\n    }\n    return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp0v64puo2: /tmp/tmp0v64puo2.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Your code here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int n = word.length();\n    int i = n-1;\n   \
    \ while(i>=0){\n        if(vowels.find(word[i]) != std::string::npos){\n     \
    \       if(i==n-1){\n                return \"\";\n            }\n           \
    \ else if(vowels.find(word[i+1]) != std::string::npos){\n                return\
    \ \"\";\n            }\n            else{\n                return word.substr(i,1);\n\
    \            }\n        }\n        i--;\n    }\n    return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpwwqxufvr: /tmp/tmpwwqxufvr.cpp:42: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int distance = 0;\n            for (int j = i + 1; j < word.size();\
    \ j++) {\n                if (vowels.find(word[j]) != std::string::npos) {\n \
    \                   break;\n                }\n                distance++;\n \
    \           }\n            if (distance < min_distance) {\n                min_distance\
    \ = distance;\n                result = word[i];\n            }\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpx3a1stkb: /tmp/tmpx3a1stkb.cpp:40: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int len = word.length();\n    int i = len - 1;\n    int j = len - 1;\n\
    \    while (i >= 0) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            j = i;\n            break;\n        }\n        i--;\n    }\n\
    \    if (j == len - 1) {\n        return \"\";\n    }\n    while (j >= 0) {\n\
    \        if (vowels.find(word[j]) == std::string::npos) {\n            return\
    \ std::string(1, word[j + 1]);\n        }\n        j--;\n    }\n    return \"\"\
    ;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp04l3i2r7: /tmp/tmp04l3i2r7.cpp:51: int main(): Assertion `candidate(("quick"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    int len = word.length();\n    int i = len - 1;\n    while (i >= 0) {\n  \
    \      if (vowels.find(word[i]) != std::string::npos) {\n            if (i ==\
    \ len - 1) {\n                return \"\";\n            }\n            if (vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n                return word.substr(i, 1);\n \
    \           }\n        }\n        i--;\n    }\n    return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpsdzmt24q: /tmp/tmpsdzmt24q.cpp:38: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int pos = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n     \
    \   if (vowels.find(word[i]) != std::string::npos) {\n            pos = i;\n \
    \           break;\n        }\n    }\n    if (pos == -1) {\n        return \"\"\
    ;\n    }\n    for (int i = pos - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(pos, 1);\n        }\n\
    \    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpiufe_co2: /tmp/tmpiufe_co2.cpp:42: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int i = word.length() - 1;\n    while (i\
    \ >= 0) {\n        if (vowels.find(word[i]) != std::string::npos) {\n        \
    \    result = word[i];\n            break;\n        }\n        i--;\n    }\n \
    \   if (result.empty()) {\n        return result;\n    }\n    i--;\n    while\
    \ (i >= 0) {\n        if (vowels.find(word[i]) != std::string::npos) {\n     \
    \       return result;\n        }\n        i--;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpnguopwlv: /tmp/tmpnguopwlv.cpp:44: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int distance = 0;\n            for (int j = i + 1; j < word.size();\
    \ j++) {\n                if (vowels.find(word[j]) != std::string::npos) {\n \
    \                   break;\n                }\n                distance++;\n \
    \           }\n            if (distance < min_distance) {\n                min_distance\
    \ = distance;\n                result = word[i];\n            }\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpx3a1stkb: /tmp/tmpx3a1stkb.cpp:40: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // your code here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = -1;\n\
    \    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp65oa5hhp: /tmp/tmp65oa5hhp.cpp:45: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // your code here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(index, 1);\n        }\n    }\n    return \"\";\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpkq91g0jo: /tmp/tmpkq91g0jo.cpp:43: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpl4iqz8oe: /tmp/tmpl4iqz8oe.cpp:34: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    if (index == 0) {\n        return \"\";\n    }\n    int i = index\
    \ - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            return result;\n        }\n        i--;\n    }\n    return \"\
    \";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpbpgj726_: /tmp/tmpbpgj726_.cpp:46: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060963
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpyn1r2x6w: /tmp/tmpyn1r2x6w.cpp:42: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpyn1r2x6w: /tmp/tmpyn1r2x6w.cpp:42: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int n = word.length();\n    int i = n - 1;\n    while(i >= 0) {\n     \
    \   if(vowels.find(word[i]) != std::string::npos) {\n            if(i == n - 1)\
    \ {\n                return \"\";\n            }\n            if(vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n                return word.substr(i, 1);\n \
    \           }\n        }\n        i--;\n    }\n    return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmprav_varx: /tmp/tmprav_varx.cpp:38: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int i = word.size() - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (i > 0 && vowels.find(word[i - 1]) ==\
    \ std::string::npos) {\n                return word.substr(i, 1);\n          \
    \  }\n        }\n        i--;\n    }\n    return \"\";\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpxlakj7ku: /tmp/tmpxlakj7ku.cpp:36: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) return result;\n    for (int i = index; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpr8h75gik: /tmp/tmpr8h75gik.cpp:42: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowel = \"aeiou\";\n\
    \    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n   \
    \     if (vowel.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowel.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmph5onigpp: /tmp/tmph5onigpp.cpp:42: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060963
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int i = word.size() - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (i == word.size() - 1) {\n         \
    \       i--;\n                continue;\n            }\n            if (vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n                return word.substr(i, 1);\n \
    \           }\n        }\n        i--;\n    }\n    return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp10jj3va4: /tmp/tmp10jj3va4.cpp:38: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int distance = 0;\n            for (int j = i + 1; j < word.size();\
    \ j++) {\n                if (vowels.find(word[j]) != std::string::npos) {\n \
    \                   break;\n                }\n                distance++;\n \
    \           }\n            if (distance < min_distance) {\n                min_distance\
    \ = distance;\n                result = word[i];\n            }\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpx3a1stkb: /tmp/tmpx3a1stkb.cpp:40: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp1dv7ng60: /tmp/tmp1dv7ng60.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    int closest_vowel_index = -1;\n    for (int i = word.size() - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   closest_vowel_index = i;\n            break;\n        }\n    }\n    if (closest_vowel_index\
    \ == -1) {\n        return \"\";\n    }\n    for (int i = closest_vowel_index\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            return word.substr(closest_vowel_index, 1);\n        }\n    }\n\
    \    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp30l_zph_: /tmp/tmp30l_zph_.cpp:42: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n  std::string vowels = \"aeiou\";\n \
    \ std::string result = \"\";\n  int min_distance = INT_MAX;\n  for (int i = 0;\
    \ i < word.size(); i++) {\n    if (vowels.find(word[i]) != std::string::npos)\
    \ {\n      int j = i + 1;\n      while (j < word.size() && vowels.find(word[j])\
    \ != std::string::npos) {\n        j++;\n      }\n      if (j < word.size()) {\n\
    \        int distance = j - i;\n        if (distance < min_distance) {\n     \
    \     min_distance = distance;\n          result = word[i];\n        }\n     \
    \ }\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpiwtm56md: /tmp/tmpiwtm56md.cpp:40: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060963
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpl4iqz8oe: /tmp/tmpl4iqz8oe.cpp:34: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n\tstd::string vowels = \"aeiouAEIOU\"\
    ;\n\tstd::string result = \"\";\n\tint index = -1;\n\tfor (int i = word.length()\
    \ - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i]) != std::string::npos) {\n\t\
    \t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (index == -1) {\n\t\treturn result;\n\
    \t}\n\tfor (int i = index - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i]) ==\
    \ std::string::npos) {\n\t\t\tresult = word[index];\n\t\t\tbreak;\n\t\t}\n\t}\n\
    \treturn result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n \
    \   assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpr02s99td: /tmp/tmpr02s99td.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060963
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int word_size = word.size();\n    for (int i = word_size - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            if\
    \ (i == word_size - 1) {\n                return \"\";\n            }\n      \
    \      if (vowels.find(word[i + 1]) == std::string::npos) {\n                return\
    \ word.substr(i, 1);\n            }\n        }\n    }\n    return \"\";\n}\nint\
    \ main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpabmc1yrd: /tmp/tmpabmc1yrd.cpp:36: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    int index = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n     \
    \   if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpuyn1kh0c: /tmp/tmpuyn1kh0c.cpp:42: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060963
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int n = word.length();\n    for(int i = n-1; i >= 0; i--) {\n        if(vowels.find(word[i])\
    \ != std::string::npos) {\n            if(i == n-1) return \"\";\n           \
    \ if(vowels.find(word[i+1]) != std::string::npos) continue;\n            return\
    \ word.substr(i, 1);\n        }\n    }\n    return \"\";\n}\nint main() {\n  \
    \  auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpzf94bfl7: /tmp/tmpzf94bfl7.cpp:33: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060963
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (i == word.length() - 1) {\n                continue;\n  \
    \          }\n            if (vowels.find(word[i + 1]) != std::string::npos) {\n\
    \                continue;\n            }\n            index = i;\n          \
    \  break;\n        }\n    }\n    if (index != -1) {\n        result = word[index];\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpvfnid51k: /tmp/tmpvfnid51k.cpp:42: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060963
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // your code here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            result = word[i];\n            break;\n        }\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n \
    \   assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpivomyccx: /tmp/tmpivomyccx.cpp:33: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060963
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Your code goes here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int n = word.length();\n    int i = n-1;\n   \
    \ while(i>=0){\n        if(vowels.find(word[i])!=std::string::npos){\n       \
    \     if(i==n-1){\n                return \"\";\n            }\n            if(vowels.find(word[i+1])==std::string::npos){\n\
    \                return word.substr(i,1);\n            }\n        }\n        i--;\n\
    \    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpjsuzstb8: /tmp/tmpjsuzstb8.cpp:39: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060963
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int n = word.length();\n    int i = n - 1;\n    while(i >= 0 && vowels.find(word[i])\
    \ == std::string::npos) {\n        i--;\n    }\n    if(i == 0) return \"\";\n\
    \    int j = i - 1;\n    while(j >= 0 && vowels.find(word[j]) != std::string::npos)\
    \ {\n        j--;\n    }\n    if(j == n - 1) return \"\";\n    return word.substr(j\
    \ + 1, i - j);\n}\nint main() {\n    auto candidate = get_closest_vowel;\n   \
    \ assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp1ob412pq: /tmp/tmp1ob412pq.cpp:36: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060964
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int i = word.size() - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (i == word.size() - 1) {\n         \
    \       i--;\n                continue;\n            }\n            if (vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n                return word.substr(i, 1);\n \
    \           }\n        }\n        i--;\n    }\n    return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp10jj3va4: /tmp/tmp10jj3va4.cpp:38: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    int len = word.length();\n    int\
    \ i = len - 1;\n    while(i >= 0) {\n        if(word[i] == 'a' || word[i] == 'e'\
    \ || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {\n            if(i ==\
    \ len - 1) {\n                return \"\";\n            }\n            if(word[i\
    \ - 1] == 'a' || word[i - 1] == 'e' || word[i - 1] == 'i' || word[i - 1] == 'o'\
    \ || word[i - 1] == 'u') {\n                return \"\";\n            }\n    \
    \        return word.substr(i, 1);\n        }\n        i--;\n    }\n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpp76u860_: /tmp/tmpp76u860_.cpp:39: int main(): Assertion `candidate(("eAsy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060963
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp1dv7ng60: /tmp/tmp1dv7ng60.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp6f0aj45c: /tmp/tmp6f0aj45c.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp1dv7ng60: /tmp/tmp1dv7ng60.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Your code here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int index = -1;\n    int min_index = -1;\n   \
    \ for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            min_index = i;\n            break;\n  \
    \      }\n    }\n    if (min_index == -1) {\n        return \"\";\n    }\n   \
    \ return word.substr(index, 1);\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpisdoegxx: /tmp/tmpisdoegxx.cpp:45: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060964
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n\tstd::string vowels = \"aeiou\";\n\t\
    std::string result = \"\";\n\tint index = -1;\n\tfor (int i = word.length() -\
    \ 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i]) != std::string::npos) {\n\t\t\
    \tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (index == -1) {\n\t\treturn result;\n\
    \t}\n\tfor (int i = index - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i]) ==\
    \ std::string::npos) {\n\t\t\treturn word[index];\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp2a4v9ib.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpp2a4v9ib.cpp:32:21: error: could not convert \u2018word.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)index))\u2019\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   32 |    return word[index];\n      |                     ^\n      |    \
    \                 |\n      |                     __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type {aka char}\n"
  stdout: ''
  timestamp: 1660060963
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // your code here\n    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n \
    \   for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpm6v49eo8: /tmp/tmpm6v49eo8.cpp:45: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060964
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int pos = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            pos = i;\n            break;\n        }\n    }\n    if (pos ==\
    \ -1) {\n        return result;\n    }\n    int i = pos - 1;\n    while (i >=\
    \ 0) {\n        if (vowels.find(word[i]) == std::string::npos) {\n           \
    \ break;\n        }\n        i--;\n    }\n    if (i == -1) {\n        return result;\n\
    \    }\n    int j = pos + 1;\n    while (j < word.length()) {\n        if (vowels.find(word[j])\
    \ == std::string::npos) {\n            break;\n        }\n        j++;\n    }\n\
    \    if (j == word.length()) {\n        return result;\n    }\n    result = word[pos];\n\
    \    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpqr04x8rw: /tmp/tmpqr04x8rw.cpp:64: int main(): Assertion `candidate(("quick"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060964
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int len = word.length();\n    int i = len - 1;\n    while (i >= 0) {\n\
    \        if (vowels.find(word[i]) != std::string::npos) {\n            if (i ==\
    \ len - 1) {\n                return \"\";\n            }\n            if (vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n                return word.substr(i, 1);\n \
    \           }\n        }\n        i--;\n    }\n    return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpqlhotwzw: /tmp/tmpqlhotwzw.cpp:38: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpyn1r2x6w: /tmp/tmpyn1r2x6w.cpp:42: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n\
    \    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (closest_vowel_index == -1) {\n    \
    \            closest_vowel_index = i;\n                closest_vowel = word[i];\n\
    \            } else {\n                if (i < closest_vowel_index) {\n      \
    \              closest_vowel_index = i;\n                    closest_vowel = word[i];\n\
    \                }\n            }\n        } else {\n            if (closest_vowel_index\
    \ != -1) {\n                return closest_vowel;\n            }\n        }\n\
    \    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp56o95vv6: /tmp/tmp56o95vv6.cpp:46: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060964
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n\tstd::string vowels = \"aeiouAEIOU\"\
    ;\n\tstd::string result = \"\";\n\tint i = word.length() - 1;\n\twhile (i >= 0)\
    \ {\n\t\tif (vowels.find(word[i]) != std::string::npos) {\n\t\t\tif (i == word.length()\
    \ - 1) {\n\t\t\t\ti--;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (vowels.find(word[i\
    \ + 1]) != std::string::npos) {\n\t\t\t\ti--;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\
    \tresult = word[i];\n\t\t\tbreak;\n\t\t}\n\t\ti--;\n\t}\n\treturn result;\n}\n\
    int main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpey_kmx8p: /tmp/tmpey_kmx8p.cpp:42: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060964
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int j = i + 1;\n            while (j < word.size() && vowels.find(word[j])\
    \ != std::string::npos) {\n                j++;\n            }\n            if\
    \ (j < word.size()) {\n                int distance = j - i;\n               \
    \ if (distance < min_distance) {\n                    min_distance = distance;\n\
    \                    result = word[i];\n                }\n            }\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpaha4nxw5: /tmp/tmpaha4nxw5.cpp:40: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n\tstd::string vowels = \"aeiou\";\n\t\
    int index = -1;\n\tfor (int i = word.length() - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i])\
    \ != std::string::npos) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (index\
    \ == -1) {\n\t\treturn \"\";\n\t}\n\tfor (int i = index - 1; i >= 0; i--) {\n\t\
    \tif (vowels.find(word[i]) == std::string::npos) {\n\t\t\treturn word.substr(i\
    \ + 1, 1);\n\t\t}\n\t}\n\treturn \"\";\n}\nint main() {\n    auto candidate =\
    \ get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmphpt0jsnb: /tmp/tmphpt0jsnb.cpp:42: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060964
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (consonants.find(word[index]) != std::string::npos)\
    \ {\n            if (index == word.length() - 1) {\n                return result;\n\
    \            }\n            for (int i = index + 1; i < word.length(); i++) {\n\
    \                if (vowels.find(word[i]) != std::string::npos) {\n          \
    \          result = word[i];\n                    return result;\n           \
    \     }\n            }\n        }\n        index--;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp_z4685kl: /tmp/tmp_z4685kl.cpp:40: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060964
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n\tstd::string vowels = \"aeiouAEIOU\"\
    ;\n\tstd::string result = \"\";\n\tint index = -1;\n\tfor (int i = word.length()\
    \ - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i]) != std::string::npos) {\n\t\
    \t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (index == -1) {\n\t\treturn result;\n\
    \t}\n\tfor (int i = index - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i]) ==\
    \ std::string::npos) {\n\t\t\treturn word[index];\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphp22rga3.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmphp22rga3.cpp:32:21: error: could not convert \u2018word.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)index))\u2019\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   32 |    return word[index];\n      |                     ^\n      |    \
    \                 |\n      |                     __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type {aka char}\n"
  stdout: ''
  timestamp: 1660060964
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpyn1r2x6w: /tmp/tmpyn1r2x6w.cpp:42: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n\
    \    int word_length = word.length();\n    for (int i = 0; i < word_length; i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            if\
    \ (i > 0 && i < word_length - 1) {\n                if (vowels.find(word[i - 1])\
    \ == std::string::npos && vowels.find(word[i + 1]) == std::string::npos) {\n \
    \                   if (closest_vowel_index == -1 || i < closest_vowel_index)\
    \ {\n                        closest_vowel_index = i;\n                      \
    \  closest_vowel = word[i];\n                    }\n                }\n      \
    \      }\n        }\n    }\n    return closest_vowel;\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp44_vkooe: /tmp/tmp44_vkooe.cpp:38: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060964
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpyi6v25ix: /tmp/tmpyi6v25ix.cpp:34: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int last_vowel_index = -1;\n    for (int\
    \ i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            last_vowel_index = i;\n            break;\n        }\n    }\n\
    \    if (last_vowel_index == -1) {\n        return result;\n    }\n    for (int\
    \ i = last_vowel_index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) ==\
    \ std::string::npos) {\n            result = word[last_vowel_index];\n       \
    \     break;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp4wp06ov_: /tmp/tmp4wp06ov_.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060964
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (index == -1) {\n                index = i;\n            }\
    \ else {\n                result = word[i];\n                break;\n        \
    \    }\n        } else {\n            index = -1;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmphz7e9xfa: /tmp/tmphz7e9xfa.cpp:37: int main(): Assertion `candidate(("yogurt"))
    == ("u")'' failed.

    '
  stdout: ''
  timestamp: 1660060964
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    int pos = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n       \
    \ if (vowels.find(word[i]) != std::string::npos) {\n            pos = i;\n   \
    \         break;\n        }\n    }\n    if (pos == -1) {\n        return \"\"\
    ;\n    }\n    for (int i = pos - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(pos, 1);\n        }\n\
    \    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp7wjnxzxm: /tmp/tmp7wjnxzxm.cpp:42: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060964
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (consonants.find(word[index]) != std::string::npos)\
    \ {\n            if (index == word.length() - 1) {\n                index--;\n\
    \                continue;\n            }\n            if (vowels.find(word[index\
    \ + 1]) != std::string::npos) {\n                result = word[index + 1];\n \
    \               break;\n            }\n        }\n        index--;\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpae7t8v0s: /tmp/tmpae7t8v0s.cpp:43: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060964
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpyn1r2x6w: /tmp/tmpyn1r2x6w.cpp:42: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (consonants.find(word[i]) != std::string::npos) {\n            index\
    \ = i;\n            break;\n        }\n    }\n    if (index == -1) {\n       \
    \ return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) != std::string::npos) {\n            return std::string(1,\
    \ word[i]);\n        }\n    }\n    return \"\";\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp9lm0hf_g: /tmp/tmp9lm0hf_g.cpp:41: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060964
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpe0og0u93: /tmp/tmpe0og0u93.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpyn1r2x6w: /tmp/tmpyn1r2x6w.cpp:42: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int pos = word.length() - 1;\n    while (pos >= 0) {\n        if (vowels.find(word[pos])\
    \ != std::string::npos) {\n            if (pos > 0 && vowels.find(word[pos - 1])\
    \ == std::string::npos) {\n                return word.substr(pos, 1);\n     \
    \       }\n        }\n        pos--;\n    }\n    return \"\";\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp9jn1fqoo: /tmp/tmp9jn1fqoo.cpp:36: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060964
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Your code here\n    std::string\
    \ vowels = \"aeiou\";\n    int i = word.length() - 1;\n    while (i >= 0) {\n\
    \        if (vowels.find(word[i]) != std::string::npos) {\n            if (i ==\
    \ word.length() - 1) {\n                i--;\n                continue;\n    \
    \        }\n            if (vowels.find(word[i + 1]) == std::string::npos) {\n\
    \                return word.substr(i, 1);\n            }\n        }\n       \
    \ i--;\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpp1ux77eb: /tmp/tmpp1ux77eb.cpp:39: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060964
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp1dv7ng60: /tmp/tmp1dv7ng60.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Write your code here\n    std::string\
    \ vowels = \"aeiou\";\n    int n = word.length();\n    int i = n-1;\n    while(i>=0){\n\
    \        if(vowels.find(word[i])!=std::string::npos){\n            if(i==n-1){\n\
    \                i--;\n                continue;\n            }\n            if(vowels.find(word[i+1])==std::string::npos){\n\
    \                return word.substr(i,1);\n            }\n        }\n        i--;\n\
    \    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp6_jh_ani: /tmp/tmp6_jh_ani.cpp:40: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060964
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int i = word.length() - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (i == word.length() - 1) {\n       \
    \         return \"\";\n            }\n            if (consonants.find(word[i\
    \ + 1]) != std::string::npos) {\n                return word.substr(i, 1);\n \
    \           }\n        }\n        i--;\n    }\n    return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpng5nh61n: /tmp/tmpng5nh61n.cpp:38: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060964
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n  std::string vowels = \"aeiouAEIOU\"\
    ;\n  std::string result = \"\";\n  for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n    if (vowels.find(word[i]) != std::string::npos) {\n      result = word[i];\n\
    \      break;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp38q0d6mg: /tmp/tmp38q0d6mg.cpp:32: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060964
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    int index = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n     \
    \   if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpuyn1kh0c: /tmp/tmpuyn1kh0c.cpp:42: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060963
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp1dv7ng60: /tmp/tmp1dv7ng60.cpp:44: int main(): Assertion `candidate(("ali"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiou\";\n\
    \    int n = word.length();\n    for(int i = n-1; i >= 0; i--) {\n        if(vowels.find(word[i])\
    \ != std::string::npos) {\n            if(i == n-1) {\n                return\
    \ \"\";\n            }\n            if(vowels.find(word[i+1]) == std::string::npos)\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \ }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmp_ocd4qu0: /tmp/tmp_ocd4qu0.cpp:36: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060964
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    for (int i = word.length() - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   result = word[i];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: Exception
  stderr: 'tmpm246qi5w: /tmp/tmpm246qi5w.cpp:32: int main(): Assertion `candidate(("easy"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660060959
