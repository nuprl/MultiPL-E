language: cpp
name: HumanEval_124_valid_date
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // Your code here\n  std::stringstream\
    \ ss(date);\n  std::string token;\n  std::vector<std::string> result;\n  while\
    \ (std::getline(ss, token, '-')) {\n    result.push_back(token);\n  }\n  if (result.size()\
    \ != 3) {\n    return false;\n  }\n  int month = std::stoi(result[0]);\n  int\
    \ day = std::stoi(result[1]);\n  int year = std::stoi(result[2]);\n  if (month\
    \ < 1 || month > 12) {\n    return false;\n  }\n  if (month == 2) {\n    if (day\
    \ < 1 || day > 29) {\n      return false;\n    }\n  } else if (month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  } else {\n\
    \    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2udavq4e.cpp: In function 'bool valid_date(std::string)':\n/tmp/tmp2udavq4e.cpp:31:15:\
    \ error: 'stoi' is not a member of 'std'\n   int month = std::stoi(result[0]);\n\
    \               ^\n/tmp/tmp2udavq4e.cpp:32:13: error: 'stoi' is not a member of\
    \ 'std'\n   int day = std::stoi(result[1]);\n             ^\n/tmp/tmp2udavq4e.cpp:33:14:\
    \ error: 'stoi' is not a member of 'std'\n   int year = std::stoi(result[2]);\n\
    \              ^\n/tmp/tmp2udavq4e.cpp: In function 'int main()':\n/tmp/tmp2udavq4e.cpp:53:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = valid_date;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2udavq4e.cpp:2:\n/tmp/tmp2udavq4e.cpp:54:36: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"03-11-2000\"\
    )) == (true));\n                                    ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // your code here\n \
    \   std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ date_vec;\n    while(std::getline(ss, token, '-')) {\n        date_vec.push_back(token);\n\
    \    }\n    if(date_vec.size() != 3) {\n        return false;\n    }\n    int\
    \ day = std::stoi(date_vec[1]);\n    int month = std::stoi(date_vec[0]);\n   \
    \ int year = std::stoi(date_vec[2]);\n    if(day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    if(month < 1 || month > 12) {\n        return false;\n  \
    \  }\n    if(month == 2) {\n        if(day > 29) {\n            return false;\n\
    \        }\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n        if(day > 30) {\n            return false;\n        }\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp106o9f45.cpp: In function 'bool valid_date(std::string)':\n/tmp/tmp106o9f45.cpp:31:15:\
    \ error: 'stoi' is not a member of 'std'\n     int day = std::stoi(date_vec[1]);\n\
    \               ^\n/tmp/tmp106o9f45.cpp:32:17: error: 'stoi' is not a member of\
    \ 'std'\n     int month = std::stoi(date_vec[0]);\n                 ^\n/tmp/tmp106o9f45.cpp:33:16:\
    \ error: 'stoi' is not a member of 'std'\n     int year = std::stoi(date_vec[2]);\n\
    \                ^\n/tmp/tmp106o9f45.cpp: In function 'int main()':\n/tmp/tmp106o9f45.cpp:53:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = valid_date;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp106o9f45.cpp:2:\n/tmp/tmp106o9f45.cpp:54:36: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"03-11-2000\"\
    )) == (true));\n                                    ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int day, month, year;\n\
    \    char delim;\n    std::stringstream ss(date);\n    ss >> month >> delim >>\
    \ day >> delim >> year;\n    if (ss.fail()) {\n        return false;\n    }\n\
    \    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month == 2) {\n  \
    \      if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcu7lew4s.cpp: In function 'int main()':\n/tmp/tmpcu7lew4s.cpp:47:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = valid_date;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcu7lew4s.cpp:2:\n/tmp/tmpcu7lew4s.cpp:48:36: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"03-11-2000\"\
    )) == (true));\n                                    ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code here\n \
    \   std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ v;\n    while(std::getline(ss, token, '-')) {\n        v.push_back(token);\n\
    \    }\n    if(v.size() != 3) return false;\n    int month = std::stoi(v[0]);\n\
    \    int day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month\
    \ < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return false;\n\
    \    if(month == 2) {\n        if(day > 29) return false;\n    }\n    else if(month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if(day > 30) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzwwulcad.cpp: In function 'bool valid_date(std::string)':\n/tmp/tmpzwwulcad.cpp:29:17:\
    \ error: 'stoi' is not a member of 'std'\n     int month = std::stoi(v[0]);\n\
    \                 ^\n/tmp/tmpzwwulcad.cpp:30:15: error: 'stoi' is not a member\
    \ of 'std'\n     int day = std::stoi(v[1]);\n               ^\n/tmp/tmpzwwulcad.cpp:31:16:\
    \ error: 'stoi' is not a member of 'std'\n     int year = std::stoi(v[2]);\n \
    \               ^\n/tmp/tmpzwwulcad.cpp: In function 'int main()':\n/tmp/tmpzwwulcad.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = valid_date;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzwwulcad.cpp:2:\n/tmp/tmpzwwulcad.cpp:44:36: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"03-11-2000\"\
    )) == (true));\n                                    ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // your code here\n  std::stringstream\
    \ ss(date);\n  std::string token;\n  std::vector<std::string> v;\n  while(std::getline(ss,\
    \ token, '-')) {\n    v.push_back(token);\n  }\n  if(v.size() != 3) {\n    return\
    \ false;\n  }\n  int month = std::stoi(v[0]);\n  int day = std::stoi(v[1]);\n\
    \  int year = std::stoi(v[2]);\n  if(month < 1 || month > 12) {\n    return false;\n\
    \  }\n  if(month == 2) {\n    if(day < 1 || day > 29) {\n      return false;\n\
    \    }\n  }\n  else if(month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12) {\n    if(day < 1 || day > 31) {\n\
    \      return false;\n    }\n  }\n  else {\n    if(day < 1 || day > 30) {\n  \
    \    return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzksuo2_h.cpp: In function 'bool valid_date(std::string)':\n/tmp/tmpzksuo2_h.cpp:31:15:\
    \ error: 'stoi' is not a member of 'std'\n   int month = std::stoi(v[0]);\n  \
    \             ^\n/tmp/tmpzksuo2_h.cpp:32:13: error: 'stoi' is not a member of\
    \ 'std'\n   int day = std::stoi(v[1]);\n             ^\n/tmp/tmpzksuo2_h.cpp:33:14:\
    \ error: 'stoi' is not a member of 'std'\n   int year = std::stoi(v[2]);\n   \
    \           ^\n/tmp/tmpzksuo2_h.cpp: In function 'int main()':\n/tmp/tmpzksuo2_h.cpp:55:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = valid_date;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzksuo2_h.cpp:2:\n/tmp/tmpzksuo2_h.cpp:56:36: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"03-11-2000\"\
    )) == (true));\n                                    ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // your code here\n  std::stringstream\
    \ ss(date);\n  int month, day, year;\n  char delim;\n  ss >> month >> delim >>\
    \ day >> delim >> year;\n  if (ss.fail()) {\n    return false;\n  }\n  if (month\
    \ < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n\
    \    return false;\n  }\n  if (month == 2) {\n    if (day > 29) {\n      return\
    \ false;\n    }\n  }\n  if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx6igp7hf.cpp: In function 'int main()':\n/tmp/tmpx6igp7hf.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = valid_date;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx6igp7hf.cpp:2:\n/tmp/tmpx6igp7hf.cpp:49:36: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"03-11-2000\"\
    )) == (true));\n                                    ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // your code here\n  std::stringstream\
    \ ss(date);\n  std::string token;\n  std::vector<std::string> v;\n  while(std::getline(ss,\
    \ token, '-')) {\n    v.push_back(token);\n  }\n  if(v.size() != 3) {\n    return\
    \ false;\n  }\n  int month = std::stoi(v[0]);\n  int day = std::stoi(v[1]);\n\
    \  int year = std::stoi(v[2]);\n  if(month < 1 || month > 12) {\n    return false;\n\
    \  }\n  if(month == 2) {\n    if(day < 1 || day > 29) {\n      return false;\n\
    \    }\n  }\n  else if(month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12) {\n    if(day < 1 || day > 31) {\n\
    \      return false;\n    }\n  }\n  else {\n    if(day < 1 || day > 30) {\n  \
    \    return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzksuo2_h.cpp: In function 'bool valid_date(std::string)':\n/tmp/tmpzksuo2_h.cpp:31:15:\
    \ error: 'stoi' is not a member of 'std'\n   int month = std::stoi(v[0]);\n  \
    \             ^\n/tmp/tmpzksuo2_h.cpp:32:13: error: 'stoi' is not a member of\
    \ 'std'\n   int day = std::stoi(v[1]);\n             ^\n/tmp/tmpzksuo2_h.cpp:33:14:\
    \ error: 'stoi' is not a member of 'std'\n   int year = std::stoi(v[2]);\n   \
    \           ^\n/tmp/tmpzksuo2_h.cpp: In function 'int main()':\n/tmp/tmpzksuo2_h.cpp:55:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = valid_date;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzksuo2_h.cpp:2:\n/tmp/tmpzksuo2_h.cpp:56:36: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"03-11-2000\"\
    )) == (true));\n                                    ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code here\n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n   \n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpabhmo_31.cpp: In function 'int main()':\n/tmp/tmpabhmo_31.cpp:151:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = valid_date;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpabhmo_31.cpp:2:\n/tmp/tmpabhmo_31.cpp:152:36: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"03-11-2000\"\
    )) == (true));\n                                    ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // your code here\n  std::stringstream\
    \ ss(date);\n  std::string token;\n  std::vector<std::string> v;\n  while(std::getline(ss,\
    \ token, '-')) {\n    v.push_back(token);\n  }\n  if(v.size() != 3) {\n    return\
    \ false;\n  }\n  int month = std::stoi(v[0]);\n  int day = std::stoi(v[1]);\n\
    \  int year = std::stoi(v[2]);\n  if(month < 1 || month > 12) {\n    return false;\n\
    \  }\n  if(month == 2) {\n    if(day < 1 || day > 29) {\n      return false;\n\
    \    }\n  }\n  else if(month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12) {\n    if(day < 1 || day > 31) {\n\
    \      return false;\n    }\n  }\n  else {\n    if(day < 1 || day > 30) {\n  \
    \    return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzksuo2_h.cpp: In function 'bool valid_date(std::string)':\n/tmp/tmpzksuo2_h.cpp:31:15:\
    \ error: 'stoi' is not a member of 'std'\n   int month = std::stoi(v[0]);\n  \
    \             ^\n/tmp/tmpzksuo2_h.cpp:32:13: error: 'stoi' is not a member of\
    \ 'std'\n   int day = std::stoi(v[1]);\n             ^\n/tmp/tmpzksuo2_h.cpp:33:14:\
    \ error: 'stoi' is not a member of 'std'\n   int year = std::stoi(v[2]);\n   \
    \           ^\n/tmp/tmpzksuo2_h.cpp: In function 'int main()':\n/tmp/tmpzksuo2_h.cpp:55:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = valid_date;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzksuo2_h.cpp:2:\n/tmp/tmpzksuo2_h.cpp:56:36: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"03-11-2000\"\
    )) == (true));\n                                    ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code here\n \
    \   std::vector<std::string> date_split;\n    std::stringstream ss(date);\n  \
    \  std::string token;\n    while(std::getline(ss, token, '-')){\n        date_split.push_back(token);\n\
    \    }\n    if(date_split.size() != 3){\n        return false;\n    }\n    int\
    \ month = std::stoi(date_split[0]);\n    int day = std::stoi(date_split[1]);\n\
    \    int year = std::stoi(date_split[2]);\n    if(month < 1 || month > 12){\n\
    \        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day > 29){\n            return false;\n\
    \        }\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n\
    \        if(day > 30){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpah3b1xzd.cpp: In function 'bool valid_date(std::string)':\n/tmp/tmpah3b1xzd.cpp:31:17:\
    \ error: 'stoi' is not a member of 'std'\n     int month = std::stoi(date_split[0]);\n\
    \                 ^\n/tmp/tmpah3b1xzd.cpp:32:15: error: 'stoi' is not a member\
    \ of 'std'\n     int day = std::stoi(date_split[1]);\n               ^\n/tmp/tmpah3b1xzd.cpp:33:16:\
    \ error: 'stoi' is not a member of 'std'\n     int year = std::stoi(date_split[2]);\n\
    \                ^\n/tmp/tmpah3b1xzd.cpp: In function 'int main()':\n/tmp/tmpah3b1xzd.cpp:53:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = valid_date;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpah3b1xzd.cpp:2:\n/tmp/tmpah3b1xzd.cpp:54:36: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"03-11-2000\"\
    )) == (true));\n                                    ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::regex pattern(\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    );\n  std::smatch match;\n  if (std::regex_match(date, match, pattern)) {\n  \
    \  std::string month = match[1];\n    std::string day = match[2];\n    std::string\
    \ year = match[3];\n    if (month == \"02\" && day == \"29\" && year == \"2020\"\
    ) {\n      return true;\n    }\n    if (month == \"02\" && day == \"29\") {\n\
    \      return false;\n    }\n    if (month == \"02\" && day == \"30\") {\n   \
    \   return false;\n    }\n    if (month == \"02\" && day == \"31\") {\n      return\
    \ false;\n    }\n    if (month == \"04\" && day == \"31\") {\n      return false;\n\
    \    }\n    if (month == \"06\" && day == \"31\") {\n      return false;\n   \
    \ }\n    if (month == \"09\" && day == \"31\") {\n      return false;\n    }\n\
    \    if (month == \"11\" && day == \"31\") {\n      return false;\n    }\n   \
    \ return true;\n  }\n  return false;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp6xf58b3v.cpp: In function 'bool valid_date(std::string)':\n/tmp/tmp6xf58b3v.cpp:21:3:\
    \ error: 'regex' is not a member of 'std'\n   std::regex pattern(\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    );\n   ^\n/tmp/tmp6xf58b3v.cpp:21:14: error: expected ';' before 'pattern'\n \
    \  std::regex pattern(\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    );\n              ^\n/tmp/tmp6xf58b3v.cpp:22:3: error: 'smatch' is not a member\
    \ of 'std'\n   std::smatch match;\n   ^\n/tmp/tmp6xf58b3v.cpp:22:15: error: expected\
    \ ';' before 'match'\n   std::smatch match;\n               ^\n/tmp/tmp6xf58b3v.cpp:23:7:\
    \ error: 'regex_match' is not a member of 'std'\n   if (std::regex_match(date,\
    \ match, pattern)) {\n       ^\n/tmp/tmp6xf58b3v.cpp:23:30: error: 'match' was\
    \ not declared in this scope\n   if (std::regex_match(date, match, pattern)) {\n\
    \                              ^\n/tmp/tmp6xf58b3v.cpp:23:37: error: 'pattern'\
    \ was not declared in this scope\n   if (std::regex_match(date, match, pattern))\
    \ {\n                                     ^\n/tmp/tmp6xf58b3v.cpp: In function\
    \ 'int main()':\n/tmp/tmp6xf58b3v.cpp:56:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = valid_date;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6xf58b3v.cpp:2:\n/tmp/tmp6xf58b3v.cpp:57:36: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"03-11-2000\"\
    )) == (true));\n                                    ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  if(date.length() == 0)\
    \ return false;\n  std::stringstream ss(date);\n  int month, day, year;\n  char\
    \ c;\n  ss >> month >> c >> day >> c >> year;\n  if(month < 1 || month > 12) return\
    \ false;\n  if(day < 1 || day > 31) return false;\n  if(month == 2 && day > 29)\
    \ return false;\n  if(month == 4 || month == 6 || month == 9 || month == 11) {\n\
    \    if(day > 30) return false;\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuueli1gq.cpp: In function 'int main()':\n/tmp/tmpuueli1gq.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = valid_date;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuueli1gq.cpp:2:\n/tmp/tmpuueli1gq.cpp:36:36: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"03-11-2000\"\
    )) == (true));\n                                    ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // your code here\n  int\
    \ i,j,k;\n  int flag=0;\n  int flag1=0;\n  int flag2=0;\n  int flag3=0;\n  int\
    \ flag4=0;\n  int flag5=0;\n  int flag6=0;\n  int flag7=0;\n  int flag8=0;\n \
    \ int flag9=0;\n  int flag10=0;\n  int flag11=0;\n  int flag12=0;\n  int flag13=0;\n\
    \  int flag14=0;\n  int flag15=0;\n  int flag16=0;\n  int flag17=0;\n  int flag18=0;\n\
    \  int flag19=0;\n  int flag20=0;\n  int flag21=0;\n  int flag22=0;\n  int flag23=0;\n\
    \  int flag24=0;\n  int flag25=0;\n  int flag26=0;\n  int flag27=0;\n  int flag28=0;\n\
    \  int flag29=0;\n  int flag30=0;\n  int flag31=0;\n  int flag32=0;\n  int flag33=0;\n\
    \  int flag34=0;\n  int flag35=0;\n  int flag36=0;\n  int flag37=0;\n  int flag38=0;\n\
    \  int flag39=0;\n  int flag40=0;\n  int flag41=0;\n  int flag42=0;\n  int flag43=0;\n\
    \  int flag44=0;\n  int flag45=0;\n  int flag46=0;\n  int flag47=0;\n  int flag48=0;\n\
    \  int flag49=0;\n  int flag50=0;\n  int flag51=0;\n  int flag52=0;\n  int flag53=0;\n\
    \  int flag54=0;\n  int flag55=0;\n  int flag56=0;\n  int flag57=0;\n  int flag58=0;\n\
    \  int flag59=0;\n  int flag60=0;\n  int flag61=0;\n \n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphfrso_kl.cpp: In function 'int main()':\n/tmp/tmphfrso_kl.cpp:88:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = valid_date;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphfrso_kl.cpp:2:\n/tmp/tmphfrso_kl.cpp:89:36: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"03-11-2000\"\
    )) == (true));\n                                    ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // Your code here\n  std::stringstream\
    \ ss(date);\n  std::string token;\n  std::vector<std::string> tokens;\n  while(std::getline(ss,\
    \ token, '-')) {\n    tokens.push_back(token);\n  }\n  if(tokens.size() != 3)\
    \ {\n    return false;\n  }\n  int month = std::stoi(tokens[0]);\n  int day =\
    \ std::stoi(tokens[1]);\n  int year = std::stoi(tokens[2]);\n  if(month < 1 ||\
    \ month > 12) {\n    return false;\n  }\n  if(month == 2) {\n    if(day < 1 ||\
    \ day > 29) {\n      return false;\n    }\n  }\n  else if(month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n    if(day < 1 || day > 31) {\n      return false;\n    }\n  }\n  else {\n\
    \    if(day < 1 || day > 30) {\n      return false;\n    }\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphuu2bwv6.cpp: In function 'bool valid_date(std::string)':\n/tmp/tmphuu2bwv6.cpp:31:15:\
    \ error: 'stoi' is not a member of 'std'\n   int month = std::stoi(tokens[0]);\n\
    \               ^\n/tmp/tmphuu2bwv6.cpp:32:13: error: 'stoi' is not a member of\
    \ 'std'\n   int day = std::stoi(tokens[1]);\n             ^\n/tmp/tmphuu2bwv6.cpp:33:14:\
    \ error: 'stoi' is not a member of 'std'\n   int year = std::stoi(tokens[2]);\n\
    \              ^\n/tmp/tmphuu2bwv6.cpp: In function 'int main()':\n/tmp/tmphuu2bwv6.cpp:55:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = valid_date;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphuu2bwv6.cpp:2:\n/tmp/tmphuu2bwv6.cpp:56:36: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"03-11-2000\"\
    )) == (true));\n                                    ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // your code here\n \
    \   std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n\
    \    }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(month == 2) {\n        if(day < 1 || day > 29) {\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) {\n            return false;\n        }\n    }\n    else {\n\
    \        if(day < 1 || day > 30) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn3t6clfi.cpp: In function 'bool valid_date(std::string)':\n/tmp/tmpn3t6clfi.cpp:31:17:\
    \ error: 'stoi' is not a member of 'std'\n     int month = std::stoi(tokens[0]);\n\
    \                 ^\n/tmp/tmpn3t6clfi.cpp:32:15: error: 'stoi' is not a member\
    \ of 'std'\n     int day = std::stoi(tokens[1]);\n               ^\n/tmp/tmpn3t6clfi.cpp:33:16:\
    \ error: 'stoi' is not a member of 'std'\n     int year = std::stoi(tokens[2]);\n\
    \                ^\n/tmp/tmpn3t6clfi.cpp: In function 'int main()':\n/tmp/tmpn3t6clfi.cpp:55:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = valid_date;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn3t6clfi.cpp:2:\n/tmp/tmpn3t6clfi.cpp:56:36: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"03-11-2000\"\
    )) == (true));\n                                    ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // your code here\n  std::stringstream\
    \ ss(date);\n  int day, month, year;\n  char c;\n  ss >> month >> c >> day >>\
    \ c >> year;\n  if(month < 1 || month > 12 || day < 1 || day > 31 || year < 0)\
    \ return false;\n  if(month == 2 && day > 29) return false;\n  if(month == 4 ||\
    \ month == 6 || month == 9 || month == 11) {\n    if(day > 30) return false;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2d5yj5st.cpp: In function 'int main()':\n/tmp/tmp2d5yj5st.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = valid_date;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2d5yj5st.cpp:2:\n/tmp/tmp2d5yj5st.cpp:35:36: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"03-11-2000\"\
    )) == (true));\n                                    ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // Your code here\n  if(date.length()==0)\n\
    \  return false;\n  int i=0;\n  int day=0;\n  int month=0;\n  int year=0;\n  while(date[i]!='-')\n\
    \  {\n    day=day*10+(date[i]-'0');\n    i++;\n  }\n  i++;\n  while(date[i]!='-')\n\
    \  {\n    month=month*10+(date[i]-'0');\n    i++;\n  }\n  i++;\n  while(i<date.length())\n\
    \  {\n    year=year*10+(date[i]-'0');\n    i++;\n  }\n  if(month==1||month==3||month==5||month==7||month==8||month==10||month==12)\n\
    \  {\n    if(day>=1&&day<=31)\n    return true;\n    else\n    return false;\n\
    \  }\n  else if(month==4||month==6||month==9||month==11)\n  {\n    if(day>=1&&day<=30)\n\
    \    return true;\n    else\n    return false;\n  }\n  else if(month==2)\n  {\n\
    \    if(day>=1&&day<=29)\n    return true;\n    else\n    return false;\n  }\n\
    \  else\n  return false;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp51yxcivu.cpp: In function 'int main()':\n/tmp/tmp51yxcivu.cpp:70:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = valid_date;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp51yxcivu.cpp:2:\n/tmp/tmp51yxcivu.cpp:71:36: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"03-11-2000\"\
    )) == (true));\n                                    ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  if(date.size()==0)\n  \
    \  return false;\n  std::stringstream ss(date);\n  std::string token;\n  std::vector<std::string>\
    \ v;\n  while(std::getline(ss, token, '-'))\n    v.push_back(token);\n  if(v.size()!=3)\n\
    \    return false;\n  int month = std::stoi(v[0]);\n  int day = std::stoi(v[1]);\n\
    \  int year = std::stoi(v[2]);\n  if(month<1 || month>12)\n    return false;\n\
    \  if(month==2)\n  {\n    if(day<1 || day>29)\n      return false;\n  }\n  else\
    \ if(month==1 || month==3 || month==5 || month==7 || month==8 || month==10 ||\
    \ month==12)\n  {\n    if(day<1 || day>31)\n      return false;\n  }\n  else\n\
    \  {\n    if(day<1 || day>30)\n      return false;\n  }\n  return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpik6hfje2.cpp: In function 'bool valid_date(std::string)':\n/tmp/tmpik6hfje2.cpp:30:15:\
    \ error: 'stoi' is not a member of 'std'\n   int month = std::stoi(v[0]);\n  \
    \             ^\n/tmp/tmpik6hfje2.cpp:31:13: error: 'stoi' is not a member of\
    \ 'std'\n   int day = std::stoi(v[1]);\n             ^\n/tmp/tmpik6hfje2.cpp:32:14:\
    \ error: 'stoi' is not a member of 'std'\n   int year = std::stoi(v[2]);\n   \
    \           ^\n/tmp/tmpik6hfje2.cpp: In function 'int main()':\n/tmp/tmpik6hfje2.cpp:53:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = valid_date;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpik6hfje2.cpp:2:\n/tmp/tmpik6hfje2.cpp:54:36: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"03-11-2000\"\
    )) == (true));\n                                    ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // your code here\n  std::stringstream\
    \ ss(date);\n  std::string token;\n  std::vector<std::string> tokens;\n  while(std::getline(ss,\
    \ token, '-')) {\n    tokens.push_back(token);\n  }\n  if(tokens.size() != 3)\
    \ {\n    return false;\n  }\n  if(tokens[0].size() != 2 || tokens[1].size() !=\
    \ 2 || tokens[2].size() != 4) {\n    return false;\n  }\n  int month = std::stoi(tokens[0]);\n\
    \  int day = std::stoi(tokens[1]);\n  int year = std::stoi(tokens[2]);\n  if(month\
    \ < 1 || month > 12) {\n    return false;\n  }\n  if(day < 1 || day > 31) {\n\
    \    return false;\n  }\n  if(month == 2) {\n    if(day > 29) {\n      return\
    \ false;\n    }\n  }\n  if(month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n    if(day > 30) {\n      return false;\n    }\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqnmgkfpu.cpp: In function 'bool valid_date(std::string)':\n/tmp/tmpqnmgkfpu.cpp:34:15:\
    \ error: 'stoi' is not a member of 'std'\n   int month = std::stoi(tokens[0]);\n\
    \               ^\n/tmp/tmpqnmgkfpu.cpp:35:13: error: 'stoi' is not a member of\
    \ 'std'\n   int day = std::stoi(tokens[1]);\n             ^\n/tmp/tmpqnmgkfpu.cpp:36:14:\
    \ error: 'stoi' is not a member of 'std'\n   int year = std::stoi(tokens[2]);\n\
    \              ^\n/tmp/tmpqnmgkfpu.cpp: In function 'int main()':\n/tmp/tmpqnmgkfpu.cpp:56:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = valid_date;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqnmgkfpu.cpp:2:\n/tmp/tmpqnmgkfpu.cpp:57:36: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"03-11-2000\"\
    )) == (true));\n                                    ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // your code here\n \
    \   std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ v;\n    while(std::getline(ss, token, '-')) {\n        v.push_back(token);\n\
    \    }\n    if(v.size() != 3) {\n        return false;\n    }\n    int month =\
    \ std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n\
    \    if(month < 1 || month > 12) {\n        return false;\n    }\n    if(month\
    \ == 2) {\n        if(day < 1 || day > 29) {\n            return false;\n    \
    \    }\n    }\n    else if(month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n        if(day < 1 || day\
    \ > 31) {\n            return false;\n        }\n    }\n    else {\n        if(day\
    \ < 1 || day > 30) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7u1dq2b7.cpp: In function 'bool valid_date(std::string)':\n/tmp/tmp7u1dq2b7.cpp:31:17:\
    \ error: 'stoi' is not a member of 'std'\n     int month = std::stoi(v[0]);\n\
    \                 ^\n/tmp/tmp7u1dq2b7.cpp:32:15: error: 'stoi' is not a member\
    \ of 'std'\n     int day = std::stoi(v[1]);\n               ^\n/tmp/tmp7u1dq2b7.cpp:33:16:\
    \ error: 'stoi' is not a member of 'std'\n     int year = std::stoi(v[2]);\n \
    \               ^\n/tmp/tmp7u1dq2b7.cpp: In function 'int main()':\n/tmp/tmp7u1dq2b7.cpp:55:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = valid_date;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7u1dq2b7.cpp:2:\n/tmp/tmp7u1dq2b7.cpp:56:36: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"03-11-2000\"\
    )) == (true));\n                                    ^\n"
  stdout: ''
