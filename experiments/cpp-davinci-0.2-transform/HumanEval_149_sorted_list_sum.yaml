name: HumanEval_149_sorted_list_sum
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts\
  \ a list of strings as a parameter,\n// deletes the strings that have odd lengths\
  \ from it,\n// and returns the resulted list with a sorted order,\n// The list is\
  \ always a list of strings and never an array of numbers,\n// and it may contain\
  \ duplicates.\n// The order of the list should be ascending by length of each word,\
  \ and you\n// should return the list sorted by that rule.\n// If two words have\
  \ the same length, sort the list alphabetically.\n// The function should return\
  \ a list of strings in sorted order.\n// You may assume that all words will have\
  \ the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
  aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
  aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
  a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
  ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
  \ lst) {\n"
tests: "}\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
  aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
  , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
  AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
  \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
  dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
  abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
  AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
  c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) == (std::vector<std::string>({(std::string)\"\
  cc\", (std::string)\"dd\", (std::string)\"aaaa\", (std::string)\"bbbb\"})));\n}\n"
completions: ["    std::vector<std::string> res;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i == 0) {\n         \
    \   res.push_back(lst[i]);\n        } else {\n            if (lst[i] != lst[i\
    \ - 1]) {\n                res.push_back(lst[i]);\n            }\n        }\n\
    \    }\n    return res;", "    std::vector<std::string> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        if (i == 0)\
    \ {\n            result.push_back(lst[i]);\n        } else {\n            if (lst[i]\
    \ != lst[i - 1]) {\n                result.push_back(lst[i]);\n            }\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> res;\n \
    \   for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].length() % 2 ==\
    \ 0) {\n            res.push_back(lst[i]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<std::string> result;\n    for\
    \ (int i = 0; i < lst.size(); i++) {\n        if (lst[i].length() % 2 == 0) {\n\
    \            result.push_back(lst[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "  std::vector<std::string> result;\n \
    \ for (int i = 0; i < lst.size(); i++) {\n    if (lst[i].length() % 2 == 0) {\n\
    \      result.push_back(lst[i]);\n    }\n  }\n  std::sort(result.begin(), result.end());\n\
    \  return result;", "    std::vector<std::string> result;\n    for (int i = 0;\
    \ i < lst.size(); i++) {\n        if (lst[i].length() % 2 == 0) {\n          \
    \  result.push_back(lst[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string str : lst) {\n        if (str.length() % 2 == 0) {\n   \
    \         result.push_back(str);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end(), [](std::string a, std::string b) {\n        if (a.length() ==\
    \ b.length()) {\n            return a < b;\n        }\n        return a.length()\
    \ < b.length();\n    });\n    return result;", "    std::vector<std::string> result;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].length() % 2 ==\
    \ 0) {\n            result.push_back(lst[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : lst) {\n        if (s.length() % 2 == 0) {\n       \
    \     result.push_back(s);\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::string a, std::string b) {\n        if (a.length() == b.length()) {\n\
    \            return a < b;\n        }\n        return a.length() < b.length();\n\
    \    });\n    return result;", "    std::vector<std::string> res;\n    for (auto\
    \ i : lst) {\n        if (i.size() % 2 == 0) {\n            res.push_back(i);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end(), [](std::string a, std::string\
    \ b) {\n        if (a.size() == b.size()) {\n            return a < b;\n     \
    \   }\n        return a.size() < b.size();\n    });\n    return res;", "    std::vector<std::string>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (i == 0) {\n            result.push_back(lst[i]);\n     \
    \   } else {\n            if (lst[i] != lst[i - 1]) {\n                result.push_back(lst[i]);\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto i : lst) {\n        if (i.length() % 2 == 0) {\n    \
    \        result.push_back(i);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<std::string> result;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].length() % 2 ==\
    \ 0) {\n            result.push_back(lst[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto i = lst.begin(); i != lst.end(); i++) {\n        if (i->length()\
    \ % 2 == 0) {\n            result.push_back(*i);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<std::string> result;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].length() % 2 ==\
    \ 0) {\n            result.push_back(lst[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<std::string> result;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].length() % 2 ==\
    \ 0) {\n            result.push_back(lst[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<std::string> result;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].length() % 2 ==\
    \ 0) {\n            result.push_back(lst[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<std::string> result;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].length() % 2 ==\
    \ 0) {\n            result.push_back(lst[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<std::string> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        if (i == 0) {\n            result.push_back(lst[i]);\n        } else\
    \ {\n            if (lst[i] != lst[i - 1]) {\n                result.push_back(lst[i]);\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto i : lst) {\n        if (i.length() % 2 == 0) {\n    \
    \        result.push_back(i);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;"]
stop_tokens:
- "\n}"
