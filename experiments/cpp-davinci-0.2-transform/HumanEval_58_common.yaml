name: HumanEval_58_common
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
  \ elements for two lists.\n// >>> common((std::vector<long>({(long)1, (long)4, (long)3,\
  \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
  \ (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
  \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
  \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
  \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long> l2)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
  \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
  \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
  \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
  \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
  \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
  \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
  \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
completions: []
stop_tokens:
- "\n}"
