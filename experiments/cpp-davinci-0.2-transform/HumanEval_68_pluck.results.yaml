language: cpp
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = INT_MAX;\n    int index = 0;\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ == INT_MAX) {\n        return result;\n    }\n    result.push_back(min);\n \
    \   result.push_back(index);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpepgtv7b1.cpp: In function 'int main()':\n/tmp/tmpepgtv7b1.cpp:49:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpepgtv7b1.cpp:2:\n/tmp/tmpepgtv7b1.cpp:50:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpepgtv7b1.cpp:50:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpepgtv7b1.cpp:50:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpepgtv7b1.cpp:50:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpepgtv7b1.cpp:50:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpepgtv7b1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpepgtv7b1.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long min_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(min_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl3512lfy.cpp: In function 'int main()':\n/tmp/tmpl3512lfy.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl3512lfy.cpp:2:\n/tmp/tmpl3512lfy.cpp:51:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpl3512lfy.cpp:51:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpl3512lfy.cpp:51:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl3512lfy.cpp:51:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl3512lfy.cpp:51:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpl3512lfy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl3512lfy.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  std::vector<long> result;\n  if (arr.size() == 0) {\n    return result;\n\
    \  }\n  long min = arr[0];\n  long min_index = 0;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] % 2 == 0) {\n      if (arr[i] < min) {\n        min =\
    \ arr[i];\n        min_index = i;\n      }\n    }\n  }\n  if (min % 2 == 0) {\n\
    \    result.push_back(min);\n    result.push_back(min_index);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9zur79xb.cpp: In function 'int main()':\n/tmp/tmp9zur79xb.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9zur79xb.cpp:2:\n/tmp/tmp9zur79xb.cpp:51:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmp9zur79xb.cpp:51:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmp9zur79xb.cpp:51:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp9zur79xb.cpp:51:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp9zur79xb.cpp:51:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9zur79xb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9zur79xb.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0)\n        return res;\n\
    \    long min = arr[0];\n    long min_index = 0;\n    for(int i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] % 2 == 0){\n            if(arr[i] < min){\n       \
    \         min = arr[i];\n                min_index = i;\n            }\n     \
    \   }\n    }\n    if(min % 2 == 0){\n        res.push_back(min);\n        res.push_back(min_index);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6kq2pzd0.cpp: In function 'int main()':\n/tmp/tmp6kq2pzd0.cpp:49:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6kq2pzd0.cpp:2:\n/tmp/tmp6kq2pzd0.cpp:50:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmp6kq2pzd0.cpp:50:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmp6kq2pzd0.cpp:50:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp6kq2pzd0.cpp:50:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp6kq2pzd0.cpp:50:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6kq2pzd0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6kq2pzd0.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    long min_even = INT_MAX;\n    long min_even_index\
    \ = INT_MAX;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] %\
    \ 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n           \
    \ min_even_index = i;\n        }\n    }\n    if (min_even == INT_MAX) {\n    \
    \    return result;\n    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy8zsrngv.cpp: In function 'int main()':\n/tmp/tmpy8zsrngv.cpp:46:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy8zsrngv.cpp:2:\n/tmp/tmpy8zsrngv.cpp:47:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpy8zsrngv.cpp:47:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpy8zsrngv.cpp:47:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpy8zsrngv.cpp:47:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpy8zsrngv.cpp:47:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpy8zsrngv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy8zsrngv.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    long min = INT_MAX;\n    long index =\
    \ -1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n            min = arr[i];\n            index = i;\n  \
    \      }\n    }\n    if (index != -1) {\n        result.push_back(min);\n    \
    \    result.push_back(index);\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ksheymg.cpp: In function 'int main()':\n/tmp/tmp0ksheymg.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0ksheymg.cpp:2:\n/tmp/tmp0ksheymg.cpp:46:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmp0ksheymg.cpp:46:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmp0ksheymg.cpp:46:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0ksheymg.cpp:46:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp0ksheymg.cpp:46:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp0ksheymg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0ksheymg.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = INT_MAX;\n    long min_even_index = -1;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min_even) {\n            min_even = arr[i];\n            min_even_index =\
    \ i;\n        }\n    }\n    if (min_even_index == -1) {\n        return result;\n\
    \    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpszp4icbd.cpp: In function 'int main()':\n/tmp/tmpszp4icbd.cpp:49:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpszp4icbd.cpp:2:\n/tmp/tmpszp4icbd.cpp:50:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpszp4icbd.cpp:50:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpszp4icbd.cpp:50:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpszp4icbd.cpp:50:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpszp4icbd.cpp:50:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpszp4icbd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpszp4icbd.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv6ke8baz.cpp: In function 'int main()':\n/tmp/tmpv6ke8baz.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv6ke8baz.cpp:2:\n/tmp/tmpv6ke8baz.cpp:49:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpv6ke8baz.cpp:49:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpv6ke8baz.cpp:49:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv6ke8baz.cpp:49:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpv6ke8baz.cpp:49:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpv6ke8baz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv6ke8baz.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    long\
    \ min_even = INT_MAX;\n    long min_even_idx = -1;\n    for(int i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_even_idx = i;\n        }\n    }\n    if(min_even_idx\
    \ == -1) return res;\n    res.push_back(min_even);\n    res.push_back(min_even_idx);\n\
    \    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_z8nws32.cpp: In function 'int main()':\n/tmp/tmp_z8nws32.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_z8nws32.cpp:2:\n/tmp/tmp_z8nws32.cpp:46:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmp_z8nws32.cpp:46:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmp_z8nws32.cpp:46:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_z8nws32.cpp:46:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp_z8nws32.cpp:46:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_z8nws32.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_z8nws32.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = LONG_MAX;\n    long min_even_index = -1;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min_even) {\n            min_even = arr[i];\n            min_even_index =\
    \ i;\n        }\n    }\n    if (min_even_index == -1) {\n        return result;\n\
    \    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4r8jajol.cpp: In function 'int main()':\n/tmp/tmp4r8jajol.cpp:49:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4r8jajol.cpp:2:\n/tmp/tmp4r8jajol.cpp:50:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmp4r8jajol.cpp:50:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmp4r8jajol.cpp:50:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp4r8jajol.cpp:50:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp4r8jajol.cpp:50:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp4r8jajol.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4r8jajol.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    int index = 0;\n    for (int i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprie47x5r.cpp: In function 'int main()':\n/tmp/tmprie47x5r.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprie47x5r.cpp:2:\n/tmp/tmprie47x5r.cpp:49:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmprie47x5r.cpp:49:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmprie47x5r.cpp:49:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprie47x5r.cpp:49:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprie47x5r.cpp:49:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprie47x5r.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprie47x5r.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    long min = INT_MAX;\n    long index =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min) {\n            min = arr[i];\n            index = i;\n    \
    \    }\n    }\n    if (min == INT_MAX) {\n        return result;\n    }\n    result.push_back(min);\n\
    \    result.push_back(index);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_b50fso9.cpp: In function 'int main()':\n/tmp/tmp_b50fso9.cpp:46:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_b50fso9.cpp:2:\n/tmp/tmp_b50fso9.cpp:47:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmp_b50fso9.cpp:47:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmp_b50fso9.cpp:47:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_b50fso9.cpp:47:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp_b50fso9.cpp:47:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_b50fso9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_b50fso9.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    long\
    \ min = INT_MAX;\n    long index = -1;\n    for(int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n   \
    \         index = i;\n        }\n    }\n    if(index == -1) return res;\n    res.push_back(min);\n\
    \    res.push_back(index);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj_sevnot.cpp: In function 'int main()':\n/tmp/tmpj_sevnot.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj_sevnot.cpp:2:\n/tmp/tmpj_sevnot.cpp:46:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpj_sevnot.cpp:46:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpj_sevnot.cpp:46:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpj_sevnot.cpp:46:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpj_sevnot.cpp:46:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpj_sevnot.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj_sevnot.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    int min = INT_MAX;\n    int index = -1;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if (index != -1) {\n        res.push_back(min);\n        res.push_back(index);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_fl_7ku.cpp: In function 'int main()':\n/tmp/tmp7_fl_7ku.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7_fl_7ku.cpp:2:\n/tmp/tmp7_fl_7ku.cpp:46:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmp7_fl_7ku.cpp:46:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmp7_fl_7ku.cpp:46:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7_fl_7ku.cpp:46:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7_fl_7ku.cpp:46:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7_fl_7ku.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7_fl_7ku.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    long\
    \ min = INT_MAX;\n    long index = -1;\n    for(int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n   \
    \         index = i;\n        }\n    }\n    if(index == -1) return res;\n    res.push_back(min);\n\
    \    res.push_back(index);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj_sevnot.cpp: In function 'int main()':\n/tmp/tmpj_sevnot.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj_sevnot.cpp:2:\n/tmp/tmpj_sevnot.cpp:46:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpj_sevnot.cpp:46:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpj_sevnot.cpp:46:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpj_sevnot.cpp:46:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpj_sevnot.cpp:46:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpj_sevnot.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj_sevnot.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long min_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(min_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl3512lfy.cpp: In function 'int main()':\n/tmp/tmpl3512lfy.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl3512lfy.cpp:2:\n/tmp/tmpl3512lfy.cpp:51:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpl3512lfy.cpp:51:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpl3512lfy.cpp:51:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl3512lfy.cpp:51:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl3512lfy.cpp:51:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpl3512lfy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl3512lfy.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long min_index = 0;\n    bool has_even\
    \ = false;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2\
    \ == 0) {\n            has_even = true;\n            if (arr[i] < min) {\n   \
    \             min = arr[i];\n                min_index = i;\n            }\n \
    \       }\n    }\n    if (has_even) {\n        result.push_back(min);\n      \
    \  result.push_back(min_index);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp74u7w0kh.cpp: In function 'int main()':\n/tmp/tmp74u7w0kh.cpp:52:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp74u7w0kh.cpp:2:\n/tmp/tmp74u7w0kh.cpp:53:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmp74u7w0kh.cpp:53:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmp74u7w0kh.cpp:53:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp74u7w0kh.cpp:53:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp74u7w0kh.cpp:53:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp74u7w0kh.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp74u7w0kh.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long min_index = 0;\n    bool found\
    \ = false;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] %\
    \ 2 == 0) {\n            if (!found) {\n                min = arr[i];\n      \
    \          min_index = i;\n                found = true;\n            } else {\n\
    \                if (arr[i] < min) {\n                    min = arr[i];\n    \
    \                min_index = i;\n                }\n            }\n        }\n\
    \    }\n    if (found) {\n        result.push_back(min);\n        result.push_back(min_index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsvcc95b8.cpp: In function 'int main()':\n/tmp/tmpsvcc95b8.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsvcc95b8.cpp:2:\n/tmp/tmpsvcc95b8.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpsvcc95b8.cpp:58:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpsvcc95b8.cpp:58:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsvcc95b8.cpp:58:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsvcc95b8.cpp:58:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpsvcc95b8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsvcc95b8.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv6ke8baz.cpp: In function 'int main()':\n/tmp/tmpv6ke8baz.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv6ke8baz.cpp:2:\n/tmp/tmpv6ke8baz.cpp:49:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpv6ke8baz.cpp:49:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpv6ke8baz.cpp:49:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv6ke8baz.cpp:49:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpv6ke8baz.cpp:49:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpv6ke8baz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv6ke8baz.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = INT_MAX;\n    long min_index = INT_MAX;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min_even) {\n            min_even = arr[i];\n            min_index = i;\n\
    \        }\n    }\n    if (min_even == INT_MAX) {\n        return result;\n  \
    \  }\n    result.push_back(min_even);\n    result.push_back(min_index);\n    return\
    \ result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt1w2pdnk.cpp: In function 'int main()':\n/tmp/tmpt1w2pdnk.cpp:49:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt1w2pdnk.cpp:2:\n/tmp/tmpt1w2pdnk.cpp:50:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpt1w2pdnk.cpp:50:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpt1w2pdnk.cpp:50:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpt1w2pdnk.cpp:50:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpt1w2pdnk.cpp:50:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpt1w2pdnk.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt1w2pdnk.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long min_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(min_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl3512lfy.cpp: In function 'int main()':\n/tmp/tmpl3512lfy.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl3512lfy.cpp:2:\n/tmp/tmpl3512lfy.cpp:51:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpl3512lfy.cpp:51:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpl3512lfy.cpp:51:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl3512lfy.cpp:51:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl3512lfy.cpp:51:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpl3512lfy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl3512lfy.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long min_index = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(min_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp32d7mqt8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = INT_MAX;\n    long index = 0;\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ == INT_MAX) {\n        return result;\n    }\n    result.push_back(min);\n \
    \   result.push_back(index);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptpt9pxyl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = INT_MAX;\n    long min_index = INT_MAX;\n   \
    \ for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n            min = arr[i];\n            min_index = i;\n        }\n\
    \    }\n    if (min == INT_MAX) {\n        return result;\n    }\n    result.push_back(min);\n\
    \    result.push_back(min_index);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqrf1rq0r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = INT_MAX;\n    long index = -1;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n            min = arr[i];\n            index = i;\n        }\n    }\n   \
    \ if (index == -1) {\n        return result;\n    }\n    result.push_back(min);\n\
    \    result.push_back(index);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpftb051lg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if (arr.size() == 0) return res;\n    long\
    \ min = INT_MAX;\n    int index = -1;\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (index == -1) return res;\n\
    \    res.push_back(min);\n    res.push_back(index);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfwi_jl5i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = INT_MAX;\n    long min_even_index = -1;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min_even) {\n            min_even = arr[i];\n            min_even_index =\
    \ i;\n        }\n    }\n    if (min_even_index == -1) {\n        return result;\n\
    \    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpszp4icbd.cpp: In function 'int main()':\n/tmp/tmpszp4icbd.cpp:49:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpszp4icbd.cpp:2:\n/tmp/tmpszp4icbd.cpp:50:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpszp4icbd.cpp:50:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpszp4icbd.cpp:50:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpszp4icbd.cpp:50:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpszp4icbd.cpp:50:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpszp4icbd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpszp4icbd.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    long min = INT_MAX;\n    long index =\
    \ -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min) {\n            min = arr[i];\n            index = i;\n    \
    \    }\n    }\n    if (index != -1) {\n        result.push_back(min);\n      \
    \  result.push_back(index);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp41hy2d24.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    long min = INT_MAX;\n    long index = -1;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if (index != -1) {\n        res.push_back(min);\n        res.push_back(index);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8gyh1ayz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long min_index = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(min_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp32d7mqt8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv6ke8baz.cpp: In function 'int main()':\n/tmp/tmpv6ke8baz.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv6ke8baz.cpp:2:\n/tmp/tmpv6ke8baz.cpp:49:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpv6ke8baz.cpp:49:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpv6ke8baz.cpp:49:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv6ke8baz.cpp:49:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpv6ke8baz.cpp:49:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpv6ke8baz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv6ke8baz.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long min_index = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(min_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp32d7mqt8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  std::vector<long> result;\n  if (arr.size() == 0) {\n    return result;\n\
    \  }\n  long min = arr[0];\n  long minIndex = 0;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] % 2 == 0) {\n      if (arr[i] < min) {\n        min =\
    \ arr[i];\n        minIndex = i;\n      }\n    }\n  }\n  if (min % 2 == 0) {\n\
    \    result.push_back(min);\n    result.push_back(minIndex);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3l0ygrm6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long min_index = 0;\n    bool is_even\
    \ = false;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] %\
    \ 2 == 0) {\n            if (arr[i] < min) {\n                min = arr[i];\n\
    \                min_index = i;\n                is_even = true;\n           \
    \ }\n        }\n    }\n    if (is_even) {\n        result.push_back(min);\n  \
    \      result.push_back(min_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmgpppo8q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    long min = INT_MAX;\n    int index = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if (min == INT_MAX) {\n        return res;\n    }\n    res.push_back(min);\n\
    \    res.push_back(index);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbo_h70bf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    long min = INT_MAX;\n    long index =\
    \ -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min) {\n            min = arr[i];\n            index = i;\n    \
    \    }\n    }\n    if (index != -1) {\n        result.push_back(min);\n      \
    \  result.push_back(index);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp41hy2d24.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long minIndex = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                minIndex =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(minIndex);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdhbdx9jd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if (arr.size() == 0) {\n        return res;\n\
    \    }\n    long min = arr[0];\n    long index = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0) {\n        res.push_back(min);\n\
    \        res.push_back(index);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxzuaxlk0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = INT_MAX;\n    long min_even_index = INT_MAX;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min_even) {\n            min_even = arr[i];\n            min_even_index =\
    \ i;\n        }\n    }\n    if (min_even == INT_MAX) {\n        return result;\n\
    \    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_f71kwlx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv6ke8baz.cpp: In function 'int main()':\n/tmp/tmpv6ke8baz.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv6ke8baz.cpp:2:\n/tmp/tmpv6ke8baz.cpp:49:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpv6ke8baz.cpp:49:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpv6ke8baz.cpp:49:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv6ke8baz.cpp:49:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpv6ke8baz.cpp:49:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpv6ke8baz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv6ke8baz.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long minIndex = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                minIndex =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(minIndex);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdhbdx9jd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = INT_MAX;\n    long index = -1;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n            min = arr[i];\n            index = i;\n        }\n    }\n   \
    \ if (index == -1) {\n        return result;\n    }\n    result.push_back(min);\n\
    \    result.push_back(index);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpftb051lg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if (arr.size() == 0) {\n        return res;\n\
    \    }\n    long min = arr[0];\n    long index = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0) {\n        res.push_back(min);\n\
    \        res.push_back(index);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxzuaxlk0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if (arr.size() == 0) {\n        return res;\n\
    \    }\n    long min = arr[0];\n    int index = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0) {\n        res.push_back(min);\n\
    \        res.push_back(index);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa5bjhl2q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    long min = INT_MAX;\n    long index =\
    \ -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min) {\n            min = arr[i];\n            index = i;\n    \
    \    }\n    }\n    if (index != -1) {\n        result.push_back(min);\n      \
    \  result.push_back(index);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp41hy2d24.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if (arr.size() == 0) {\n        return res;\n\
    \    }\n    long min = INT_MAX;\n    long index = 0;\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n       \
    \     min = arr[i];\n            index = i;\n        }\n    }\n    if (min ==\
    \ INT_MAX) {\n        return res;\n    }\n    res.push_back(min);\n    res.push_back(index);\n\
    \    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpstegpi0y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long minIndex = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                minIndex =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(minIndex);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdhbdx9jd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = INT_MAX;\n    long index = 0;\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ == INT_MAX) {\n        return result;\n    }\n    result.push_back(min);\n \
    \   result.push_back(index);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptpt9pxyl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    long\
    \ min = INT_MAX;\n    long index = -1;\n    for(int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n   \
    \         index = i;\n        }\n    }\n    if(index == -1) return res;\n    res.push_back(min);\n\
    \    res.push_back(index);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj_sevnot.cpp: In function 'int main()':\n/tmp/tmpj_sevnot.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj_sevnot.cpp:2:\n/tmp/tmpj_sevnot.cpp:46:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpj_sevnot.cpp:46:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpj_sevnot.cpp:46:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpj_sevnot.cpp:46:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpj_sevnot.cpp:46:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpj_sevnot.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj_sevnot.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    long\
    \ min = INT_MAX;\n    int index = 0;\n    for(int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n   \
    \         index = i;\n        }\n    }\n    if(min == INT_MAX) return res;\n \
    \   res.push_back(min);\n    res.push_back(index);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptts51ex1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    long\
    \ min = INT_MAX;\n    int min_index = -1;\n    for(int i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n\
    \            min_index = i;\n        }\n    }\n    if(min_index == -1) return\
    \ res;\n    res.push_back(min);\n    res.push_back(min_index);\n    return res;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvjl3woqi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = INT_MAX;\n    long min_even_index = -1;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min_even) {\n            min_even = arr[i];\n            min_even_index =\
    \ i;\n        }\n    }\n    if (min_even_index == -1) {\n        return result;\n\
    \    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps1643_v7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    long min = INT_MAX;\n    long index =\
    \ -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min) {\n            min = arr[i];\n            index = i;\n    \
    \    }\n    }\n    if (index != -1) {\n        result.push_back(min);\n      \
    \  result.push_back(index);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp41hy2d24.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = LONG_MAX;\n    long min_even_index = LONG_MAX;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min_even) {\n            min_even = arr[i];\n            min_even_index =\
    \ i;\n        }\n    }\n    if (min_even == LONG_MAX) {\n        return result;\n\
    \    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpndcaq4i3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long min_index = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(min_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp32d7mqt8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long index = 0;\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuptspayx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    int\
    \ min_even = INT_MAX;\n    int min_even_idx = -1;\n    for(int i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even\
    \ = arr[i];\n            min_even_idx = i;\n        }\n    }\n    if(min_even_idx\
    \ == -1) return res;\n    res.push_back(min_even);\n    res.push_back(min_even_idx);\n\
    \    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp34ay820v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    long min = INT_MAX;\n    long min_index\
    \ = INT_MAX;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] %\
    \ 2 == 0 && arr[i] < min) {\n            min = arr[i];\n            min_index\
    \ = i;\n        }\n    }\n    if (min != INT_MAX) {\n        result.push_back(min);\n\
    \        result.push_back(min_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxpqdofkm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long index = 0;\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuptspayx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    long min = INT_MAX;\n    int index = -1;\n\
    \    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if(index != -1) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi302afke.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = LONG_MAX;\n    long min_index = LONG_MAX;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min_even) {\n            min_even = arr[i];\n            min_index = i;\n\
    \        }\n    }\n    if (min_even == LONG_MAX) {\n        return result;\n \
    \   }\n    result.push_back(min_even);\n    result.push_back(min_index);\n   \
    \ return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpoq7yeu7v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = LONG_MAX;\n    long min_even_index = -1;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min_even) {\n            min_even = arr[i];\n            min_even_index =\
    \ i;\n        }\n    }\n    if (min_even_index == -1) {\n        return result;\n\
    \    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4r8jajol.cpp: In function 'int main()':\n/tmp/tmp4r8jajol.cpp:49:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4r8jajol.cpp:2:\n/tmp/tmp4r8jajol.cpp:50:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmp4r8jajol.cpp:50:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmp4r8jajol.cpp:50:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp4r8jajol.cpp:50:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp4r8jajol.cpp:50:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp4r8jajol.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4r8jajol.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0)\n        return res;\n\
    \    long min = INT_MAX;\n    long index = -1;\n    for(int i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if(index == -1)\n        return\
    \ res;\n    res.push_back(min);\n    res.push_back(index);\n    return res;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5jgkl1c5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = INT_MAX;\n    long index = -1;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n            min = arr[i];\n            index = i;\n        }\n    }\n   \
    \ if (index == -1) {\n        return result;\n    }\n    result.push_back(min);\n\
    \    result.push_back(index);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpftb051lg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long smallestEven = -1;\n    long smallestEvenIndex = -1;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smallestEven == -1) {\n                smallestEven = arr[i];\n\
    \                smallestEvenIndex = i;\n            } else if (arr[i] < smallestEven)\
    \ {\n                smallestEven = arr[i];\n                smallestEvenIndex\
    \ = i;\n            }\n        }\n    }\n    if (smallestEven == -1) {\n     \
    \   return result;\n    }\n    result.push_back(smallestEven);\n    result.push_back(smallestEvenIndex);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxbzd8lgh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long index = 0;\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuptspayx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0)\n        return res;\n\
    \    long min = INT_MAX;\n    long min_index = INT_MAX;\n    for(int i = 0; i\
    \ < arr.size(); i++){\n        if(arr[i] % 2 == 0 && arr[i] < min){\n        \
    \    min = arr[i];\n            min_index = i;\n        }\n    }\n    if(min ==\
    \ INT_MAX)\n        return res;\n    res.push_back(min);\n    res.push_back(min_index);\n\
    \    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsq_vhtfs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long index = 0;\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuptspayx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long index = 0;\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuptspayx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long index = 0;\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuptspayx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = -1;\n    long min_even_index = -1;\n   \
    \ for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n  \
    \          if (min_even == -1) {\n                min_even = arr[i];\n       \
    \         min_even_index = i;\n            } else {\n                if (arr[i]\
    \ < min_even) {\n                    min_even = arr[i];\n                    min_even_index\
    \ = i;\n                }\n            }\n        }\n    }\n    if (min_even ==\
    \ -1) {\n        return result;\n    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm03mqfgf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = LONG_MAX;\n    long min_even_index = LONG_MAX;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min_even) {\n            min_even = arr[i];\n            min_even_index =\
    \ i;\n        }\n    }\n    if (min_even == LONG_MAX) {\n        return result;\n\
    \    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpndcaq4i3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0)\n        return result;\n\
    \    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(index);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp851sxzpv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    long\
    \ min = INT_MAX;\n    long index = -1;\n    for(int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n   \
    \         index = i;\n        }\n    }\n    if(index == -1) return res;\n    res.push_back(min);\n\
    \    res.push_back(index);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj_sevnot.cpp: In function 'int main()':\n/tmp/tmpj_sevnot.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj_sevnot.cpp:2:\n/tmp/tmpj_sevnot.cpp:46:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpj_sevnot.cpp:46:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpj_sevnot.cpp:46:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpj_sevnot.cpp:46:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpj_sevnot.cpp:46:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpj_sevnot.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj_sevnot.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long minIndex = 0;\n    bool found\
    \ = false;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2\
    \ == 0) {\n            if (!found) {\n                min = arr[i];\n        \
    \        minIndex = i;\n                found = true;\n            } else {\n\
    \                if (arr[i] < min) {\n                    min = arr[i];\n    \
    \                minIndex = i;\n                }\n            }\n        }\n\
    \    }\n    if (found) {\n        result.push_back(min);\n        result.push_back(minIndex);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_dg9p8k7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    if(arr.size()==0)\n        return {};\n    long min=arr[0];\n    int\
    \ index=0;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]%2==0){\n   \
    \         if(arr[i]<min){\n                min=arr[i];\n                index=i;\n\
    \            }\n        }\n    }\n    if(min%2==0)\n        return {min,index};\n\
    \    else\n        return {};\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyo1go4um.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if (arr.size() == 0) {\n        return res;\n\
    \    }\n    long min_even = INT_MAX;\n    long min_even_idx = -1;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even)\
    \ {\n            min_even = arr[i];\n            min_even_idx = i;\n        }\n\
    \    }\n    if (min_even_idx == -1) {\n        return res;\n    }\n    res.push_back(min_even);\n\
    \    res.push_back(min_even_idx);\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb5b089aq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long index = 0;\n    bool found\
    \ = false;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2\
    \ == 0) {\n            if (arr[i] < min) {\n                min = arr[i];\n  \
    \              index = i;\n                found = true;\n            }\n    \
    \    }\n    }\n    if (found) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx9vwt1yy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long smallest = arr[0];\n    int index = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smallest) {\n                smallest = arr[i];\n                index\
    \ = i;\n            }\n        }\n    }\n    if (smallest % 2 == 0) {\n      \
    \  result.push_back(smallest);\n        result.push_back(index);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjs8qpqe9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    long min = INT_MAX;\n    int index = -1;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if (index != -1) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiutzse7y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    long min = INT_MAX;\n    long index =\
    \ -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min) {\n            min = arr[i];\n            index = i;\n    \
    \    }\n    }\n    if (index == -1) {\n        return result;\n    }\n    result.push_back(min);\n\
    \    result.push_back(index);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprybsqtjk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long minIndex = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                minIndex =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(minIndex);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdhbdx9jd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if (arr.size() == 0) {\n        return res;\n\
    \    }\n    long min = INT_MAX;\n    int index = -1;\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n       \
    \     min = arr[i];\n            index = i;\n        }\n    }\n    if (index ==\
    \ -1) {\n        return res;\n    }\n    res.push_back(min);\n    res.push_back(index);\n\
    \    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpga3sanro.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long min_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(min_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl3512lfy.cpp: In function 'int main()':\n/tmp/tmpl3512lfy.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl3512lfy.cpp:2:\n/tmp/tmpl3512lfy.cpp:51:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpl3512lfy.cpp:51:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpl3512lfy.cpp:51:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl3512lfy.cpp:51:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl3512lfy.cpp:51:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpl3512lfy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl3512lfy.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = LONG_MAX;\n    long min_index = -1;\n  \
    \  for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min_even) {\n            min_even = arr[i];\n            min_index = i;\n\
    \        }\n    }\n    if (min_index == -1) {\n        return result;\n    }\n\
    \    result.push_back(min_even);\n    result.push_back(min_index);\n    return\
    \ result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr78m4gd7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    long min = INT_MAX;\n    long min_index =\
    \ INT_MAX;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2\
    \ == 0 && arr[i] < min) {\n            min = arr[i];\n            min_index =\
    \ i;\n        }\n    }\n    if (min == INT_MAX) {\n        return res;\n    }\n\
    \    res.push_back(min);\n    res.push_back(min_index);\n    return res;\n}\n\
    int main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn89p0k4i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long min_index = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(min_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp32d7mqt8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    long min = INT_MAX;\n    long index =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min) {\n            min = arr[i];\n            index = i;\n    \
    \    }\n    }\n    if (min == INT_MAX) {\n        return result;\n    }\n    result.push_back(min);\n\
    \    result.push_back(index);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_b50fso9.cpp: In function 'int main()':\n/tmp/tmp_b50fso9.cpp:46:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_b50fso9.cpp:2:\n/tmp/tmp_b50fso9.cpp:47:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmp_b50fso9.cpp:47:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmp_b50fso9.cpp:47:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_b50fso9.cpp:47:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp_b50fso9.cpp:47:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_b50fso9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_b50fso9.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    int min_even = INT_MAX;\n    int min_even_index\
    \ = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            min_even_index\
    \ = i;\n        }\n    }\n    if (min_even_index != -1) {\n        result.push_back(min_even);\n\
    \        result.push_back(min_even_index);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpku3hbduj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long minIndex = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                minIndex =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(minIndex);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm4kv0krl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = INT_MAX;\n    long min_index = -1;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n            min = arr[i];\n            min_index = i;\n        }\n    }\n\
    \    if (min_index == -1) {\n        return result;\n    }\n    result.push_back(min);\n\
    \    result.push_back(min_index);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx7qq6xph.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    long\
    \ min = INT_MAX;\n    long min_index = INT_MAX;\n    for(int i = 0; i < arr.size();\
    \ i++){\n        if(arr[i]%2 == 0 && arr[i] < min){\n            min = arr[i];\n\
    \            min_index = i;\n        }\n    }\n    if(min == INT_MAX) return res;\n\
    \    res.push_back(min);\n    res.push_back(min_index);\n    return res;\n}\n\
    int main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpna2f4hn1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long minIndex = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                minIndex =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(minIndex);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm4kv0krl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = LONG_MAX;\n    long min_even_index = LONG_MAX;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min_even) {\n            min_even = arr[i];\n            min_even_index =\
    \ i;\n        }\n    }\n    if (min_even == LONG_MAX) {\n        return result;\n\
    \    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpga41kye5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = INT_MAX;\n    int min_even_index = -1;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min_even) {\n            min_even = arr[i];\n            min_even_index =\
    \ i;\n        }\n    }\n    if (min_even_index == -1) {\n        return result;\n\
    \    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwottxvrc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = INT_MAX;\n    long min_index = INT_MAX;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min_even) {\n            min_even = arr[i];\n            min_index = i;\n\
    \        }\n    }\n    if (min_even == INT_MAX) {\n        return result;\n  \
    \  }\n    result.push_back(min_even);\n    result.push_back(min_index);\n    return\
    \ result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv4g8j7pm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    long\
    \ min = INT_MAX;\n    int index = 0;\n    for(int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n   \
    \         index = i;\n        }\n    }\n    if(min == INT_MAX) return res;\n \
    \   res.push_back(min);\n    res.push_back(index);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptts51ex1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    long\
    \ min_even = INT_MAX;\n    int min_even_index = -1;\n    for(int i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] % 2 == 0 && arr[i] < min_even){\n            min_even\
    \ = arr[i];\n            min_even_index = i;\n        }\n    }\n    if(min_even_index\
    \ == -1) return res;\n    res.push_back(min_even);\n    res.push_back(min_even_index);\n\
    \    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgyd9wcze.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    long min = INT_MAX;\n    long index =\
    \ -1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n            min = arr[i];\n            index = i;\n  \
    \      }\n    }\n    if (index != -1) {\n        result.push_back(min);\n    \
    \    result.push_back(index);\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ksheymg.cpp: In function 'int main()':\n/tmp/tmp0ksheymg.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0ksheymg.cpp:2:\n/tmp/tmp0ksheymg.cpp:46:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmp0ksheymg.cpp:46:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmp0ksheymg.cpp:46:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0ksheymg.cpp:46:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp0ksheymg.cpp:46:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp0ksheymg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0ksheymg.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if (arr.size() == 0) {\n        return res;\n\
    \    }\n    long min = arr[0];\n    long index = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0) {\n        res.push_back(min);\n\
    \        res.push_back(index);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxzuaxlk0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv6ke8baz.cpp: In function 'int main()':\n/tmp/tmpv6ke8baz.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv6ke8baz.cpp:2:\n/tmp/tmpv6ke8baz.cpp:49:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpv6ke8baz.cpp:49:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpv6ke8baz.cpp:49:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv6ke8baz.cpp:49:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpv6ke8baz.cpp:49:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpv6ke8baz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv6ke8baz.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long min_index = 0;\n    bool found\
    \ = false;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] %\
    \ 2 == 0) {\n            if (!found) {\n                min = arr[i];\n      \
    \          min_index = i;\n                found = true;\n            } else {\n\
    \                if (arr[i] < min) {\n                    min = arr[i];\n    \
    \                min_index = i;\n                }\n            }\n        }\n\
    \    }\n    if (found) {\n        result.push_back(min);\n        result.push_back(min_index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsvcc95b8.cpp: In function 'int main()':\n/tmp/tmpsvcc95b8.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsvcc95b8.cpp:2:\n/tmp/tmpsvcc95b8.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpsvcc95b8.cpp:58:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpsvcc95b8.cpp:58:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsvcc95b8.cpp:58:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsvcc95b8.cpp:58:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpsvcc95b8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsvcc95b8.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    long\
    \ min = INT_MAX;\n    int index = -1;\n    for(int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n   \
    \         index = i;\n        }\n    }\n    if(index == -1) return res;\n    res.push_back(min);\n\
    \    res.push_back(index);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi9b5aub6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv6ke8baz.cpp: In function 'int main()':\n/tmp/tmpv6ke8baz.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv6ke8baz.cpp:2:\n/tmp/tmpv6ke8baz.cpp:49:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpv6ke8baz.cpp:49:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpv6ke8baz.cpp:49:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv6ke8baz.cpp:49:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpv6ke8baz.cpp:49:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpv6ke8baz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv6ke8baz.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv6ke8baz.cpp: In function 'int main()':\n/tmp/tmpv6ke8baz.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv6ke8baz.cpp:2:\n/tmp/tmpv6ke8baz.cpp:49:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpv6ke8baz.cpp:49:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpv6ke8baz.cpp:49:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv6ke8baz.cpp:49:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpv6ke8baz.cpp:49:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpv6ke8baz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv6ke8baz.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0)\n        return res;\n\
    \    long min = INT_MAX;\n    long index = -1;\n    for(int i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if(index != -1){\n        res.push_back(min);\n\
    \        res.push_back(index);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpll48t24x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = INT_MAX;\n    long min_index = INT_MAX;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min_even) {\n            min_even = arr[i];\n            min_index = i;\n\
    \        }\n    }\n    if (min_even == INT_MAX) {\n        return result;\n  \
    \  }\n    result.push_back(min_even);\n    result.push_back(min_index);\n    return\
    \ result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt1w2pdnk.cpp: In function 'int main()':\n/tmp/tmpt1w2pdnk.cpp:49:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt1w2pdnk.cpp:2:\n/tmp/tmpt1w2pdnk.cpp:50:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpt1w2pdnk.cpp:50:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpt1w2pdnk.cpp:50:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpt1w2pdnk.cpp:50:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpt1w2pdnk.cpp:50:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpt1w2pdnk.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt1w2pdnk.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv6ke8baz.cpp: In function 'int main()':\n/tmp/tmpv6ke8baz.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv6ke8baz.cpp:2:\n/tmp/tmpv6ke8baz.cpp:49:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpv6ke8baz.cpp:49:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpv6ke8baz.cpp:49:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv6ke8baz.cpp:49:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpv6ke8baz.cpp:49:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpv6ke8baz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv6ke8baz.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv6ke8baz.cpp: In function 'int main()':\n/tmp/tmpv6ke8baz.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv6ke8baz.cpp:2:\n/tmp/tmpv6ke8baz.cpp:49:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpv6ke8baz.cpp:49:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpv6ke8baz.cpp:49:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv6ke8baz.cpp:49:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpv6ke8baz.cpp:49:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpv6ke8baz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv6ke8baz.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    long min_even = INT_MAX;\n    long min_even_index\
    \ = -1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < min_even) {\n                min_even = arr[i];\n\
    \                min_even_index = i;\n            }\n        }\n    }\n    if\
    \ (min_even_index == -1) {\n        return result;\n    }\n    result.push_back(min_even);\n\
    \    result.push_back(min_even_index);\n    return result;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe_47fmkd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    long min = INT_MAX;\n    int index = -1;\n\
    \    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if(index == -1) {\n        return res;\n    }\n    res.push_back(min);\n\
    \    res.push_back(index);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprkpb448v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size()==0)\n        return res;\n\
    \    long min=INT_MAX;\n    int index=-1;\n    for(int i=0;i<arr.size();i++){\n\
    \        if(arr[i]%2==0 && arr[i]<min){\n            min=arr[i];\n           \
    \ index=i;\n        }\n    }\n    if(index==-1)\n        return res;\n    res.push_back(min);\n\
    \    res.push_back(index);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp57a1h_f6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0)\n        return res;\n\
    \    long min = arr[0];\n    long min_index = 0;\n    for(int i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n\
    \            min_index = i;\n        }\n    }\n    if(min % 2 == 0){\n       \
    \ res.push_back(min);\n        res.push_back(min_index);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg6h7smb8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long minIndex = 0;\n    bool isEven\
    \ = false;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2\
    \ == 0) {\n            isEven = true;\n            if (arr[i] < min) {\n     \
    \           min = arr[i];\n                minIndex = i;\n            }\n    \
    \    }\n    }\n    if (isEven) {\n        result.push_back(min);\n        result.push_back(minIndex);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6dq_wd7b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long index = 0;\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuptspayx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    long\
    \ min_even = INT_MAX;\n    long min_index = INT_MAX;\n    for(int i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] % 2 == 0 && arr[i] < min_even){\n            min_even\
    \ = arr[i];\n            min_index = i;\n        }\n    }\n    if(min_even ==\
    \ INT_MAX) return res;\n    res.push_back(min_even);\n    res.push_back(min_index);\n\
    \    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsvack6_o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    if(arr.size() == 0) return {};\n    long min = INT_MAX;\n    long index\
    \ = -1;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] % 2 == 0\
    \ && arr[i] < min){\n            min = arr[i];\n            index = i;\n     \
    \   }\n    }\n    if(min == INT_MAX) return {};\n    return {min, index};\n}\n\
    int main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpimdx8ivh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0)\n        return res;\n\
    \    long min = INT_MAX;\n    long index = -1;\n    for(int i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if(index == -1)\n        return\
    \ res;\n    res.push_back(min);\n    res.push_back(index);\n    return res;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5jgkl1c5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long minIndex = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                minIndex =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(minIndex);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm4kv0krl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long index = 0;\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuptspayx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    long\
    \ min = arr[0];\n    long index = 0;\n    for(int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n   \
    \         index = i;\n        }\n    }\n    if(min % 2 == 0){\n        res.push_back(min);\n\
    \        res.push_back(index);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2b5f3z7m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long smallest_even = -1;\n    long smallest_even_index =\
    \ -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0)\
    \ {\n            if (smallest_even == -1) {\n                smallest_even = arr[i];\n\
    \                smallest_even_index = i;\n            } else if (arr[i] < smallest_even)\
    \ {\n                smallest_even = arr[i];\n                smallest_even_index\
    \ = i;\n            }\n        }\n    }\n    if (smallest_even == -1) {\n    \
    \    return result;\n    }\n    result.push_back(smallest_even);\n    result.push_back(smallest_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpw1j7ayxx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long index = 0;\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuptspayx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    int n = arr.size();\n    int min_even = INT_MAX;\n    int min_even_index\
    \ = -1;\n    for(int i = 0; i < n; i++) {\n        if(arr[i] % 2 == 0) {\n   \
    \         if(arr[i] < min_even) {\n                min_even = arr[i];\n      \
    \          min_even_index = i;\n            }\n        }\n    }\n    if(min_even_index\
    \ == -1) {\n        return {};\n    }\n    return {min_even, min_even_index};\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp44ph8bka.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0)\n        return res;\n\
    \    long min = INT_MAX;\n    long index = -1;\n    for(int i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if(index != -1){\n        res.push_back(min);\n\
    \        res.push_back(index);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpll48t24x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    long min_even = -1;\n    long min_even_index\
    \ = -1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (min_even == -1) {\n                min_even = arr[i];\n\
    \                min_even_index = i;\n            } else if (arr[i] < min_even)\
    \ {\n                min_even = arr[i];\n                min_even_index = i;\n\
    \            }\n        }\n    }\n    if (min_even != -1) {\n        result.push_back(min_even);\n\
    \        result.push_back(min_even_index);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz7mfup17.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = INT_MAX;\n    long min_even_index = -1;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min_even) {\n            min_even = arr[i];\n            min_even_index =\
    \ i;\n        }\n    }\n    if (min_even_index == -1) {\n        return result;\n\
    \    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpszp4icbd.cpp: In function 'int main()':\n/tmp/tmpszp4icbd.cpp:49:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpszp4icbd.cpp:2:\n/tmp/tmpszp4icbd.cpp:50:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpszp4icbd.cpp:50:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpszp4icbd.cpp:50:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpszp4icbd.cpp:50:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpszp4icbd.cpp:50:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpszp4icbd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpszp4icbd.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long min_index = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(min_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp32d7mqt8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long min_index = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(min_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp32d7mqt8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    long\
    \ min = INT_MAX;\n    long index = -1;\n    for(long i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n   \
    \         index = i;\n        }\n    }\n    if(index == -1) return res;\n    res.push_back(min);\n\
    \    res.push_back(index);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr53p2v56.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    int min = INT_MAX;\n    int index = -1;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if (index != -1) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvx_shzqf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = INT_MAX;\n    long min_even_index = INT_MAX;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min_even) {\n            min_even = arr[i];\n            min_even_index =\
    \ i;\n        }\n    }\n    if (min_even == INT_MAX) {\n        return result;\n\
    \    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_f71kwlx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = INT_MAX;\n    long min_even_index = -1;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min_even) {\n            min_even = arr[i];\n            min_even_index =\
    \ i;\n        }\n    }\n    if (min_even_index == -1) {\n        return result;\n\
    \    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpszp4icbd.cpp: In function 'int main()':\n/tmp/tmpszp4icbd.cpp:49:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpszp4icbd.cpp:2:\n/tmp/tmpszp4icbd.cpp:50:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpszp4icbd.cpp:50:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpszp4icbd.cpp:50:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpszp4icbd.cpp:50:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpszp4icbd.cpp:50:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpszp4icbd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpszp4icbd.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    long\
    \ min = INT_MAX;\n    int index = -1;\n    for(int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n   \
    \         index = i;\n        }\n    }\n    if(index == -1) return res;\n    res.push_back(min);\n\
    \    res.push_back(index);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi9b5aub6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    long min = INT_MAX;\n    long index =\
    \ INT_MAX;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2\
    \ == 0 && arr[i] < min) {\n            min = arr[i];\n            index = i;\n\
    \        }\n    }\n    if (min != INT_MAX) {\n        result.push_back(min);\n\
    \        result.push_back(index);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpatl7s9tm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    long min = INT_MAX;\n    long index =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min) {\n            min = arr[i];\n            index = i;\n    \
    \    }\n    }\n    if (min == INT_MAX) {\n        return result;\n    }\n    result.push_back(min);\n\
    \    result.push_back(index);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_b50fso9.cpp: In function 'int main()':\n/tmp/tmp_b50fso9.cpp:46:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_b50fso9.cpp:2:\n/tmp/tmp_b50fso9.cpp:47:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmp_b50fso9.cpp:47:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmp_b50fso9.cpp:47:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_b50fso9.cpp:47:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp_b50fso9.cpp:47:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_b50fso9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_b50fso9.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long min_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(min_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl3512lfy.cpp: In function 'int main()':\n/tmp/tmpl3512lfy.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl3512lfy.cpp:2:\n/tmp/tmpl3512lfy.cpp:51:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpl3512lfy.cpp:51:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpl3512lfy.cpp:51:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl3512lfy.cpp:51:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl3512lfy.cpp:51:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpl3512lfy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl3512lfy.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long minIndex = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                minIndex =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(minIndex);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm4kv0krl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    long\
    \ min = arr[0];\n    int index = 0;\n    for(int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n   \
    \         index = i;\n        }\n    }\n    if(min % 2 == 0){\n        res.push_back(min);\n\
    \        res.push_back(index);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps0bkbp6m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  std::vector<long> result;\n  if (arr.size() == 0) {\n    return result;\n\
    \  }\n  long min_even = INT_MAX;\n  long min_even_index = INT_MAX;\n  for (long\
    \ i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0 && arr[i] < min_even)\
    \ {\n      min_even = arr[i];\n      min_even_index = i;\n    }\n  }\n  if (min_even\
    \ == INT_MAX) {\n    return result;\n  }\n  result.push_back(min_even);\n  result.push_back(min_even_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpchaak41g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  std::vector<long> result;\n  if (arr.size() == 0) {\n    return result;\n\
    \  }\n  long min_even = std::numeric_limits<long>::max();\n  long min_index =\
    \ 0;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0 && arr[i]\
    \ < min_even) {\n      min_even = arr[i];\n      min_index = i;\n    }\n  }\n\
    \  if (min_even == std::numeric_limits<long>::max()) {\n    return result;\n \
    \ }\n  result.push_back(min_even);\n  result.push_back(min_index);\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpct08_ys5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = INT_MAX;\n    long index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n            min = arr[i];\n            index = i;\n        }\n    }\n   \
    \ if (min == INT_MAX) {\n        return result;\n    }\n    result.push_back(min);\n\
    \    result.push_back(index);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6x69ecr0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long minIndex = 0;\n    bool found\
    \ = false;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] %\
    \ 2 == 0) {\n            if (!found) {\n                min = arr[i];\n      \
    \          minIndex = i;\n                found = true;\n            } else {\n\
    \                if (arr[i] < min) {\n                    min = arr[i];\n    \
    \                minIndex = i;\n                }\n            }\n        }\n\
    \    }\n    if (found) {\n        result.push_back(min);\n        result.push_back(minIndex);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4vq__51o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    int index = 0;\n    for (int i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprie47x5r.cpp: In function 'int main()':\n/tmp/tmprie47x5r.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprie47x5r.cpp:2:\n/tmp/tmprie47x5r.cpp:49:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmprie47x5r.cpp:49:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmprie47x5r.cpp:49:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprie47x5r.cpp:49:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprie47x5r.cpp:49:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprie47x5r.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprie47x5r.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    long\
    \ min = INT_MAX;\n    long index = 0;\n    for(int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n   \
    \         index = i;\n        }\n    }\n    if(min == INT_MAX) return res;\n \
    \   res.push_back(min);\n    res.push_back(index);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3tybv46j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    int\
    \ min = INT_MAX;\n    int index = -1;\n    for(int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n   \
    \         index = i;\n        }\n    }\n    if(index == -1) return res;\n    res.push_back(min);\n\
    \    res.push_back(index);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppp4wgl32.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    int min = arr[0];\n    int min_index = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(min_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpphha8dfc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  std::vector<long> result;\n  if (arr.size() == 0) {\n    return result;\n\
    \  }\n  long min = arr[0];\n  long min_index = 0;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] % 2 == 0) {\n      if (arr[i] < min) {\n        min =\
    \ arr[i];\n        min_index = i;\n      }\n    }\n  }\n  if (min % 2 == 0) {\n\
    \    result.push_back(min);\n    result.push_back(min_index);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9zur79xb.cpp: In function 'int main()':\n/tmp/tmp9zur79xb.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9zur79xb.cpp:2:\n/tmp/tmp9zur79xb.cpp:51:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmp9zur79xb.cpp:51:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmp9zur79xb.cpp:51:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp9zur79xb.cpp:51:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp9zur79xb.cpp:51:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9zur79xb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9zur79xb.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    long min = LONG_MAX;\n    long index =\
    \ -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min) {\n            min = arr[i];\n            index = i;\n    \
    \    }\n    }\n    if (index == -1) {\n        return result;\n    }\n    result.push_back(min);\n\
    \    result.push_back(index);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl_p3yc47.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0)\n        return result;\n\
    \    long min = INT_MAX;\n    long index = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min == INT_MAX)\n        return\
    \ result;\n    result.push_back(min);\n    result.push_back(index);\n    return\
    \ result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr6qi1tbw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = INT_MAX;\n    int index = -1;\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    result.push_back(min);\n    result.push_back(index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsu5t3ovk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = INT_MAX;\n    long index = 0;\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ == INT_MAX) {\n        return result;\n    }\n    result.push_back(min);\n \
    \   result.push_back(index);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptpt9pxyl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long minIndex = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                minIndex =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(minIndex);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm4kv0krl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    long min = INT_MAX;\n    long index = -1;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if (index != -1) {\n        res.push_back(min);\n        res.push_back(index);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8gyh1ayz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> ans;\n    int min = INT_MAX;\n    int index = -1;\n\
    \    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if(index == -1) {\n        return ans;\n    }\n    ans.push_back(min);\n\
    \    ans.push_back(index);\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpinpg3x6y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_value = INT_MAX;\n    long min_index = INT_MAX;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min_value) {\n            min_value = arr[i];\n            min_index = i;\n\
    \        }\n    }\n    if (min_value == INT_MAX) {\n        return result;\n \
    \   }\n    result.push_back(min_value);\n    result.push_back(min_index);\n  \
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp833f4ilp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = LONG_MAX;\n    long min_even_index = LONG_MAX;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min_even) {\n            min_even = arr[i];\n            min_even_index =\
    \ i;\n        }\n    }\n    if (min_even == LONG_MAX) {\n        return result;\n\
    \    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpndcaq4i3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    int index = 0;\n    for (int i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprie47x5r.cpp: In function 'int main()':\n/tmp/tmprie47x5r.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprie47x5r.cpp:2:\n/tmp/tmprie47x5r.cpp:49:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmprie47x5r.cpp:49:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmprie47x5r.cpp:49:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprie47x5r.cpp:49:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprie47x5r.cpp:49:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprie47x5r.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprie47x5r.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long min_index = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(min_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp32d7mqt8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    int index = 0;\n    for (int i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprie47x5r.cpp: In function 'int main()':\n/tmp/tmprie47x5r.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprie47x5r.cpp:2:\n/tmp/tmprie47x5r.cpp:49:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmprie47x5r.cpp:49:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmprie47x5r.cpp:49:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprie47x5r.cpp:49:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprie47x5r.cpp:49:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprie47x5r.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprie47x5r.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  std::vector<long> result;\n  if (arr.size() == 0) {\n    return result;\n\
    \  }\n  long min = arr[0];\n  long index = 0;\n  for (long i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] % 2 == 0 && arr[i] < min) {\n      min = arr[i];\n  \
    \    index = i;\n    }\n  }\n  if (min % 2 == 0) {\n    result.push_back(min);\n\
    \    result.push_back(index);\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4amtk21e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    int index = 0;\n    for (int i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprie47x5r.cpp: In function 'int main()':\n/tmp/tmprie47x5r.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprie47x5r.cpp:2:\n/tmp/tmprie47x5r.cpp:49:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmprie47x5r.cpp:49:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmprie47x5r.cpp:49:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprie47x5r.cpp:49:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprie47x5r.cpp:49:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprie47x5r.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprie47x5r.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0)\n        return res;\n\
    \    int min = INT_MAX;\n    int index = -1;\n    for(int i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if(index == -1)\n        return\
    \ res;\n    res.push_back(min);\n    res.push_back(index);\n    return res;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyzgjrkno.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long index = 0;\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuptspayx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long minIndex = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                minIndex =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(minIndex);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdhbdx9jd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long index = 0;\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuptspayx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0)\n        return res;\n\
    \    long min = INT_MAX;\n    long index = -1;\n    for(int i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if(index == -1)\n        return\
    \ res;\n    res.push_back(min);\n    res.push_back(index);\n    return res;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5jgkl1c5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    long min = INT_MAX;\n    long index =\
    \ 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min) {\n            min = arr[i];\n            index = i;\n    \
    \    }\n    }\n    if (min == INT_MAX) {\n        return result;\n    }\n    result.push_back(min);\n\
    \    result.push_back(index);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1bw5m6fu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = -1;\n    long min_even_index = -1;\n   \
    \ for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n   \
    \         if (min_even == -1) {\n                min_even = arr[i];\n        \
    \        min_even_index = i;\n            } else {\n                if (arr[i]\
    \ < min_even) {\n                    min_even = arr[i];\n                    min_even_index\
    \ = i;\n                }\n            }\n        }\n    }\n    if (min_even ==\
    \ -1) {\n        return result;\n    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkb4t1a42.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0)\n        return res;\n\
    \    long min = INT_MAX;\n    int index = -1;\n    for(int i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if(index == -1)\n        return\
    \ res;\n    res.push_back(min);\n    res.push_back(index);\n    return res;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg9m8tee4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = -1;\n    long min_even_index = -1;\n   \
    \ for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n   \
    \         if (min_even == -1) {\n                min_even = arr[i];\n        \
    \        min_even_index = i;\n            } else {\n                if (arr[i]\
    \ < min_even) {\n                    min_even = arr[i];\n                    min_even_index\
    \ = i;\n                }\n            }\n        }\n    }\n    if (min_even ==\
    \ -1) {\n        return result;\n    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkb4t1a42.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long min_index = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(min_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp32d7mqt8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0)\n        return res;\n\
    \    long min = arr[0];\n    int index = 0;\n    for(int i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] < min && arr[i] % 2 == 0){\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if(min % 2 == 0){\n        res.push_back(min);\n\
    \        res.push_back(index);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkk0o3w78.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long index = 0;\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuptspayx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    int minIndex = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    if (min % 2 == 0) {\n        result.push_back(min);\n        result.push_back(minIndex);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzxdclr4s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    long min = INT_MAX;\n    long index =\
    \ -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min) {\n            min = arr[i];\n            index = i;\n    \
    \    }\n    }\n    if (index != -1) {\n        result.push_back(min);\n      \
    \  result.push_back(index);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp41hy2d24.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    long min = INT_MAX;\n    long index =\
    \ -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min) {\n            min = arr[i];\n            index = i;\n    \
    \    }\n    }\n    if (index != -1) {\n        result.push_back(min);\n      \
    \  result.push_back(index);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp41hy2d24.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    long\
    \ min = INT_MAX;\n    long min_index = INT_MAX;\n    for(int i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n\
    \            min_index = i;\n        }\n    }\n    if(min == INT_MAX) return res;\n\
    \    res.push_back(min);\n    res.push_back(min_index);\n    return res;\n}\n\
    int main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk9us_4cr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0)\n        return res;\n\
    \    long min = INT_MAX;\n    long index = 0;\n    for(int i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if(min == INT_MAX)\n        return\
    \ res;\n    res.push_back(min);\n    res.push_back(index);\n    return res;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpobkkp75x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long index = 0;\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuptspayx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long min_index = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(min_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp32d7mqt8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    long\
    \ min = INT_MAX;\n    int index = -1;\n    for(int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n   \
    \         index = i;\n        }\n    }\n    if(index == -1) return res;\n    res.push_back(min);\n\
    \    res.push_back(index);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi9b5aub6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = INT_MAX;\n    long min_even_index = INT_MAX;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min_even) {\n            min_even = arr[i];\n            min_even_index =\
    \ i;\n        }\n    }\n    if (min_even == INT_MAX) {\n        return result;\n\
    \    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_f71kwlx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv6ke8baz.cpp: In function 'int main()':\n/tmp/tmpv6ke8baz.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv6ke8baz.cpp:2:\n/tmp/tmpv6ke8baz.cpp:49:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmpv6ke8baz.cpp:49:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmpv6ke8baz.cpp:49:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv6ke8baz.cpp:49:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpv6ke8baz.cpp:49:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpv6ke8baz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv6ke8baz.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    long min = INT_MAX;\n    long index = -1;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if (index != -1) {\n        res.push_back(min);\n        res.push_back(index);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8gyh1ayz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    int index = 0;\n    for (int i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprie47x5r.cpp: In function 'int main()':\n/tmp/tmprie47x5r.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprie47x5r.cpp:2:\n/tmp/tmprie47x5r.cpp:49:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmprie47x5r.cpp:49:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmprie47x5r.cpp:49:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprie47x5r.cpp:49:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprie47x5r.cpp:49:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprie47x5r.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprie47x5r.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    long\
    \ min = LONG_MAX;\n    long index = -1;\n    for(int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n   \
    \         index = i;\n        }\n    }\n    if(index == -1) return res;\n    res.push_back(min);\n\
    \    res.push_back(index);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpadjdcyda.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    int index = 0;\n    for (int i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprie47x5r.cpp: In function 'int main()':\n/tmp/tmprie47x5r.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprie47x5r.cpp:2:\n/tmp/tmprie47x5r.cpp:49:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmprie47x5r.cpp:49:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmprie47x5r.cpp:49:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprie47x5r.cpp:49:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprie47x5r.cpp:49:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprie47x5r.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprie47x5r.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    long\
    \ min = INT_MAX;\n    long min_index = -1;\n    for(int i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n\
    \            min_index = i;\n        }\n    }\n    if(min_index == -1) return\
    \ res;\n    res.push_back(min);\n    res.push_back(min_index);\n    return res;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqoo0lfru.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    long\
    \ min = INT_MAX;\n    int index = 0;\n    for(int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n   \
    \         index = i;\n        }\n    }\n    if(min == INT_MAX) return res;\n \
    \   res.push_back(min);\n    res.push_back(index);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptts51ex1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    long min = INT_MAX;\n    long index =\
    \ -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min) {\n            min = arr[i];\n            index = i;\n    \
    \    }\n    }\n    if (index != -1) {\n        result.push_back(min);\n      \
    \  result.push_back(index);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp41hy2d24.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // your code here\n    std::vector<long> result;\n    if(arr.size() ==\
    \ 0)\n        return result;\n    long min = INT_MAX;\n    long index = -1;\n\
    \    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] % 2 == 0 && arr[i]\
    \ < min){\n            min = arr[i];\n            index = i;\n        }\n    }\n\
    \    if(index == -1)\n        return result;\n    result.push_back(min);\n   \
    \ result.push_back(index);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpss3sq7s_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = LONG_MAX;\n    long min_even_index = -1;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min_even) {\n            min_even = arr[i];\n            min_even_index =\
    \ i;\n        }\n    }\n    if (min_even_index == -1) {\n        return result;\n\
    \    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4r8jajol.cpp: In function 'int main()':\n/tmp/tmp4r8jajol.cpp:49:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4r8jajol.cpp:2:\n/tmp/tmp4r8jajol.cpp:50:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmp4r8jajol.cpp:50:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmp4r8jajol.cpp:50:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp4r8jajol.cpp:50:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp4r8jajol.cpp:50:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp4r8jajol.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4r8jajol.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    long\
    \ min = arr[0];\n    long index = 0;\n    for(int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n   \
    \         index = i;\n        }\n    }\n    if(min % 2 == 0){\n        res.push_back(min);\n\
    \        res.push_back(index);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2b5f3z7m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  std::vector<long> result;\n  long min_even = INT_MAX;\n  long min_even_index\
    \ = INT_MAX;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 ==\
    \ 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_index =\
    \ i;\n    }\n  }\n  if (min_even == INT_MAX) {\n    return result;\n  }\n  result.push_back(min_even);\n\
    \  result.push_back(min_even_index);\n  return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpaq2pljl4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long minIndex = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                minIndex =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(minIndex);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm4kv0krl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min_even = INT_MAX;\n    long min_even_index = INT_MAX;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min_even) {\n            min_even = arr[i];\n            min_even_index =\
    \ i;\n        }\n    }\n    if (min_even == INT_MAX) {\n        return result;\n\
    \    }\n    result.push_back(min_even);\n    result.push_back(min_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_f71kwlx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    int minIndex = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    if (min % 2 == 0) {\n        result.push_back(min);\n        result.push_back(minIndex);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzxdclr4s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824389
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    int index = 0;\n    for (int i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) {\n        result.push_back(min);\n        result.push_back(index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprie47x5r.cpp: In function 'int main()':\n/tmp/tmprie47x5r.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pluck;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprie47x5r.cpp:2:\n/tmp/tmprie47x5r.cpp:49:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n                             \
    \           ^\n/tmp/tmprie47x5r.cpp:49:68: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n        \
    \                                                            ^\n/tmp/tmprie47x5r.cpp:49:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprie47x5r.cpp:49:68: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprie47x5r.cpp:49:68: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprie47x5r.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprie47x5r.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n        return\
    \ result;\n    }\n    long min = arr[0];\n    long min_index = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < min) {\n                min = arr[i];\n                min_index =\
    \ i;\n            }\n        }\n    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n\
    \        result.push_back(min_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp32d7mqt8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659824387
